import {
  createApp,
  defineComponent,
  h,
  init_reactivity_esm_bundler,
  init_vue_runtime_esm_bundler,
  markRaw,
  proxyRefs,
  ref,
  toRaw
} from "./chunk-PHDOPNWR.js";
import {
  __commonJS,
  __esm,
  __export,
  __toCommonJS,
  __toESM
} from "./chunk-AC2VUBZ6.js";

// node_modules/vue-class-component/dist/vue-class-component.esm-bundler.js
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties(target, props2) {
  for (var i = 0; i < props2.length; i++) {
    var descriptor = props2[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties(Constructor, staticProps);
  return Constructor;
}
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys(Object(source), true).forEach(function(key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass)
    _setPrototypeOf(subClass, superClass);
}
function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf(o);
}
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf(o, p);
}
function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized(self);
}
function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray(arr);
}
function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter))
    return Array.from(iter);
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function defineGetter(obj, key, getter) {
  Object.defineProperty(obj, key, {
    get: getter,
    enumerable: false,
    configurable: true
  });
}
function defineProxy(proxy, key, target) {
  Object.defineProperty(proxy, key, {
    get: function get() {
      return target[key].value;
    },
    set: function set(value) {
      target[key].value = value;
    },
    enumerable: true,
    configurable: true
  });
}
function getSuper(Ctor) {
  var superProto = Object.getPrototypeOf(Ctor.prototype);
  if (!superProto) {
    return void 0;
  }
  return superProto.constructor;
}
function getOwn(value, key) {
  return value.hasOwnProperty(key) ? value[key] : void 0;
}
function Options(options) {
  return function(Component) {
    Component.__o = options;
    return Component;
  };
}
var VueImpl, Vue;
var init_vue_class_component_esm_bundler = __esm({
  "node_modules/vue-class-component/dist/vue-class-component.esm-bundler.js"() {
    init_vue_runtime_esm_bundler();
    VueImpl = function() {
      function VueImpl2(props2, ctx) {
        var _this = this;
        _classCallCheck(this, VueImpl2);
        defineGetter(this, "$props", function() {
          return props2;
        });
        defineGetter(this, "$attrs", function() {
          return ctx.attrs;
        });
        defineGetter(this, "$slots", function() {
          return ctx.slots;
        });
        defineGetter(this, "$emit", function() {
          return ctx.emit;
        });
        Object.keys(props2).forEach(function(key) {
          Object.defineProperty(_this, key, {
            enumerable: false,
            configurable: true,
            writable: true,
            value: props2[key]
          });
        });
      }
      _createClass(VueImpl2, null, [{
        key: "registerHooks",
        value: function registerHooks(keys) {
          var _this$__h;
          (_this$__h = this.__h).push.apply(_this$__h, _toConsumableArray(keys));
        }
      }, {
        key: "with",
        value: function _with(Props) {
          var propsMeta = new Props();
          var props2 = {};
          Object.keys(propsMeta).forEach(function(key) {
            var meta = propsMeta[key];
            props2[key] = meta !== null && meta !== void 0 ? meta : null;
          });
          var PropsMixin = function(_this2) {
            _inherits(PropsMixin2, _this2);
            var _super = _createSuper(PropsMixin2);
            function PropsMixin2() {
              _classCallCheck(this, PropsMixin2);
              return _super.apply(this, arguments);
            }
            return PropsMixin2;
          }(this);
          PropsMixin.__b = {
            props: props2
          };
          return PropsMixin;
        }
      }, {
        key: "__vccOpts",
        get: function get() {
          if (this === Vue) {
            return {};
          }
          var Ctor = this;
          var cache = getOwn(Ctor, "__c");
          if (cache) {
            return cache;
          }
          var options = _objectSpread2({}, getOwn(Ctor, "__o"));
          Ctor.__c = options;
          var Super = getSuper(Ctor);
          if (Super) {
            options["extends"] = Super.__vccOpts;
          }
          var base = getOwn(Ctor, "__b");
          if (base) {
            options.mixins = options.mixins || [];
            options.mixins.unshift(base);
          }
          options.methods = _objectSpread2({}, options.methods);
          options.computed = _objectSpread2({}, options.computed);
          var proto = Ctor.prototype;
          Object.getOwnPropertyNames(proto).forEach(function(key) {
            if (key === "constructor") {
              return;
            }
            if (Ctor.__h.indexOf(key) > -1) {
              options[key] = proto[key];
              return;
            }
            var descriptor = Object.getOwnPropertyDescriptor(proto, key);
            if (typeof descriptor.value === "function") {
              options.methods[key] = descriptor.value;
              return;
            }
            if (descriptor.get || descriptor.set) {
              options.computed[key] = {
                get: descriptor.get,
                set: descriptor.set
              };
              return;
            }
          });
          options.setup = function(props2, ctx) {
            var _promise;
            var data = new Ctor(props2, ctx);
            var dataKeys = Object.keys(data);
            var plainData = {};
            var promise = null;
            dataKeys.forEach(function(key) {
              if (data[key] === void 0 || data[key] && data[key].__s) {
                return;
              }
              plainData[key] = ref(data[key]);
              defineProxy(data, key, plainData);
            });
            dataKeys.forEach(function(key) {
              if (data[key] && data[key].__s) {
                var setupState = data[key].__s();
                if (setupState instanceof Promise) {
                  if (!promise) {
                    promise = Promise.resolve(plainData);
                  }
                  promise = promise.then(function() {
                    return setupState.then(function(value) {
                      plainData[key] = proxyRefs(value);
                      return plainData;
                    });
                  });
                } else {
                  plainData[key] = proxyRefs(setupState);
                }
              }
            });
            return (_promise = promise) !== null && _promise !== void 0 ? _promise : plainData;
          };
          var decorators = getOwn(Ctor, "__d");
          if (decorators) {
            decorators.forEach(function(fn) {
              return fn(options);
            });
          }
          var injections = ["render", "ssrRender", "__file", "__cssModules", "__scopeId", "__hmrId"];
          injections.forEach(function(key) {
            if (Ctor[key]) {
              options[key] = Ctor[key];
            }
          });
          return options;
        }
      }]);
      return VueImpl2;
    }();
    VueImpl.__h = ["data", "beforeCreate", "created", "beforeMount", "mounted", "beforeUnmount", "unmounted", "beforeUpdate", "updated", "activated", "deactivated", "render", "errorCaptured", "serverPrefetch"];
    Vue = VueImpl;
  }
});

// node_modules/ag-grid-community/dist/ag-grid-community.cjs.js
var require_ag_grid_community_cjs = __commonJS({
  "node_modules/ag-grid-community/dist/ag-grid-community.cjs.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function makeNull(value) {
      if (value == null || value === "") {
        return null;
      }
      return value;
    }
    function exists(value, allowEmptyString) {
      if (allowEmptyString === void 0) {
        allowEmptyString = false;
      }
      return value != null && (value !== "" || allowEmptyString);
    }
    function missing(value) {
      return !exists(value);
    }
    function missingOrEmpty(value) {
      return value == null || value.length === 0;
    }
    function toStringOrNull(value) {
      return value != null && typeof value.toString === "function" ? value.toString() : null;
    }
    function attrToNumber(value) {
      if (value === void 0) {
        return;
      }
      if (value === null || value === "") {
        return null;
      }
      if (typeof value === "number") {
        return isNaN(value) ? void 0 : value;
      }
      var valueParsed = parseInt(value, 10);
      return isNaN(valueParsed) ? void 0 : valueParsed;
    }
    function attrToBoolean(value) {
      if (value === void 0) {
        return;
      }
      if (value === null || value === "") {
        return false;
      }
      if (typeof value === "boolean") {
        return value;
      }
      return /true/i.test(value);
    }
    function attrToString(value) {
      if (value == null || value === "") {
        return;
      }
      return value;
    }
    function referenceCompare(left, right) {
      if (left == null && right == null) {
        return true;
      }
      if (left == null && right != null) {
        return false;
      }
      if (left != null && right == null) {
        return false;
      }
      return left === right;
    }
    function jsonEquals(val1, val2) {
      var val1Json = val1 ? JSON.stringify(val1) : null;
      var val2Json = val2 ? JSON.stringify(val2) : null;
      return val1Json === val2Json;
    }
    function defaultComparator(valueA, valueB, accentedCompare) {
      if (accentedCompare === void 0) {
        accentedCompare = false;
      }
      var valueAMissing = valueA == null;
      var valueBMissing = valueB == null;
      if (valueA && valueA.toNumber) {
        valueA = valueA.toNumber();
      }
      if (valueB && valueB.toNumber) {
        valueB = valueB.toNumber();
      }
      if (valueAMissing && valueBMissing) {
        return 0;
      }
      if (valueAMissing) {
        return -1;
      }
      if (valueBMissing) {
        return 1;
      }
      function doQuickCompare(a, b) {
        return a > b ? 1 : a < b ? -1 : 0;
      }
      if (typeof valueA !== "string") {
        return doQuickCompare(valueA, valueB);
      }
      if (!accentedCompare) {
        return doQuickCompare(valueA, valueB);
      }
      try {
        return valueA.localeCompare(valueB);
      } catch (e) {
        return doQuickCompare(valueA, valueB);
      }
    }
    function find(collection, predicate, value) {
      if (collection === null || collection === void 0) {
        return null;
      }
      if (!Array.isArray(collection)) {
        var objToArray = values(collection);
        return find(objToArray, predicate, value);
      }
      var collectionAsArray = collection;
      var firstMatchingItem = null;
      for (var i = 0; i < collectionAsArray.length; i++) {
        var item = collectionAsArray[i];
        if (typeof predicate === "string") {
          if (item[predicate] === value) {
            firstMatchingItem = item;
            break;
          }
        } else {
          var callback = predicate;
          if (callback(item)) {
            firstMatchingItem = item;
            break;
          }
        }
      }
      return firstMatchingItem;
    }
    function values(object) {
      if (object instanceof Set || object instanceof Map) {
        var arr_1 = [];
        object.forEach(function(value) {
          return arr_1.push(value);
        });
        return arr_1;
      }
      return Object.keys(object).map(function(key) {
        return object[key];
      });
    }
    var GenericUtils = Object.freeze({
      __proto__: null,
      makeNull,
      exists,
      missing,
      missingOrEmpty,
      toStringOrNull,
      attrToNumber,
      attrToBoolean,
      attrToString,
      referenceCompare,
      jsonEquals,
      defaultComparator,
      find,
      values
    });
    var ColumnKeyCreator = (
      /** @class */
      function() {
        function ColumnKeyCreator2() {
          this.existingKeys = {};
        }
        ColumnKeyCreator2.prototype.addExistingKeys = function(keys2) {
          for (var i = 0; i < keys2.length; i++) {
            this.existingKeys[keys2[i]] = true;
          }
        };
        ColumnKeyCreator2.prototype.getUniqueKey = function(colId, colField) {
          colId = toStringOrNull(colId);
          var count = 0;
          while (true) {
            var idToTry = void 0;
            if (colId) {
              idToTry = colId;
              if (count !== 0) {
                idToTry += "_" + count;
              }
            } else if (colField) {
              idToTry = colField;
              if (count !== 0) {
                idToTry += "_" + count;
              }
            } else {
              idToTry = "" + count;
            }
            if (!this.existingKeys[idToTry]) {
              this.existingKeys[idToTry] = true;
              return idToTry;
            }
            count++;
          }
        };
        return ColumnKeyCreator2;
      }()
    );
    function firstExistingValue() {
      var values2 = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        values2[_i] = arguments[_i];
      }
      for (var i = 0; i < values2.length; i++) {
        var value = values2[i];
        if (exists(value)) {
          return value;
        }
      }
      return null;
    }
    function anyExists(values2) {
      return values2 && firstExistingValue(values2) != null;
    }
    function existsAndNotEmpty(value) {
      return value != null && value.length > 0;
    }
    function last(arr) {
      if (!arr || !arr.length) {
        return;
      }
      return arr[arr.length - 1];
    }
    function areEqual(a, b, comparator) {
      if (a == null && b == null) {
        return true;
      }
      return a != null && b != null && a.length === b.length && every(a, function(value, index) {
        return comparator ? comparator(value, b[index]) : b[index] === value;
      });
    }
    function compareArrays(array1, array2) {
      return areEqual(array1, array2);
    }
    function shallowCompare(arr1, arr2) {
      return areEqual(arr1, arr2);
    }
    function sortNumerically(array) {
      return array.sort(function(a, b) {
        return a - b;
      });
    }
    function removeRepeatsFromArray(array, object) {
      if (!array) {
        return;
      }
      for (var index = array.length - 2; index >= 0; index--) {
        var thisOneMatches = array[index] === object;
        var nextOneMatches = array[index + 1] === object;
        if (thisOneMatches && nextOneMatches) {
          array.splice(index + 1, 1);
        }
      }
    }
    function removeFromArray(array, object) {
      var index = array.indexOf(object);
      if (index >= 0) {
        array.splice(index, 1);
      }
    }
    function removeAllFromArray(array, toRemove) {
      forEach(toRemove, function(item) {
        return removeFromArray(array, item);
      });
    }
    function insertIntoArray(array, object, toIndex) {
      array.splice(toIndex, 0, object);
    }
    function insertArrayIntoArray(dest, src, toIndex) {
      if (dest == null || src == null) {
        return;
      }
      for (var i = src.length - 1; i >= 0; i--) {
        var item = src[i];
        insertIntoArray(dest, item, toIndex);
      }
    }
    function moveInArray(array, objectsToMove, toIndex) {
      removeAllFromArray(array, objectsToMove);
      forEach(objectsToMove.slice().reverse(), function(obj) {
        return insertIntoArray(array, obj, toIndex);
      });
    }
    function includes(array, value) {
      return array.indexOf(value) > -1;
    }
    function flatten(arrayOfArrays) {
      return [].concat.apply([], arrayOfArrays);
    }
    function pushAll(target, source) {
      if (source == null || target == null) {
        return;
      }
      forEach(source, function(value) {
        return target.push(value);
      });
    }
    function toStrings(array) {
      return map(array, toStringOrNull);
    }
    function findIndex(collection, predicate) {
      for (var i = 0; i < collection.length; i++) {
        if (predicate(collection[i], i, collection)) {
          return i;
        }
      }
      return -1;
    }
    function fill(collection, value, start, end) {
      if (value === void 0) {
        value = null;
      }
      if (start === void 0) {
        start = 0;
      }
      if (end === void 0) {
        end = collection.length;
      }
      for (var i = start; i < end; i++) {
        collection[i] = value;
      }
      return collection;
    }
    function every(list, predicate) {
      if (list == null) {
        return true;
      }
      for (var i = 0; i < list.length; i++) {
        if (!predicate(list[i], i)) {
          return false;
        }
      }
      return true;
    }
    function some(list, predicate) {
      if (list == null) {
        return false;
      }
      for (var i = 0; i < list.length; i++) {
        if (predicate(list[i], i)) {
          return true;
        }
      }
      return false;
    }
    function forEach(list, action) {
      if (list == null) {
        return;
      }
      for (var i = 0; i < list.length; i++) {
        action(list[i], i);
      }
    }
    function forEachReverse(list, action) {
      if (list == null) {
        return;
      }
      for (var i = list.length - 1; i >= 0; i--) {
        action(list[i], i);
      }
    }
    function map(list, process) {
      if (list == null) {
        return null;
      }
      var mapped = [];
      for (var i = 0; i < list.length; i++) {
        mapped.push(process(list[i], i));
      }
      return mapped;
    }
    function filter(list, predicate) {
      if (list == null) {
        return null;
      }
      var filtered = [];
      for (var i = 0; i < list.length; i++) {
        if (predicate(list[i], i)) {
          filtered.push(list[i]);
        }
      }
      return filtered;
    }
    function reduce(list, step, initial) {
      if (list == null || initial == null) {
        return null;
      }
      var result = initial;
      for (var i = 0; i < list.length; i++) {
        result = step(result, list[i], i);
      }
      return result;
    }
    function forEachSnapshotFirst(list, callback) {
      if (!list) {
        return;
      }
      var arrayCopy = list.slice(0);
      arrayCopy.forEach(callback);
    }
    var ArrayUtils = Object.freeze({
      __proto__: null,
      firstExistingValue,
      anyExists,
      existsAndNotEmpty,
      last,
      areEqual,
      compareArrays,
      shallowCompare,
      sortNumerically,
      removeRepeatsFromArray,
      removeFromArray,
      removeAllFromArray,
      insertIntoArray,
      insertArrayIntoArray,
      moveInArray,
      includes,
      flatten,
      pushAll,
      toStrings,
      findIndex,
      fill,
      every,
      some,
      forEach,
      forEachReverse,
      map,
      filter,
      reduce,
      forEachSnapshotFirst
    });
    function iterateObject(object, callback) {
      if (object == null) {
        return;
      }
      if (Array.isArray(object)) {
        forEach(object, function(value, index) {
          return callback("" + index, value);
        });
      } else {
        forEach(Object.keys(object), function(key) {
          return callback(key, object[key]);
        });
      }
    }
    function cloneObject(object) {
      var copy = {};
      var keys2 = Object.keys(object);
      for (var i = 0; i < keys2.length; i++) {
        var key = keys2[i];
        var value = object[key];
        copy[key] = value;
      }
      return copy;
    }
    function deepCloneObject(object) {
      return JSON.parse(JSON.stringify(object));
    }
    function deepCloneDefinition(object, keysToSkip) {
      if (!object) {
        return;
      }
      var obj = object;
      var res = {};
      Object.keys(obj).forEach(function(key) {
        if (keysToSkip && keysToSkip.indexOf(key) >= 0) {
          return;
        }
        var value = obj[key];
        var sourceIsSimpleObject = isNonNullObject(value) && value.constructor === Object;
        if (sourceIsSimpleObject) {
          res[key] = deepCloneDefinition(value);
        } else {
          res[key] = value;
        }
      });
      return res;
    }
    function getProperty(object, key) {
      return object[key];
    }
    function setProperty(object, key, value) {
      object[key] = value;
    }
    function copyPropertiesIfPresent(source, target) {
      var properties = [];
      for (var _i = 2; _i < arguments.length; _i++) {
        properties[_i - 2] = arguments[_i];
      }
      forEach(properties, function(p) {
        return copyPropertyIfPresent(source, target, p);
      });
    }
    function copyPropertyIfPresent(source, target, property, transform) {
      var value = getProperty(source, property);
      if (value !== void 0) {
        setProperty(target, property, transform ? transform(value) : value);
      }
    }
    function getAllKeysInObjects(objects) {
      var allValues = {};
      objects.filter(function(obj) {
        return obj != null;
      }).forEach(function(obj) {
        forEach(Object.keys(obj), function(key) {
          return allValues[key] = null;
        });
      });
      return Object.keys(allValues);
    }
    function getAllValuesInObject(obj) {
      if (!obj) {
        return [];
      }
      var anyObject = Object;
      if (typeof anyObject.values === "function") {
        return anyObject.values(obj);
      }
      var ret = [];
      for (var key in obj) {
        if (obj.hasOwnProperty(key) && obj.propertyIsEnumerable(key)) {
          ret.push(obj[key]);
        }
      }
      return ret;
    }
    function mergeDeep(dest, source, copyUndefined, makeCopyOfSimpleObjects) {
      if (copyUndefined === void 0) {
        copyUndefined = true;
      }
      if (makeCopyOfSimpleObjects === void 0) {
        makeCopyOfSimpleObjects = false;
      }
      if (!exists(source)) {
        return;
      }
      iterateObject(source, function(key, sourceValue) {
        var destValue = dest[key];
        if (destValue === sourceValue) {
          return;
        }
        if (makeCopyOfSimpleObjects) {
          var objectIsDueToBeCopied = destValue == null && sourceValue != null;
          if (objectIsDueToBeCopied) {
            var sourceIsSimpleObject = typeof sourceValue === "object" && sourceValue.constructor === Object;
            var dontCopy = sourceIsSimpleObject;
            if (dontCopy) {
              destValue = {};
              dest[key] = destValue;
            }
          }
        }
        if (isNonNullObject(sourceValue) && isNonNullObject(destValue) && !Array.isArray(destValue)) {
          mergeDeep(destValue, sourceValue, copyUndefined, makeCopyOfSimpleObjects);
        } else if (copyUndefined || sourceValue !== void 0) {
          dest[key] = sourceValue;
        }
      });
    }
    function assign(object) {
      var sources = [];
      for (var _i = 1; _i < arguments.length; _i++) {
        sources[_i - 1] = arguments[_i];
      }
      forEach(sources, function(source) {
        return iterateObject(source, function(key, value) {
          return object[key] = value;
        });
      });
      return object;
    }
    function missingOrEmptyObject(value) {
      return missing(value) || Object.keys(value).length === 0;
    }
    function get(source, expression, defaultValue) {
      if (source == null) {
        return defaultValue;
      }
      var keys2 = expression.split(".");
      var objectToRead = source;
      while (keys2.length > 1) {
        objectToRead = objectToRead[keys2.shift()];
        if (objectToRead == null) {
          return defaultValue;
        }
      }
      var value = objectToRead[keys2[0]];
      return value != null ? value : defaultValue;
    }
    function set(target, expression, value) {
      if (target == null) {
        return;
      }
      var keys2 = expression.split(".");
      var objectToUpdate = target;
      while (keys2.length > 1) {
        objectToUpdate = objectToUpdate[keys2.shift()];
        if (objectToUpdate == null) {
          return;
        }
      }
      objectToUpdate[keys2[0]] = value;
    }
    function deepFreeze(object) {
      Object.freeze(object);
      forEach(values(object), function(v) {
        if (isNonNullObject(v) || typeof v === "function") {
          deepFreeze(v);
        }
      });
      return object;
    }
    function getValueUsingField(data, field, fieldContainsDots) {
      if (!field || !data) {
        return;
      }
      if (!fieldContainsDots) {
        return data[field];
      }
      var fields = field.split(".");
      var currentObject = data;
      for (var i = 0; i < fields.length; i++) {
        if (currentObject == null) {
          return void 0;
        }
        currentObject = currentObject[fields[i]];
      }
      return currentObject;
    }
    function removeAllReferences(obj, objectName) {
      Object.keys(obj).forEach(function(key) {
        var value = obj[key];
        if (typeof value === "object") {
          obj[key] = void 0;
        }
      });
      var proto = Object.getPrototypeOf(obj);
      var properties = {};
      Object.keys(proto).forEach(function(key) {
        var value = proto[key];
        if (typeof value === "function") {
          var func = function() {
            console.warn("AG Grid: " + objectName + " function " + key + "() cannot be called as the grid has been destroyed.\n                     Please don't call grid API functions on destroyed grids - as a matter of fact you shouldn't\n                     be keeping the API reference, your application has a memory leak! Remove the API reference\n                     when the grid is destroyed.");
          };
          properties[key] = { value: func, writable: true };
        }
      });
      Object.defineProperties(obj, properties);
    }
    function isNonNullObject(value) {
      return typeof value === "object" && value !== null;
    }
    var ObjectUtils = Object.freeze({
      __proto__: null,
      iterateObject,
      cloneObject,
      deepCloneObject,
      deepCloneDefinition,
      getProperty,
      setProperty,
      copyPropertiesIfPresent,
      copyPropertyIfPresent,
      getAllKeysInObjects,
      getAllValuesInObject,
      mergeDeep,
      assign,
      missingOrEmptyObject,
      get,
      set,
      deepFreeze,
      getValueUsingField,
      removeAllReferences,
      isNonNullObject
    });
    var FUNCTION_STRIP_COMMENTS = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg;
    var FUNCTION_ARGUMENT_NAMES = /([^\s,]+)/g;
    var doOnceFlags = {};
    function doOnce(func, key) {
      if (doOnceFlags[key]) {
        return;
      }
      func();
      doOnceFlags[key] = true;
    }
    function getFunctionName(funcConstructor) {
      if (funcConstructor.name) {
        return funcConstructor.name;
      }
      var matches = /function\s+([^\(]+)/.exec(funcConstructor.toString());
      return matches && matches.length === 2 ? matches[1].trim() : null;
    }
    function getFunctionParameters(func) {
      var fnStr = func.toString().replace(FUNCTION_STRIP_COMMENTS, "");
      return fnStr.slice(fnStr.indexOf("(") + 1, fnStr.indexOf(")")).match(FUNCTION_ARGUMENT_NAMES) || [];
    }
    function isFunction(val) {
      return !!(val && val.constructor && val.call && val.apply);
    }
    function executeInAWhile(funcs) {
      executeAfter(funcs, 400);
    }
    var executeNextVMTurnFuncs = [];
    var executeNextVMTurnPending = false;
    function executeNextVMTurn(func) {
      executeNextVMTurnFuncs.push(func);
      if (executeNextVMTurnPending) {
        return;
      }
      executeNextVMTurnPending = true;
      window.setTimeout(function() {
        var funcsCopy = executeNextVMTurnFuncs.slice();
        executeNextVMTurnFuncs.length = 0;
        executeNextVMTurnPending = false;
        funcsCopy.forEach(function(func2) {
          return func2();
        });
      }, 0);
    }
    function executeAfter(funcs, milliseconds) {
      if (milliseconds === void 0) {
        milliseconds = 0;
      }
      if (funcs.length > 0) {
        window.setTimeout(function() {
          return funcs.forEach(function(func) {
            return func();
          });
        }, milliseconds);
      }
    }
    function debounce(func, wait, immediate) {
      if (immediate === void 0) {
        immediate = false;
      }
      var timeout;
      return function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        var context = this;
        var callNow = immediate && !timeout;
        window.clearTimeout(timeout);
        timeout = window.setTimeout(function() {
          timeout = null;
          if (!immediate) {
            func.apply(context, args);
          }
        }, wait);
        if (callNow) {
          func.apply(context, args);
        }
      };
    }
    function waitUntil(condition, callback, timeout, timeoutMessage) {
      if (timeout === void 0) {
        timeout = 100;
      }
      var timeStamp = new Date().getTime();
      var interval = null;
      var executed = false;
      var internalCallback = function() {
        var reachedTimeout = new Date().getTime() - timeStamp > timeout;
        if (condition() || reachedTimeout) {
          callback();
          executed = true;
          if (interval != null) {
            window.clearInterval(interval);
            interval = null;
          }
          if (reachedTimeout && timeoutMessage) {
            console.warn(timeoutMessage);
          }
        }
      };
      internalCallback();
      if (!executed) {
        interval = window.setInterval(internalCallback, 10);
      }
    }
    function compose() {
      var fns = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        fns[_i] = arguments[_i];
      }
      return function(arg) {
        return fns.reduce(function(composed, f) {
          return f(composed);
        }, arg);
      };
    }
    function callIfPresent(func) {
      if (func) {
        func();
      }
    }
    var FunctionUtils = Object.freeze({
      __proto__: null,
      doOnce,
      getFunctionName,
      getFunctionParameters,
      isFunction,
      executeInAWhile,
      executeNextVMTurn,
      executeAfter,
      debounce,
      waitUntil,
      compose,
      callIfPresent
    });
    var Context = (
      /** @class */
      function() {
        function Context2(params, logger) {
          this.beanWrappers = {};
          this.destroyed = false;
          if (!params || !params.beanClasses) {
            return;
          }
          this.contextParams = params;
          this.logger = logger;
          this.logger.log(">> creating ag-Application Context");
          this.createBeans();
          var beanInstances = this.getBeanInstances();
          this.wireBeans(beanInstances);
          this.logger.log(">> ag-Application Context ready - component is alive");
        }
        Context2.prototype.getBeanInstances = function() {
          return values(this.beanWrappers).map(function(beanEntry) {
            return beanEntry.beanInstance;
          });
        };
        Context2.prototype.createBean = function(bean, afterPreCreateCallback) {
          if (!bean) {
            throw Error("Can't wire to bean since it is null");
          }
          this.wireBeans([bean], afterPreCreateCallback);
          return bean;
        };
        Context2.prototype.wireBeans = function(beanInstances, afterPreCreateCallback) {
          this.autoWireBeans(beanInstances);
          this.methodWireBeans(beanInstances);
          this.callLifeCycleMethods(beanInstances, "preConstructMethods");
          if (exists(afterPreCreateCallback)) {
            beanInstances.forEach(afterPreCreateCallback);
          }
          this.callLifeCycleMethods(beanInstances, "postConstructMethods");
        };
        Context2.prototype.createBeans = function() {
          var _this = this;
          this.contextParams.beanClasses.forEach(this.createBeanWrapper.bind(this));
          iterateObject(this.beanWrappers, function(key, beanEntry) {
            var constructorParamsMeta;
            if (beanEntry.bean.__agBeanMetaData && beanEntry.bean.__agBeanMetaData.autowireMethods && beanEntry.bean.__agBeanMetaData.autowireMethods.agConstructor) {
              constructorParamsMeta = beanEntry.bean.__agBeanMetaData.autowireMethods.agConstructor;
            }
            var constructorParams = _this.getBeansForParameters(constructorParamsMeta, beanEntry.bean.name);
            var newInstance = applyToConstructor(beanEntry.bean, constructorParams);
            beanEntry.beanInstance = newInstance;
          });
          var createdBeanNames = Object.keys(this.beanWrappers).join(", ");
          this.logger.log("created beans: " + createdBeanNames);
        };
        Context2.prototype.createBeanWrapper = function(BeanClass) {
          var metaData = BeanClass.__agBeanMetaData;
          if (!metaData) {
            var beanName = void 0;
            if (BeanClass.prototype.constructor) {
              beanName = getFunctionName(BeanClass.prototype.constructor);
            } else {
              beanName = "" + BeanClass;
            }
            console.error("Context item " + beanName + " is not a bean");
            return;
          }
          var beanEntry = {
            bean: BeanClass,
            beanInstance: null,
            beanName: metaData.beanName
          };
          this.beanWrappers[metaData.beanName] = beanEntry;
        };
        Context2.prototype.autoWireBeans = function(beanInstances) {
          var _this = this;
          beanInstances.forEach(function(beanInstance) {
            _this.forEachMetaDataInHierarchy(beanInstance, function(metaData, beanName) {
              var attributes = metaData.agClassAttributes;
              if (!attributes) {
                return;
              }
              attributes.forEach(function(attribute) {
                var otherBean = _this.lookupBeanInstance(beanName, attribute.beanName, attribute.optional);
                beanInstance[attribute.attributeName] = otherBean;
              });
            });
          });
        };
        Context2.prototype.methodWireBeans = function(beanInstances) {
          var _this = this;
          beanInstances.forEach(function(beanInstance) {
            _this.forEachMetaDataInHierarchy(beanInstance, function(metaData, beanName) {
              iterateObject(metaData.autowireMethods, function(methodName, wireParams) {
                if (methodName === "agConstructor") {
                  return;
                }
                var initParams = _this.getBeansForParameters(wireParams, beanName);
                beanInstance[methodName].apply(beanInstance, initParams);
              });
            });
          });
        };
        Context2.prototype.forEachMetaDataInHierarchy = function(beanInstance, callback) {
          var prototype = Object.getPrototypeOf(beanInstance);
          while (prototype != null) {
            var constructor = prototype.constructor;
            if (constructor.hasOwnProperty("__agBeanMetaData")) {
              var metaData = constructor.__agBeanMetaData;
              var beanName = this.getBeanName(constructor);
              callback(metaData, beanName);
            }
            prototype = Object.getPrototypeOf(prototype);
          }
        };
        Context2.prototype.getBeanName = function(constructor) {
          if (constructor.__agBeanMetaData && constructor.__agBeanMetaData.beanName) {
            return constructor.__agBeanMetaData.beanName;
          }
          var constructorString = constructor.toString();
          var beanName = constructorString.substring(9, constructorString.indexOf("("));
          return beanName;
        };
        Context2.prototype.getBeansForParameters = function(parameters, beanName) {
          var _this = this;
          var beansList = [];
          if (parameters) {
            iterateObject(parameters, function(paramIndex, otherBeanName) {
              var otherBean = _this.lookupBeanInstance(beanName, otherBeanName);
              beansList[Number(paramIndex)] = otherBean;
            });
          }
          return beansList;
        };
        Context2.prototype.lookupBeanInstance = function(wiringBean, beanName, optional) {
          if (optional === void 0) {
            optional = false;
          }
          if (beanName === "context") {
            return this;
          }
          if (this.contextParams.providedBeanInstances && this.contextParams.providedBeanInstances.hasOwnProperty(beanName)) {
            return this.contextParams.providedBeanInstances[beanName];
          }
          var beanEntry = this.beanWrappers[beanName];
          if (beanEntry) {
            return beanEntry.beanInstance;
          }
          if (!optional) {
            console.error("AG Grid: unable to find bean reference " + beanName + " while initialising " + wiringBean);
          }
          return null;
        };
        Context2.prototype.callLifeCycleMethods = function(beanInstances, lifeCycleMethod) {
          var _this = this;
          beanInstances.forEach(function(beanInstance) {
            return _this.callLifeCycleMethodsOnBean(beanInstance, lifeCycleMethod);
          });
        };
        Context2.prototype.callLifeCycleMethodsOnBean = function(beanInstance, lifeCycleMethod, methodToIgnore) {
          var allMethods = {};
          this.forEachMetaDataInHierarchy(beanInstance, function(metaData) {
            var methods = metaData[lifeCycleMethod];
            if (methods) {
              methods.forEach(function(methodName) {
                if (methodName != methodToIgnore) {
                  allMethods[methodName] = true;
                }
              });
            }
          });
          var allMethodsList = Object.keys(allMethods);
          allMethodsList.forEach(function(methodName) {
            return beanInstance[methodName]();
          });
        };
        Context2.prototype.getBean = function(name) {
          return this.lookupBeanInstance("getBean", name, true);
        };
        Context2.prototype.destroy = function() {
          if (this.destroyed) {
            return;
          }
          this.logger.log(">> Shutting down ag-Application Context");
          var beanInstances = this.getBeanInstances();
          this.destroyBeans(beanInstances);
          this.contextParams.providedBeanInstances = null;
          this.destroyed = true;
          this.logger.log(">> ag-Application Context shut down - component is dead");
        };
        Context2.prototype.destroyBean = function(bean) {
          if (!bean) {
            return;
          }
          this.destroyBeans([bean]);
        };
        Context2.prototype.destroyBeans = function(beans) {
          var _this = this;
          if (!beans) {
            return [];
          }
          beans.forEach(function(bean) {
            _this.callLifeCycleMethodsOnBean(bean, "preDestroyMethods", "destroy");
            var beanAny = bean;
            if (typeof beanAny.destroy === "function") {
              beanAny.destroy();
            }
          });
          return [];
        };
        return Context2;
      }()
    );
    function applyToConstructor(constructor, argArray) {
      var args = [null].concat(argArray);
      var factoryFunction = constructor.bind.apply(constructor, args);
      return new factoryFunction();
    }
    function PreConstruct(target, methodName, descriptor) {
      var props2 = getOrCreateProps(target.constructor);
      if (!props2.preConstructMethods) {
        props2.preConstructMethods = [];
      }
      props2.preConstructMethods.push(methodName);
    }
    function PostConstruct(target, methodName, descriptor) {
      var props2 = getOrCreateProps(target.constructor);
      if (!props2.postConstructMethods) {
        props2.postConstructMethods = [];
      }
      props2.postConstructMethods.push(methodName);
    }
    function PreDestroy(target, methodName, descriptor) {
      var props2 = getOrCreateProps(target.constructor);
      if (!props2.preDestroyMethods) {
        props2.preDestroyMethods = [];
      }
      props2.preDestroyMethods.push(methodName);
    }
    function Bean3(beanName) {
      return function(classConstructor) {
        var props2 = getOrCreateProps(classConstructor);
        props2.beanName = beanName;
      };
    }
    function Autowired(name) {
      return function(target, propertyKey, descriptor) {
        autowiredFunc(target, name, false, target, propertyKey, null);
      };
    }
    function Optional(name) {
      return function(target, propertyKey, descriptor) {
        autowiredFunc(target, name, true, target, propertyKey, null);
      };
    }
    function autowiredFunc(target, name, optional, classPrototype, methodOrAttributeName, index) {
      if (name === null) {
        console.error("AG Grid: Autowired name should not be null");
        return;
      }
      if (typeof index === "number") {
        console.error("AG Grid: Autowired should be on an attribute");
        return;
      }
      var props2 = getOrCreateProps(target.constructor);
      if (!props2.agClassAttributes) {
        props2.agClassAttributes = [];
      }
      props2.agClassAttributes.push({
        attributeName: methodOrAttributeName,
        beanName: name,
        optional
      });
    }
    function Qualifier(name) {
      return function(classPrototype, methodOrAttributeName, index) {
        var constructor = typeof classPrototype == "function" ? classPrototype : classPrototype.constructor;
        var props2;
        if (typeof index === "number") {
          var methodName = void 0;
          if (methodOrAttributeName) {
            props2 = getOrCreateProps(constructor);
            methodName = methodOrAttributeName;
          } else {
            props2 = getOrCreateProps(constructor);
            methodName = "agConstructor";
          }
          if (!props2.autowireMethods) {
            props2.autowireMethods = {};
          }
          if (!props2.autowireMethods[methodName]) {
            props2.autowireMethods[methodName] = {};
          }
          props2.autowireMethods[methodName][index] = name;
        }
      };
    }
    function getOrCreateProps(target) {
      if (!target.hasOwnProperty("__agBeanMetaData")) {
        target.__agBeanMetaData = {};
      }
      return target.__agBeanMetaData;
    }
    var __decorate3 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __param = function(paramIndex, decorator) {
      return function(target, key) {
        decorator(target, key, paramIndex);
      };
    };
    var EventService = (
      /** @class */
      function() {
        function EventService2() {
          this.allSyncListeners = /* @__PURE__ */ new Map();
          this.allAsyncListeners = /* @__PURE__ */ new Map();
          this.globalSyncListeners = /* @__PURE__ */ new Set();
          this.globalAsyncListeners = /* @__PURE__ */ new Set();
          this.asyncFunctionsQueue = [];
          this.scheduled = false;
          this.firedEvents = {};
        }
        EventService2.prototype.setBeans = function(loggerFactory, gridOptionsWrapper, frameworkOverrides, globalEventListener) {
          if (globalEventListener === void 0) {
            globalEventListener = null;
          }
          this.frameworkOverrides = frameworkOverrides;
          if (globalEventListener) {
            var async = gridOptionsWrapper.useAsyncEvents();
            this.addGlobalListener(globalEventListener, async);
          }
        };
        EventService2.prototype.getListeners = function(eventType, async, autoCreateListenerCollection) {
          var listenerMap = async ? this.allAsyncListeners : this.allSyncListeners;
          var listeners = listenerMap.get(eventType);
          if (!listeners && autoCreateListenerCollection) {
            listeners = /* @__PURE__ */ new Set();
            listenerMap.set(eventType, listeners);
          }
          return listeners;
        };
        EventService2.prototype.noRegisteredListenersExist = function() {
          return this.allSyncListeners.size === 0 && this.allAsyncListeners.size === 0 && this.globalSyncListeners.size === 0 && this.globalAsyncListeners.size === 0;
        };
        EventService2.prototype.addEventListener = function(eventType, listener, async) {
          if (async === void 0) {
            async = false;
          }
          this.getListeners(eventType, async, true).add(listener);
        };
        EventService2.prototype.removeEventListener = function(eventType, listener, async) {
          if (async === void 0) {
            async = false;
          }
          var listeners = this.getListeners(eventType, async, false);
          if (!listeners) {
            return;
          }
          listeners.delete(listener);
          if (listeners.size === 0) {
            var listenerMap = async ? this.allAsyncListeners : this.allSyncListeners;
            listenerMap.delete(eventType);
          }
        };
        EventService2.prototype.addGlobalListener = function(listener, async) {
          if (async === void 0) {
            async = false;
          }
          (async ? this.globalAsyncListeners : this.globalSyncListeners).add(listener);
        };
        EventService2.prototype.removeGlobalListener = function(listener, async) {
          if (async === void 0) {
            async = false;
          }
          (async ? this.globalAsyncListeners : this.globalSyncListeners).delete(listener);
        };
        EventService2.prototype.dispatchEvent = function(event) {
          this.dispatchToListeners(event, true);
          this.dispatchToListeners(event, false);
          this.firedEvents[event.type] = true;
        };
        EventService2.prototype.dispatchEventOnce = function(event) {
          if (!this.firedEvents[event.type]) {
            this.dispatchEvent(event);
          }
        };
        EventService2.prototype.dispatchToListeners = function(event, async) {
          var _this = this;
          var eventType = event.type;
          var processEventListeners = function(listeners2) {
            return listeners2.forEach(function(listener) {
              if (async) {
                _this.dispatchAsync(function() {
                  return listener(event);
                });
              } else {
                listener(event);
              }
            });
          };
          var listeners = this.getListeners(eventType, async, false);
          if (listeners) {
            processEventListeners(listeners);
          }
          var globalListeners = async ? this.globalAsyncListeners : this.globalSyncListeners;
          globalListeners.forEach(function(listener) {
            if (async) {
              _this.dispatchAsync(function() {
                return _this.frameworkOverrides.dispatchEvent(eventType, function() {
                  return listener(eventType, event);
                }, true);
              });
            } else {
              _this.frameworkOverrides.dispatchEvent(eventType, function() {
                return listener(eventType, event);
              }, true);
            }
          });
        };
        EventService2.prototype.dispatchAsync = function(func) {
          this.asyncFunctionsQueue.push(func);
          if (!this.scheduled) {
            window.setTimeout(this.flushAsyncQueue.bind(this), 0);
            this.scheduled = true;
          }
        };
        EventService2.prototype.flushAsyncQueue = function() {
          this.scheduled = false;
          var queueCopy = this.asyncFunctionsQueue.slice();
          this.asyncFunctionsQueue = [];
          queueCopy.forEach(function(func) {
            return func();
          });
        };
        __decorate3([
          __param(0, Qualifier("loggerFactory")),
          __param(1, Qualifier("gridOptionsWrapper")),
          __param(2, Qualifier("frameworkOverrides")),
          __param(3, Qualifier("globalEventListener"))
        ], EventService2.prototype, "setBeans", null);
        EventService2 = __decorate3([
          Bean3("eventService")
        ], EventService2);
        return EventService2;
      }()
    );
    var Constants = (
      /** @class */
      function() {
        function Constants2() {
        }
        Constants2.ROW_BUFFER_SIZE = 10;
        Constants2.LAYOUT_INTERVAL = 500;
        Constants2.BATCH_WAIT_MILLIS = 50;
        Constants2.EXPORT_TYPE_DRAG_COPY = "dragCopy";
        Constants2.EXPORT_TYPE_CLIPBOARD = "clipboard";
        Constants2.EXPORT_TYPE_EXCEL = "excel";
        Constants2.EXPORT_TYPE_CSV = "csv";
        Constants2.ROW_MODEL_TYPE_INFINITE = "infinite";
        Constants2.ROW_MODEL_TYPE_VIEWPORT = "viewport";
        Constants2.ROW_MODEL_TYPE_CLIENT_SIDE = "clientSide";
        Constants2.ROW_MODEL_TYPE_SERVER_SIDE = "serverSide";
        Constants2.ALWAYS = "always";
        Constants2.ONLY_WHEN_GROUPING = "onlyWhenGrouping";
        Constants2.PINNED_TOP = "top";
        Constants2.PINNED_BOTTOM = "bottom";
        Constants2.DOM_LAYOUT_NORMAL = "normal";
        Constants2.DOM_LAYOUT_PRINT = "print";
        Constants2.DOM_LAYOUT_AUTO_HEIGHT = "autoHeight";
        Constants2.GROUP_AUTO_COLUMN_ID = "ag-Grid-AutoColumn";
        Constants2.SOURCE_PASTE = "paste";
        Constants2.PINNED_RIGHT = "right";
        Constants2.PINNED_LEFT = "left";
        Constants2.SORT_ASC = "asc";
        Constants2.SORT_DESC = "desc";
        Constants2.INPUT_SELECTOR = "input, select, button, textarea";
        Constants2.FOCUSABLE_SELECTOR = "[tabindex], input, select, button, textarea";
        Constants2.FOCUSABLE_EXCLUDE = ".ag-hidden, .ag-hidden *, [disabled], .ag-disabled, .ag-disabled *";
        return Constants2;
      }()
    );
    (function(ModuleNames) {
      ModuleNames["CommunityCoreModule"] = "@ag-grid-community/core";
      ModuleNames["CommunityAllModules"] = "@ag-grid-community/all";
      ModuleNames["InfiniteRowModelModule"] = "@ag-grid-community/infinite-row-model";
      ModuleNames["ClientSideRowModelModule"] = "@ag-grid-community/client-side-row-model";
      ModuleNames["CsvExportModule"] = "@ag-grid-community/csv-export";
      ModuleNames["EnterpriseCoreModule"] = "@ag-grid-enterprise/core";
      ModuleNames["EnterpriseAllModules"] = "@ag-grid-enterprise/all";
      ModuleNames["RowGroupingModule"] = "@ag-grid-enterprise/row-grouping";
      ModuleNames["ColumnToolPanelModule"] = "@ag-grid-enterprise/column-tool-panel";
      ModuleNames["FiltersToolPanelModule"] = "@ag-grid-enterprise/filter-tool-panel";
      ModuleNames["MenuModule"] = "@ag-grid-enterprise/menu";
      ModuleNames["SetFilterModule"] = "@ag-grid-enterprise/set-filter";
      ModuleNames["MultiFilterModule"] = "@ag-grid-enterprise/multi-filter";
      ModuleNames["StatusBarModule"] = "@ag-grid-enterprise/status-bar";
      ModuleNames["SideBarModule"] = "@ag-grid-enterprise/side-bar";
      ModuleNames["RangeSelectionModule"] = "@ag-grid-enterprise/range-selection";
      ModuleNames["MasterDetailModule"] = "@ag-grid-enterprise/master-detail";
      ModuleNames["RichSelectModule"] = "@ag-grid-enterprise/rich-select";
      ModuleNames["GridChartsModule"] = "@ag-grid-enterprise/charts";
      ModuleNames["ViewportRowModelModule"] = "@ag-grid-enterprise/viewport-row-model";
      ModuleNames["ServerSideRowModelModule"] = "@ag-grid-enterprise/server-side-row-model";
      ModuleNames["ExcelExportModule"] = "@ag-grid-enterprise/excel-export";
      ModuleNames["ClipboardModule"] = "@ag-grid-enterprise/clipboard";
      ModuleNames["SparklinesModule"] = "@ag-grid-enterprise/sparklines";
      ModuleNames["AngularModule"] = "@ag-grid-community/angular";
      ModuleNames["ReactModule"] = "@ag-grid-community/react";
      ModuleNames["VueModule"] = "@ag-grid-community/vue";
      ModuleNames["PolymerModule"] = "@ag-grid-community/polymer";
    })(exports.ModuleNames || (exports.ModuleNames = {}));
    var ModuleRegistry = (
      /** @class */
      function() {
        function ModuleRegistry2() {
        }
        ModuleRegistry2.register = function(module2, moduleBased) {
          if (moduleBased === void 0) {
            moduleBased = true;
          }
          ModuleRegistry2.modulesMap[module2.moduleName] = module2;
          if (ModuleRegistry2.moduleBased === void 0) {
            ModuleRegistry2.moduleBased = moduleBased;
          } else {
            if (ModuleRegistry2.moduleBased !== moduleBased) {
              doOnce(function() {
                console.warn("AG Grid: You are mixing modules (i.e. @ag-grid-community/core) and packages (ag-grid-community) - you can only use one or the other of these mechanisms.");
                console.warn("Please see https://www.ag-grid.com/javascript-grid/packages-modules/ for more information.");
              }, "ModulePackageCheck");
            }
          }
        };
        ModuleRegistry2.registerModules = function(modules, moduleBased) {
          if (moduleBased === void 0) {
            moduleBased = true;
          }
          if (!modules) {
            return;
          }
          modules.forEach(function(module2) {
            return ModuleRegistry2.register(module2, moduleBased);
          });
        };
        ModuleRegistry2.assertRegistered = function(moduleName, reason) {
          if (this.isRegistered(moduleName)) {
            return true;
          }
          var warningKey = reason + moduleName;
          var warningMessage = "AG Grid: unable to use " + reason + " as module " + moduleName + " is not present. Please see: https://www.ag-grid.com/javascript-grid/modules/";
          doOnce(function() {
            console.warn(warningMessage);
          }, warningKey);
          return false;
        };
        ModuleRegistry2.isRegistered = function(moduleName) {
          return !!ModuleRegistry2.modulesMap[moduleName];
        };
        ModuleRegistry2.getRegisteredModules = function() {
          return values(ModuleRegistry2.modulesMap);
        };
        ModuleRegistry2.isPackageBased = function() {
          return !ModuleRegistry2.moduleBased;
        };
        ModuleRegistry2.modulesMap = {};
        return ModuleRegistry2;
      }()
    );
    var __decorate$1 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var instanceIdSequence = 0;
    var Column = (
      /** @class */
      function() {
        function Column2(colDef, userProvidedColDef, colId, primary) {
          this.instanceId = instanceIdSequence++;
          this.moving = false;
          this.menuVisible = false;
          this.filterActive = false;
          this.eventService = new EventService();
          this.rowGroupActive = false;
          this.pivotActive = false;
          this.aggregationActive = false;
          this.colDef = colDef;
          this.userProvidedColDef = userProvidedColDef;
          this.colId = colId;
          this.primary = primary;
          this.setState(colDef);
        }
        Column2.prototype.getInstanceId = function() {
          return this.instanceId;
        };
        Column2.prototype.setState = function(colDef) {
          if (colDef.sort !== void 0) {
            if (colDef.sort === Constants.SORT_ASC || colDef.sort === Constants.SORT_DESC) {
              this.sort = colDef.sort;
            }
          } else {
            if (colDef.initialSort === Constants.SORT_ASC || colDef.initialSort === Constants.SORT_DESC) {
              this.sort = colDef.initialSort;
            }
          }
          var sortIndex = attrToNumber(colDef.sortIndex);
          var initialSortIndex = attrToNumber(colDef.initialSortIndex);
          if (sortIndex !== void 0) {
            if (sortIndex !== null) {
              this.sortIndex = sortIndex;
            }
          } else {
            if (initialSortIndex !== null) {
              this.sortIndex = initialSortIndex;
            }
          }
          var hide = attrToBoolean(colDef.hide);
          var initialHide = attrToBoolean(colDef.initialHide);
          if (hide !== void 0) {
            this.visible = !hide;
          } else {
            this.visible = !initialHide;
          }
          if (colDef.pinned !== void 0) {
            this.setPinned(colDef.pinned);
          } else {
            this.setPinned(colDef.initialPinned);
          }
          var flex = attrToNumber(colDef.flex);
          var initialFlex = attrToNumber(colDef.initialFlex);
          if (flex !== void 0) {
            this.flex = flex;
          } else if (initialFlex !== void 0) {
            this.flex = initialFlex;
          }
        };
        Column2.prototype.setColDef = function(colDef, userProvidedColDef) {
          this.colDef = colDef;
          this.userProvidedColDef = userProvidedColDef;
          this.initMinAndMaxWidths();
          this.initDotNotation();
        };
        Column2.prototype.getUserProvidedColDef = function() {
          return this.userProvidedColDef;
        };
        Column2.prototype.setParent = function(parent) {
          this.parent = parent;
        };
        Column2.prototype.getParent = function() {
          return this.parent;
        };
        Column2.prototype.setOriginalParent = function(originalParent) {
          this.originalParent = originalParent;
        };
        Column2.prototype.getOriginalParent = function() {
          return this.originalParent;
        };
        Column2.prototype.initialise = function() {
          this.initMinAndMaxWidths();
          this.resetActualWidth("gridInitializing");
          this.initDotNotation();
          this.validate();
        };
        Column2.prototype.initDotNotation = function() {
          var suppressDotNotation = this.gridOptionsWrapper.isSuppressFieldDotNotation();
          this.fieldContainsDots = exists(this.colDef.field) && this.colDef.field.indexOf(".") >= 0 && !suppressDotNotation;
          this.tooltipFieldContainsDots = exists(this.colDef.tooltipField) && this.colDef.tooltipField.indexOf(".") >= 0 && !suppressDotNotation;
        };
        Column2.prototype.initMinAndMaxWidths = function() {
          var colDef = this.colDef;
          this.minWidth = this.columnUtils.calculateColMinWidth(colDef);
          this.maxWidth = this.columnUtils.calculateColMaxWidth(colDef);
        };
        Column2.prototype.resetActualWidth = function(source) {
          if (source === void 0) {
            source = "api";
          }
          var initialWidth = this.columnUtils.calculateColInitialWidth(this.colDef);
          this.setActualWidth(initialWidth, source, true);
        };
        Column2.prototype.isEmptyGroup = function() {
          return false;
        };
        Column2.prototype.isRowGroupDisplayed = function(colId) {
          if (missing(this.colDef) || missing(this.colDef.showRowGroup)) {
            return false;
          }
          var showingAllGroups = this.colDef.showRowGroup === true;
          var showingThisGroup = this.colDef.showRowGroup === colId;
          return showingAllGroups || showingThisGroup;
        };
        Column2.prototype.isPrimary = function() {
          return this.primary;
        };
        Column2.prototype.isFilterAllowed = function() {
          var filterDefined = !!this.colDef.filter || !!this.colDef.filterFramework;
          return this.primary && filterDefined;
        };
        Column2.prototype.isFieldContainsDots = function() {
          return this.fieldContainsDots;
        };
        Column2.prototype.isTooltipFieldContainsDots = function() {
          return this.tooltipFieldContainsDots;
        };
        Column2.prototype.validate = function() {
          var colDefAny = this.colDef;
          function warnOnce(msg, key, obj) {
            doOnce(function() {
              if (obj) {
                console.warn(msg, obj);
              } else {
                doOnce(function() {
                  return console.warn(msg);
                }, key);
              }
            }, key);
          }
          var usingCSRM = this.gridOptionsWrapper.isRowModelDefault();
          if (usingCSRM && !ModuleRegistry.isRegistered(exports.ModuleNames.RowGroupingModule)) {
            var rowGroupingItems = ["enableRowGroup", "rowGroup", "rowGroupIndex", "enablePivot", "enableValue", "pivot", "pivotIndex", "aggFunc"];
            rowGroupingItems.forEach(function(item) {
              if (exists(colDefAny[item])) {
                if (ModuleRegistry.isPackageBased()) {
                  warnOnce("AG Grid: " + item + " is only valid in ag-grid-enterprise, your column definition should not have " + item, "ColumnRowGroupingMissing" + item);
                } else {
                  warnOnce("AG Grid: " + item + " is only valid with AG Grid Enterprise Module " + exports.ModuleNames.RowGroupingModule + " - your column definition should not have " + item, "ColumnRowGroupingMissing" + item);
                }
              }
            });
          }
          if (!ModuleRegistry.isRegistered(exports.ModuleNames.RichSelectModule)) {
            if (this.colDef.cellEditor === "agRichSelect") {
              if (ModuleRegistry.isPackageBased()) {
                warnOnce("AG Grid: " + this.colDef.cellEditor + " can only be used with ag-grid-enterprise", "ColumnRichSelectMissing");
              } else {
                warnOnce("AG Grid: " + this.colDef.cellEditor + " can only be used with AG Grid Enterprise Module " + exports.ModuleNames.RichSelectModule, "ColumnRichSelectMissing");
              }
            }
          }
          if (this.gridOptionsWrapper.isTreeData()) {
            var itemsNotAllowedWithTreeData = ["rowGroup", "rowGroupIndex", "pivot", "pivotIndex"];
            itemsNotAllowedWithTreeData.forEach(function(item) {
              if (exists(colDefAny[item])) {
                warnOnce("AG Grid: " + item + " is not possible when doing tree data, your column definition should not have " + item, "TreeDataCannotRowGroup");
              }
            });
          }
          if (exists(this.colDef.width) && typeof this.colDef.width !== "number") {
            warnOnce("AG Grid: colDef.width should be a number, not " + typeof this.colDef.width, "ColumnCheck_asdfawef");
          }
          if (colDefAny.pinnedRowCellRenderer) {
            warnOnce("AG Grid: pinnedRowCellRenderer no longer exists, use cellRendererSelector if you want a different Cell Renderer for pinned rows. Check params.node.rowPinned. This was an unfortunate (but necessary) change we had to do to allow future plans we have of re-skinng the data grid in frameworks such as React, Angular and Vue. See https://www.ag-grid.com/javascript-grid/cell-rendering/#many-renderers-one-column", "colDef.pinnedRowCellRenderer-deprecated");
          }
          if (colDefAny.pinnedRowCellRendererParams) {
            warnOnce("AG Grid: pinnedRowCellRenderer no longer exists, use cellRendererSelector if you want a different Cell Renderer for pinned rows. Check params.node.rowPinned. This was an unfortunate (but necessary) change we had to do to allow future plans we have of re-skinng the data grid in frameworks such as React, Angular and Vue. See https://www.ag-grid.com/javascript-grid/cell-rendering/#many-renderers-one-column", "colDef.pinnedRowCellRenderer-deprecated");
          }
          if (colDefAny.pinnedRowCellRendererFramework) {
            warnOnce("AG Grid: pinnedRowCellRenderer no longer exists, use cellRendererSelector if you want a different Cell Renderer for pinned rows. Check params.node.rowPinned. This was an unfortunate (but necessary) change we had to do to allow future plans we have of re-skinng the data grid in frameworks such as React, Angular and Vue. See https://www.ag-grid.com/javascript-grid/cell-rendering/#many-renderers-one-column", "colDef.pinnedRowCellRenderer-deprecated");
          }
          if (colDefAny.pinnedRowValueGetter) {
            warnOnce("AG Grid: pinnedRowCellRenderer is deprecated, use cellRendererSelector if you want a different Cell Renderer for pinned rows. Check params.node.rowPinned. This was an unfortunate (but necessary) change we had to do to allow future plans we have of re-skinng the data grid in frameworks such as React, Angular and Vue.", "colDef.pinnedRowCellRenderer-deprecated");
          }
        };
        Column2.prototype.addEventListener = function(eventType, listener) {
          this.eventService.addEventListener(eventType, listener);
        };
        Column2.prototype.removeEventListener = function(eventType, listener) {
          this.eventService.removeEventListener(eventType, listener);
        };
        Column2.prototype.createColumnFunctionCallbackParams = function(rowNode) {
          return {
            node: rowNode,
            data: rowNode.data,
            column: this,
            colDef: this.colDef,
            context: this.gridOptionsWrapper.getContext(),
            api: this.gridOptionsWrapper.getApi(),
            columnApi: this.gridOptionsWrapper.getColumnApi()
          };
        };
        Column2.prototype.isSuppressNavigable = function(rowNode) {
          if (typeof this.colDef.suppressNavigable === "boolean") {
            return this.colDef.suppressNavigable;
          }
          if (typeof this.colDef.suppressNavigable === "function") {
            var params = this.createColumnFunctionCallbackParams(rowNode);
            var userFunc = this.colDef.suppressNavigable;
            return userFunc(params);
          }
          return false;
        };
        Column2.prototype.isCellEditable = function(rowNode) {
          if (rowNode.group && !this.gridOptionsWrapper.isEnableGroupEdit()) {
            return false;
          }
          return this.isColumnFunc(rowNode, this.colDef.editable);
        };
        Column2.prototype.isSuppressFillHandle = function() {
          return !!this.colDef.suppressFillHandle;
        };
        Column2.prototype.isRowDrag = function(rowNode) {
          return this.isColumnFunc(rowNode, this.colDef.rowDrag);
        };
        Column2.prototype.isDndSource = function(rowNode) {
          return this.isColumnFunc(rowNode, this.colDef.dndSource);
        };
        Column2.prototype.isCellCheckboxSelection = function(rowNode) {
          return this.isColumnFunc(rowNode, this.colDef.checkboxSelection);
        };
        Column2.prototype.isSuppressPaste = function(rowNode) {
          return this.isColumnFunc(rowNode, this.colDef ? this.colDef.suppressPaste : null);
        };
        Column2.prototype.isResizable = function() {
          return this.colDef.resizable === true;
        };
        Column2.prototype.isColumnFunc = function(rowNode, value) {
          if (typeof value === "boolean") {
            return value;
          }
          if (typeof value === "function") {
            var params = this.createColumnFunctionCallbackParams(rowNode);
            var editableFunc = value;
            return editableFunc(params);
          }
          return false;
        };
        Column2.prototype.setMoving = function(moving, source) {
          if (source === void 0) {
            source = "api";
          }
          this.moving = moving;
          this.eventService.dispatchEvent(this.createColumnEvent(Column2.EVENT_MOVING_CHANGED, source));
        };
        Column2.prototype.createColumnEvent = function(type, source) {
          return {
            api: this.gridApi,
            columnApi: this.columnApi,
            type,
            column: this,
            columns: [this],
            source
          };
        };
        Column2.prototype.isMoving = function() {
          return this.moving;
        };
        Column2.prototype.getSort = function() {
          return this.sort;
        };
        Column2.prototype.setSort = function(sort, source) {
          if (source === void 0) {
            source = "api";
          }
          if (this.sort !== sort) {
            this.sort = sort;
            this.eventService.dispatchEvent(this.createColumnEvent(Column2.EVENT_SORT_CHANGED, source));
          }
        };
        Column2.prototype.setMenuVisible = function(visible, source) {
          if (source === void 0) {
            source = "api";
          }
          if (this.menuVisible !== visible) {
            this.menuVisible = visible;
            this.eventService.dispatchEvent(this.createColumnEvent(Column2.EVENT_MENU_VISIBLE_CHANGED, source));
          }
        };
        Column2.prototype.isMenuVisible = function() {
          return this.menuVisible;
        };
        Column2.prototype.isSortAscending = function() {
          return this.sort === Constants.SORT_ASC;
        };
        Column2.prototype.isSortDescending = function() {
          return this.sort === Constants.SORT_DESC;
        };
        Column2.prototype.isSortNone = function() {
          return missing(this.sort);
        };
        Column2.prototype.isSorting = function() {
          return exists(this.sort);
        };
        Column2.prototype.getSortIndex = function() {
          return this.sortIndex;
        };
        Column2.prototype.setSortIndex = function(sortOrder) {
          this.sortIndex = sortOrder;
        };
        Column2.prototype.setAggFunc = function(aggFunc) {
          this.aggFunc = aggFunc;
        };
        Column2.prototype.getAggFunc = function() {
          return this.aggFunc;
        };
        Column2.prototype.getLeft = function() {
          return this.left;
        };
        Column2.prototype.getOldLeft = function() {
          return this.oldLeft;
        };
        Column2.prototype.getRight = function() {
          return this.left + this.actualWidth;
        };
        Column2.prototype.setLeft = function(left, source) {
          if (source === void 0) {
            source = "api";
          }
          this.oldLeft = this.left;
          if (this.left !== left) {
            this.left = left;
            this.eventService.dispatchEvent(this.createColumnEvent(Column2.EVENT_LEFT_CHANGED, source));
          }
        };
        Column2.prototype.isFilterActive = function() {
          return this.filterActive;
        };
        Column2.prototype.setFilterActive = function(active, source, additionalEventAttributes) {
          if (source === void 0) {
            source = "api";
          }
          if (this.filterActive !== active) {
            this.filterActive = active;
            this.eventService.dispatchEvent(this.createColumnEvent(Column2.EVENT_FILTER_ACTIVE_CHANGED, source));
          }
          var filterChangedEvent = this.createColumnEvent(Column2.EVENT_FILTER_CHANGED, source);
          if (additionalEventAttributes) {
            mergeDeep(filterChangedEvent, additionalEventAttributes);
          }
          this.eventService.dispatchEvent(filterChangedEvent);
        };
        Column2.prototype.setPinned = function(pinned) {
          if (pinned === true || pinned === Constants.PINNED_LEFT) {
            this.pinned = Constants.PINNED_LEFT;
          } else if (pinned === Constants.PINNED_RIGHT) {
            this.pinned = Constants.PINNED_RIGHT;
          } else {
            this.pinned = null;
          }
        };
        Column2.prototype.setFirstRightPinned = function(firstRightPinned, source) {
          if (source === void 0) {
            source = "api";
          }
          if (this.firstRightPinned !== firstRightPinned) {
            this.firstRightPinned = firstRightPinned;
            this.eventService.dispatchEvent(this.createColumnEvent(Column2.EVENT_FIRST_RIGHT_PINNED_CHANGED, source));
          }
        };
        Column2.prototype.setLastLeftPinned = function(lastLeftPinned, source) {
          if (source === void 0) {
            source = "api";
          }
          if (this.lastLeftPinned !== lastLeftPinned) {
            this.lastLeftPinned = lastLeftPinned;
            this.eventService.dispatchEvent(this.createColumnEvent(Column2.EVENT_LAST_LEFT_PINNED_CHANGED, source));
          }
        };
        Column2.prototype.isFirstRightPinned = function() {
          return this.firstRightPinned;
        };
        Column2.prototype.isLastLeftPinned = function() {
          return this.lastLeftPinned;
        };
        Column2.prototype.isPinned = function() {
          return this.pinned === Constants.PINNED_LEFT || this.pinned === Constants.PINNED_RIGHT;
        };
        Column2.prototype.isPinnedLeft = function() {
          return this.pinned === Constants.PINNED_LEFT;
        };
        Column2.prototype.isPinnedRight = function() {
          return this.pinned === Constants.PINNED_RIGHT;
        };
        Column2.prototype.getPinned = function() {
          return this.pinned;
        };
        Column2.prototype.setVisible = function(visible, source) {
          if (source === void 0) {
            source = "api";
          }
          var newValue = visible === true;
          if (this.visible !== newValue) {
            this.visible = newValue;
            this.eventService.dispatchEvent(this.createColumnEvent(Column2.EVENT_VISIBLE_CHANGED, source));
          }
        };
        Column2.prototype.isVisible = function() {
          return this.visible;
        };
        Column2.prototype.getColDef = function() {
          return this.colDef;
        };
        Column2.prototype.getColumnGroupShow = function() {
          return this.colDef.columnGroupShow;
        };
        Column2.prototype.getColId = function() {
          return this.colId;
        };
        Column2.prototype.getId = function() {
          return this.getColId();
        };
        Column2.prototype.getUniqueId = function() {
          return this.getId();
        };
        Column2.prototype.getDefinition = function() {
          return this.colDef;
        };
        Column2.prototype.getActualWidth = function() {
          return this.actualWidth;
        };
        Column2.prototype.createBaseColDefParams = function(rowNode) {
          var params = {
            node: rowNode,
            data: rowNode.data,
            colDef: this.colDef,
            column: this,
            api: this.gridOptionsWrapper.getApi(),
            columnApi: this.gridOptionsWrapper.getColumnApi(),
            context: this.gridOptionsWrapper.getContext()
          };
          return params;
        };
        Column2.prototype.getColSpan = function(rowNode) {
          if (missing(this.colDef.colSpan)) {
            return 1;
          }
          var params = this.createBaseColDefParams(rowNode);
          var colSpan = this.colDef.colSpan(params);
          return Math.max(colSpan, 1);
        };
        Column2.prototype.getRowSpan = function(rowNode) {
          if (missing(this.colDef.rowSpan)) {
            return 1;
          }
          var params = this.createBaseColDefParams(rowNode);
          var rowSpan = this.colDef.rowSpan(params);
          return Math.max(rowSpan, 1);
        };
        Column2.prototype.setActualWidth = function(actualWidth, source, silent) {
          if (source === void 0) {
            source = "api";
          }
          if (silent === void 0) {
            silent = false;
          }
          if (this.minWidth != null) {
            actualWidth = Math.max(actualWidth, this.minWidth);
          }
          if (this.maxWidth != null) {
            actualWidth = Math.min(actualWidth, this.maxWidth);
          }
          if (this.actualWidth !== actualWidth) {
            this.actualWidth = actualWidth;
            if (this.flex && source !== "flex" && source !== "gridInitializing") {
              this.flex = null;
            }
            if (!silent) {
              this.fireColumnWidthChangedEvent(source);
            }
          }
        };
        Column2.prototype.fireColumnWidthChangedEvent = function(source) {
          this.eventService.dispatchEvent(this.createColumnEvent(Column2.EVENT_WIDTH_CHANGED, source));
        };
        Column2.prototype.isGreaterThanMax = function(width) {
          if (this.maxWidth != null) {
            return width > this.maxWidth;
          }
          return false;
        };
        Column2.prototype.getMinWidth = function() {
          return this.minWidth;
        };
        Column2.prototype.getMaxWidth = function() {
          return this.maxWidth;
        };
        Column2.prototype.getFlex = function() {
          return this.flex || 0;
        };
        Column2.prototype.setFlex = function(flex) {
          if (this.flex !== flex) {
            this.flex = flex;
          }
        };
        Column2.prototype.setMinimum = function(source) {
          if (source === void 0) {
            source = "api";
          }
          if (exists(this.minWidth)) {
            this.setActualWidth(this.minWidth, source);
          }
        };
        Column2.prototype.setRowGroupActive = function(rowGroup, source) {
          if (source === void 0) {
            source = "api";
          }
          if (this.rowGroupActive !== rowGroup) {
            this.rowGroupActive = rowGroup;
            this.eventService.dispatchEvent(this.createColumnEvent(Column2.EVENT_ROW_GROUP_CHANGED, source));
          }
        };
        Column2.prototype.isRowGroupActive = function() {
          return this.rowGroupActive;
        };
        Column2.prototype.setPivotActive = function(pivot, source) {
          if (source === void 0) {
            source = "api";
          }
          if (this.pivotActive !== pivot) {
            this.pivotActive = pivot;
            this.eventService.dispatchEvent(this.createColumnEvent(Column2.EVENT_PIVOT_CHANGED, source));
          }
        };
        Column2.prototype.isPivotActive = function() {
          return this.pivotActive;
        };
        Column2.prototype.isAnyFunctionActive = function() {
          return this.isPivotActive() || this.isRowGroupActive() || this.isValueActive();
        };
        Column2.prototype.isAnyFunctionAllowed = function() {
          return this.isAllowPivot() || this.isAllowRowGroup() || this.isAllowValue();
        };
        Column2.prototype.setValueActive = function(value, source) {
          if (source === void 0) {
            source = "api";
          }
          if (this.aggregationActive !== value) {
            this.aggregationActive = value;
            this.eventService.dispatchEvent(this.createColumnEvent(Column2.EVENT_VALUE_CHANGED, source));
          }
        };
        Column2.prototype.isValueActive = function() {
          return this.aggregationActive;
        };
        Column2.prototype.isAllowPivot = function() {
          return this.colDef.enablePivot === true;
        };
        Column2.prototype.isAllowValue = function() {
          return this.colDef.enableValue === true;
        };
        Column2.prototype.isAllowRowGroup = function() {
          return this.colDef.enableRowGroup === true;
        };
        Column2.prototype.getMenuTabs = function(defaultValues) {
          var menuTabs = this.getColDef().menuTabs;
          if (menuTabs == null) {
            menuTabs = defaultValues;
          }
          return menuTabs;
        };
        Column2.prototype.isLockPosition = function() {
          console.warn("AG Grid: since v21, col.isLockPosition() should not be used, please use col.getColDef().lockPosition instead.");
          return this.colDef ? !!this.colDef.lockPosition : false;
        };
        Column2.prototype.isLockVisible = function() {
          console.warn("AG Grid: since v21, col.isLockVisible() should not be used, please use col.getColDef().lockVisible instead.");
          return this.colDef ? !!this.colDef.lockVisible : false;
        };
        Column2.prototype.isLockPinned = function() {
          console.warn("AG Grid: since v21, col.isLockPinned() should not be used, please use col.getColDef().lockPinned instead.");
          return this.colDef ? !!this.colDef.lockPinned : false;
        };
        Column2.EVENT_MOVING_CHANGED = "movingChanged";
        Column2.EVENT_LEFT_CHANGED = "leftChanged";
        Column2.EVENT_WIDTH_CHANGED = "widthChanged";
        Column2.EVENT_LAST_LEFT_PINNED_CHANGED = "lastLeftPinnedChanged";
        Column2.EVENT_FIRST_RIGHT_PINNED_CHANGED = "firstRightPinnedChanged";
        Column2.EVENT_VISIBLE_CHANGED = "visibleChanged";
        Column2.EVENT_FILTER_CHANGED = "filterChanged";
        Column2.EVENT_FILTER_ACTIVE_CHANGED = "filterActiveChanged";
        Column2.EVENT_SORT_CHANGED = "sortChanged";
        Column2.EVENT_MENU_VISIBLE_CHANGED = "menuVisibleChanged";
        Column2.EVENT_ROW_GROUP_CHANGED = "columnRowGroupChanged";
        Column2.EVENT_PIVOT_CHANGED = "columnPivotChanged";
        Column2.EVENT_VALUE_CHANGED = "columnValueChanged";
        __decorate$1([
          Autowired("gridOptionsWrapper")
        ], Column2.prototype, "gridOptionsWrapper", void 0);
        __decorate$1([
          Autowired("columnUtils")
        ], Column2.prototype, "columnUtils", void 0);
        __decorate$1([
          Autowired("columnApi")
        ], Column2.prototype, "columnApi", void 0);
        __decorate$1([
          Autowired("gridApi")
        ], Column2.prototype, "gridApi", void 0);
        __decorate$1([
          Autowired("context")
        ], Column2.prototype, "context", void 0);
        __decorate$1([
          PostConstruct
        ], Column2.prototype, "initialise", null);
        return Column2;
      }()
    );
    var __decorate$2 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var ColumnGroup = (
      /** @class */
      function() {
        function ColumnGroup2(originalColumnGroup, groupId, instanceId, pinned) {
          this.displayedChildren = [];
          this.localEventService = new EventService();
          this.groupId = groupId;
          this.instanceId = instanceId;
          this.originalColumnGroup = originalColumnGroup;
          this.pinned = pinned;
        }
        ColumnGroup2.createUniqueId = function(groupId, instanceId) {
          return groupId + "_" + instanceId;
        };
        ColumnGroup2.prototype.reset = function() {
          this.parent = null;
          this.children = null;
          this.displayedChildren = null;
        };
        ColumnGroup2.prototype.getParent = function() {
          return this.parent;
        };
        ColumnGroup2.prototype.setParent = function(parent) {
          this.parent = parent;
        };
        ColumnGroup2.prototype.getUniqueId = function() {
          return ColumnGroup2.createUniqueId(this.groupId, this.instanceId);
        };
        ColumnGroup2.prototype.isEmptyGroup = function() {
          return this.displayedChildren.length === 0;
        };
        ColumnGroup2.prototype.isMoving = function() {
          var allLeafColumns = this.getOriginalColumnGroup().getLeafColumns();
          if (!allLeafColumns || allLeafColumns.length === 0) {
            return false;
          }
          return allLeafColumns.every(function(col) {
            return col.isMoving();
          });
        };
        ColumnGroup2.prototype.checkLeft = function() {
          this.displayedChildren.forEach(function(child) {
            if (child instanceof ColumnGroup2) {
              child.checkLeft();
            }
          });
          if (this.displayedChildren.length > 0) {
            if (this.gridOptionsWrapper.isEnableRtl()) {
              var lastChild = last(this.displayedChildren);
              var lastChildLeft = lastChild.getLeft();
              this.setLeft(lastChildLeft);
            } else {
              var firstChildLeft = this.displayedChildren[0].getLeft();
              this.setLeft(firstChildLeft);
            }
          } else {
            this.setLeft(null);
          }
        };
        ColumnGroup2.prototype.getLeft = function() {
          return this.left;
        };
        ColumnGroup2.prototype.getOldLeft = function() {
          return this.oldLeft;
        };
        ColumnGroup2.prototype.setLeft = function(left) {
          this.oldLeft = left;
          if (this.left !== left) {
            this.left = left;
            this.localEventService.dispatchEvent(this.createAgEvent(ColumnGroup2.EVENT_LEFT_CHANGED));
          }
        };
        ColumnGroup2.prototype.getPinned = function() {
          return this.pinned;
        };
        ColumnGroup2.prototype.createAgEvent = function(type) {
          return { type };
        };
        ColumnGroup2.prototype.addEventListener = function(eventType, listener) {
          this.localEventService.addEventListener(eventType, listener);
        };
        ColumnGroup2.prototype.removeEventListener = function(eventType, listener) {
          this.localEventService.removeEventListener(eventType, listener);
        };
        ColumnGroup2.prototype.getGroupId = function() {
          return this.groupId;
        };
        ColumnGroup2.prototype.getInstanceId = function() {
          return this.instanceId;
        };
        ColumnGroup2.prototype.isChildInThisGroupDeepSearch = function(wantedChild) {
          var result = false;
          this.children.forEach(function(foundChild) {
            if (wantedChild === foundChild) {
              result = true;
            }
            if (foundChild instanceof ColumnGroup2) {
              if (foundChild.isChildInThisGroupDeepSearch(wantedChild)) {
                result = true;
              }
            }
          });
          return result;
        };
        ColumnGroup2.prototype.getActualWidth = function() {
          var groupActualWidth = 0;
          if (this.displayedChildren) {
            this.displayedChildren.forEach(function(child) {
              groupActualWidth += child.getActualWidth();
            });
          }
          return groupActualWidth;
        };
        ColumnGroup2.prototype.isResizable = function() {
          if (!this.displayedChildren) {
            return false;
          }
          var result = false;
          this.displayedChildren.forEach(function(child) {
            if (child.isResizable()) {
              result = true;
            }
          });
          return result;
        };
        ColumnGroup2.prototype.getMinWidth = function() {
          var result = 0;
          this.displayedChildren.forEach(function(groupChild) {
            result += groupChild.getMinWidth() || 0;
          });
          return result;
        };
        ColumnGroup2.prototype.addChild = function(child) {
          if (!this.children) {
            this.children = [];
          }
          this.children.push(child);
        };
        ColumnGroup2.prototype.getDisplayedChildren = function() {
          return this.displayedChildren;
        };
        ColumnGroup2.prototype.getLeafColumns = function() {
          var result = [];
          this.addLeafColumns(result);
          return result;
        };
        ColumnGroup2.prototype.getDisplayedLeafColumns = function() {
          var result = [];
          this.addDisplayedLeafColumns(result);
          return result;
        };
        ColumnGroup2.prototype.getDefinition = function() {
          return this.originalColumnGroup.getColGroupDef();
        };
        ColumnGroup2.prototype.getColGroupDef = function() {
          return this.originalColumnGroup.getColGroupDef();
        };
        ColumnGroup2.prototype.isPadding = function() {
          return this.originalColumnGroup.isPadding();
        };
        ColumnGroup2.prototype.isExpandable = function() {
          return this.originalColumnGroup.isExpandable();
        };
        ColumnGroup2.prototype.isExpanded = function() {
          return this.originalColumnGroup.isExpanded();
        };
        ColumnGroup2.prototype.setExpanded = function(expanded) {
          this.originalColumnGroup.setExpanded(expanded);
        };
        ColumnGroup2.prototype.addDisplayedLeafColumns = function(leafColumns) {
          this.displayedChildren.forEach(function(child) {
            if (child instanceof Column) {
              leafColumns.push(child);
            } else if (child instanceof ColumnGroup2) {
              child.addDisplayedLeafColumns(leafColumns);
            }
          });
        };
        ColumnGroup2.prototype.addLeafColumns = function(leafColumns) {
          this.children.forEach(function(child) {
            if (child instanceof Column) {
              leafColumns.push(child);
            } else if (child instanceof ColumnGroup2) {
              child.addLeafColumns(leafColumns);
            }
          });
        };
        ColumnGroup2.prototype.getChildren = function() {
          return this.children;
        };
        ColumnGroup2.prototype.getColumnGroupShow = function() {
          return this.originalColumnGroup.getColumnGroupShow();
        };
        ColumnGroup2.prototype.getOriginalColumnGroup = function() {
          return this.originalColumnGroup;
        };
        ColumnGroup2.prototype.getPaddingLevel = function() {
          var parent = this.getParent();
          if (!this.isPadding() || !parent || !parent.isPadding()) {
            return 0;
          }
          return 1 + parent.getPaddingLevel();
        };
        ColumnGroup2.prototype.calculateDisplayedColumns = function() {
          var _this = this;
          this.displayedChildren = [];
          var parentWithExpansion = this;
          while (parentWithExpansion != null && parentWithExpansion.isPadding()) {
            parentWithExpansion = parentWithExpansion.getParent();
          }
          var isExpandable = parentWithExpansion ? parentWithExpansion.originalColumnGroup.isExpandable() : false;
          if (!isExpandable) {
            this.displayedChildren = this.children;
            this.localEventService.dispatchEvent(this.createAgEvent(ColumnGroup2.EVENT_DISPLAYED_CHILDREN_CHANGED));
            return;
          }
          this.children.forEach(function(child) {
            var emptyGroup = child instanceof ColumnGroup2 && (!child.displayedChildren || !child.displayedChildren.length);
            if (emptyGroup) {
              return;
            }
            var headerGroupShow = child.getColumnGroupShow();
            switch (headerGroupShow) {
              case ColumnGroup2.HEADER_GROUP_SHOW_OPEN:
                if (parentWithExpansion.originalColumnGroup.isExpanded()) {
                  _this.displayedChildren.push(child);
                }
                break;
              case ColumnGroup2.HEADER_GROUP_SHOW_CLOSED:
                if (!parentWithExpansion.originalColumnGroup.isExpanded()) {
                  _this.displayedChildren.push(child);
                }
                break;
              default:
                _this.displayedChildren.push(child);
                break;
            }
          });
          this.localEventService.dispatchEvent(this.createAgEvent(ColumnGroup2.EVENT_DISPLAYED_CHILDREN_CHANGED));
        };
        ColumnGroup2.HEADER_GROUP_SHOW_OPEN = "open";
        ColumnGroup2.HEADER_GROUP_SHOW_CLOSED = "closed";
        ColumnGroup2.EVENT_LEFT_CHANGED = "leftChanged";
        ColumnGroup2.EVENT_DISPLAYED_CHILDREN_CHANGED = "displayedChildrenChanged";
        __decorate$2([
          Autowired("gridOptionsWrapper")
        ], ColumnGroup2.prototype, "gridOptionsWrapper", void 0);
        return ColumnGroup2;
      }()
    );
    var ProvidedColumnGroup = (
      /** @class */
      function() {
        function ProvidedColumnGroup2(colGroupDef, groupId, padding, level) {
          this.localEventService = new EventService();
          this.expandable = false;
          this.colGroupDef = colGroupDef;
          this.groupId = groupId;
          this.expanded = !!colGroupDef && !!colGroupDef.openByDefault;
          this.padding = padding;
          this.level = level;
        }
        ProvidedColumnGroup2.prototype.setOriginalParent = function(originalParent) {
          this.originalParent = originalParent;
        };
        ProvidedColumnGroup2.prototype.getOriginalParent = function() {
          return this.originalParent;
        };
        ProvidedColumnGroup2.prototype.getLevel = function() {
          return this.level;
        };
        ProvidedColumnGroup2.prototype.isVisible = function() {
          if (this.children) {
            return this.children.some(function(child) {
              return child.isVisible();
            });
          }
          return false;
        };
        ProvidedColumnGroup2.prototype.isPadding = function() {
          return this.padding;
        };
        ProvidedColumnGroup2.prototype.setExpanded = function(expanded) {
          this.expanded = expanded === void 0 ? false : expanded;
          var event = {
            type: ProvidedColumnGroup2.EVENT_EXPANDED_CHANGED
          };
          this.localEventService.dispatchEvent(event);
        };
        ProvidedColumnGroup2.prototype.isExpandable = function() {
          return this.expandable;
        };
        ProvidedColumnGroup2.prototype.isExpanded = function() {
          return this.expanded;
        };
        ProvidedColumnGroup2.prototype.getGroupId = function() {
          return this.groupId;
        };
        ProvidedColumnGroup2.prototype.getId = function() {
          return this.getGroupId();
        };
        ProvidedColumnGroup2.prototype.setChildren = function(children) {
          this.children = children;
        };
        ProvidedColumnGroup2.prototype.getChildren = function() {
          return this.children;
        };
        ProvidedColumnGroup2.prototype.getColGroupDef = function() {
          return this.colGroupDef;
        };
        ProvidedColumnGroup2.prototype.getLeafColumns = function() {
          var result = [];
          this.addLeafColumns(result);
          return result;
        };
        ProvidedColumnGroup2.prototype.addLeafColumns = function(leafColumns) {
          if (!this.children) {
            return;
          }
          this.children.forEach(function(child) {
            if (child instanceof Column) {
              leafColumns.push(child);
            } else if (child instanceof ProvidedColumnGroup2) {
              child.addLeafColumns(leafColumns);
            }
          });
        };
        ProvidedColumnGroup2.prototype.getColumnGroupShow = function() {
          var colGroupDef = this.colGroupDef;
          if (!colGroupDef) {
            return;
          }
          return colGroupDef.columnGroupShow;
        };
        ProvidedColumnGroup2.prototype.setupExpandable = function() {
          var _this = this;
          this.setExpandable();
          this.getLeafColumns().forEach(function(col) {
            return col.addEventListener(Column.EVENT_VISIBLE_CHANGED, _this.onColumnVisibilityChanged.bind(_this));
          });
        };
        ProvidedColumnGroup2.prototype.setExpandable = function() {
          if (this.isPadding()) {
            return;
          }
          var atLeastOneShowingWhenOpen = false;
          var atLeastOneShowingWhenClosed = false;
          var atLeastOneChangeable = false;
          var children = this.findChildrenRemovingPadding();
          for (var i = 0, j = children.length; i < j; i++) {
            var abstractColumn = children[i];
            if (!abstractColumn.isVisible()) {
              continue;
            }
            var headerGroupShow = abstractColumn.getColumnGroupShow();
            if (headerGroupShow === ColumnGroup.HEADER_GROUP_SHOW_OPEN) {
              atLeastOneShowingWhenOpen = true;
              atLeastOneChangeable = true;
            } else if (headerGroupShow === ColumnGroup.HEADER_GROUP_SHOW_CLOSED) {
              atLeastOneShowingWhenClosed = true;
              atLeastOneChangeable = true;
            } else {
              atLeastOneShowingWhenOpen = true;
              atLeastOneShowingWhenClosed = true;
            }
          }
          var expandable = atLeastOneShowingWhenOpen && atLeastOneShowingWhenClosed && atLeastOneChangeable;
          if (this.expandable !== expandable) {
            this.expandable = expandable;
            var event_1 = {
              type: ProvidedColumnGroup2.EVENT_EXPANDABLE_CHANGED
            };
            this.localEventService.dispatchEvent(event_1);
          }
        };
        ProvidedColumnGroup2.prototype.findChildrenRemovingPadding = function() {
          var res = [];
          var process = function(items) {
            items.forEach(function(item) {
              var skipBecausePadding = item instanceof ProvidedColumnGroup2 && item.isPadding();
              if (skipBecausePadding) {
                process(item.children);
              } else {
                res.push(item);
              }
            });
          };
          process(this.children);
          return res;
        };
        ProvidedColumnGroup2.prototype.onColumnVisibilityChanged = function() {
          this.setExpandable();
        };
        ProvidedColumnGroup2.prototype.addEventListener = function(eventType, listener) {
          this.localEventService.addEventListener(eventType, listener);
        };
        ProvidedColumnGroup2.prototype.removeEventListener = function(eventType, listener) {
          this.localEventService.removeEventListener(eventType, listener);
        };
        ProvidedColumnGroup2.EVENT_EXPANDED_CHANGED = "expandedChanged";
        ProvidedColumnGroup2.EVENT_EXPANDABLE_CHANGED = "expandableChanged";
        return ProvidedColumnGroup2;
      }()
    );
    var DefaultColumnTypes = {
      numericColumn: {
        headerClass: "ag-right-aligned-header",
        cellClass: "ag-right-aligned-cell"
      },
      rightAligned: {
        headerClass: "ag-right-aligned-header",
        cellClass: "ag-right-aligned-cell"
      }
    };
    var AG_GRID_STOP_PROPAGATION = "__ag_Grid_Stop_Propagation";
    var PASSIVE_EVENTS = ["touchstart", "touchend", "touchmove", "touchcancel"];
    var supports = {};
    function stopPropagationForAgGrid(event) {
      event[AG_GRID_STOP_PROPAGATION] = true;
    }
    function isStopPropagationForAgGrid(event) {
      return event[AG_GRID_STOP_PROPAGATION] === true;
    }
    var isEventSupported = function() {
      var tags = {
        select: "input",
        change: "input",
        submit: "form",
        reset: "form",
        error: "img",
        load: "img",
        abort: "img"
      };
      var eventChecker = function(eventName) {
        if (typeof supports[eventName] === "boolean") {
          return supports[eventName];
        }
        var el = document.createElement(tags[eventName] || "div");
        eventName = "on" + eventName;
        var isSupported = eventName in el;
        if (!isSupported) {
          el.setAttribute(eventName, "return;");
          isSupported = typeof el[eventName] == "function";
        }
        return supports[eventName] = isSupported;
      };
      return eventChecker;
    }();
    function getCtrlForEvent(gridOptionsWrapper, event, type) {
      var sourceElement = getTarget(event);
      while (sourceElement) {
        var renderedComp = gridOptionsWrapper.getDomData(sourceElement, type);
        if (renderedComp) {
          return renderedComp;
        }
        sourceElement = sourceElement.parentElement;
      }
      return null;
    }
    function addChangeListener(element, listener) {
      element.addEventListener("changed", listener);
      element.addEventListener("paste", listener);
      element.addEventListener("input", listener);
      element.addEventListener("keydown", listener);
      element.addEventListener("keyup", listener);
    }
    function getTarget(event) {
      var eventNoType = event;
      return eventNoType.target || eventNoType.srcElement;
    }
    function isElementInEventPath(element, event) {
      if (!event || !element) {
        return false;
      }
      return getEventPath(event).indexOf(element) >= 0;
    }
    function createEventPath(event) {
      var res = [];
      var pointer = getTarget(event);
      while (pointer) {
        res.push(pointer);
        pointer = pointer.parentElement;
      }
      return res;
    }
    function addAgGridEventPath(event) {
      event.__agGridEventPath = getEventPath(event);
    }
    function getEventPath(event) {
      var eventNoType = event;
      if (eventNoType.deepPath) {
        return eventNoType.deepPath();
      }
      if (eventNoType.path) {
        return eventNoType.path;
      }
      if (eventNoType.composedPath) {
        return eventNoType.composedPath();
      }
      if (eventNoType.__agGridEventPath) {
        return eventNoType.__agGridEventPath;
      }
      return createEventPath(event);
    }
    function addSafePassiveEventListener(frameworkOverrides, eElement, event, listener) {
      var isPassive = includes(PASSIVE_EVENTS, event);
      var options = isPassive ? { passive: true } : void 0;
      if (frameworkOverrides && frameworkOverrides.addEventListener) {
        frameworkOverrides.addEventListener(eElement, event, listener, options);
      }
    }
    var EventUtils = Object.freeze({
      __proto__: null,
      stopPropagationForAgGrid,
      isStopPropagationForAgGrid,
      isEventSupported,
      getCtrlForEvent,
      addChangeListener,
      getTarget,
      isElementInEventPath,
      createEventPath,
      addAgGridEventPath,
      getEventPath,
      addSafePassiveEventListener
    });
    var __decorate$3 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var BeanStub = (
      /** @class */
      function() {
        function BeanStub2() {
          var _this = this;
          this.destroyFunctions = [];
          this.destroyed = false;
          this.__v_skip = true;
          this.isAlive = function() {
            return !_this.destroyed;
          };
        }
        BeanStub2.prototype.getFrameworkOverrides = function() {
          return this.frameworkOverrides;
        };
        BeanStub2.prototype.getContext = function() {
          return this.context;
        };
        BeanStub2.prototype.destroy = function() {
          this.destroyFunctions.forEach(function(func) {
            return func();
          });
          this.destroyFunctions.length = 0;
          this.destroyed = true;
          this.dispatchEvent({ type: BeanStub2.EVENT_DESTROYED });
        };
        BeanStub2.prototype.addEventListener = function(eventType, listener) {
          if (!this.localEventService) {
            this.localEventService = new EventService();
          }
          this.localEventService.addEventListener(eventType, listener);
        };
        BeanStub2.prototype.removeEventListener = function(eventType, listener) {
          if (this.localEventService) {
            this.localEventService.removeEventListener(eventType, listener);
          }
        };
        BeanStub2.prototype.dispatchEventAsync = function(event) {
          var _this = this;
          window.setTimeout(function() {
            return _this.dispatchEvent(event);
          }, 0);
        };
        BeanStub2.prototype.dispatchEvent = function(event) {
          if (this.localEventService) {
            this.localEventService.dispatchEvent(event);
          }
        };
        BeanStub2.prototype.addManagedListener = function(object, event, listener) {
          var _this = this;
          if (this.destroyed) {
            return;
          }
          if (object instanceof HTMLElement) {
            addSafePassiveEventListener(this.getFrameworkOverrides(), object, event, listener);
          } else {
            object.addEventListener(event, listener);
          }
          var destroyFunc = function() {
            object.removeEventListener(event, listener);
            _this.destroyFunctions = _this.destroyFunctions.filter(function(fn) {
              return fn !== destroyFunc;
            });
            return null;
          };
          this.destroyFunctions.push(destroyFunc);
          return destroyFunc;
        };
        BeanStub2.prototype.addDestroyFunc = function(func) {
          if (this.isAlive()) {
            this.destroyFunctions.push(func);
          } else {
            func();
          }
        };
        BeanStub2.prototype.createManagedBean = function(bean, context) {
          var res = this.createBean(bean, context);
          this.addDestroyFunc(this.destroyBean.bind(this, bean, context));
          return res;
        };
        BeanStub2.prototype.createBean = function(bean, context, afterPreCreateCallback) {
          return (context || this.getContext()).createBean(bean, afterPreCreateCallback);
        };
        BeanStub2.prototype.destroyBean = function(bean, context) {
          return (context || this.getContext()).destroyBean(bean);
        };
        BeanStub2.prototype.destroyBeans = function(beans, context) {
          var _this = this;
          if (beans) {
            forEach(beans, function(bean) {
              return _this.destroyBean(bean, context);
            });
          }
          return [];
        };
        BeanStub2.EVENT_DESTROYED = "destroyed";
        __decorate$3([
          Autowired("frameworkOverrides")
        ], BeanStub2.prototype, "frameworkOverrides", void 0);
        __decorate$3([
          Autowired("context")
        ], BeanStub2.prototype, "context", void 0);
        __decorate$3([
          Autowired("eventService")
        ], BeanStub2.prototype, "eventService", void 0);
        __decorate$3([
          Autowired("gridOptionsWrapper")
        ], BeanStub2.prototype, "gridOptionsWrapper", void 0);
        __decorate$3([
          PreDestroy
        ], BeanStub2.prototype, "destroy", null);
        return BeanStub2;
      }()
    );
    var __extends3 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$4 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __param$1 = function(paramIndex, decorator) {
      return function(target, key) {
        decorator(target, key, paramIndex);
      };
    };
    var ColumnFactory = (
      /** @class */
      function(_super) {
        __extends3(ColumnFactory2, _super);
        function ColumnFactory2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        ColumnFactory2.prototype.setBeans = function(loggerFactory) {
          this.logger = loggerFactory.create("ColumnFactory");
        };
        ColumnFactory2.prototype.createColumnTree = function(defs, primaryColumns, existingTree) {
          var columnKeyCreator = new ColumnKeyCreator();
          var _a2 = this.extractExistingTreeData(existingTree), existingCols = _a2.existingCols, existingGroups = _a2.existingGroups, existingColKeys = _a2.existingColKeys;
          columnKeyCreator.addExistingKeys(existingColKeys);
          var unbalancedTree = this.recursivelyCreateColumns(defs, 0, primaryColumns, existingCols, columnKeyCreator, existingGroups);
          var treeDept = this.findMaxDept(unbalancedTree, 0);
          this.logger.log("Number of levels for grouped columns is " + treeDept);
          var columnTree = this.balanceColumnTree(unbalancedTree, 0, treeDept, columnKeyCreator);
          var deptFirstCallback = function(child, parent) {
            if (child instanceof ProvidedColumnGroup) {
              child.setupExpandable();
            }
            child.setOriginalParent(parent);
          };
          this.columnUtils.depthFirstOriginalTreeSearch(null, columnTree, deptFirstCallback);
          return {
            columnTree,
            treeDept
          };
        };
        ColumnFactory2.prototype.extractExistingTreeData = function(existingTree) {
          var existingCols = [];
          var existingGroups = [];
          var existingColKeys = [];
          if (existingTree) {
            this.columnUtils.depthFirstOriginalTreeSearch(null, existingTree, function(item) {
              if (item instanceof ProvidedColumnGroup) {
                var group = item;
                existingGroups.push(group);
              } else {
                var col = item;
                existingColKeys.push(col.getId());
                existingCols.push(col);
              }
            });
          }
          return { existingCols, existingGroups, existingColKeys };
        };
        ColumnFactory2.prototype.createForAutoGroups = function(autoGroupCols, gridBalancedTree) {
          var _this = this;
          var autoColBalancedTree = [];
          autoGroupCols.forEach(function(col) {
            var fakeTreeItem = _this.createAutoGroupTreeItem(gridBalancedTree, col);
            autoColBalancedTree.push(fakeTreeItem);
          });
          return autoColBalancedTree;
        };
        ColumnFactory2.prototype.createAutoGroupTreeItem = function(balancedColumnTree, column) {
          var dept = this.findDepth(balancedColumnTree);
          var nextChild = column;
          for (var i = dept - 1; i >= 0; i--) {
            var autoGroup = new ProvidedColumnGroup(null, "FAKE_PATH_" + column.getId() + "}_" + i, true, i);
            this.context.createBean(autoGroup);
            autoGroup.setChildren([nextChild]);
            nextChild.setOriginalParent(autoGroup);
            nextChild = autoGroup;
          }
          return nextChild;
        };
        ColumnFactory2.prototype.findDepth = function(balancedColumnTree) {
          var dept = 0;
          var pointer = balancedColumnTree;
          while (pointer && pointer[0] && pointer[0] instanceof ProvidedColumnGroup) {
            dept++;
            pointer = pointer[0].getChildren();
          }
          return dept;
        };
        ColumnFactory2.prototype.balanceColumnTree = function(unbalancedTree, currentDept, columnDept, columnKeyCreator) {
          var result = [];
          for (var i = 0; i < unbalancedTree.length; i++) {
            var child = unbalancedTree[i];
            if (child instanceof ProvidedColumnGroup) {
              var originalGroup = child;
              var newChildren = this.balanceColumnTree(originalGroup.getChildren(), currentDept + 1, columnDept, columnKeyCreator);
              originalGroup.setChildren(newChildren);
              result.push(originalGroup);
            } else {
              var firstPaddedGroup = void 0;
              var currentPaddedGroup = void 0;
              for (var j = columnDept - 1; j >= currentDept; j--) {
                var newColId = columnKeyCreator.getUniqueKey(null, null);
                var colGroupDefMerged = this.createMergedColGroupDef(null);
                var paddedGroup = new ProvidedColumnGroup(colGroupDefMerged, newColId, true, currentDept);
                this.context.createBean(paddedGroup);
                if (currentPaddedGroup) {
                  currentPaddedGroup.setChildren([paddedGroup]);
                }
                currentPaddedGroup = paddedGroup;
                if (!firstPaddedGroup) {
                  firstPaddedGroup = currentPaddedGroup;
                }
              }
              if (firstPaddedGroup && currentPaddedGroup) {
                result.push(firstPaddedGroup);
                var hasGroups = unbalancedTree.some(function(leaf) {
                  return leaf instanceof ProvidedColumnGroup;
                });
                if (hasGroups) {
                  currentPaddedGroup.setChildren([child]);
                  continue;
                } else {
                  currentPaddedGroup.setChildren(unbalancedTree);
                  break;
                }
              }
              result.push(child);
            }
          }
          return result;
        };
        ColumnFactory2.prototype.findMaxDept = function(treeChildren, dept) {
          var maxDeptThisLevel = dept;
          for (var i = 0; i < treeChildren.length; i++) {
            var abstractColumn = treeChildren[i];
            if (abstractColumn instanceof ProvidedColumnGroup) {
              var originalGroup = abstractColumn;
              var newDept = this.findMaxDept(originalGroup.getChildren(), dept + 1);
              if (maxDeptThisLevel < newDept) {
                maxDeptThisLevel = newDept;
              }
            }
          }
          return maxDeptThisLevel;
        };
        ColumnFactory2.prototype.recursivelyCreateColumns = function(defs, level, primaryColumns, existingColsCopy, columnKeyCreator, existingGroups) {
          var _this = this;
          var result = [];
          if (!defs) {
            return result;
          }
          defs.forEach(function(def) {
            var newGroupOrColumn;
            if (_this.isColumnGroup(def)) {
              newGroupOrColumn = _this.createColumnGroup(primaryColumns, def, level, existingColsCopy, columnKeyCreator, existingGroups);
            } else {
              newGroupOrColumn = _this.createColumn(primaryColumns, def, existingColsCopy, columnKeyCreator);
            }
            result.push(newGroupOrColumn);
          });
          return result;
        };
        ColumnFactory2.prototype.createColumnGroup = function(primaryColumns, colGroupDef, level, existingColumns, columnKeyCreator, existingGroups) {
          var colGroupDefMerged = this.createMergedColGroupDef(colGroupDef);
          var groupId = columnKeyCreator.getUniqueKey(colGroupDefMerged.groupId || null, null);
          var originalGroup = new ProvidedColumnGroup(colGroupDefMerged, groupId, false, level);
          this.context.createBean(originalGroup);
          var existingGroup = this.findExistingGroup(colGroupDef, existingGroups);
          if (existingGroup && existingGroup.isExpanded()) {
            originalGroup.setExpanded(true);
          }
          var children = this.recursivelyCreateColumns(colGroupDefMerged.children, level + 1, primaryColumns, existingColumns, columnKeyCreator, existingGroups);
          originalGroup.setChildren(children);
          return originalGroup;
        };
        ColumnFactory2.prototype.createMergedColGroupDef = function(colGroupDef) {
          var colGroupDefMerged = {};
          assign(colGroupDefMerged, this.gridOptionsWrapper.getDefaultColGroupDef());
          assign(colGroupDefMerged, colGroupDef);
          this.checkForDeprecatedItems(colGroupDefMerged);
          return colGroupDefMerged;
        };
        ColumnFactory2.prototype.createColumn = function(primaryColumns, colDef, existingColsCopy, columnKeyCreator) {
          var colDefMerged = this.mergeColDefs(colDef);
          this.checkForDeprecatedItems(colDefMerged);
          var column = this.findExistingColumn(colDef, existingColsCopy);
          if (!column) {
            var colId = columnKeyCreator.getUniqueKey(colDefMerged.colId, colDefMerged.field);
            column = new Column(colDefMerged, colDef, colId, primaryColumns);
            this.context.createBean(column);
          } else {
            column.setColDef(colDefMerged, colDef);
            this.applyColumnState(column, colDefMerged);
          }
          return column;
        };
        ColumnFactory2.prototype.applyColumnState = function(column, colDef) {
          var flex = attrToNumber(colDef.flex);
          if (flex !== void 0) {
            column.setFlex(flex);
          }
          var noFlexThisCol = column.getFlex() <= 0;
          if (noFlexThisCol) {
            var width = attrToNumber(colDef.width);
            if (width != null) {
              column.setActualWidth(width);
            } else {
              var widthBeforeUpdate = column.getActualWidth();
              column.setActualWidth(widthBeforeUpdate);
            }
          }
          if (colDef.sort !== void 0) {
            if (colDef.sort == Constants.SORT_ASC || colDef.sort == Constants.SORT_DESC) {
              column.setSort(colDef.sort);
            } else {
              column.setSort(void 0);
            }
          }
          var sortIndex = attrToNumber(colDef.sortIndex);
          if (sortIndex !== void 0) {
            column.setSortIndex(sortIndex);
          }
          var hide = attrToBoolean(colDef.hide);
          if (hide !== void 0) {
            column.setVisible(!hide);
          }
          if (colDef.pinned !== void 0) {
            column.setPinned(colDef.pinned);
          }
        };
        ColumnFactory2.prototype.findExistingColumn = function(newColDef, existingColsCopy) {
          var res = find(existingColsCopy, function(existingCol) {
            var existingColDef = existingCol.getUserProvidedColDef();
            if (!existingColDef) {
              return false;
            }
            var newHasId = newColDef.colId != null;
            var newHasField = newColDef.field != null;
            if (newHasId) {
              return existingCol.getId() === newColDef.colId;
            }
            if (newHasField) {
              return existingColDef.field === newColDef.field;
            }
            if (existingColDef === newColDef) {
              return true;
            }
            return false;
          });
          if (existingColsCopy && res) {
            removeFromArray(existingColsCopy, res);
          }
          return res;
        };
        ColumnFactory2.prototype.findExistingGroup = function(newGroupDef, existingGroups) {
          var res = find(existingGroups, function(existingGroup) {
            var existingDef = existingGroup.getColGroupDef();
            if (!existingDef) {
              return false;
            }
            var newHasId = newGroupDef.groupId != null;
            if (newHasId) {
              return existingGroup.getId() === newGroupDef.groupId;
            }
            return false;
          });
          if (res) {
            removeFromArray(existingGroups, res);
          }
          return res;
        };
        ColumnFactory2.prototype.mergeColDefs = function(colDef) {
          var colDefMerged = {};
          var defaultColDef = this.gridOptionsWrapper.getDefaultColDef();
          mergeDeep(colDefMerged, defaultColDef, false, true);
          var columnType = colDef.type;
          if (!columnType) {
            columnType = defaultColDef && defaultColDef.type;
          }
          if (columnType) {
            this.assignColumnTypes(columnType, colDefMerged);
          }
          mergeDeep(colDefMerged, colDef, false, true);
          return colDefMerged;
        };
        ColumnFactory2.prototype.assignColumnTypes = function(type, colDefMerged) {
          var typeKeys = [];
          if (type instanceof Array) {
            var invalidArray = type.some(function(a) {
              return typeof a !== "string";
            });
            if (invalidArray) {
              console.warn("ag-grid: if colDef.type is supplied an array it should be of type 'string[]'");
            } else {
              typeKeys = type;
            }
          } else if (typeof type === "string") {
            typeKeys = type.split(",");
          } else {
            console.warn("ag-grid: colDef.type should be of type 'string' | 'string[]'");
            return;
          }
          var allColumnTypes = assign({}, DefaultColumnTypes);
          var userTypes = this.gridOptionsWrapper.getColumnTypes() || {};
          iterateObject(userTypes, function(key, value) {
            if (key in allColumnTypes) {
              console.warn("AG Grid: the column type '" + key + "' is a default column type and cannot be overridden.");
            } else {
              allColumnTypes[key] = value;
            }
          });
          typeKeys.forEach(function(t) {
            var typeColDef = allColumnTypes[t.trim()];
            if (typeColDef) {
              mergeDeep(colDefMerged, typeColDef, false, true);
            } else {
              console.warn("ag-grid: colDef.type '" + t + "' does not correspond to defined gridOptions.columnTypes");
            }
          });
        };
        ColumnFactory2.prototype.checkForDeprecatedItems = function(colDef) {
          if (colDef) {
            var colDefNoType = colDef;
            if (colDefNoType.group !== void 0) {
              console.warn("ag-grid: colDef.group is invalid, please check documentation on how to do grouping as it changed in version 3");
            }
            if (colDefNoType.headerGroup !== void 0) {
              console.warn("ag-grid: colDef.headerGroup is invalid, please check documentation on how to do grouping as it changed in version 3");
            }
            if (colDefNoType.headerGroupShow !== void 0) {
              console.warn("ag-grid: colDef.headerGroupShow is invalid, should be columnGroupShow, please check documentation on how to do grouping as it changed in version 3");
            }
            if (colDefNoType.suppressRowGroup !== void 0) {
              console.warn("ag-grid: colDef.suppressRowGroup is deprecated, please use colDef.type instead");
            }
            if (colDefNoType.suppressAggregation !== void 0) {
              console.warn("ag-grid: colDef.suppressAggregation is deprecated, please use colDef.type instead");
            }
            if (colDefNoType.suppressRowGroup || colDefNoType.suppressAggregation) {
              console.warn("ag-grid: colDef.suppressAggregation and colDef.suppressRowGroup are deprecated, use allowRowGroup, allowPivot and allowValue instead");
            }
            if (colDefNoType.displayName) {
              console.warn("ag-grid: Found displayName " + colDefNoType.displayName + ", please use headerName instead, displayName is deprecated.");
              colDefNoType.headerName = colDefNoType.displayName;
            }
          }
        };
        ColumnFactory2.prototype.isColumnGroup = function(abstractColDef) {
          return abstractColDef.children !== void 0;
        };
        __decorate$4([
          Autowired("columnUtils")
        ], ColumnFactory2.prototype, "columnUtils", void 0);
        __decorate$4([
          __param$1(0, Qualifier("loggerFactory"))
        ], ColumnFactory2.prototype, "setBeans", null);
        ColumnFactory2 = __decorate$4([
          Bean3("columnFactory")
        ], ColumnFactory2);
        return ColumnFactory2;
      }(BeanStub)
    );
    var Events = (
      /** @class */
      function() {
        function Events2() {
        }
        Events2.EVENT_COLUMN_EVERYTHING_CHANGED = "columnEverythingChanged";
        Events2.EVENT_NEW_COLUMNS_LOADED = "newColumnsLoaded";
        Events2.EVENT_COLUMN_PIVOT_MODE_CHANGED = "columnPivotModeChanged";
        Events2.EVENT_COLUMN_ROW_GROUP_CHANGED = "columnRowGroupChanged";
        Events2.EVENT_EXPAND_COLLAPSE_ALL = "expandOrCollapseAll";
        Events2.EVENT_COLUMN_PIVOT_CHANGED = "columnPivotChanged";
        Events2.EVENT_GRID_COLUMNS_CHANGED = "gridColumnsChanged";
        Events2.EVENT_COLUMN_VALUE_CHANGED = "columnValueChanged";
        Events2.EVENT_COLUMN_MOVED = "columnMoved";
        Events2.EVENT_COLUMN_VISIBLE = "columnVisible";
        Events2.EVENT_COLUMN_PINNED = "columnPinned";
        Events2.EVENT_COLUMN_GROUP_OPENED = "columnGroupOpened";
        Events2.EVENT_COLUMN_RESIZED = "columnResized";
        Events2.EVENT_DISPLAYED_COLUMNS_CHANGED = "displayedColumnsChanged";
        Events2.EVENT_VIRTUAL_COLUMNS_CHANGED = "virtualColumnsChanged";
        Events2.EVENT_ASYNC_TRANSACTIONS_FLUSHED = "asyncTransactionsFlushed";
        Events2.EVENT_ROW_GROUP_OPENED = "rowGroupOpened";
        Events2.EVENT_ROW_DATA_CHANGED = "rowDataChanged";
        Events2.EVENT_ROW_DATA_UPDATED = "rowDataUpdated";
        Events2.EVENT_PINNED_ROW_DATA_CHANGED = "pinnedRowDataChanged";
        Events2.EVENT_RANGE_SELECTION_CHANGED = "rangeSelectionChanged";
        Events2.EVENT_CHART_CREATED = "chartCreated";
        Events2.EVENT_CHART_RANGE_SELECTION_CHANGED = "chartRangeSelectionChanged";
        Events2.EVENT_CHART_OPTIONS_CHANGED = "chartOptionsChanged";
        Events2.EVENT_CHART_DESTROYED = "chartDestroyed";
        Events2.EVENT_TOOL_PANEL_VISIBLE_CHANGED = "toolPanelVisibleChanged";
        Events2.EVENT_COLUMN_PANEL_ITEM_DRAG_START = "columnPanelItemDragStart";
        Events2.EVENT_COLUMN_PANEL_ITEM_DRAG_END = "columnPanelItemDragEnd";
        Events2.EVENT_MODEL_UPDATED = "modelUpdated";
        Events2.EVENT_PASTE_START = "pasteStart";
        Events2.EVENT_PASTE_END = "pasteEnd";
        Events2.EVENT_FILL_START = "fillStart";
        Events2.EVENT_FILL_END = "fillEnd";
        Events2.EVENT_CELL_CLICKED = "cellClicked";
        Events2.EVENT_CELL_DOUBLE_CLICKED = "cellDoubleClicked";
        Events2.EVENT_CELL_MOUSE_DOWN = "cellMouseDown";
        Events2.EVENT_CELL_CONTEXT_MENU = "cellContextMenu";
        Events2.EVENT_CELL_VALUE_CHANGED = "cellValueChanged";
        Events2.EVENT_ROW_VALUE_CHANGED = "rowValueChanged";
        Events2.EVENT_CELL_FOCUSED = "cellFocused";
        Events2.EVENT_ROW_SELECTED = "rowSelected";
        Events2.EVENT_SELECTION_CHANGED = "selectionChanged";
        Events2.EVENT_CELL_KEY_DOWN = "cellKeyDown";
        Events2.EVENT_CELL_KEY_PRESS = "cellKeyPress";
        Events2.EVENT_CELL_MOUSE_OVER = "cellMouseOver";
        Events2.EVENT_CELL_MOUSE_OUT = "cellMouseOut";
        Events2.EVENT_FILTER_CHANGED = "filterChanged";
        Events2.EVENT_FILTER_MODIFIED = "filterModified";
        Events2.EVENT_FILTER_OPENED = "filterOpened";
        Events2.EVENT_SORT_CHANGED = "sortChanged";
        Events2.EVENT_VIRTUAL_ROW_REMOVED = "virtualRowRemoved";
        Events2.EVENT_ROW_CLICKED = "rowClicked";
        Events2.EVENT_ROW_DOUBLE_CLICKED = "rowDoubleClicked";
        Events2.EVENT_GRID_READY = "gridReady";
        Events2.EVENT_GRID_SIZE_CHANGED = "gridSizeChanged";
        Events2.EVENT_VIEWPORT_CHANGED = "viewportChanged";
        Events2.EVENT_SCROLLBAR_WIDTH_CHANGED = "scrollbarWidthChanged";
        Events2.EVENT_FIRST_DATA_RENDERED = "firstDataRendered";
        Events2.EVENT_DRAG_STARTED = "dragStarted";
        Events2.EVENT_DRAG_STOPPED = "dragStopped";
        Events2.EVENT_CHECKBOX_CHANGED = "checkboxChanged";
        Events2.EVENT_ROW_EDITING_STARTED = "rowEditingStarted";
        Events2.EVENT_ROW_EDITING_STOPPED = "rowEditingStopped";
        Events2.EVENT_CELL_EDITING_STARTED = "cellEditingStarted";
        Events2.EVENT_CELL_EDITING_STOPPED = "cellEditingStopped";
        Events2.EVENT_BODY_SCROLL = "bodyScroll";
        Events2.EVENT_BODY_SCROLL_END = "bodyScrollEnd";
        Events2.EVENT_HEIGHT_SCALE_CHANGED = "heightScaleChanged";
        Events2.EVENT_PAGINATION_CHANGED = "paginationChanged";
        Events2.EVENT_COMPONENT_STATE_CHANGED = "componentStateChanged";
        Events2.EVENT_BODY_HEIGHT_CHANGED = "bodyHeightChanged";
        Events2.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED = "displayedColumnsWidthChanged";
        Events2.EVENT_SCROLL_VISIBILITY_CHANGED = "scrollVisibilityChanged";
        Events2.EVENT_COLUMN_HOVER_CHANGED = "columnHoverChanged";
        Events2.EVENT_FLASH_CELLS = "flashCells";
        Events2.EVENT_PAGINATION_PIXEL_OFFSET_CHANGED = "paginationPixelOffsetChanged";
        Events2.EVENT_DISPLAYED_ROWS_CHANGED = "displayedRowsChanged";
        Events2.EVENT_LEFT_PINNED_WIDTH_CHANGED = "leftPinnedWidthChanged";
        Events2.EVENT_RIGHT_PINNED_WIDTH_CHANGED = "rightPinnedWidthChanged";
        Events2.EVENT_ROW_CONTAINER_HEIGHT_CHANGED = "rowContainerHeightChanged";
        Events2.EVENT_ROW_DRAG_ENTER = "rowDragEnter";
        Events2.EVENT_ROW_DRAG_MOVE = "rowDragMove";
        Events2.EVENT_ROW_DRAG_LEAVE = "rowDragLeave";
        Events2.EVENT_ROW_DRAG_END = "rowDragEnd";
        Events2.EVENT_POPUP_TO_FRONT = "popupToFront";
        Events2.EVENT_COLUMN_ROW_GROUP_CHANGE_REQUEST = "columnRowGroupChangeRequest";
        Events2.EVENT_COLUMN_PIVOT_CHANGE_REQUEST = "columnPivotChangeRequest";
        Events2.EVENT_COLUMN_VALUE_CHANGE_REQUEST = "columnValueChangeRequest";
        Events2.EVENT_COLUMN_AGG_FUNC_CHANGE_REQUEST = "columnAggFuncChangeRequest";
        Events2.EVENT_KEYBOARD_FOCUS = "keyboardFocus";
        Events2.EVENT_MOUSE_FOCUS = "mouseFocus";
        Events2.EVENT_STORE_UPDATED = "storeUpdated";
        return Events2;
      }()
    );
    var GroupInstanceIdCreator = (
      /** @class */
      function() {
        function GroupInstanceIdCreator2() {
          this.existingIds = {};
        }
        GroupInstanceIdCreator2.prototype.getInstanceIdForKey = function(key) {
          var lastResult = this.existingIds[key];
          var result;
          if (typeof lastResult !== "number") {
            result = 0;
          } else {
            result = lastResult + 1;
          }
          this.existingIds[key] = result;
          return result;
        };
        return GroupInstanceIdCreator2;
      }()
    );
    var reUnescapedHtml = /[&<>"']/g;
    var HTML_ESCAPES = {
      "&": "&amp;",
      "<": "&lt;",
      ">": "&gt;",
      '"': "&quot;",
      "'": "&#39;"
    };
    function utf8_encode(s) {
      var stringFromCharCode = String.fromCharCode;
      function ucs2decode(string) {
        var output = [];
        if (!string) {
          return [];
        }
        var len = string.length;
        var counter = 0;
        var value;
        var extra;
        while (counter < len) {
          value = string.charCodeAt(counter++);
          if (value >= 55296 && value <= 56319 && counter < len) {
            extra = string.charCodeAt(counter++);
            if ((extra & 64512) == 56320) {
              output.push(((value & 1023) << 10) + (extra & 1023) + 65536);
            } else {
              output.push(value);
              counter--;
            }
          } else {
            output.push(value);
          }
        }
        return output;
      }
      function checkScalarValue(point) {
        if (point >= 55296 && point <= 57343) {
          throw Error("Lone surrogate U+" + point.toString(16).toUpperCase() + " is not a scalar value");
        }
      }
      function createByte(point, shift) {
        return stringFromCharCode(point >> shift & 63 | 128);
      }
      function encodeCodePoint(point) {
        if (point >= 0 && point <= 31 && point !== 10) {
          var convertedCode = point.toString(16).toUpperCase();
          var paddedCode = padStart(convertedCode, 4, "0");
          return "_x" + paddedCode + "_";
        }
        if ((point & 4294967168) == 0) {
          return stringFromCharCode(point);
        }
        var symbol = "";
        if ((point & 4294965248) == 0) {
          symbol = stringFromCharCode(point >> 6 & 31 | 192);
        } else if ((point & 4294901760) == 0) {
          checkScalarValue(point);
          symbol = stringFromCharCode(point >> 12 & 15 | 224);
          symbol += createByte(point, 6);
        } else if ((point & 4292870144) == 0) {
          symbol = stringFromCharCode(point >> 18 & 7 | 240);
          symbol += createByte(point, 12);
          symbol += createByte(point, 6);
        }
        symbol += stringFromCharCode(point & 63 | 128);
        return symbol;
      }
      var codePoints = ucs2decode(s);
      var length = codePoints.length;
      var index = -1;
      var codePoint;
      var byteString = "";
      while (++index < length) {
        codePoint = codePoints[index];
        byteString += encodeCodePoint(codePoint);
      }
      return byteString;
    }
    function stringRepeat(str, len) {
      len = Math.floor(len);
      if (str.length === 0 || len === 0) {
        return "";
      }
      var maxCount = str.length * len;
      len = Math.floor(Math.log(len) / Math.log(2));
      while (len) {
        str += str;
        len--;
      }
      str += str.substring(0, maxCount - str.length);
      return str;
    }
    function padStart(str, totalLength, padStr) {
      if (str.length > totalLength) {
        return str;
      }
      totalLength -= str.length;
      if (totalLength > padStr.length) {
        padStr += stringRepeat(padStr, totalLength / padStr.length);
      }
      return padStr.slice(0, totalLength) + str;
    }
    function camelCaseToHyphen(str) {
      if (str === null || str === void 0) {
        return null;
      }
      return str.replace(/([A-Z])/g, function(g) {
        return "-" + g[0].toLowerCase();
      });
    }
    function hyphenToCamelCase(str) {
      if (str === null || str === void 0) {
        return null;
      }
      return str.replace(/-([a-z])/g, function(g) {
        return g[1].toUpperCase();
      });
    }
    function capitalise(str) {
      return str[0].toUpperCase() + str.substr(1).toLowerCase();
    }
    function escapeString(toEscape) {
      return toEscape == null ? null : toEscape.toString().toString().replace(reUnescapedHtml, function(chr) {
        return HTML_ESCAPES[chr];
      });
    }
    function camelCaseToHumanText(camelCase) {
      if (!camelCase || camelCase == null) {
        return null;
      }
      var rex = /([A-Z])([A-Z])([a-z])|([a-z])([A-Z])/g;
      var words = camelCase.replace(rex, "$1$4 $2$3$5").replace(".", " ").split(" ");
      return words.map(function(word) {
        return word.substring(0, 1).toUpperCase() + (word.length > 1 ? word.substring(1, word.length) : "");
      }).join(" ");
    }
    function startsWith(str, matchStart) {
      if (str === matchStart) {
        return true;
      }
      return str != null && str.slice(0, matchStart.length) === matchStart;
    }
    var StringUtils = Object.freeze({
      __proto__: null,
      utf8_encode,
      stringRepeat,
      padStart,
      camelCaseToHyphen,
      hyphenToCamelCase,
      capitalise,
      escapeString,
      camelCaseToHumanText,
      startsWith
    });
    function convertToMap(arr) {
      var map2 = /* @__PURE__ */ new Map();
      arr.forEach(function(pair) {
        return map2.set(pair[0], pair[1]);
      });
      return map2;
    }
    function mapById(arr, callback) {
      var map2 = /* @__PURE__ */ new Map();
      arr.forEach(function(item) {
        return map2.set(callback(item), item);
      });
      return map2;
    }
    function keys(map2) {
      var arr = [];
      map2.forEach(function(_2, key) {
        return arr.push(key);
      });
      return arr;
    }
    var MapUtils = Object.freeze({
      __proto__: null,
      convertToMap,
      mapById,
      keys
    });
    var __extends$1 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$5 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __param$2 = function(paramIndex, decorator) {
      return function(target, key) {
        decorator(target, key, paramIndex);
      };
    };
    var __spreadArrays = function() {
      for (var s = 0, i = 0, il = arguments.length; i < il; i++)
        s += arguments[i].length;
      for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
          r[k] = a[j];
      return r;
    };
    var ColumnModel = (
      /** @class */
      function(_super) {
        __extends$1(ColumnModel2, _super);
        function ColumnModel2() {
          var _this = _super !== null && _super.apply(this, arguments) || this;
          _this.primaryHeaderRowCount = 0;
          _this.secondaryHeaderRowCount = 0;
          _this.secondaryColumnsPresent = false;
          _this.gridHeaderRowCount = 0;
          _this.displayedColumnsLeft = [];
          _this.displayedColumnsRight = [];
          _this.displayedColumnsCenter = [];
          _this.displayedColumns = [];
          _this.displayedColumnsAndGroupsMap = {};
          _this.viewportColumns = [];
          _this.viewportColumnsCenter = [];
          _this.autoHeightActiveAtLeastOnce = false;
          _this.rowGroupColumns = [];
          _this.valueColumns = [];
          _this.pivotColumns = [];
          _this.ready = false;
          _this.autoGroupsNeedBuilding = false;
          _this.forceRecreateAutoGroups = false;
          _this.pivotMode = false;
          _this.bodyWidth = 0;
          _this.leftWidth = 0;
          _this.rightWidth = 0;
          _this.bodyWidthDirty = true;
          _this.colDefVersion = 0;
          _this.flexColsCalculatedAtLestOnce = false;
          return _this;
        }
        ColumnModel2.prototype.init = function() {
          this.suppressColumnVirtualisation = this.gridOptionsWrapper.isSuppressColumnVirtualisation();
          var pivotMode = this.gridOptionsWrapper.isPivotMode();
          if (this.isPivotSettingAllowed(pivotMode)) {
            this.pivotMode = pivotMode;
          }
          this.usingTreeData = this.gridOptionsWrapper.isTreeData();
          this.addManagedListener(this.gridOptionsWrapper, "autoGroupColumnDef", this.onAutoGroupColumnDefChanged.bind(this));
        };
        ColumnModel2.prototype.onAutoGroupColumnDefChanged = function() {
          this.autoGroupsNeedBuilding = true;
          this.forceRecreateAutoGroups = true;
          this.updateGridColumns();
          this.updateDisplayedColumns("gridOptionsChanged");
        };
        ColumnModel2.prototype.getColDefVersion = function() {
          return this.colDefVersion;
        };
        ColumnModel2.prototype.setColumnDefs = function(columnDefs, source) {
          var _this = this;
          if (source === void 0) {
            source = "api";
          }
          var colsPreviouslyExisted = !!this.columnDefs;
          this.colDefVersion++;
          var raiseEventsFunc = this.compareColumnStatesAndRaiseEvents(source);
          this.columnDefs = columnDefs;
          this.valueCache.expire();
          this.autoGroupsNeedBuilding = true;
          var oldPrimaryColumns = this.primaryColumns;
          var oldPrimaryTree = this.primaryColumnTree;
          var balancedTreeResult = this.columnFactory.createColumnTree(columnDefs, true, oldPrimaryTree);
          this.primaryColumnTree = balancedTreeResult.columnTree;
          this.primaryHeaderRowCount = balancedTreeResult.treeDept + 1;
          this.primaryColumns = this.getColumnsFromTree(this.primaryColumnTree);
          this.primaryColumnsMap = {};
          this.primaryColumns.forEach(function(col) {
            return _this.primaryColumnsMap[col.getId()] = col;
          });
          this.extractRowGroupColumns(source, oldPrimaryColumns);
          this.extractPivotColumns(source, oldPrimaryColumns);
          this.extractValueColumns(source, oldPrimaryColumns);
          this.ready = true;
          this.updateGridColumns();
          if (colsPreviouslyExisted && this.gridColsArePrimary && !this.gridOptionsWrapper.isMaintainColumnOrder()) {
            this.orderGridColumnsLikePrimary();
          }
          this.updateDisplayedColumns(source);
          this.checkViewportColumns();
          this.dispatchEverythingChanged(source);
          raiseEventsFunc();
          this.dispatchNewColumnsLoaded();
        };
        ColumnModel2.prototype.dispatchNewColumnsLoaded = function() {
          var newColumnsLoadedEvent = {
            type: Events.EVENT_NEW_COLUMNS_LOADED,
            api: this.gridApi,
            columnApi: this.columnApi
          };
          this.eventService.dispatchEvent(newColumnsLoadedEvent);
        };
        ColumnModel2.prototype.dispatchEverythingChanged = function(source) {
          if (source === void 0) {
            source = "api";
          }
          var eventEverythingChanged = {
            type: Events.EVENT_COLUMN_EVERYTHING_CHANGED,
            api: this.gridApi,
            columnApi: this.columnApi,
            source
          };
          this.eventService.dispatchEvent(eventEverythingChanged);
        };
        ColumnModel2.prototype.orderGridColumnsLikePrimary = function() {
          var _this = this;
          var primaryColumns = this.primaryColumns;
          if (!primaryColumns) {
            return;
          }
          this.gridColumns.sort(function(colA, colB) {
            var primaryIndexA = primaryColumns.indexOf(colA);
            var primaryIndexB = primaryColumns.indexOf(colB);
            var indexAPresent = primaryIndexA >= 0;
            var indexBPresent = primaryIndexB >= 0;
            if (indexAPresent && indexBPresent) {
              return primaryIndexA - primaryIndexB;
            }
            if (indexAPresent) {
              return 1;
            }
            if (indexBPresent) {
              return -1;
            }
            var gridIndexA = _this.gridColumns.indexOf(colA);
            var gridIndexB = _this.gridColumns.indexOf(colB);
            return gridIndexA - gridIndexB;
          });
        };
        ColumnModel2.prototype.getAllDisplayedAutoHeightCols = function() {
          return this.displayedAutoHeightCols;
        };
        ColumnModel2.prototype.setViewport = function() {
          if (this.gridOptionsWrapper.isEnableRtl()) {
            this.viewportLeft = this.bodyWidth - this.scrollPosition - this.scrollWidth;
            this.viewportRight = this.bodyWidth - this.scrollPosition;
          } else {
            this.viewportLeft = this.scrollPosition;
            this.viewportRight = this.scrollWidth + this.scrollPosition;
          }
        };
        ColumnModel2.prototype.getDisplayedColumnsStartingAt = function(column) {
          var currentColumn = column;
          var columns = [];
          while (currentColumn != null) {
            columns.push(currentColumn);
            currentColumn = this.getDisplayedColAfter(currentColumn);
          }
          return columns;
        };
        ColumnModel2.prototype.checkViewportColumns = function() {
          if (this.displayedColumnsCenter == null) {
            return;
          }
          var hashBefore = this.viewportColumns.map(function(column) {
            return column.getId();
          }).join("#");
          this.extractViewport();
          var hashAfter = this.viewportColumns.map(function(column) {
            return column.getId();
          }).join("#");
          if (hashBefore !== hashAfter) {
            var event_1 = {
              type: Events.EVENT_VIRTUAL_COLUMNS_CHANGED,
              api: this.gridApi,
              columnApi: this.columnApi
            };
            this.eventService.dispatchEvent(event_1);
          }
        };
        ColumnModel2.prototype.setViewportPosition = function(scrollWidth, scrollPosition) {
          if (scrollWidth !== this.scrollWidth || scrollPosition !== this.scrollPosition || this.bodyWidthDirty) {
            this.scrollWidth = scrollWidth;
            this.scrollPosition = scrollPosition;
            this.bodyWidthDirty = true;
            this.setViewport();
            if (this.ready) {
              this.checkViewportColumns();
            }
          }
        };
        ColumnModel2.prototype.isPivotMode = function() {
          return this.pivotMode;
        };
        ColumnModel2.prototype.isPivotSettingAllowed = function(pivot) {
          if (pivot && this.gridOptionsWrapper.isTreeData()) {
            console.warn("AG Grid: Pivot mode not available in conjunction Tree Data i.e. 'gridOptions.treeData: true'");
            return false;
          }
          return true;
        };
        ColumnModel2.prototype.setPivotMode = function(pivotMode, source) {
          if (source === void 0) {
            source = "api";
          }
          if (pivotMode === this.pivotMode || !this.isPivotSettingAllowed(this.pivotMode)) {
            return;
          }
          this.pivotMode = pivotMode;
          this.autoGroupsNeedBuilding = true;
          this.updateGridColumns();
          this.updateDisplayedColumns(source);
          var event = {
            type: Events.EVENT_COLUMN_PIVOT_MODE_CHANGED,
            api: this.gridApi,
            columnApi: this.columnApi
          };
          this.eventService.dispatchEvent(event);
        };
        ColumnModel2.prototype.getSecondaryPivotColumn = function(pivotKeys, valueColKey) {
          if (!this.secondaryColumnsPresent || !this.secondaryColumns) {
            return null;
          }
          var valueColumnToFind = this.getPrimaryColumn(valueColKey);
          var foundColumn = null;
          this.secondaryColumns.forEach(function(column) {
            var thisPivotKeys = column.getColDef().pivotKeys;
            var pivotValueColumn = column.getColDef().pivotValueColumn;
            var pivotKeyMatches = areEqual(thisPivotKeys, pivotKeys);
            var pivotValueMatches = pivotValueColumn === valueColumnToFind;
            if (pivotKeyMatches && pivotValueMatches) {
              foundColumn = column;
            }
          });
          return foundColumn;
        };
        ColumnModel2.prototype.setBeans = function(loggerFactory) {
          this.logger = loggerFactory.create("columnModel");
        };
        ColumnModel2.prototype.setFirstRightAndLastLeftPinned = function(source) {
          var lastLeft;
          var firstRight;
          if (this.gridOptionsWrapper.isEnableRtl()) {
            lastLeft = this.displayedColumnsLeft ? this.displayedColumnsLeft[0] : null;
            firstRight = this.displayedColumnsRight ? last(this.displayedColumnsRight) : null;
          } else {
            lastLeft = this.displayedColumnsLeft ? last(this.displayedColumnsLeft) : null;
            firstRight = this.displayedColumnsRight ? this.displayedColumnsRight[0] : null;
          }
          this.gridColumns.forEach(function(column) {
            column.setLastLeftPinned(column === lastLeft, source);
            column.setFirstRightPinned(column === firstRight, source);
          });
        };
        ColumnModel2.prototype.autoSizeColumns = function(keys2, skipHeader, source) {
          var _this = this;
          if (source === void 0) {
            source = "api";
          }
          this.animationFrameService.flushAllFrames();
          var columnsAutosized = [];
          var changesThisTimeAround = -1;
          if (skipHeader == null) {
            skipHeader = this.gridOptionsWrapper.isSkipHeaderOnAutoSize();
          }
          while (changesThisTimeAround !== 0) {
            changesThisTimeAround = 0;
            this.actionOnGridColumns(keys2, function(column) {
              if (columnsAutosized.indexOf(column) >= 0) {
                return false;
              }
              var preferredWidth = _this.autoWidthCalculator.getPreferredWidthForColumn(column, skipHeader);
              if (preferredWidth > 0) {
                var newWidth = _this.normaliseColumnWidth(column, preferredWidth);
                column.setActualWidth(newWidth, source);
                columnsAutosized.push(column);
                changesThisTimeAround++;
              }
              return true;
            }, source);
          }
          this.fireColumnResizedEvent(columnsAutosized, true, "autosizeColumns");
        };
        ColumnModel2.prototype.fireColumnResizedEvent = function(columns, finished, source, flexColumns) {
          if (flexColumns === void 0) {
            flexColumns = null;
          }
          if (columns && columns.length) {
            var event_2 = {
              type: Events.EVENT_COLUMN_RESIZED,
              columns,
              column: columns.length === 1 ? columns[0] : null,
              flexColumns,
              finished,
              api: this.gridApi,
              columnApi: this.columnApi,
              source
            };
            this.eventService.dispatchEvent(event_2);
          }
        };
        ColumnModel2.prototype.autoSizeColumn = function(key, skipHeader, source) {
          if (source === void 0) {
            source = "api";
          }
          if (key) {
            this.autoSizeColumns([key], skipHeader, source);
          }
        };
        ColumnModel2.prototype.autoSizeAllColumns = function(skipHeader, source) {
          if (source === void 0) {
            source = "api";
          }
          var allDisplayedColumns = this.getAllDisplayedColumns();
          this.autoSizeColumns(allDisplayedColumns, skipHeader, source);
        };
        ColumnModel2.prototype.getColumnsFromTree = function(rootColumns) {
          var result = [];
          var recursiveFindColumns = function(childColumns) {
            for (var i = 0; i < childColumns.length; i++) {
              var child = childColumns[i];
              if (child instanceof Column) {
                result.push(child);
              } else if (child instanceof ProvidedColumnGroup) {
                recursiveFindColumns(child.getChildren());
              }
            }
          };
          recursiveFindColumns(rootColumns);
          return result;
        };
        ColumnModel2.prototype.getAllDisplayedTrees = function() {
          if (this.displayedTreeLeft && this.displayedTreeRight && this.displayedTreeCentre) {
            return this.displayedTreeLeft.concat(this.displayedTreeCentre).concat(this.displayedTreeRight);
          }
          return null;
        };
        ColumnModel2.prototype.getPrimaryColumnTree = function() {
          return this.primaryColumnTree;
        };
        ColumnModel2.prototype.getHeaderRowCount = function() {
          return this.gridHeaderRowCount;
        };
        ColumnModel2.prototype.getDisplayedTreeLeft = function() {
          return this.displayedTreeLeft;
        };
        ColumnModel2.prototype.getDisplayedTreeRight = function() {
          return this.displayedTreeRight;
        };
        ColumnModel2.prototype.getDisplayedTreeCentre = function() {
          return this.displayedTreeCentre;
        };
        ColumnModel2.prototype.isColumnDisplayed = function(column) {
          return this.getAllDisplayedColumns().indexOf(column) >= 0;
        };
        ColumnModel2.prototype.getAllDisplayedColumns = function() {
          return this.displayedColumns;
        };
        ColumnModel2.prototype.getViewportColumns = function() {
          return this.viewportColumns;
        };
        ColumnModel2.prototype.getDisplayedLeftColumnsForRow = function(rowNode) {
          if (!this.colSpanActive) {
            return this.displayedColumnsLeft;
          }
          return this.getDisplayedColumnsForRow(rowNode, this.displayedColumnsLeft);
        };
        ColumnModel2.prototype.getDisplayedRightColumnsForRow = function(rowNode) {
          if (!this.colSpanActive) {
            return this.displayedColumnsRight;
          }
          return this.getDisplayedColumnsForRow(rowNode, this.displayedColumnsRight);
        };
        ColumnModel2.prototype.getDisplayedColumnsForRow = function(rowNode, displayedColumns, filterCallback, emptySpaceBeforeColumn) {
          var result = [];
          var lastConsideredCol = null;
          var _loop_1 = function(i2) {
            var col = displayedColumns[i2];
            var maxAllowedColSpan = displayedColumns.length - i2;
            var colSpan = Math.min(col.getColSpan(rowNode), maxAllowedColSpan);
            var columnsToCheckFilter = [col];
            if (colSpan > 1) {
              var colsToRemove = colSpan - 1;
              for (var j = 1; j <= colsToRemove; j++) {
                columnsToCheckFilter.push(displayedColumns[i2 + j]);
              }
              i2 += colsToRemove;
            }
            var filterPasses;
            if (filterCallback) {
              filterPasses = false;
              columnsToCheckFilter.forEach(function(colForFilter) {
                if (filterCallback(colForFilter)) {
                  filterPasses = true;
                }
              });
            } else {
              filterPasses = true;
            }
            if (filterPasses) {
              if (result.length === 0 && lastConsideredCol) {
                var gapBeforeColumn = emptySpaceBeforeColumn ? emptySpaceBeforeColumn(col) : false;
                if (gapBeforeColumn) {
                  result.push(lastConsideredCol);
                }
              }
              result.push(col);
            }
            lastConsideredCol = col;
            out_i_1 = i2;
          };
          var out_i_1;
          for (var i = 0; i < displayedColumns.length; i++) {
            _loop_1(i);
            i = out_i_1;
          }
          return result;
        };
        ColumnModel2.prototype.getViewportCenterColumnsForRow = function(rowNode) {
          var _this = this;
          if (!this.colSpanActive) {
            return this.viewportColumnsCenter;
          }
          var emptySpaceBeforeColumn = function(col) {
            var left = col.getLeft();
            return exists(left) && left > _this.viewportLeft;
          };
          var filterCallback = this.suppressColumnVirtualisation ? null : this.isColumnInViewport.bind(this);
          return this.getDisplayedColumnsForRow(rowNode, this.displayedColumnsCenter, filterCallback, emptySpaceBeforeColumn);
        };
        ColumnModel2.prototype.getAriaColumnIndex = function(col) {
          return this.getAllGridColumns().indexOf(col) + 1;
        };
        ColumnModel2.prototype.isColumnInViewport = function(col) {
          if (col.getColDef().autoHeight) {
            return true;
          }
          var columnLeft = col.getLeft() || 0;
          var columnRight = columnLeft + col.getActualWidth();
          var leftBounds = this.viewportLeft - 200;
          var rightBounds = this.viewportRight + 200;
          var columnToMuchLeft = columnLeft < leftBounds && columnRight < leftBounds;
          var columnToMuchRight = columnLeft > rightBounds && columnRight > rightBounds;
          return !columnToMuchLeft && !columnToMuchRight;
        };
        ColumnModel2.prototype.getDisplayedColumnsLeftWidth = function() {
          return this.getWidthOfColsInList(this.displayedColumnsLeft);
        };
        ColumnModel2.prototype.getDisplayedColumnsRightWidth = function() {
          return this.getWidthOfColsInList(this.displayedColumnsRight);
        };
        ColumnModel2.prototype.updatePrimaryColumnList = function(keys2, masterList, actionIsAdd, columnCallback, eventType, source) {
          var _this = this;
          if (source === void 0) {
            source = "api";
          }
          if (!keys2 || missingOrEmpty(keys2)) {
            return;
          }
          var atLeastOne = false;
          keys2.forEach(function(key) {
            var columnToAdd = _this.getPrimaryColumn(key);
            if (!columnToAdd) {
              return;
            }
            if (actionIsAdd) {
              if (masterList.indexOf(columnToAdd) >= 0) {
                return;
              }
              masterList.push(columnToAdd);
            } else {
              if (masterList.indexOf(columnToAdd) < 0) {
                return;
              }
              removeFromArray(masterList, columnToAdd);
            }
            columnCallback(columnToAdd);
            atLeastOne = true;
          });
          if (!atLeastOne) {
            return;
          }
          if (this.autoGroupsNeedBuilding) {
            this.updateGridColumns();
          }
          this.updateDisplayedColumns(source);
          var event = {
            type: eventType,
            columns: masterList,
            column: masterList.length === 1 ? masterList[0] : null,
            api: this.gridApi,
            columnApi: this.columnApi,
            source
          };
          this.eventService.dispatchEvent(event);
        };
        ColumnModel2.prototype.setRowGroupColumns = function(colKeys, source) {
          if (source === void 0) {
            source = "api";
          }
          this.autoGroupsNeedBuilding = true;
          this.setPrimaryColumnList(colKeys, this.rowGroupColumns, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.setRowGroupActive.bind(this), source);
        };
        ColumnModel2.prototype.setRowGroupActive = function(active, column, source) {
          if (active === column.isRowGroupActive()) {
            return;
          }
          column.setRowGroupActive(active, source);
          if (!active && !this.gridOptionsWrapper.isSuppressMakeColumnVisibleAfterUnGroup()) {
            column.setVisible(true, source);
          }
        };
        ColumnModel2.prototype.addRowGroupColumn = function(key, source) {
          if (source === void 0) {
            source = "api";
          }
          if (key) {
            this.addRowGroupColumns([key], source);
          }
        };
        ColumnModel2.prototype.addRowGroupColumns = function(keys2, source) {
          if (source === void 0) {
            source = "api";
          }
          this.autoGroupsNeedBuilding = true;
          this.updatePrimaryColumnList(keys2, this.rowGroupColumns, true, this.setRowGroupActive.bind(this, true), Events.EVENT_COLUMN_ROW_GROUP_CHANGED, source);
        };
        ColumnModel2.prototype.removeRowGroupColumns = function(keys2, source) {
          if (source === void 0) {
            source = "api";
          }
          this.autoGroupsNeedBuilding = true;
          this.updatePrimaryColumnList(keys2, this.rowGroupColumns, false, this.setRowGroupActive.bind(this, false), Events.EVENT_COLUMN_ROW_GROUP_CHANGED, source);
        };
        ColumnModel2.prototype.removeRowGroupColumn = function(key, source) {
          if (source === void 0) {
            source = "api";
          }
          if (key) {
            this.removeRowGroupColumns([key], source);
          }
        };
        ColumnModel2.prototype.addPivotColumns = function(keys2, source) {
          if (source === void 0) {
            source = "api";
          }
          this.updatePrimaryColumnList(keys2, this.pivotColumns, true, function(column) {
            return column.setPivotActive(true, source);
          }, Events.EVENT_COLUMN_PIVOT_CHANGED, source);
        };
        ColumnModel2.prototype.setPivotColumns = function(colKeys, source) {
          if (source === void 0) {
            source = "api";
          }
          this.setPrimaryColumnList(colKeys, this.pivotColumns, Events.EVENT_COLUMN_PIVOT_CHANGED, function(added, column) {
            column.setPivotActive(added, source);
          }, source);
        };
        ColumnModel2.prototype.addPivotColumn = function(key, source) {
          if (source === void 0) {
            source = "api";
          }
          this.addPivotColumns([key], source);
        };
        ColumnModel2.prototype.removePivotColumns = function(keys2, source) {
          if (source === void 0) {
            source = "api";
          }
          this.updatePrimaryColumnList(keys2, this.pivotColumns, false, function(column) {
            return column.setPivotActive(false, source);
          }, Events.EVENT_COLUMN_PIVOT_CHANGED, source);
        };
        ColumnModel2.prototype.removePivotColumn = function(key, source) {
          if (source === void 0) {
            source = "api";
          }
          this.removePivotColumns([key], source);
        };
        ColumnModel2.prototype.setPrimaryColumnList = function(colKeys, masterList, eventName, columnCallback, source) {
          var _this = this;
          masterList.length = 0;
          if (exists(colKeys)) {
            colKeys.forEach(function(key) {
              var column = _this.getPrimaryColumn(key);
              if (column) {
                masterList.push(column);
              }
            });
          }
          (this.primaryColumns || []).forEach(function(column) {
            var added = masterList.indexOf(column) >= 0;
            columnCallback(added, column);
          });
          if (this.autoGroupsNeedBuilding) {
            this.updateGridColumns();
          }
          this.updateDisplayedColumns(source);
          this.fireColumnEvent(eventName, masterList, source);
        };
        ColumnModel2.prototype.setValueColumns = function(colKeys, source) {
          if (source === void 0) {
            source = "api";
          }
          this.setPrimaryColumnList(colKeys, this.valueColumns, Events.EVENT_COLUMN_VALUE_CHANGED, this.setValueActive.bind(this), source);
        };
        ColumnModel2.prototype.setValueActive = function(active, column, source) {
          if (active === column.isValueActive()) {
            return;
          }
          column.setValueActive(active, source);
          if (active && !column.getAggFunc()) {
            var initialAggFunc = this.aggFuncService.getDefaultAggFunc(column);
            column.setAggFunc(initialAggFunc);
          }
        };
        ColumnModel2.prototype.addValueColumns = function(keys2, source) {
          if (source === void 0) {
            source = "api";
          }
          this.updatePrimaryColumnList(keys2, this.valueColumns, true, this.setValueActive.bind(this, true), Events.EVENT_COLUMN_VALUE_CHANGED, source);
        };
        ColumnModel2.prototype.addValueColumn = function(colKey, source) {
          if (source === void 0) {
            source = "api";
          }
          if (colKey) {
            this.addValueColumns([colKey], source);
          }
        };
        ColumnModel2.prototype.removeValueColumn = function(colKey, source) {
          if (source === void 0) {
            source = "api";
          }
          this.removeValueColumns([colKey], source);
        };
        ColumnModel2.prototype.removeValueColumns = function(keys2, source) {
          if (source === void 0) {
            source = "api";
          }
          this.updatePrimaryColumnList(keys2, this.valueColumns, false, this.setValueActive.bind(this, false), Events.EVENT_COLUMN_VALUE_CHANGED, source);
        };
        ColumnModel2.prototype.normaliseColumnWidth = function(column, newWidth) {
          var minWidth = column.getMinWidth();
          if (exists(minWidth) && newWidth < minWidth) {
            newWidth = minWidth;
          }
          var maxWidth = column.getMaxWidth();
          if (exists(maxWidth) && column.isGreaterThanMax(newWidth)) {
            newWidth = maxWidth;
          }
          return newWidth;
        };
        ColumnModel2.prototype.getPrimaryOrGridColumn = function(key) {
          var column = this.getPrimaryColumn(key);
          return column || this.getGridColumn(key);
        };
        ColumnModel2.prototype.setColumnWidths = function(columnWidths, shiftKey, finished, source) {
          var _this = this;
          if (source === void 0) {
            source = "api";
          }
          var sets = [];
          columnWidths.forEach(function(columnWidth) {
            var col = _this.getPrimaryOrGridColumn(columnWidth.key);
            if (!col) {
              return;
            }
            sets.push({
              width: columnWidth.newWidth,
              ratios: [1],
              columns: [col]
            });
            var defaultIsShift = _this.gridOptionsWrapper.getColResizeDefault() === "shift";
            if (defaultIsShift) {
              shiftKey = !shiftKey;
            }
            if (shiftKey) {
              var otherCol = _this.getDisplayedColAfter(col);
              if (!otherCol) {
                return;
              }
              var widthDiff = col.getActualWidth() - columnWidth.newWidth;
              var otherColWidth = otherCol.getActualWidth() + widthDiff;
              sets.push({
                width: otherColWidth,
                ratios: [1],
                columns: [otherCol]
              });
            }
          });
          if (sets.length === 0) {
            return;
          }
          this.resizeColumnSets(sets, finished, source);
        };
        ColumnModel2.prototype.checkMinAndMaxWidthsForSet = function(columnResizeSet) {
          var columns = columnResizeSet.columns, width = columnResizeSet.width;
          var minWidthAccumulated = 0;
          var maxWidthAccumulated = 0;
          var maxWidthActive = true;
          columns.forEach(function(col) {
            var minWidth = col.getMinWidth();
            minWidthAccumulated += minWidth || 0;
            var maxWidth = col.getMaxWidth();
            if (exists(maxWidth) && maxWidth > 0) {
              maxWidthAccumulated += maxWidth;
            } else {
              maxWidthActive = false;
            }
          });
          var minWidthPasses = width >= minWidthAccumulated;
          var maxWidthPasses = !maxWidthActive || width <= maxWidthAccumulated;
          return minWidthPasses && maxWidthPasses;
        };
        ColumnModel2.prototype.resizeColumnSets = function(resizeSets, finished, source) {
          var _this = this;
          var passMinMaxCheck = !resizeSets || resizeSets.every(function(columnResizeSet) {
            return _this.checkMinAndMaxWidthsForSet(columnResizeSet);
          });
          if (!passMinMaxCheck) {
            if (finished) {
              var columns = resizeSets && resizeSets.length > 0 ? resizeSets[0].columns : null;
              this.fireColumnResizedEvent(columns, finished, source);
            }
            return;
          }
          var changedCols = [];
          var allResizedCols = [];
          resizeSets.forEach(function(set2) {
            var width = set2.width, columns2 = set2.columns, ratios = set2.ratios;
            var newWidths = {};
            var finishedCols = {};
            columns2.forEach(function(col) {
              return allResizedCols.push(col);
            });
            var finishedColsGrew = true;
            var loopCount = 0;
            var _loop_2 = function() {
              loopCount++;
              if (loopCount > 1e3) {
                console.error("AG Grid: infinite loop in resizeColumnSets");
                return "break";
              }
              finishedColsGrew = false;
              var subsetCols = [];
              var subsetRatioTotal = 0;
              var pixelsToDistribute = width;
              columns2.forEach(function(col, index) {
                var thisColFinished = finishedCols[col.getId()];
                if (thisColFinished) {
                  pixelsToDistribute -= newWidths[col.getId()];
                } else {
                  subsetCols.push(col);
                  var ratioThisCol = ratios[index];
                  subsetRatioTotal += ratioThisCol;
                }
              });
              var ratioScale = 1 / subsetRatioTotal;
              subsetCols.forEach(function(col, index) {
                var lastCol = index === subsetCols.length - 1;
                var colNewWidth;
                if (lastCol) {
                  colNewWidth = pixelsToDistribute;
                } else {
                  colNewWidth = Math.round(ratios[index] * width * ratioScale);
                  pixelsToDistribute -= colNewWidth;
                }
                var minWidth = col.getMinWidth();
                var maxWidth = col.getMaxWidth();
                if (exists(minWidth) && colNewWidth < minWidth) {
                  colNewWidth = minWidth;
                  finishedCols[col.getId()] = true;
                  finishedColsGrew = true;
                } else if (exists(maxWidth) && maxWidth > 0 && colNewWidth > maxWidth) {
                  colNewWidth = maxWidth;
                  finishedCols[col.getId()] = true;
                  finishedColsGrew = true;
                }
                newWidths[col.getId()] = colNewWidth;
              });
            };
            while (finishedColsGrew) {
              var state_1 = _loop_2();
              if (state_1 === "break")
                break;
            }
            columns2.forEach(function(col) {
              var newWidth = newWidths[col.getId()];
              if (col.getActualWidth() !== newWidth) {
                col.setActualWidth(newWidth, source);
                changedCols.push(col);
              }
            });
          });
          var atLeastOneColChanged = changedCols.length > 0;
          var flexedCols = this.refreshFlexedColumns({ resizingCols: allResizedCols, skipSetLeft: true });
          if (atLeastOneColChanged) {
            this.setLeftValues(source);
            this.updateBodyWidths();
            this.checkViewportColumns();
          }
          var colsForEvent = allResizedCols.concat(flexedCols);
          if (atLeastOneColChanged || finished) {
            this.fireColumnResizedEvent(colsForEvent, finished, source, flexedCols);
          }
        };
        ColumnModel2.prototype.setColumnAggFunc = function(key, aggFunc, source) {
          if (source === void 0) {
            source = "api";
          }
          if (!key) {
            return;
          }
          var column = this.getPrimaryColumn(key);
          if (!column) {
            return;
          }
          column.setAggFunc(aggFunc);
          this.fireColumnEvent(Events.EVENT_COLUMN_VALUE_CHANGED, [column], source);
        };
        ColumnModel2.prototype.fireColumnEvent = function(type, columns, source) {
          var event = {
            type,
            columns,
            column: columns && columns.length == 1 ? columns[0] : null,
            api: this.gridApi,
            columnApi: this.columnApi,
            source
          };
          this.eventService.dispatchEvent(event);
        };
        ColumnModel2.prototype.moveRowGroupColumn = function(fromIndex, toIndex, source) {
          if (source === void 0) {
            source = "api";
          }
          var column = this.rowGroupColumns[fromIndex];
          this.rowGroupColumns.splice(fromIndex, 1);
          this.rowGroupColumns.splice(toIndex, 0, column);
          var event = {
            type: Events.EVENT_COLUMN_ROW_GROUP_CHANGED,
            columns: this.rowGroupColumns,
            column: this.rowGroupColumns.length === 1 ? this.rowGroupColumns[0] : null,
            api: this.gridApi,
            columnApi: this.columnApi,
            source
          };
          this.eventService.dispatchEvent(event);
        };
        ColumnModel2.prototype.moveColumns = function(columnsToMoveKeys, toIndex, source) {
          if (source === void 0) {
            source = "api";
          }
          this.columnAnimationService.start();
          if (toIndex > this.gridColumns.length - columnsToMoveKeys.length) {
            console.warn("AG Grid: tried to insert columns in invalid location, toIndex = " + toIndex);
            console.warn("AG Grid: remember that you should not count the moving columns when calculating the new index");
            return;
          }
          var columnsToMove = this.getGridColumns(columnsToMoveKeys);
          var failedRules = !this.doesMovePassRules(columnsToMove, toIndex);
          if (failedRules) {
            return;
          }
          moveInArray(this.gridColumns, columnsToMove, toIndex);
          this.updateDisplayedColumns(source);
          var event = {
            type: Events.EVENT_COLUMN_MOVED,
            columns: columnsToMove,
            column: columnsToMove.length === 1 ? columnsToMove[0] : null,
            toIndex,
            api: this.gridApi,
            columnApi: this.columnApi,
            source
          };
          this.eventService.dispatchEvent(event);
          this.columnAnimationService.finish();
        };
        ColumnModel2.prototype.doesMovePassRules = function(columnsToMove, toIndex) {
          var proposedColumnOrder = this.gridColumns.slice();
          moveInArray(proposedColumnOrder, columnsToMove, toIndex);
          if (!this.doesMovePassMarryChildren(proposedColumnOrder)) {
            return false;
          }
          if (!this.doesMovePassLockedPositions(proposedColumnOrder)) {
            return false;
          }
          return true;
        };
        ColumnModel2.prototype.sortColumnsLikeGridColumns = function(cols) {
          var _this = this;
          if (!cols || cols.length <= 1) {
            return;
          }
          var notAllColsInGridColumns = cols.filter(function(c) {
            return _this.gridColumns.indexOf(c) < 0;
          }).length > 0;
          if (notAllColsInGridColumns) {
            return;
          }
          cols.sort(function(a, b) {
            var indexA = _this.gridColumns.indexOf(a);
            var indexB = _this.gridColumns.indexOf(b);
            return indexA - indexB;
          });
        };
        ColumnModel2.prototype.doesMovePassLockedPositions = function(proposedColumnOrder) {
          var foundNonLocked = false;
          var rulePassed = true;
          proposedColumnOrder.forEach(function(col) {
            if (col.getColDef().lockPosition) {
              if (foundNonLocked) {
                rulePassed = false;
              }
            } else {
              foundNonLocked = true;
            }
          });
          return rulePassed;
        };
        ColumnModel2.prototype.doesMovePassMarryChildren = function(allColumnsCopy) {
          var rulePassed = true;
          this.columnUtils.depthFirstOriginalTreeSearch(null, this.gridBalancedTree, function(child) {
            if (!(child instanceof ProvidedColumnGroup)) {
              return;
            }
            var columnGroup = child;
            var colGroupDef = columnGroup.getColGroupDef();
            var marryChildren = colGroupDef && colGroupDef.marryChildren;
            if (!marryChildren) {
              return;
            }
            var newIndexes = [];
            columnGroup.getLeafColumns().forEach(function(col) {
              var newColIndex = allColumnsCopy.indexOf(col);
              newIndexes.push(newColIndex);
            });
            var maxIndex = Math.max.apply(Math, newIndexes);
            var minIndex = Math.min.apply(Math, newIndexes);
            var spread = maxIndex - minIndex;
            var maxSpread = columnGroup.getLeafColumns().length - 1;
            if (spread > maxSpread) {
              rulePassed = false;
            }
          });
          return rulePassed;
        };
        ColumnModel2.prototype.moveColumn = function(key, toIndex, source) {
          if (source === void 0) {
            source = "api";
          }
          this.moveColumns([key], toIndex, source);
        };
        ColumnModel2.prototype.moveColumnByIndex = function(fromIndex, toIndex, source) {
          if (source === void 0) {
            source = "api";
          }
          var column = this.gridColumns[fromIndex];
          this.moveColumn(column, toIndex, source);
        };
        ColumnModel2.prototype.getColumnDefs = function() {
          var _this = this;
          if (!this.primaryColumns) {
            return;
          }
          var cols = this.primaryColumns.slice();
          if (this.gridColsArePrimary) {
            cols.sort(function(a, b) {
              return _this.gridColumns.indexOf(a) - _this.gridColumns.indexOf(b);
            });
          } else if (this.lastPrimaryOrder) {
            cols.sort(function(a, b) {
              return _this.lastPrimaryOrder.indexOf(a) - _this.lastPrimaryOrder.indexOf(b);
            });
          }
          return this.columnDefFactory.buildColumnDefs(cols, this.rowGroupColumns, this.pivotColumns);
        };
        ColumnModel2.prototype.getBodyContainerWidth = function() {
          return this.bodyWidth;
        };
        ColumnModel2.prototype.getContainerWidth = function(pinned) {
          switch (pinned) {
            case Constants.PINNED_LEFT:
              return this.leftWidth;
            case Constants.PINNED_RIGHT:
              return this.rightWidth;
            default:
              return this.bodyWidth;
          }
        };
        ColumnModel2.prototype.updateBodyWidths = function() {
          var newBodyWidth = this.getWidthOfColsInList(this.displayedColumnsCenter);
          var newLeftWidth = this.getWidthOfColsInList(this.displayedColumnsLeft);
          var newRightWidth = this.getWidthOfColsInList(this.displayedColumnsRight);
          this.bodyWidthDirty = this.bodyWidth !== newBodyWidth;
          var atLeastOneChanged = this.bodyWidth !== newBodyWidth || this.leftWidth !== newLeftWidth || this.rightWidth !== newRightWidth;
          if (atLeastOneChanged) {
            this.bodyWidth = newBodyWidth;
            this.leftWidth = newLeftWidth;
            this.rightWidth = newRightWidth;
            var event_3 = {
              type: Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED,
              api: this.gridApi,
              columnApi: this.columnApi
            };
            this.eventService.dispatchEvent(event_3);
          }
        };
        ColumnModel2.prototype.getValueColumns = function() {
          return this.valueColumns ? this.valueColumns : [];
        };
        ColumnModel2.prototype.getPivotColumns = function() {
          return this.pivotColumns ? this.pivotColumns : [];
        };
        ColumnModel2.prototype.isPivotActive = function() {
          return this.pivotColumns && this.pivotColumns.length > 0 && this.pivotMode;
        };
        ColumnModel2.prototype.getRowGroupColumns = function() {
          return this.rowGroupColumns ? this.rowGroupColumns : [];
        };
        ColumnModel2.prototype.getDisplayedCenterColumns = function() {
          return this.displayedColumnsCenter;
        };
        ColumnModel2.prototype.getDisplayedLeftColumns = function() {
          return this.displayedColumnsLeft;
        };
        ColumnModel2.prototype.getDisplayedRightColumns = function() {
          return this.displayedColumnsRight;
        };
        ColumnModel2.prototype.getDisplayedColumns = function(type) {
          switch (type) {
            case Constants.PINNED_LEFT:
              return this.getDisplayedLeftColumns();
            case Constants.PINNED_RIGHT:
              return this.getDisplayedRightColumns();
            default:
              return this.getDisplayedCenterColumns();
          }
        };
        ColumnModel2.prototype.getAllPrimaryColumns = function() {
          return this.primaryColumns ? this.primaryColumns.slice() : null;
        };
        ColumnModel2.prototype.getSecondaryColumns = function() {
          return this.secondaryColumns ? this.secondaryColumns.slice() : null;
        };
        ColumnModel2.prototype.getAllColumnsForQuickFilter = function() {
          return this.columnsForQuickFilter;
        };
        ColumnModel2.prototype.getAllGridColumns = function() {
          return this.gridColumns;
        };
        ColumnModel2.prototype.isEmpty = function() {
          return missingOrEmpty(this.gridColumns);
        };
        ColumnModel2.prototype.isRowGroupEmpty = function() {
          return missingOrEmpty(this.rowGroupColumns);
        };
        ColumnModel2.prototype.setColumnVisible = function(key, visible, source) {
          if (source === void 0) {
            source = "api";
          }
          this.setColumnsVisible([key], visible, source);
        };
        ColumnModel2.prototype.setColumnsVisible = function(keys2, visible, source) {
          var _this = this;
          if (visible === void 0) {
            visible = false;
          }
          if (source === void 0) {
            source = "api";
          }
          this.columnAnimationService.start();
          this.actionOnGridColumns(keys2, function(column) {
            if (column.isVisible() !== visible) {
              column.setVisible(visible, source);
              return true;
            }
            return false;
          }, source, function() {
            var event = {
              type: Events.EVENT_COLUMN_VISIBLE,
              visible,
              column: null,
              columns: null,
              api: _this.gridApi,
              columnApi: _this.columnApi,
              source
            };
            return event;
          });
          this.columnAnimationService.finish();
        };
        ColumnModel2.prototype.setColumnPinned = function(key, pinned, source) {
          if (source === void 0) {
            source = "api";
          }
          if (key) {
            this.setColumnsPinned([key], pinned, source);
          }
        };
        ColumnModel2.prototype.setColumnsPinned = function(keys2, pinned, source) {
          var _this = this;
          if (source === void 0) {
            source = "api";
          }
          if (this.gridOptionsWrapper.getDomLayout() === "print") {
            console.warn("Changing the column pinning status is not allowed with domLayout='print'");
            return;
          }
          this.columnAnimationService.start();
          var actualPinned;
          if (pinned === true || pinned === Constants.PINNED_LEFT) {
            actualPinned = Constants.PINNED_LEFT;
          } else if (pinned === Constants.PINNED_RIGHT) {
            actualPinned = Constants.PINNED_RIGHT;
          } else {
            actualPinned = null;
          }
          this.actionOnGridColumns(keys2, function(col) {
            if (col.getPinned() !== actualPinned) {
              col.setPinned(actualPinned);
              return true;
            }
            return false;
          }, source, function() {
            var event = {
              type: Events.EVENT_COLUMN_PINNED,
              pinned: actualPinned,
              column: null,
              columns: null,
              api: _this.gridApi,
              columnApi: _this.columnApi,
              source
            };
            return event;
          });
          this.columnAnimationService.finish();
        };
        ColumnModel2.prototype.actionOnGridColumns = function(keys2, action, source, createEvent) {
          var _this = this;
          if (missingOrEmpty(keys2)) {
            return;
          }
          var updatedColumns = [];
          keys2.forEach(function(key) {
            var column = _this.getGridColumn(key);
            if (!column) {
              return;
            }
            var resultOfAction = action(column);
            if (resultOfAction !== false) {
              updatedColumns.push(column);
            }
          });
          if (!updatedColumns.length) {
            return;
          }
          this.updateDisplayedColumns(source);
          if (exists(createEvent) && createEvent) {
            var event_4 = createEvent();
            event_4.columns = updatedColumns;
            event_4.column = updatedColumns.length === 1 ? updatedColumns[0] : null;
            this.eventService.dispatchEvent(event_4);
          }
        };
        ColumnModel2.prototype.getDisplayedColBefore = function(col) {
          var allDisplayedColumns = this.getAllDisplayedColumns();
          var oldIndex = allDisplayedColumns.indexOf(col);
          if (oldIndex > 0) {
            return allDisplayedColumns[oldIndex - 1];
          }
          return null;
        };
        ColumnModel2.prototype.getDisplayedColAfter = function(col) {
          var allDisplayedColumns = this.getAllDisplayedColumns();
          var oldIndex = allDisplayedColumns.indexOf(col);
          if (oldIndex < allDisplayedColumns.length - 1) {
            return allDisplayedColumns[oldIndex + 1];
          }
          return null;
        };
        ColumnModel2.prototype.getDisplayedGroupAfter = function(columnGroup) {
          return this.getDisplayedGroupAtDirection(columnGroup, "After");
        };
        ColumnModel2.prototype.getDisplayedGroupBefore = function(columnGroup) {
          return this.getDisplayedGroupAtDirection(columnGroup, "Before");
        };
        ColumnModel2.prototype.getDisplayedGroupAtDirection = function(columnGroup, direction) {
          var requiredLevel = columnGroup.getOriginalColumnGroup().getLevel() + columnGroup.getPaddingLevel();
          var colGroupLeafColumns = columnGroup.getDisplayedLeafColumns();
          var col = direction === "After" ? last(colGroupLeafColumns) : colGroupLeafColumns[0];
          var getDisplayColMethod = "getDisplayedCol" + direction;
          while (true) {
            var column = this[getDisplayColMethod](col);
            if (!column) {
              return null;
            }
            var groupPointer = this.getColumnGroupAtLevel(column, requiredLevel);
            if (groupPointer !== columnGroup) {
              return groupPointer;
            }
          }
        };
        ColumnModel2.prototype.getColumnGroupAtLevel = function(column, level) {
          var groupPointer = column.getParent();
          var originalGroupLevel;
          var groupPointerLevel;
          while (true) {
            var groupPointerOriginalColumnGroup = groupPointer.getOriginalColumnGroup();
            originalGroupLevel = groupPointerOriginalColumnGroup.getLevel();
            groupPointerLevel = groupPointer.getPaddingLevel();
            if (originalGroupLevel + groupPointerLevel <= level) {
              break;
            }
            groupPointer = groupPointer.getParent();
          }
          return groupPointer;
        };
        ColumnModel2.prototype.isPinningLeft = function() {
          return this.displayedColumnsLeft.length > 0;
        };
        ColumnModel2.prototype.isPinningRight = function() {
          return this.displayedColumnsRight.length > 0;
        };
        ColumnModel2.prototype.getPrimaryAndSecondaryAndAutoColumns = function() {
          var result = this.primaryColumns ? this.primaryColumns.slice(0) : [];
          if (this.groupAutoColumns && exists(this.groupAutoColumns)) {
            this.groupAutoColumns.forEach(function(col) {
              return result.push(col);
            });
          }
          if (this.secondaryColumnsPresent && this.secondaryColumns) {
            this.secondaryColumns.forEach(function(column) {
              return result.push(column);
            });
          }
          return result;
        };
        ColumnModel2.prototype.createStateItemFromColumn = function(column) {
          var rowGroupIndex = column.isRowGroupActive() ? this.rowGroupColumns.indexOf(column) : null;
          var pivotIndex = column.isPivotActive() ? this.pivotColumns.indexOf(column) : null;
          var aggFunc = column.isValueActive() ? column.getAggFunc() : null;
          var sort = column.getSort() != null ? column.getSort() : null;
          var sortIndex = column.getSortIndex() != null ? column.getSortIndex() : null;
          var flex = column.getFlex() != null && column.getFlex() > 0 ? column.getFlex() : null;
          var res = {
            colId: column.getColId(),
            width: column.getActualWidth(),
            hide: !column.isVisible(),
            pinned: column.getPinned(),
            sort,
            sortIndex,
            aggFunc,
            rowGroup: column.isRowGroupActive(),
            rowGroupIndex,
            pivot: column.isPivotActive(),
            pivotIndex,
            flex
          };
          return res;
        };
        ColumnModel2.prototype.getColumnState = function() {
          if (missing(this.primaryColumns) || !this.isAlive()) {
            return [];
          }
          var colsForState = this.getPrimaryAndSecondaryAndAutoColumns();
          var res = colsForState.map(this.createStateItemFromColumn.bind(this));
          if (!this.pivotMode) {
            this.orderColumnStateList(res);
          }
          return res;
        };
        ColumnModel2.prototype.getPrimaryAndAutoGroupCols = function() {
          if (!this.groupAutoColumns) {
            return this.primaryColumns;
          }
          return __spreadArrays(this.primaryColumns || [], this.groupAutoColumns);
        };
        ColumnModel2.prototype.orderColumnStateList = function(columnStateList) {
          var gridColumnIdMap = convertToMap(this.gridColumns.map(function(col, index) {
            return [col.getColId(), index];
          }));
          columnStateList.sort(function(itemA, itemB) {
            var posA = gridColumnIdMap.has(itemA.colId) ? gridColumnIdMap.get(itemA.colId) : -1;
            var posB = gridColumnIdMap.has(itemB.colId) ? gridColumnIdMap.get(itemB.colId) : -1;
            return posA - posB;
          });
        };
        ColumnModel2.prototype.resetColumnState = function(source) {
          if (source === void 0) {
            source = "api";
          }
          var primaryColumns = this.getColumnsFromTree(this.primaryColumnTree);
          var columnStates = [];
          var letRowGroupIndex = 1e3;
          var letPivotIndex = 1e3;
          var colsToProcess = [];
          if (this.groupAutoColumns) {
            colsToProcess = colsToProcess.concat(this.groupAutoColumns);
          }
          if (primaryColumns) {
            colsToProcess = colsToProcess.concat(primaryColumns);
          }
          colsToProcess.forEach(function(column) {
            var getValueOrNull = function(a, b) {
              return a != null ? a : b != null ? b : null;
            };
            var colDef = column.getColDef();
            var sort = getValueOrNull(colDef.sort, colDef.initialSort);
            var sortIndex = getValueOrNull(colDef.sortIndex, colDef.initialSortIndex);
            var hide = getValueOrNull(colDef.hide, colDef.initialHide);
            var pinned = getValueOrNull(colDef.pinned, colDef.initialPinned);
            var width = getValueOrNull(colDef.width, colDef.initialWidth);
            var flex = getValueOrNull(colDef.flex, colDef.initialFlex);
            var rowGroupIndex = getValueOrNull(colDef.rowGroupIndex, colDef.initialRowGroupIndex);
            var rowGroup = getValueOrNull(colDef.rowGroup, colDef.initialRowGroup);
            if (rowGroupIndex == null && (rowGroup == null || rowGroup == false)) {
              rowGroupIndex = null;
              rowGroup = null;
            }
            var pivotIndex = getValueOrNull(colDef.pivotIndex, colDef.initialPivotIndex);
            var pivot = getValueOrNull(colDef.pivot, colDef.initialPivot);
            if (pivotIndex == null && (pivot == null || pivot == false)) {
              pivotIndex = null;
              pivot = null;
            }
            var aggFunc = getValueOrNull(colDef.aggFunc, colDef.initialAggFunc);
            var stateItem = {
              colId: column.getColId(),
              sort,
              sortIndex,
              hide,
              pinned,
              width,
              flex,
              rowGroup,
              rowGroupIndex,
              pivot,
              pivotIndex,
              aggFunc
            };
            if (missing(rowGroupIndex) && rowGroup) {
              stateItem.rowGroupIndex = letRowGroupIndex++;
            }
            if (missing(pivotIndex) && pivot) {
              stateItem.pivotIndex = letPivotIndex++;
            }
            columnStates.push(stateItem);
          });
          this.applyColumnState({ state: columnStates, applyOrder: true }, source);
        };
        ColumnModel2.prototype.applyColumnState = function(params, source) {
          var _this = this;
          if (source === void 0) {
            source = "api";
          }
          if (missingOrEmpty(this.primaryColumns)) {
            return false;
          }
          if (params && params.state && !params.state.forEach) {
            console.warn("AG Grid: applyColumnState() - the state attribute should be an array, however an array was not found. Please provide an array of items (one for each col you want to change) for state.");
            return false;
          }
          this.columnAnimationService.start();
          var raiseEventsFunc = this.compareColumnStatesAndRaiseEvents(source);
          this.autoGroupsNeedBuilding = true;
          var columnsWithNoState = this.primaryColumns.slice();
          var success = true;
          var rowGroupIndexes = {};
          var pivotIndexes = {};
          var autoGroupColumnStates = [];
          var previousRowGroupCols = this.rowGroupColumns.slice();
          var previousPivotCols = this.pivotColumns.slice();
          if (params.state) {
            params.state.forEach(function(state) {
              var groupAutoColumnId = Constants.GROUP_AUTO_COLUMN_ID;
              var colId = state.colId || "";
              var isAutoGroupColumn = startsWith(colId, groupAutoColumnId);
              if (isAutoGroupColumn) {
                autoGroupColumnStates.push(state);
                return;
              }
              var column = _this.getPrimaryColumn(colId);
              if (!column) {
                success = false;
              } else {
                _this.syncColumnWithStateItem(column, state, params.defaultState, rowGroupIndexes, pivotIndexes, false, source);
                removeFromArray(columnsWithNoState, column);
              }
            });
          }
          var applyDefaultsFunc = function(col) {
            return _this.syncColumnWithStateItem(col, null, params.defaultState, rowGroupIndexes, pivotIndexes, false, source);
          };
          columnsWithNoState.forEach(applyDefaultsFunc);
          var comparator = function(indexes, oldList, colA, colB) {
            var indexA = indexes[colA.getId()];
            var indexB = indexes[colB.getId()];
            var aHasIndex = indexA != null;
            var bHasIndex = indexB != null;
            if (aHasIndex && bHasIndex) {
              return indexA - indexB;
            }
            if (aHasIndex) {
              return -1;
            }
            if (bHasIndex) {
              return 1;
            }
            var oldIndexA = oldList.indexOf(colA);
            var oldIndexB = oldList.indexOf(colB);
            var aHasOldIndex = oldIndexA >= 0;
            var bHasOldIndex = oldIndexB >= 0;
            if (aHasOldIndex && bHasOldIndex) {
              return oldIndexA - oldIndexB;
            }
            if (aHasOldIndex) {
              return -1;
            }
            return 1;
          };
          this.rowGroupColumns.sort(comparator.bind(this, rowGroupIndexes, previousRowGroupCols));
          this.pivotColumns.sort(comparator.bind(this, pivotIndexes, previousPivotCols));
          this.updateGridColumns();
          var autoGroupColsCopy = this.groupAutoColumns ? this.groupAutoColumns.slice() : [];
          autoGroupColumnStates.forEach(function(stateItem) {
            var autoCol = _this.getAutoColumn(stateItem.colId);
            removeFromArray(autoGroupColsCopy, autoCol);
            _this.syncColumnWithStateItem(autoCol, stateItem, params.defaultState, null, null, true, source);
          });
          autoGroupColsCopy.forEach(applyDefaultsFunc);
          this.applyOrderAfterApplyState(params);
          this.updateDisplayedColumns(source);
          this.dispatchEverythingChanged(source);
          raiseEventsFunc();
          this.columnAnimationService.finish();
          return success;
        };
        ColumnModel2.prototype.applyOrderAfterApplyState = function(params) {
          if (!this.gridColsArePrimary || !params.applyOrder || !params.state) {
            return;
          }
          var newOrder = [];
          var processedColIds = {};
          var gridColumnsMap = {};
          this.gridColumns.forEach(function(col) {
            return gridColumnsMap[col.getId()] = col;
          });
          params.state.forEach(function(item) {
            if (!item.colId || processedColIds[item.colId]) {
              return;
            }
            var col = gridColumnsMap[item.colId];
            if (col) {
              newOrder.push(col);
              processedColIds[item.colId] = true;
            }
          });
          this.gridColumns.forEach(function(col) {
            if (!processedColIds[col.getColId()]) {
              newOrder.push(col);
            }
          });
          newOrder = this.putFixedColumnsFirst(newOrder);
          if (!this.doesMovePassMarryChildren(newOrder)) {
            console.warn("AG Grid: Applying column order broke a group where columns should be married together. Applying new order has been discarded.");
            return;
          }
          this.gridColumns = newOrder;
        };
        ColumnModel2.prototype.compareColumnStatesAndRaiseEvents = function(source) {
          var _this = this;
          var colsPreviouslyExisted = !!this.columnDefs;
          if (!colsPreviouslyExisted) {
            return function() {
            };
          }
          var startState = {
            rowGroupColumns: this.rowGroupColumns.slice(),
            pivotColumns: this.pivotColumns.slice(),
            valueColumns: this.valueColumns.slice()
          };
          var columnStateBefore = this.getColumnState();
          var columnStateBeforeMap = {};
          columnStateBefore.forEach(function(col) {
            columnStateBeforeMap[col.colId] = col;
          });
          return function() {
            if (_this.gridOptionsWrapper.isSuppressColumnStateEvents()) {
              return;
            }
            var colsForState = _this.getPrimaryAndAutoGroupCols();
            var raiseWhenListsDifferent = function(eventType, colsBefore, colsAfter, idMapper) {
              var beforeList = colsBefore.map(idMapper);
              var afterList = colsAfter.map(idMapper);
              var unchanged = areEqual(beforeList, afterList);
              if (unchanged) {
                return;
              }
              var event = {
                type: eventType,
                columns: colsAfter,
                column: colsAfter.length === 1 ? colsAfter[0] : null,
                api: _this.gridApi,
                columnApi: _this.columnApi,
                source
              };
              _this.eventService.dispatchEvent(event);
            };
            var getChangedColumns = function(changedPredicate) {
              var changedColumns = [];
              (colsForState || []).forEach(function(column) {
                var colStateBefore = columnStateBeforeMap[column.getColId()];
                if (colStateBefore && changedPredicate(colStateBefore, column)) {
                  changedColumns.push(column);
                }
              });
              return changedColumns;
            };
            var columnIdMapper = function(c) {
              return c.getColId();
            };
            raiseWhenListsDifferent(Events.EVENT_COLUMN_ROW_GROUP_CHANGED, startState.rowGroupColumns, _this.rowGroupColumns, columnIdMapper);
            raiseWhenListsDifferent(Events.EVENT_COLUMN_PIVOT_CHANGED, startState.pivotColumns, _this.pivotColumns, columnIdMapper);
            var valueChangePredicate = function(cs, c) {
              var oldActive = cs.aggFunc != null;
              var activeChanged = oldActive != c.isValueActive();
              var aggFuncChanged = oldActive && cs.aggFunc != c.getAggFunc();
              return activeChanged || aggFuncChanged;
            };
            var changedValues = getChangedColumns(valueChangePredicate);
            if (changedValues.length > 0) {
              _this.fireColumnEvent(Events.EVENT_COLUMN_VALUE_CHANGED, _this.valueColumns, source);
            }
            var resizeChangePredicate = function(cs, c) {
              return cs.width != c.getActualWidth();
            };
            _this.fireColumnResizedEvent(getChangedColumns(resizeChangePredicate), true, source);
            var pinnedChangePredicate = function(cs, c) {
              return cs.pinned != c.getPinned();
            };
            _this.raiseColumnPinnedEvent(getChangedColumns(pinnedChangePredicate), source);
            var visibilityChangePredicate = function(cs, c) {
              return cs.hide == c.isVisible();
            };
            _this.raiseColumnVisibleEvent(getChangedColumns(visibilityChangePredicate), source);
            var sortChangePredicate = function(cs, c) {
              return cs.sort != c.getSort() || cs.sortIndex != c.getSortIndex();
            };
            if (getChangedColumns(sortChangePredicate).length > 0) {
              _this.sortController.dispatchSortChangedEvents();
            }
            _this.raiseColumnMovedEvent(columnStateBefore, source);
          };
        };
        ColumnModel2.prototype.raiseColumnPinnedEvent = function(changedColumns, source) {
          if (!changedColumns.length) {
            return;
          }
          var column = changedColumns.length === 1 ? changedColumns[0] : null;
          var pinned = this.getCommonValue(changedColumns, function(col) {
            return col.getPinned();
          });
          var event = {
            type: Events.EVENT_COLUMN_PINNED,
            // mistake in typing, 'undefined' should be allowed, as 'null' means 'not pinned'
            pinned: pinned != null ? pinned : null,
            columns: changedColumns,
            column,
            api: this.gridApi,
            columnApi: this.columnApi,
            source
          };
          this.eventService.dispatchEvent(event);
        };
        ColumnModel2.prototype.getCommonValue = function(cols, valueGetter) {
          if (!cols || cols.length == 0) {
            return void 0;
          }
          var firstValue = valueGetter(cols[0]);
          for (var i = 1; i < cols.length; i++) {
            if (firstValue !== valueGetter(cols[i])) {
              return void 0;
            }
          }
          return firstValue;
        };
        ColumnModel2.prototype.raiseColumnVisibleEvent = function(changedColumns, source) {
          if (!changedColumns.length) {
            return;
          }
          var column = changedColumns.length === 1 ? changedColumns[0] : null;
          var visible = this.getCommonValue(changedColumns, function(col) {
            return col.isVisible();
          });
          var event = {
            type: Events.EVENT_COLUMN_VISIBLE,
            visible,
            columns: changedColumns,
            column,
            api: this.gridApi,
            columnApi: this.columnApi,
            source
          };
          this.eventService.dispatchEvent(event);
        };
        ColumnModel2.prototype.raiseColumnMovedEvent = function(colStateBefore, source) {
          var _this = this;
          var colStateAfter = this.getColumnState();
          var colStateAfterMapped = {};
          colStateAfter.forEach(function(s) {
            return colStateAfterMapped[s.colId] = s;
          });
          var colsIntersectIds = {};
          colStateBefore.forEach(function(s) {
            if (colStateAfterMapped[s.colId]) {
              colsIntersectIds[s.colId] = true;
            }
          });
          var beforeFiltered = filter(colStateBefore, function(c) {
            return colsIntersectIds[c.colId];
          });
          var afterFiltered = filter(colStateAfter, function(c) {
            return colsIntersectIds[c.colId];
          });
          var movedColumns = [];
          afterFiltered.forEach(function(csAfter, index) {
            var csBefore = beforeFiltered && beforeFiltered[index];
            if (csBefore && csBefore.colId !== csAfter.colId) {
              var gridCol = _this.getGridColumn(csBefore.colId);
              if (gridCol) {
                movedColumns.push(gridCol);
              }
            }
          });
          if (!movedColumns.length) {
            return;
          }
          var event = {
            type: Events.EVENT_COLUMN_MOVED,
            columns: movedColumns,
            column: null,
            api: this.gridApi,
            columnApi: this.columnApi,
            source
          };
          this.eventService.dispatchEvent(event);
        };
        ColumnModel2.prototype.syncColumnWithStateItem = function(column, stateItem, defaultState, rowGroupIndexes, pivotIndexes, autoCol, source) {
          if (!column) {
            return;
          }
          var getValue = function(key1, key2) {
            var stateAny = stateItem;
            var defaultAny = defaultState;
            var obj = { value1: void 0, value2: void 0 };
            var calculated = false;
            if (stateAny) {
              if (stateAny[key1] !== void 0) {
                obj.value1 = stateAny[key1];
                calculated = true;
              }
              if (exists(key2) && stateAny[key2] !== void 0) {
                obj.value2 = stateAny[key2];
                calculated = true;
              }
            }
            if (!calculated && defaultAny) {
              if (defaultAny[key1] !== void 0) {
                obj.value1 = defaultAny[key1];
              }
              if (exists(key2) && defaultAny[key2] !== void 0) {
                obj.value2 = defaultAny[key2];
              }
            }
            return obj;
          };
          var hide = getValue("hide").value1;
          if (hide !== void 0) {
            column.setVisible(!hide, source);
          }
          var pinned = getValue("pinned").value1;
          if (pinned !== void 0) {
            column.setPinned(pinned);
          }
          var minColWidth = this.columnUtils.calculateColMinWidth(column.getColDef());
          var flex = getValue("flex").value1;
          if (flex !== void 0) {
            column.setFlex(flex);
          }
          var noFlexThisCol = column.getFlex() <= 0;
          if (noFlexThisCol) {
            var width = getValue("width").value1;
            if (width != null) {
              if (minColWidth != null && width >= minColWidth) {
                column.setActualWidth(width, source);
              }
            }
          }
          var sort = getValue("sort").value1;
          if (sort !== void 0) {
            if (sort === Constants.SORT_DESC || sort === Constants.SORT_ASC) {
              column.setSort(sort);
            } else {
              column.setSort(void 0);
            }
          }
          var sortIndex = getValue("sortIndex").value1;
          if (sortIndex !== void 0) {
            column.setSortIndex(sortIndex);
          }
          if (autoCol) {
            return;
          }
          var aggFunc = getValue("aggFunc").value1;
          if (aggFunc !== void 0) {
            if (typeof aggFunc === "string") {
              column.setAggFunc(aggFunc);
              if (!column.isValueActive()) {
                column.setValueActive(true, source);
                this.valueColumns.push(column);
              }
            } else {
              if (exists(aggFunc)) {
                console.warn("AG Grid: stateItem.aggFunc must be a string. if using your own aggregation functions, register the functions first before using them in get/set state. This is because it is intended for the column state to be stored and retrieved as simple JSON.");
              }
              if (column.isValueActive()) {
                column.setValueActive(false, source);
                removeFromArray(this.valueColumns, column);
              }
            }
          }
          var _a2 = getValue("rowGroup", "rowGroupIndex"), rowGroup = _a2.value1, rowGroupIndex = _a2.value2;
          if (rowGroup !== void 0 || rowGroupIndex !== void 0) {
            if (typeof rowGroupIndex === "number" || rowGroup) {
              if (!column.isRowGroupActive()) {
                column.setRowGroupActive(true, source);
                this.rowGroupColumns.push(column);
              }
              if (rowGroupIndexes && typeof rowGroupIndex === "number") {
                rowGroupIndexes[column.getId()] = rowGroupIndex;
              }
            } else {
              if (column.isRowGroupActive()) {
                column.setRowGroupActive(false, source);
                removeFromArray(this.rowGroupColumns, column);
              }
            }
          }
          var _b = getValue("pivot", "pivotIndex"), pivot = _b.value1, pivotIndex = _b.value2;
          if (pivot !== void 0 || pivotIndex !== void 0) {
            if (typeof pivotIndex === "number" || pivot) {
              if (!column.isPivotActive()) {
                column.setPivotActive(true, source);
                this.pivotColumns.push(column);
              }
              if (pivotIndexes && typeof pivotIndex === "number") {
                pivotIndexes[column.getId()] = pivotIndex;
              }
            } else {
              if (column.isPivotActive()) {
                column.setPivotActive(false, source);
                removeFromArray(this.pivotColumns, column);
              }
            }
          }
        };
        ColumnModel2.prototype.getGridColumns = function(keys2) {
          return this.getColumns(keys2, this.getGridColumn.bind(this));
        };
        ColumnModel2.prototype.getColumns = function(keys2, columnLookupCallback) {
          var foundColumns = [];
          if (keys2) {
            keys2.forEach(function(key) {
              var column = columnLookupCallback(key);
              if (column) {
                foundColumns.push(column);
              }
            });
          }
          return foundColumns;
        };
        ColumnModel2.prototype.getColumnWithValidation = function(key) {
          if (key == null) {
            return null;
          }
          var column = this.getGridColumn(key);
          if (!column) {
            console.warn("AG Grid: could not find column " + key);
          }
          return column;
        };
        ColumnModel2.prototype.getPrimaryColumn = function(key) {
          if (!this.primaryColumns) {
            return null;
          }
          return this.getColumn(key, this.primaryColumns, this.primaryColumnsMap);
        };
        ColumnModel2.prototype.getGridColumn = function(key) {
          return this.getColumn(key, this.gridColumns, this.gridColumnsMap);
        };
        ColumnModel2.prototype.getColumn = function(key, columnList, columnMap) {
          if (!key) {
            return null;
          }
          if (typeof key == "string" && columnMap[key]) {
            return columnMap[key];
          }
          for (var i = 0; i < columnList.length; i++) {
            if (this.columnsMatch(columnList[i], key)) {
              return columnList[i];
            }
          }
          return this.getAutoColumn(key);
        };
        ColumnModel2.prototype.getAutoColumn = function(key) {
          var _this = this;
          if (!this.groupAutoColumns || !exists(this.groupAutoColumns) || missing(this.groupAutoColumns)) {
            return null;
          }
          return find(this.groupAutoColumns, function(groupCol) {
            return _this.columnsMatch(groupCol, key);
          });
        };
        ColumnModel2.prototype.columnsMatch = function(column, key) {
          var columnMatches = column === key;
          var colDefMatches = column.getColDef() === key;
          var idMatches = column.getColId() == key;
          return columnMatches || colDefMatches || idMatches;
        };
        ColumnModel2.prototype.getDisplayNameForColumn = function(column, location, includeAggFunc) {
          if (includeAggFunc === void 0) {
            includeAggFunc = false;
          }
          if (!column) {
            return null;
          }
          var headerName = this.getHeaderName(column.getColDef(), column, null, null, location);
          if (includeAggFunc) {
            return this.wrapHeaderNameWithAggFunc(column, headerName);
          }
          return headerName;
        };
        ColumnModel2.prototype.getDisplayNameForOriginalColumnGroup = function(columnGroup, originalColumnGroup, location) {
          var colGroupDef = originalColumnGroup ? originalColumnGroup.getColGroupDef() : null;
          if (colGroupDef) {
            return this.getHeaderName(colGroupDef, null, columnGroup, originalColumnGroup, location);
          }
          return null;
        };
        ColumnModel2.prototype.getDisplayNameForColumnGroup = function(columnGroup, location) {
          return this.getDisplayNameForOriginalColumnGroup(columnGroup, columnGroup.getOriginalColumnGroup(), location);
        };
        ColumnModel2.prototype.getHeaderName = function(colDef, column, columnGroup, originalColumnGroup, location) {
          var headerValueGetter = colDef.headerValueGetter;
          if (headerValueGetter) {
            var params = {
              colDef,
              column,
              columnGroup,
              originalColumnGroup,
              location,
              api: this.gridOptionsWrapper.getApi(),
              context: this.gridOptionsWrapper.getContext()
            };
            if (typeof headerValueGetter === "function") {
              return headerValueGetter(params);
            } else if (typeof headerValueGetter === "string") {
              return this.expressionService.evaluate(headerValueGetter, params);
            }
            console.warn("ag-grid: headerValueGetter must be a function or a string");
            return "";
          } else if (colDef.headerName != null) {
            return colDef.headerName;
          } else if (colDef.field) {
            return camelCaseToHumanText(colDef.field);
          }
          return "";
        };
        ColumnModel2.prototype.wrapHeaderNameWithAggFunc = function(column, headerName) {
          if (this.gridOptionsWrapper.isSuppressAggFuncInHeader()) {
            return headerName;
          }
          var pivotValueColumn = column.getColDef().pivotValueColumn;
          var pivotActiveOnThisColumn = exists(pivotValueColumn);
          var aggFunc = null;
          var aggFuncFound;
          if (pivotActiveOnThisColumn) {
            aggFunc = pivotValueColumn ? pivotValueColumn.getAggFunc() : null;
            aggFuncFound = true;
          } else {
            var measureActive = column.isValueActive();
            var aggregationPresent = this.pivotMode || !this.isRowGroupEmpty();
            if (measureActive && aggregationPresent) {
              aggFunc = column.getAggFunc();
              aggFuncFound = true;
            } else {
              aggFuncFound = false;
            }
          }
          if (aggFuncFound) {
            var aggFuncString = typeof aggFunc === "string" ? aggFunc : "func";
            var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
            var aggFuncStringTranslated = localeTextFunc(aggFuncString, aggFuncString);
            return aggFuncStringTranslated + "(" + headerName + ")";
          }
          return headerName;
        };
        ColumnModel2.prototype.getColumnGroup = function(colId, instanceId) {
          if (!colId) {
            return null;
          }
          if (colId instanceof ColumnGroup) {
            return colId;
          }
          var allColumnGroups = this.getAllDisplayedTrees();
          var checkInstanceId = typeof instanceId === "number";
          var result = null;
          this.columnUtils.depthFirstAllColumnTreeSearch(allColumnGroups, function(child) {
            if (child instanceof ColumnGroup) {
              var columnGroup = child;
              var matched = void 0;
              if (checkInstanceId) {
                matched = colId === columnGroup.getGroupId() && instanceId === columnGroup.getInstanceId();
              } else {
                matched = colId === columnGroup.getGroupId();
              }
              if (matched) {
                result = columnGroup;
              }
            }
          });
          return result;
        };
        ColumnModel2.prototype.isReady = function() {
          return this.ready;
        };
        ColumnModel2.prototype.extractValueColumns = function(source, oldPrimaryColumns) {
          this.valueColumns = this.extractColumns(
            oldPrimaryColumns,
            this.valueColumns,
            function(col, flag) {
              return col.setValueActive(flag, source);
            },
            // aggFunc doesn't have index variant, cos order of value cols doesn't matter, so always return null
            function() {
              return void 0;
            },
            function() {
              return void 0;
            },
            // aggFunc is a string, so return it's existence
            function(colDef) {
              var aggFunc = colDef.aggFunc;
              if (aggFunc === null || aggFunc === "") {
                return null;
              }
              if (aggFunc === void 0) {
                return;
              }
              return !!aggFunc;
            },
            function(colDef) {
              return colDef.initialAggFunc != null && colDef.initialAggFunc != "";
            }
          );
          this.valueColumns.forEach(function(col) {
            var colDef = col.getColDef();
            if (colDef.aggFunc != null && colDef.aggFunc != "") {
              col.setAggFunc(colDef.aggFunc);
            } else {
              if (!col.getAggFunc()) {
                col.setAggFunc(colDef.initialAggFunc);
              }
            }
          });
        };
        ColumnModel2.prototype.extractRowGroupColumns = function(source, oldPrimaryColumns) {
          this.rowGroupColumns = this.extractColumns(oldPrimaryColumns, this.rowGroupColumns, function(col, flag) {
            return col.setRowGroupActive(flag, source);
          }, function(colDef) {
            return colDef.rowGroupIndex;
          }, function(colDef) {
            return colDef.initialRowGroupIndex;
          }, function(colDef) {
            return colDef.rowGroup;
          }, function(colDef) {
            return colDef.initialRowGroup;
          });
        };
        ColumnModel2.prototype.extractColumns = function(oldPrimaryColumns, previousCols, setFlagFunc, getIndexFunc, getInitialIndexFunc, getValueFunc, getInitialValueFunc) {
          if (oldPrimaryColumns === void 0) {
            oldPrimaryColumns = [];
          }
          if (previousCols === void 0) {
            previousCols = [];
          }
          var colsWithIndex = [];
          var colsWithValue = [];
          (this.primaryColumns || []).forEach(function(col) {
            var colIsNew = oldPrimaryColumns.indexOf(col) < 0;
            var colDef = col.getColDef();
            var value = attrToBoolean(getValueFunc(colDef));
            var initialValue = attrToBoolean(getInitialValueFunc(colDef));
            var index = attrToNumber(getIndexFunc(colDef));
            var initialIndex = attrToNumber(getInitialIndexFunc(colDef));
            var include;
            var valuePresent = value !== void 0;
            var indexPresent = index !== void 0;
            var initialValuePresent = initialValue !== void 0;
            var initialIndexPresent = initialIndex !== void 0;
            if (valuePresent) {
              include = value;
            } else if (indexPresent) {
              if (index === null) {
                include = false;
              } else {
                include = index >= 0;
              }
            } else {
              if (colIsNew) {
                if (initialValuePresent) {
                  include = initialValue;
                } else if (initialIndexPresent) {
                  include = initialIndex != null && initialIndex >= 0;
                } else {
                  include = false;
                }
              } else {
                include = previousCols.indexOf(col) >= 0;
              }
            }
            if (include) {
              var useIndex = colIsNew ? index != null || initialIndex != null : index != null;
              useIndex ? colsWithIndex.push(col) : colsWithValue.push(col);
            }
          });
          var getIndexForCol = function(col) {
            var index = getIndexFunc(col.getColDef());
            var defaultIndex = getInitialIndexFunc(col.getColDef());
            return index != null ? index : defaultIndex;
          };
          colsWithIndex.sort(function(colA, colB) {
            var indexA = getIndexForCol(colA);
            var indexB = getIndexForCol(colB);
            if (indexA === indexB) {
              return 0;
            }
            if (indexA < indexB) {
              return -1;
            }
            return 1;
          });
          var res = [].concat(colsWithIndex);
          previousCols.forEach(function(col) {
            if (colsWithValue.indexOf(col) >= 0) {
              res.push(col);
            }
          });
          colsWithValue.forEach(function(col) {
            if (res.indexOf(col) < 0) {
              res.push(col);
            }
          });
          previousCols.forEach(function(col) {
            if (res.indexOf(col) < 0) {
              setFlagFunc(col, false);
            }
          });
          res.forEach(function(col) {
            if (previousCols.indexOf(col) < 0) {
              setFlagFunc(col, true);
            }
          });
          return res;
        };
        ColumnModel2.prototype.extractPivotColumns = function(source, oldPrimaryColumns) {
          this.pivotColumns = this.extractColumns(oldPrimaryColumns, this.pivotColumns, function(col, flag) {
            return col.setPivotActive(flag, source);
          }, function(colDef) {
            return colDef.pivotIndex;
          }, function(colDef) {
            return colDef.initialPivotIndex;
          }, function(colDef) {
            return colDef.pivot;
          }, function(colDef) {
            return colDef.initialPivot;
          });
        };
        ColumnModel2.prototype.resetColumnGroupState = function(source) {
          if (source === void 0) {
            source = "api";
          }
          var stateItems = [];
          this.columnUtils.depthFirstOriginalTreeSearch(null, this.primaryColumnTree, function(child) {
            if (child instanceof ProvidedColumnGroup) {
              var colGroupDef = child.getColGroupDef();
              var groupState = {
                groupId: child.getGroupId(),
                open: !colGroupDef ? void 0 : colGroupDef.openByDefault
              };
              stateItems.push(groupState);
            }
          });
          this.setColumnGroupState(stateItems, source);
        };
        ColumnModel2.prototype.getColumnGroupState = function() {
          var columnGroupState = [];
          this.columnUtils.depthFirstOriginalTreeSearch(null, this.gridBalancedTree, function(node) {
            if (node instanceof ProvidedColumnGroup) {
              var originalColumnGroup = node;
              columnGroupState.push({
                groupId: originalColumnGroup.getGroupId(),
                open: originalColumnGroup.isExpanded()
              });
            }
          });
          return columnGroupState;
        };
        ColumnModel2.prototype.setColumnGroupState = function(stateItems, source) {
          var _this = this;
          if (source === void 0) {
            source = "api";
          }
          this.columnAnimationService.start();
          var impactedGroups = [];
          stateItems.forEach(function(stateItem) {
            var groupKey = stateItem.groupId;
            var newValue = stateItem.open;
            var originalColumnGroup = _this.getOriginalColumnGroup(groupKey);
            if (!originalColumnGroup) {
              return;
            }
            if (originalColumnGroup.isExpanded() === newValue) {
              return;
            }
            _this.logger.log("columnGroupOpened(" + originalColumnGroup.getGroupId() + "," + newValue + ")");
            originalColumnGroup.setExpanded(newValue);
            impactedGroups.push(originalColumnGroup);
          });
          this.updateGroupsAndDisplayedColumns(source);
          this.setFirstRightAndLastLeftPinned(source);
          impactedGroups.forEach(function(originalColumnGroup) {
            var event = {
              type: Events.EVENT_COLUMN_GROUP_OPENED,
              columnGroup: originalColumnGroup,
              api: _this.gridApi,
              columnApi: _this.columnApi
            };
            _this.eventService.dispatchEvent(event);
          });
          this.columnAnimationService.finish();
        };
        ColumnModel2.prototype.setColumnGroupOpened = function(key, newValue, source) {
          if (source === void 0) {
            source = "api";
          }
          var keyAsString;
          if (key instanceof ProvidedColumnGroup) {
            keyAsString = key.getId();
          } else {
            keyAsString = key || "";
          }
          this.setColumnGroupState([{ groupId: keyAsString, open: newValue }], source);
        };
        ColumnModel2.prototype.getOriginalColumnGroup = function(key) {
          if (key instanceof ProvidedColumnGroup) {
            return key;
          }
          if (typeof key !== "string") {
            console.error("AG Grid: group key must be a string");
          }
          var res = null;
          this.columnUtils.depthFirstOriginalTreeSearch(null, this.gridBalancedTree, function(node) {
            if (node instanceof ProvidedColumnGroup) {
              var originalColumnGroup = node;
              if (originalColumnGroup.getId() === key) {
                res = originalColumnGroup;
              }
            }
          });
          return res;
        };
        ColumnModel2.prototype.calculateColumnsForDisplay = function() {
          var _this = this;
          var columnsForDisplay;
          if (this.pivotMode && !this.secondaryColumnsPresent) {
            columnsForDisplay = this.gridColumns.filter(function(column) {
              var isAutoGroupCol = _this.groupAutoColumns && includes(_this.groupAutoColumns, column);
              var isValueCol = _this.valueColumns && includes(_this.valueColumns, column);
              return isAutoGroupCol || isValueCol;
            });
          } else {
            columnsForDisplay = this.gridColumns.filter(function(column) {
              var isAutoGroupCol = _this.groupAutoColumns && includes(_this.groupAutoColumns, column);
              return isAutoGroupCol || column.isVisible();
            });
          }
          return columnsForDisplay;
        };
        ColumnModel2.prototype.checkColSpanActiveInCols = function(columns) {
          var result = false;
          columns.forEach(function(col) {
            if (exists(col.getColDef().colSpan)) {
              result = true;
            }
          });
          return result;
        };
        ColumnModel2.prototype.calculateColumnsForGroupDisplay = function() {
          var _this = this;
          this.groupDisplayColumns = [];
          var checkFunc = function(col) {
            var colDef = col.getColDef();
            if (colDef && exists(colDef.showRowGroup)) {
              _this.groupDisplayColumns.push(col);
            }
          };
          this.gridColumns.forEach(checkFunc);
          if (this.groupAutoColumns) {
            this.groupAutoColumns.forEach(checkFunc);
          }
        };
        ColumnModel2.prototype.getGroupDisplayColumns = function() {
          return this.groupDisplayColumns;
        };
        ColumnModel2.prototype.updateDisplayedColumns = function(source) {
          var columnsForDisplay = this.calculateColumnsForDisplay();
          this.buildDisplayedTrees(columnsForDisplay);
          this.calculateColumnsForGroupDisplay();
          this.updateGroupsAndDisplayedColumns(source);
          this.setFirstRightAndLastLeftPinned(source);
        };
        ColumnModel2.prototype.isSecondaryColumnsPresent = function() {
          return this.secondaryColumnsPresent;
        };
        ColumnModel2.prototype.setSecondaryColumns = function(colDefs, source) {
          if (source === void 0) {
            source = "api";
          }
          var newColsPresent = colDefs && colDefs.length > 0;
          if (!newColsPresent && !this.secondaryColumnsPresent) {
            return;
          }
          if (newColsPresent) {
            this.processSecondaryColumnDefinitions(colDefs);
            var balancedTreeResult = this.columnFactory.createColumnTree(colDefs, false);
            this.secondaryBalancedTree = balancedTreeResult.columnTree;
            this.secondaryHeaderRowCount = balancedTreeResult.treeDept + 1;
            this.secondaryColumns = this.getColumnsFromTree(this.secondaryBalancedTree);
            this.secondaryColumnsPresent = true;
          } else {
            this.secondaryBalancedTree = null;
            this.secondaryHeaderRowCount = -1;
            this.secondaryColumns = null;
            this.secondaryColumnsPresent = false;
          }
          this.updateGridColumns();
          this.updateDisplayedColumns(source);
        };
        ColumnModel2.prototype.processSecondaryColumnDefinitions = function(colDefs) {
          var columnCallback = this.gridOptionsWrapper.getProcessSecondaryColDefFunc();
          var groupCallback = this.gridOptionsWrapper.getProcessSecondaryColGroupDefFunc();
          if (!columnCallback && !groupCallback) {
            return void 0;
          }
          var searchForColDefs = function(colDefs2) {
            colDefs2.forEach(function(abstractColDef) {
              var isGroup = exists(abstractColDef.children);
              if (isGroup) {
                var colGroupDef = abstractColDef;
                if (groupCallback) {
                  groupCallback(colGroupDef);
                }
                searchForColDefs(colGroupDef.children);
              } else {
                var colDef = abstractColDef;
                if (columnCallback) {
                  columnCallback(colDef);
                }
              }
            });
          };
          if (colDefs) {
            searchForColDefs(colDefs);
          }
        };
        ColumnModel2.prototype.updateGridColumns = function() {
          var _this = this;
          if (this.gridColsArePrimary) {
            this.lastPrimaryOrder = this.gridColumns;
          }
          if (this.secondaryColumns && this.secondaryBalancedTree) {
            this.gridBalancedTree = this.secondaryBalancedTree.slice();
            this.gridHeaderRowCount = this.secondaryHeaderRowCount;
            this.gridColumns = this.secondaryColumns.slice();
            this.gridColsArePrimary = false;
          } else if (this.primaryColumns) {
            this.gridBalancedTree = this.primaryColumnTree.slice();
            this.gridHeaderRowCount = this.primaryHeaderRowCount;
            this.gridColumns = this.primaryColumns.slice();
            this.gridColsArePrimary = true;
            this.orderGridColsLikeLastPrimary();
          }
          this.addAutoGroupToGridColumns();
          this.gridColumns = this.putFixedColumnsFirst(this.gridColumns);
          this.setupQuickFilterColumns();
          this.clearDisplayedAndViewportColumns();
          this.colSpanActive = this.checkColSpanActiveInCols(this.gridColumns);
          this.gridColumnsMap = {};
          this.gridColumns.forEach(function(col) {
            return _this.gridColumnsMap[col.getId()] = col;
          });
          this.setAutoHeightActive();
          var event = {
            type: Events.EVENT_GRID_COLUMNS_CHANGED,
            api: this.gridApi,
            columnApi: this.columnApi
          };
          this.eventService.dispatchEvent(event);
        };
        ColumnModel2.prototype.setAutoHeightActive = function() {
          this.autoHeightActive = this.gridColumns.filter(function(col) {
            return col.getColDef().autoHeight;
          }).length > 0;
          if (this.autoHeightActive) {
            this.autoHeightActiveAtLeastOnce = true;
            var rowModelType = this.rowModel.getType();
            var supportedRowModel = rowModelType === Constants.ROW_MODEL_TYPE_CLIENT_SIDE || rowModelType === Constants.ROW_MODEL_TYPE_SERVER_SIDE;
            if (!supportedRowModel) {
              var message_1 = "AG Grid - autoHeight columns only work with Client Side Row Model and Server Side Row Model.";
              doOnce(function() {
                return console.warn(message_1);
              }, "autoHeightActive.wrongRowModel");
            }
          }
        };
        ColumnModel2.prototype.orderGridColsLikeLastPrimary = function() {
          if (missing(this.lastPrimaryOrder)) {
            return;
          }
          var lastPrimaryOrderMapped = convertToMap(this.lastPrimaryOrder.map(function(col, index) {
            return [col, index];
          }));
          var noColsFound = true;
          this.gridColumns.forEach(function(col) {
            if (lastPrimaryOrderMapped.has(col)) {
              noColsFound = false;
            }
          });
          if (noColsFound) {
            return;
          }
          var gridColsMap = convertToMap(this.gridColumns.map(function(col) {
            return [col, true];
          }));
          var oldColsOrdered = this.lastPrimaryOrder.filter(function(col) {
            return gridColsMap.has(col);
          });
          var oldColsMap = convertToMap(oldColsOrdered.map(function(col) {
            return [col, true];
          }));
          var newColsOrdered = this.gridColumns.filter(function(col) {
            return !oldColsMap.has(col);
          });
          var newGridColumns = oldColsOrdered.slice();
          newColsOrdered.forEach(function(newCol) {
            var parent = newCol.getOriginalParent();
            if (!parent) {
              newGridColumns.push(newCol);
              return;
            }
            var siblings = [];
            while (!siblings.length && parent) {
              var leafCols = parent.getLeafColumns();
              leafCols.forEach(function(leafCol) {
                var presentInNewGriColumns = newGridColumns.indexOf(leafCol) >= 0;
                var noYetInSiblings = siblings.indexOf(leafCol) < 0;
                if (presentInNewGriColumns && noYetInSiblings) {
                  siblings.push(leafCol);
                }
              });
              parent = parent.getOriginalParent();
            }
            if (!siblings.length) {
              newGridColumns.push(newCol);
              return;
            }
            var indexes = siblings.map(function(col) {
              return newGridColumns.indexOf(col);
            });
            var lastIndex = Math.max.apply(Math, indexes);
            insertIntoArray(newGridColumns, newCol, lastIndex + 1);
          });
          this.gridColumns = newGridColumns;
        };
        ColumnModel2.prototype.isPrimaryColumnGroupsPresent = function() {
          return this.primaryHeaderRowCount > 1;
        };
        ColumnModel2.prototype.setupQuickFilterColumns = function() {
          if (this.groupAutoColumns) {
            this.columnsForQuickFilter = (this.primaryColumns || []).concat(this.groupAutoColumns);
          } else if (this.primaryColumns) {
            this.columnsForQuickFilter = this.primaryColumns;
          }
        };
        ColumnModel2.prototype.putFixedColumnsFirst = function(cols) {
          var locked = cols.filter(function(c) {
            return c.getColDef().lockPosition;
          });
          var unlocked = cols.filter(function(c) {
            return !c.getColDef().lockPosition;
          });
          return locked.concat(unlocked);
        };
        ColumnModel2.prototype.addAutoGroupToGridColumns = function() {
          this.createGroupAutoColumnsIfNeeded();
          if (missing(this.groupAutoColumns)) {
            return;
          }
          this.gridColumns = this.groupAutoColumns ? this.groupAutoColumns.concat(this.gridColumns) : this.gridColumns;
          var autoColBalancedTree = this.columnFactory.createForAutoGroups(this.groupAutoColumns, this.gridBalancedTree);
          this.gridBalancedTree = autoColBalancedTree.concat(this.gridBalancedTree);
        };
        ColumnModel2.prototype.clearDisplayedAndViewportColumns = function() {
          this.displayedTreeLeft = [];
          this.displayedTreeRight = [];
          this.displayedTreeCentre = [];
          this.viewportRowLeft = {};
          this.viewportRowRight = {};
          this.viewportRowCenter = {};
          this.displayedColumnsLeft = [];
          this.displayedColumnsRight = [];
          this.displayedColumnsCenter = [];
          this.displayedColumns = [];
          this.viewportColumns = [];
        };
        ColumnModel2.prototype.updateGroupsAndDisplayedColumns = function(source) {
          this.updateOpenClosedVisibilityInColumnGroups();
          this.deriveDisplayedColumns(source);
          this.refreshFlexedColumns();
          this.extractViewport();
          this.updateBodyWidths();
          var event = {
            type: Events.EVENT_DISPLAYED_COLUMNS_CHANGED,
            api: this.gridApi,
            columnApi: this.columnApi
          };
          this.eventService.dispatchEvent(event);
        };
        ColumnModel2.prototype.deriveDisplayedColumns = function(source) {
          this.derivedDisplayedColumnsFromDisplayedTree(this.displayedTreeLeft, this.displayedColumnsLeft);
          this.derivedDisplayedColumnsFromDisplayedTree(this.displayedTreeCentre, this.displayedColumnsCenter);
          this.derivedDisplayedColumnsFromDisplayedTree(this.displayedTreeRight, this.displayedColumnsRight);
          this.joinDisplayedColumns();
          this.setLeftValues(source);
          this.displayedAutoHeightCols = this.displayedColumns.filter(function(col) {
            return col.getColDef().autoHeight;
          });
        };
        ColumnModel2.prototype.isAutoRowHeightActive = function() {
          return this.autoHeightActive;
        };
        ColumnModel2.prototype.wasAutoRowHeightEverActive = function() {
          return this.autoHeightActiveAtLeastOnce;
        };
        ColumnModel2.prototype.joinDisplayedColumns = function() {
          if (this.gridOptionsWrapper.isEnableRtl()) {
            this.displayedColumns = this.displayedColumnsRight.concat(this.displayedColumnsCenter).concat(this.displayedColumnsLeft);
          } else {
            this.displayedColumns = this.displayedColumnsLeft.concat(this.displayedColumnsCenter).concat(this.displayedColumnsRight);
          }
        };
        ColumnModel2.prototype.setLeftValues = function(source) {
          this.setLeftValuesOfColumns(source);
          this.setLeftValuesOfGroups();
        };
        ColumnModel2.prototype.setLeftValuesOfColumns = function(source) {
          var _this = this;
          if (!this.primaryColumns) {
            return;
          }
          var allColumns = this.primaryColumns.slice(0);
          var doingRtl = this.gridOptionsWrapper.isEnableRtl();
          [
            this.displayedColumnsLeft,
            this.displayedColumnsRight,
            this.displayedColumnsCenter
          ].forEach(function(columns) {
            if (doingRtl) {
              var left_1 = _this.getWidthOfColsInList(columns);
              columns.forEach(function(column) {
                left_1 -= column.getActualWidth();
                column.setLeft(left_1, source);
              });
            } else {
              var left_2 = 0;
              columns.forEach(function(column) {
                column.setLeft(left_2, source);
                left_2 += column.getActualWidth();
              });
            }
            removeAllFromArray(allColumns, columns);
          });
          allColumns.forEach(function(column) {
            column.setLeft(null, source);
          });
        };
        ColumnModel2.prototype.setLeftValuesOfGroups = function() {
          [
            this.displayedTreeLeft,
            this.displayedTreeRight,
            this.displayedTreeCentre
          ].forEach(function(columns) {
            columns.forEach(function(column) {
              if (column instanceof ColumnGroup) {
                var columnGroup = column;
                columnGroup.checkLeft();
              }
            });
          });
        };
        ColumnModel2.prototype.derivedDisplayedColumnsFromDisplayedTree = function(tree, columns) {
          columns.length = 0;
          this.columnUtils.depthFirstDisplayedColumnTreeSearch(tree, function(child) {
            if (child instanceof Column) {
              columns.push(child);
            }
          });
        };
        ColumnModel2.prototype.extractViewportColumns = function() {
          if (this.suppressColumnVirtualisation) {
            this.viewportColumnsCenter = this.displayedColumnsCenter;
          } else {
            this.viewportColumnsCenter = this.filterOutColumnsWithinViewport();
          }
          this.viewportColumns = this.viewportColumnsCenter.concat(this.displayedColumnsLeft).concat(this.displayedColumnsRight);
        };
        ColumnModel2.prototype.getVirtualHeaderGroupRow = function(type, dept) {
          var result;
          switch (type) {
            case Constants.PINNED_LEFT:
              result = this.viewportRowLeft[dept];
              break;
            case Constants.PINNED_RIGHT:
              result = this.viewportRowRight[dept];
              break;
            default:
              result = this.viewportRowCenter[dept];
              break;
          }
          if (missing(result)) {
            result = [];
          }
          return result;
        };
        ColumnModel2.prototype.extractViewportRows = function() {
          this.viewportRowLeft = {};
          this.viewportRowRight = {};
          this.viewportRowCenter = {};
          var virtualColIds = {};
          this.viewportColumns.forEach(function(col) {
            return virtualColIds[col.getId()] = true;
          });
          var testGroup = function(children, result, dept) {
            var returnValue = false;
            for (var i = 0; i < children.length; i++) {
              var child = children[i];
              var addThisItem = false;
              if (child instanceof Column) {
                addThisItem = virtualColIds[child.getId()] === true;
              } else {
                var columnGroup = child;
                var displayedChildren = columnGroup.getDisplayedChildren();
                if (displayedChildren) {
                  addThisItem = testGroup(displayedChildren, result, dept + 1);
                }
              }
              if (addThisItem) {
                returnValue = true;
                if (!result[dept]) {
                  result[dept] = [];
                }
                result[dept].push(child);
              }
            }
            return returnValue;
          };
          testGroup(this.displayedTreeLeft, this.viewportRowLeft, 0);
          testGroup(this.displayedTreeRight, this.viewportRowRight, 0);
          testGroup(this.displayedTreeCentre, this.viewportRowCenter, 0);
        };
        ColumnModel2.prototype.extractViewport = function() {
          this.extractViewportColumns();
          this.extractViewportRows();
        };
        ColumnModel2.prototype.filterOutColumnsWithinViewport = function() {
          return this.displayedColumnsCenter.filter(this.isColumnInViewport.bind(this));
        };
        ColumnModel2.prototype.refreshFlexedColumns = function(params) {
          var _this = this;
          if (params === void 0) {
            params = {};
          }
          var source = params.source ? params.source : "flex";
          if (params.viewportWidth != null) {
            this.flexViewportWidth = params.viewportWidth;
          }
          if (!this.flexViewportWidth) {
            return [];
          }
          var flexAfterDisplayIndex = -1;
          if (params.resizingCols) {
            params.resizingCols.forEach(function(col2) {
              var indexOfCol = _this.displayedColumnsCenter.indexOf(col2);
              if (flexAfterDisplayIndex < indexOfCol) {
                flexAfterDisplayIndex = indexOfCol;
              }
            });
          }
          var isColFlex = function(col2) {
            var afterResizingCols = _this.displayedColumnsCenter.indexOf(col2) > flexAfterDisplayIndex;
            return col2.getFlex() && afterResizingCols;
          };
          var knownWidthColumns = this.displayedColumnsCenter.filter(function(col2) {
            return !isColFlex(col2);
          });
          var flexingColumns = this.displayedColumnsCenter.filter(function(col2) {
            return isColFlex(col2);
          });
          var changedColumns = [];
          if (!flexingColumns.length) {
            return [];
          }
          var flexingColumnSizes = [];
          var spaceForFlexingColumns;
          outer:
            while (true) {
              var totalFlex = flexingColumns.reduce(function(count, col2) {
                return count + col2.getFlex();
              }, 0);
              spaceForFlexingColumns = this.flexViewportWidth - this.getWidthOfColsInList(knownWidthColumns);
              for (var i = 0; i < flexingColumns.length; i++) {
                var col = flexingColumns[i];
                var widthByFlexRule = spaceForFlexingColumns * col.getFlex() / totalFlex;
                var constrainedWidth = 0;
                var minWidth = col.getMinWidth();
                var maxWidth = col.getMaxWidth();
                if (exists(minWidth) && widthByFlexRule < minWidth) {
                  constrainedWidth = minWidth;
                } else if (exists(maxWidth) && widthByFlexRule > maxWidth) {
                  constrainedWidth = maxWidth;
                }
                if (constrainedWidth) {
                  col.setActualWidth(constrainedWidth, source);
                  removeFromArray(flexingColumns, col);
                  changedColumns.push(col);
                  knownWidthColumns.push(col);
                  continue outer;
                }
                flexingColumnSizes[i] = Math.round(widthByFlexRule);
              }
              break;
            }
          var remainingSpace = spaceForFlexingColumns;
          flexingColumns.forEach(function(col2, i2) {
            col2.setActualWidth(Math.min(flexingColumnSizes[i2], remainingSpace), source);
            changedColumns.push(col2);
            remainingSpace -= flexingColumnSizes[i2];
          });
          if (!params.skipSetLeft) {
            this.setLeftValues(source);
          }
          if (params.updateBodyWidths) {
            this.updateBodyWidths();
          }
          if (params.fireResizedEvent) {
            this.fireColumnResizedEvent(changedColumns, true, source, flexingColumns);
          }
          if (!this.flexColsCalculatedAtLestOnce) {
            if (this.gridOptionsWrapper.isRowModelDefault()) {
              this.rowModel.resetRowHeights();
            }
            this.flexColsCalculatedAtLestOnce = true;
          }
          return flexingColumns;
        };
        ColumnModel2.prototype.sizeColumnsToFit = function(gridWidth, source, silent) {
          if (source === void 0) {
            source = "sizeColumnsToFit";
          }
          var allDisplayedColumns = this.getAllDisplayedColumns();
          if (gridWidth <= 0 || !allDisplayedColumns.length) {
            return;
          }
          var colsToSpread = [];
          var colsToNotSpread = [];
          allDisplayedColumns.forEach(function(column2) {
            if (column2.getColDef().suppressSizeToFit === true) {
              colsToNotSpread.push(column2);
            } else {
              colsToSpread.push(column2);
            }
          });
          var colsToFireEventFor = colsToSpread.slice(0);
          var finishedResizing = false;
          var moveToNotSpread = function(column2) {
            removeFromArray(colsToSpread, column2);
            colsToNotSpread.push(column2);
          };
          colsToSpread.forEach(function(column2) {
            return column2.resetActualWidth(source);
          });
          while (!finishedResizing) {
            finishedResizing = true;
            var availablePixels = gridWidth - this.getWidthOfColsInList(colsToNotSpread);
            if (availablePixels <= 0) {
              colsToSpread.forEach(function(column2) {
                column2.setMinimum(source);
              });
            } else {
              var scale = availablePixels / this.getWidthOfColsInList(colsToSpread);
              var pixelsForLastCol = availablePixels;
              for (var i = colsToSpread.length - 1; i >= 0; i--) {
                var column = colsToSpread[i];
                var minWidth = column.getMinWidth();
                var maxWidth = column.getMaxWidth();
                var newWidth = Math.round(column.getActualWidth() * scale);
                if (exists(minWidth) && newWidth < minWidth) {
                  newWidth = minWidth;
                  moveToNotSpread(column);
                  finishedResizing = false;
                } else if (exists(maxWidth) && column.isGreaterThanMax(newWidth)) {
                  newWidth = maxWidth;
                  moveToNotSpread(column);
                  finishedResizing = false;
                } else if (i === 0) {
                  newWidth = pixelsForLastCol;
                }
                column.setActualWidth(newWidth, source, true);
                pixelsForLastCol -= newWidth;
              }
            }
          }
          colsToFireEventFor.forEach(function(col) {
            col.fireColumnWidthChangedEvent(source);
          });
          this.setLeftValues(source);
          this.updateBodyWidths();
          if (silent) {
            return;
          }
          this.fireColumnResizedEvent(colsToFireEventFor, true, source);
        };
        ColumnModel2.prototype.buildDisplayedTrees = function(visibleColumns) {
          var leftVisibleColumns = [];
          var rightVisibleColumns = [];
          var centerVisibleColumns = [];
          visibleColumns.forEach(function(column) {
            switch (column.getPinned()) {
              case "left":
                leftVisibleColumns.push(column);
                break;
              case "right":
                rightVisibleColumns.push(column);
                break;
              default:
                centerVisibleColumns.push(column);
                break;
            }
          });
          var groupInstanceIdCreator = new GroupInstanceIdCreator();
          this.displayedTreeLeft = this.displayedGroupCreator.createDisplayedGroups(leftVisibleColumns, this.gridBalancedTree, groupInstanceIdCreator, Constants.PINNED_LEFT, this.displayedTreeLeft);
          this.displayedTreeRight = this.displayedGroupCreator.createDisplayedGroups(rightVisibleColumns, this.gridBalancedTree, groupInstanceIdCreator, Constants.PINNED_RIGHT, this.displayedTreeRight);
          this.displayedTreeCentre = this.displayedGroupCreator.createDisplayedGroups(centerVisibleColumns, this.gridBalancedTree, groupInstanceIdCreator, null, this.displayedTreeCentre);
          this.updateDisplayedMap();
        };
        ColumnModel2.prototype.updateDisplayedMap = function() {
          var _this = this;
          this.displayedColumnsAndGroupsMap = {};
          var func = function(child) {
            _this.displayedColumnsAndGroupsMap[child.getUniqueId()] = child;
          };
          this.columnUtils.depthFirstAllColumnTreeSearch(this.displayedTreeCentre, func);
          this.columnUtils.depthFirstAllColumnTreeSearch(this.displayedTreeLeft, func);
          this.columnUtils.depthFirstAllColumnTreeSearch(this.displayedTreeRight, func);
        };
        ColumnModel2.prototype.isDisplayed = function(item) {
          var fromMap = this.displayedColumnsAndGroupsMap[item.getUniqueId()];
          return fromMap === item;
        };
        ColumnModel2.prototype.updateOpenClosedVisibilityInColumnGroups = function() {
          var allColumnGroups = this.getAllDisplayedTrees();
          this.columnUtils.depthFirstAllColumnTreeSearch(allColumnGroups, function(child) {
            if (child instanceof ColumnGroup) {
              var columnGroup = child;
              columnGroup.calculateDisplayedColumns();
            }
          });
        };
        ColumnModel2.prototype.getGroupAutoColumns = function() {
          return this.groupAutoColumns;
        };
        ColumnModel2.prototype.createGroupAutoColumnsIfNeeded = function() {
          if (!this.autoGroupsNeedBuilding) {
            return;
          }
          this.autoGroupsNeedBuilding = false;
          var groupFullWidthRow = this.gridOptionsWrapper.isGroupUseEntireRow(this.pivotMode);
          var suppressAutoColumn = this.pivotMode ? this.gridOptionsWrapper.isPivotSuppressAutoColumn() : this.gridOptionsWrapper.isGroupSuppressAutoColumn();
          var groupingActive = this.rowGroupColumns.length > 0 || this.usingTreeData;
          var needAutoColumns = groupingActive && !suppressAutoColumn && !groupFullWidthRow;
          if (needAutoColumns) {
            var newAutoGroupCols = this.autoGroupColService.createAutoGroupColumns(this.rowGroupColumns);
            var autoColsDifferent = !this.autoColsEqual(newAutoGroupCols, this.groupAutoColumns);
            if (autoColsDifferent || this.forceRecreateAutoGroups) {
              this.groupAutoColumns = newAutoGroupCols;
            }
          } else {
            this.groupAutoColumns = null;
          }
        };
        ColumnModel2.prototype.autoColsEqual = function(colsA, colsB) {
          return areEqual(colsA, colsB, function(a, b) {
            return a.getColId() === b.getColId();
          });
        };
        ColumnModel2.prototype.getWidthOfColsInList = function(columnList) {
          return columnList.reduce(function(width, col) {
            return width + col.getActualWidth();
          }, 0);
        };
        ColumnModel2.prototype.getGridBalancedTree = function() {
          return this.gridBalancedTree;
        };
        ColumnModel2.prototype.hasFloatingFilters = function() {
          if (!this.gridColumns) {
            return false;
          }
          var res = this.gridColumns.some(function(col) {
            return col.getColDef().floatingFilter;
          });
          return res;
        };
        ColumnModel2.prototype.getFirstDisplayedColumn = function() {
          var isRtl = this.gridOptionsWrapper.isEnableRtl();
          var queryOrder = [
            "getDisplayedLeftColumns",
            "getDisplayedCenterColumns",
            "getDisplayedRightColumns"
          ];
          if (isRtl) {
            queryOrder.reverse();
          }
          for (var i = 0; i < queryOrder.length; i++) {
            var container = this[queryOrder[i]]();
            if (container.length) {
              return isRtl ? last(container) : container[0];
            }
          }
          return null;
        };
        __decorate$5([
          Autowired("expressionService")
        ], ColumnModel2.prototype, "expressionService", void 0);
        __decorate$5([
          Autowired("columnFactory")
        ], ColumnModel2.prototype, "columnFactory", void 0);
        __decorate$5([
          Autowired("displayedGroupCreator")
        ], ColumnModel2.prototype, "displayedGroupCreator", void 0);
        __decorate$5([
          Autowired("autoWidthCalculator")
        ], ColumnModel2.prototype, "autoWidthCalculator", void 0);
        __decorate$5([
          Autowired("columnUtils")
        ], ColumnModel2.prototype, "columnUtils", void 0);
        __decorate$5([
          Autowired("columnAnimationService")
        ], ColumnModel2.prototype, "columnAnimationService", void 0);
        __decorate$5([
          Autowired("autoGroupColService")
        ], ColumnModel2.prototype, "autoGroupColService", void 0);
        __decorate$5([
          Optional("aggFuncService")
        ], ColumnModel2.prototype, "aggFuncService", void 0);
        __decorate$5([
          Optional("valueCache")
        ], ColumnModel2.prototype, "valueCache", void 0);
        __decorate$5([
          Optional("animationFrameService")
        ], ColumnModel2.prototype, "animationFrameService", void 0);
        __decorate$5([
          Autowired("rowModel")
        ], ColumnModel2.prototype, "rowModel", void 0);
        __decorate$5([
          Autowired("columnApi")
        ], ColumnModel2.prototype, "columnApi", void 0);
        __decorate$5([
          Autowired("gridApi")
        ], ColumnModel2.prototype, "gridApi", void 0);
        __decorate$5([
          Autowired("sortController")
        ], ColumnModel2.prototype, "sortController", void 0);
        __decorate$5([
          Autowired("columnDefFactory")
        ], ColumnModel2.prototype, "columnDefFactory", void 0);
        __decorate$5([
          PostConstruct
        ], ColumnModel2.prototype, "init", null);
        __decorate$5([
          __param$2(0, Qualifier("loggerFactory"))
        ], ColumnModel2.prototype, "setBeans", null);
        ColumnModel2 = __decorate$5([
          Bean3("columnModel")
        ], ColumnModel2);
        return ColumnModel2;
      }(BeanStub)
    );
    function padStartWidthZeros(value, totalStringSize) {
      return padStart(value.toString(), totalStringSize, "0");
    }
    function createArrayOfNumbers(first, last2) {
      var result = [];
      for (var i = first; i <= last2; i++) {
        result.push(i);
      }
      return result;
    }
    function isNumeric(value) {
      return value !== "" && !isNaN(parseFloat(value)) && isFinite(value);
    }
    function getMaxSafeInteger() {
      return Number.MAX_SAFE_INTEGER || 9007199254740991;
    }
    function cleanNumber(value) {
      if (typeof value === "string") {
        value = parseInt(value, 10);
      }
      if (typeof value === "number") {
        return Math.floor(value);
      }
      return null;
    }
    function decToHex(number, bytes) {
      var hex = "";
      for (var i = 0; i < bytes; i++) {
        hex += String.fromCharCode(number & 255);
        number >>>= 8;
      }
      return hex;
    }
    function formatNumberTwoDecimalPlacesAndCommas(value) {
      if (typeof value !== "number") {
        return "";
      }
      return formatNumberCommas(Math.round(value * 100) / 100);
    }
    function formatNumberCommas(value) {
      if (typeof value !== "number") {
        return "";
      }
      return value.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,");
    }
    function sum(values2) {
      return values2 == null ? null : values2.reduce(function(total, value) {
        return total + value;
      }, 0);
    }
    var NumberUtils = Object.freeze({
      __proto__: null,
      padStartWidthZeros,
      createArrayOfNumbers,
      isNumeric,
      getMaxSafeInteger,
      cleanNumber,
      decToHex,
      formatNumberTwoDecimalPlacesAndCommas,
      formatNumberCommas,
      sum
    });
    var __extends$2 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$6 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var ColumnUtils = (
      /** @class */
      function(_super) {
        __extends$2(ColumnUtils2, _super);
        function ColumnUtils2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        ColumnUtils2.prototype.calculateColMinWidth = function(colDef) {
          return colDef.minWidth != null ? colDef.minWidth : this.gridOptionsWrapper.getMinColWidth();
        };
        ColumnUtils2.prototype.calculateColMaxWidth = function(colDef) {
          return colDef.maxWidth != null ? colDef.maxWidth : this.gridOptionsWrapper.getMaxColWidth() || getMaxSafeInteger();
        };
        ColumnUtils2.prototype.calculateColInitialWidth = function(colDef) {
          var minColWidth = this.calculateColMinWidth(colDef);
          var maxColWidth = this.calculateColMaxWidth(colDef);
          var width;
          var colDefWidth = attrToNumber(colDef.width);
          var colDefInitialWidth = attrToNumber(colDef.initialWidth);
          if (colDefWidth != null) {
            width = colDefWidth;
          } else if (colDefInitialWidth != null) {
            width = colDefInitialWidth;
          } else {
            width = this.gridOptionsWrapper.getColWidth();
          }
          return Math.max(Math.min(width, maxColWidth), minColWidth);
        };
        ColumnUtils2.prototype.getOriginalPathForColumn = function(column, originalBalancedTree) {
          var result = [];
          var found = false;
          var recursePath = function(balancedColumnTree, dept) {
            for (var i = 0; i < balancedColumnTree.length; i++) {
              if (found) {
                return;
              }
              var node = balancedColumnTree[i];
              if (node instanceof ProvidedColumnGroup) {
                var nextNode = node;
                recursePath(nextNode.getChildren(), dept + 1);
                result[dept] = node;
              } else if (node === column) {
                found = true;
              }
            }
          };
          recursePath(originalBalancedTree, 0);
          return found ? result : null;
        };
        ColumnUtils2.prototype.depthFirstOriginalTreeSearch = function(parent, tree, callback) {
          var _this = this;
          if (!tree) {
            return;
          }
          tree.forEach(function(child) {
            if (child instanceof ProvidedColumnGroup) {
              _this.depthFirstOriginalTreeSearch(child, child.getChildren(), callback);
            }
            callback(child, parent);
          });
        };
        ColumnUtils2.prototype.depthFirstAllColumnTreeSearch = function(tree, callback) {
          var _this = this;
          if (!tree) {
            return;
          }
          tree.forEach(function(child) {
            if (child instanceof ColumnGroup) {
              _this.depthFirstAllColumnTreeSearch(child.getChildren(), callback);
            }
            callback(child);
          });
        };
        ColumnUtils2.prototype.depthFirstDisplayedColumnTreeSearch = function(tree, callback) {
          var _this = this;
          if (!tree) {
            return;
          }
          tree.forEach(function(child) {
            if (child instanceof ColumnGroup) {
              _this.depthFirstDisplayedColumnTreeSearch(child.getDisplayedChildren(), callback);
            }
            callback(child);
          });
        };
        ColumnUtils2 = __decorate$6([
          Bean3("columnUtils")
        ], ColumnUtils2);
        return ColumnUtils2;
      }(BeanStub)
    );
    var __extends$3 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$7 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var DisplayedGroupCreator = (
      /** @class */
      function(_super) {
        __extends$3(DisplayedGroupCreator2, _super);
        function DisplayedGroupCreator2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        DisplayedGroupCreator2.prototype.createDisplayedGroups = function(sortedVisibleColumns, balancedColumnTree, groupInstanceIdCreator, pinned, oldDisplayedGroups) {
          var _this = this;
          var result = [];
          var previousRealPath;
          var previousOriginalPath;
          var oldColumnsMapped = this.mapOldGroupsById(oldDisplayedGroups);
          sortedVisibleColumns.forEach(function(currentColumn) {
            var currentOriginalPath = _this.getOriginalPathForColumn(balancedColumnTree, currentColumn);
            var currentRealPath = [];
            var firstColumn = !previousOriginalPath;
            for (var i = 0; i < currentOriginalPath.length; i++) {
              if (firstColumn || currentOriginalPath[i] !== previousOriginalPath[i]) {
                var newGroup = _this.createColumnGroup(currentOriginalPath[i], groupInstanceIdCreator, oldColumnsMapped, pinned);
                currentRealPath[i] = newGroup;
                if (i == 0) {
                  result.push(newGroup);
                } else {
                  currentRealPath[i - 1].addChild(newGroup);
                }
              } else {
                currentRealPath[i] = previousRealPath[i];
              }
            }
            var noColumnGroups = currentRealPath.length === 0;
            if (noColumnGroups) {
              result.push(currentColumn);
            } else {
              var leafGroup = last(currentRealPath);
              leafGroup.addChild(currentColumn);
            }
            previousRealPath = currentRealPath;
            previousOriginalPath = currentOriginalPath;
          });
          this.setupParentsIntoColumns(result, null);
          return result;
        };
        DisplayedGroupCreator2.prototype.createColumnGroup = function(originalGroup, groupInstanceIdCreator, oldColumnsMapped, pinned) {
          var groupId = originalGroup.getGroupId();
          var instanceId = groupInstanceIdCreator.getInstanceIdForKey(groupId);
          var uniqueId = ColumnGroup.createUniqueId(groupId, instanceId);
          var columnGroup = oldColumnsMapped[uniqueId];
          if (columnGroup && columnGroup.getOriginalColumnGroup() !== originalGroup) {
            columnGroup = null;
          }
          if (exists(columnGroup)) {
            columnGroup.reset();
          } else {
            columnGroup = new ColumnGroup(originalGroup, groupId, instanceId, pinned);
            this.context.createBean(columnGroup);
          }
          return columnGroup;
        };
        DisplayedGroupCreator2.prototype.mapOldGroupsById = function(displayedGroups) {
          var result = {};
          var recursive = function(columnsOrGroups) {
            columnsOrGroups.forEach(function(columnOrGroup) {
              if (columnOrGroup instanceof ColumnGroup) {
                var columnGroup = columnOrGroup;
                result[columnOrGroup.getUniqueId()] = columnGroup;
                recursive(columnGroup.getChildren());
              }
            });
          };
          if (displayedGroups) {
            recursive(displayedGroups);
          }
          return result;
        };
        DisplayedGroupCreator2.prototype.setupParentsIntoColumns = function(columnsOrGroups, parent) {
          var _this = this;
          columnsOrGroups.forEach(function(columnsOrGroup) {
            columnsOrGroup.setParent(parent);
            if (columnsOrGroup instanceof ColumnGroup) {
              var columnGroup = columnsOrGroup;
              _this.setupParentsIntoColumns(columnGroup.getChildren(), columnGroup);
            }
          });
        };
        DisplayedGroupCreator2.prototype.getOriginalPathForColumn = function(balancedColumnTree, column) {
          var result = [];
          var found = false;
          var recursePath = function(columnTree, dept) {
            for (var i = 0; i < columnTree.length; i++) {
              if (found) {
                return;
              }
              var node = columnTree[i];
              if (node instanceof ProvidedColumnGroup) {
                var nextNode = node;
                recursePath(nextNode.getChildren(), dept + 1);
                result[dept] = node;
              } else if (node === column) {
                found = true;
              }
            }
          };
          recursePath(balancedColumnTree, 0);
          if (found) {
            return result;
          }
          console.warn("could not get path");
          return null;
        };
        DisplayedGroupCreator2 = __decorate$7([
          Bean3("displayedGroupCreator")
        ], DisplayedGroupCreator2);
        return DisplayedGroupCreator2;
      }(BeanStub)
    );
    var __spreadArrays$1 = function() {
      for (var s = 0, i = 0, il = arguments.length; i < il; i++)
        s += arguments[i].length;
      for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
          r[k] = a[j];
      return r;
    };
    var PropertyKeys = (
      /** @class */
      function() {
        function PropertyKeys2() {
        }
        PropertyKeys2.STRING_PROPERTIES = [
          "sortingOrder",
          "rowClass",
          "rowSelection",
          "overlayLoadingTemplate",
          "overlayNoRowsTemplate",
          "quickFilterText",
          "rowModelType",
          "editType",
          "domLayout",
          "clipboardDeliminator",
          "rowGroupPanelShow",
          "multiSortKey",
          "pivotColumnGroupTotals",
          "pivotRowTotals",
          "pivotPanelShow",
          "fillHandleDirection",
          "serverSideStoreType",
          "groupDisplayType",
          "treeDataDisplayType"
        ];
        PropertyKeys2.OBJECT_PROPERTIES = [
          "components",
          "frameworkComponents",
          "rowStyle",
          "context",
          "autoGroupColumnDef",
          "localeText",
          "icons",
          "datasource",
          "serverSideDatasource",
          "viewportDatasource",
          "groupRowRendererParams",
          "aggFuncs",
          "fullWidthCellRendererParams",
          "defaultColGroupDef",
          "defaultColDef",
          "defaultExportParams",
          "defaultCsvExportParams",
          "defaultExcelExportParams",
          "columnTypes",
          "rowClassRules",
          "detailCellRendererParams",
          "loadingCellRendererParams",
          "loadingOverlayComponentParams",
          "noRowsOverlayComponentParams",
          "popupParent",
          "colResizeDefault",
          "statusBar",
          "sideBar",
          "chartThemeOverrides",
          "customChartThemes"
        ];
        PropertyKeys2.ARRAY_PROPERTIES = [
          "alignedGrids",
          "rowData",
          "columnDefs",
          "excelStyles",
          "pinnedTopRowData",
          "pinnedBottomRowData",
          "chartThemes"
        ];
        PropertyKeys2.NUMBER_PROPERTIES = [
          "rowHeight",
          "detailRowHeight",
          "rowBuffer",
          "colWidth",
          "headerHeight",
          "groupHeaderHeight",
          "floatingFiltersHeight",
          "pivotHeaderHeight",
          "pivotGroupHeaderHeight",
          "groupDefaultExpanded",
          "minColWidth",
          "maxColWidth",
          "viewportRowModelPageSize",
          "viewportRowModelBufferSize",
          "autoSizePadding",
          "maxBlocksInCache",
          "maxConcurrentDatasourceRequests",
          "tooltipShowDelay",
          "cacheOverflowSize",
          "paginationPageSize",
          "cacheBlockSize",
          "infiniteInitialRowCount",
          "scrollbarWidth",
          "batchUpdateWaitMillis",
          "asyncTransactionWaitMillis",
          "blockLoadDebounceMillis",
          "keepDetailRowsCount",
          "undoRedoCellEditingLimit",
          "cellFlashDelay",
          "cellFadeDelay",
          "tabIndex"
        ];
        PropertyKeys2.BOOLEAN_PROPERTIES = [
          "suppressMakeColumnVisibleAfterUnGroup",
          "suppressRowClickSelection",
          "suppressCellSelection",
          "suppressHorizontalScroll",
          "alwaysShowHorizontalScroll",
          "alwaysShowVerticalScroll",
          "debug",
          "enableBrowserTooltips",
          "enableCellExpressions",
          "angularCompileRows",
          "angularCompileFilters",
          "groupSuppressAutoColumn",
          "groupSelectsChildren",
          "groupIncludeFooter",
          "groupIncludeTotalFooter",
          "groupUseEntireRow",
          "groupSuppressBlankHeader",
          "suppressMenuHide",
          "suppressRowDeselection",
          "unSortIcon",
          "suppressMultiSort",
          "singleClickEdit",
          "suppressLoadingOverlay",
          "suppressNoRowsOverlay",
          "suppressAutoSize",
          "skipHeaderOnAutoSize",
          "suppressParentsInRowNodes",
          "suppressColumnMoveAnimation",
          "suppressMovableColumns",
          "suppressFieldDotNotation",
          "enableRangeSelection",
          "enableRangeHandle",
          "enableFillHandle",
          "suppressClearOnFillReduction",
          "deltaSort",
          "suppressTouch",
          "suppressAsyncEvents",
          "allowContextMenuWithControlKey",
          "suppressContextMenu",
          "rememberGroupStateWhenNewData",
          "enableCellChangeFlash",
          "suppressDragLeaveHidesColumns",
          "suppressMiddleClickScrolls",
          "suppressPreventDefaultOnMouseWheel",
          "suppressCopyRowsToClipboard",
          "copyHeadersToClipboard",
          "pivotMode",
          "suppressAggFuncInHeader",
          "suppressColumnVirtualisation",
          "suppressAggAtRootLevel",
          "suppressFocusAfterRefresh",
          "functionsPassive",
          "functionsReadOnly",
          "animateRows",
          "groupSelectsFiltered",
          "groupRemoveSingleChildren",
          "groupRemoveLowestSingleChildren",
          "enableRtl",
          "suppressClickEdit",
          "rowDragEntireRow",
          "rowDragManaged",
          "suppressRowDrag",
          "suppressMoveWhenRowDragging",
          "rowDragMultiRow",
          "enableGroupEdit",
          "embedFullWidthRows",
          "deprecatedEmbedFullWidthRows",
          "suppressPaginationPanel",
          "floatingFilter",
          "groupHideOpenParents",
          "groupMultiAutoColumn",
          "pagination",
          "stopEditingWhenGridLosesFocus",
          "paginationAutoPageSize",
          "suppressScrollOnNewData",
          "suppressScrollWhenPopupsAreOpen",
          "purgeClosedRowNodes",
          "cacheQuickFilter",
          "deltaRowDataMode",
          "ensureDomOrder",
          "accentedSort",
          "suppressChangeDetection",
          "valueCache",
          "valueCacheNeverExpires",
          "aggregateOnlyChangedColumns",
          "suppressAnimationFrame",
          "suppressExcelExport",
          "suppressCsvExport",
          "treeData",
          "masterDetail",
          "suppressMultiRangeSelection",
          "enterMovesDownAfterEdit",
          "enterMovesDown",
          "suppressPropertyNamesCheck",
          "rowMultiSelectWithClick",
          "suppressEnterpriseResetOnNewColumns",
          "enableOldSetFilterModel",
          "suppressRowHoverHighlight",
          "suppressRowTransform",
          "suppressClipboardPaste",
          "suppressLastEmptyLineOnPaste",
          "serverSideSortingAlwaysResets",
          "suppressSetColumnStateEvents",
          "suppressColumnStateEvents",
          "enableCharts",
          "deltaColumnMode",
          "suppressMaintainUnsortedOrder",
          "enableCellTextSelection",
          "suppressBrowserResizeObserver",
          "suppressMaxRenderedRowRestriction",
          "excludeChildrenWhenTreeDataFiltering",
          "tooltipMouseTrack",
          "keepDetailRows",
          "paginateChildRows",
          "preventDefaultOnContextMenu",
          "undoRedoCellEditing",
          "allowDragFromColumnsToolPanel",
          "immutableData",
          "immutableColumns",
          "pivotSuppressAutoColumn",
          "suppressExpandablePivotGroups",
          "applyColumnDefOrder",
          "debounceVerticalScrollbar",
          "detailRowAutoHeight",
          "serverSideFilteringAlwaysResets",
          "suppressAggFilteredOnly",
          "showOpenedGroup",
          "suppressClipboardApi",
          "suppressModelUpdateAfterUpdateTransaction",
          "stopEditingWhenCellsLoseFocus",
          "maintainColumnOrder",
          "groupMaintainOrder",
          "columnHoverHighlight",
          "reactUi"
        ];
        PropertyKeys2.FUNCTION_PROPERTIES = [
          "localeTextFunc",
          "groupRowInnerRenderer",
          "groupRowInnerRendererFramework",
          "groupRowRenderer",
          "groupRowRendererFramework",
          "isExternalFilterPresent",
          "getRowHeight",
          "doesExternalFilterPass",
          "getRowClass",
          "getRowStyle",
          "getContextMenuItems",
          "getMainMenuItems",
          "processRowPostCreate",
          "processCellForClipboard",
          "groupRowAggNodes",
          "getRowNodeId",
          "isFullWidthCell",
          "fullWidthCellRenderer",
          "fullWidthCellRendererFramework",
          "processSecondaryColDef",
          "processSecondaryColGroupDef",
          "getBusinessKeyForNode",
          "sendToClipboard",
          "navigateToNextHeader",
          "tabToNextHeader",
          "navigateToNextCell",
          "tabToNextCell",
          "processCellFromClipboard",
          "getDocument",
          "postProcessPopup",
          "getChildCount",
          "getDataPath",
          "loadingCellRenderer",
          "loadingCellRendererFramework",
          "loadingOverlayComponent",
          "loadingOverlayComponentFramework",
          "noRowsOverlayComponent",
          "noRowsOverlayComponentFramework",
          "detailCellRenderer",
          "detailCellRendererFramework",
          "isRowMaster",
          "isRowSelectable",
          "postSort",
          "processHeaderForClipboard",
          "paginationNumberFormatter",
          "processDataFromClipboard",
          "getServerSideGroupKey",
          "isServerSideGroup",
          "suppressKeyboardEvent",
          "createChartContainer",
          "getChartToolbarItems",
          "fillOperation",
          "isApplyServerSideTransaction",
          "getServerSideStoreParams",
          "isServerSideGroupOpenByDefault",
          "isGroupOpenByDefault",
          "defaultGroupSortComparator",
          "defaultGroupOrderComparator",
          "loadingCellRendererSelector"
        ];
        PropertyKeys2.ALL_PROPERTIES = __spreadArrays$1(PropertyKeys2.ARRAY_PROPERTIES, PropertyKeys2.OBJECT_PROPERTIES, PropertyKeys2.STRING_PROPERTIES, PropertyKeys2.NUMBER_PROPERTIES, PropertyKeys2.FUNCTION_PROPERTIES, PropertyKeys2.BOOLEAN_PROPERTIES);
        PropertyKeys2.FRAMEWORK_PROPERTIES = [
          "__ob__",
          "__v_skip",
          "__metadata__",
          "mappedColumnProperties",
          "hasChildColumns",
          "toColDef",
          "createColDefFromGridColumn"
        ];
        return PropertyKeys2;
      }()
    );
    var __assign2 = function() {
      __assign2 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign2.apply(this, arguments);
    };
    var __spreadArrays$2 = function() {
      for (var s = 0, i = 0, il = arguments.length; i < il; i++)
        s += arguments[i].length;
      for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
          r[k] = a[j];
      return r;
    };
    var ComponentUtil3 = (
      /** @class */
      function() {
        function ComponentUtil4() {
        }
        ComponentUtil4.getEventCallbacks = function() {
          if (!ComponentUtil4.EVENT_CALLBACKS) {
            ComponentUtil4.EVENT_CALLBACKS = ComponentUtil4.EVENTS.map(function(event) {
              return ComponentUtil4.getCallbackForEvent(event);
            });
          }
          return ComponentUtil4.EVENT_CALLBACKS;
        };
        ComponentUtil4.copyAttributesToGridOptions = function(gridOptions, component, skipEventDeprecationCheck) {
          if (typeof gridOptions !== "object") {
            gridOptions = {};
          }
          var pGridOptions = gridOptions;
          var keyExists = function(key) {
            return typeof component[key] !== "undefined";
          };
          __spreadArrays$2(ComponentUtil4.ARRAY_PROPERTIES, ComponentUtil4.STRING_PROPERTIES, ComponentUtil4.OBJECT_PROPERTIES, ComponentUtil4.FUNCTION_PROPERTIES, ComponentUtil4.getEventCallbacks()).filter(keyExists).forEach(function(key) {
            return pGridOptions[key] = component[key];
          });
          ComponentUtil4.BOOLEAN_PROPERTIES.filter(keyExists).forEach(function(key) {
            return pGridOptions[key] = ComponentUtil4.toBoolean(component[key]);
          });
          ComponentUtil4.NUMBER_PROPERTIES.filter(keyExists).forEach(function(key) {
            return pGridOptions[key] = ComponentUtil4.toNumber(component[key]);
          });
          return gridOptions;
        };
        ComponentUtil4.getCallbackForEvent = function(eventName) {
          if (!eventName || eventName.length < 2) {
            return eventName;
          }
          return "on" + eventName[0].toUpperCase() + eventName.substr(1);
        };
        ComponentUtil4.processOnChange = function(changes, gridOptions, api, columnApi) {
          if (!changes) {
            return;
          }
          var changesToApply = __assign2({}, changes);
          var pGridOptions = gridOptions;
          var keyExists = function(key) {
            return changesToApply[key];
          };
          __spreadArrays$2(ComponentUtil4.ARRAY_PROPERTIES, ComponentUtil4.OBJECT_PROPERTIES, ComponentUtil4.STRING_PROPERTIES, ComponentUtil4.getEventCallbacks()).filter(keyExists).forEach(function(key) {
            return pGridOptions[key] = changesToApply[key].currentValue;
          });
          ComponentUtil4.BOOLEAN_PROPERTIES.filter(keyExists).forEach(function(key) {
            return pGridOptions[key] = ComponentUtil4.toBoolean(changesToApply[key].currentValue);
          });
          ComponentUtil4.NUMBER_PROPERTIES.filter(keyExists).forEach(function(key) {
            return pGridOptions[key] = ComponentUtil4.toNumber(changesToApply[key].currentValue);
          });
          if (changesToApply.enableCellTextSelection) {
            api.setEnableCellTextSelection(ComponentUtil4.toBoolean(changesToApply.enableCellTextSelection.currentValue));
            delete changesToApply.enableCellTextSelection;
          }
          if (changesToApply.quickFilterText) {
            api.setQuickFilter(changesToApply.quickFilterText.currentValue);
            delete changesToApply.quickFilterText;
          }
          if (changesToApply.autoGroupColumnDef) {
            api.setAutoGroupColumnDef(changesToApply.autoGroupColumnDef.currentValue, "gridOptionsChanged");
            delete changesToApply.autoGroupColumnDef;
          }
          if (changesToApply.columnDefs) {
            api.setColumnDefs(changesToApply.columnDefs.currentValue, "gridOptionsChanged");
            delete changesToApply.columnDefs;
          }
          if (changesToApply.paginationPageSize) {
            api.paginationSetPageSize(ComponentUtil4.toNumber(changesToApply.paginationPageSize.currentValue));
            delete changesToApply.paginationPageSize;
          }
          if (changesToApply.pivotMode) {
            columnApi.setPivotMode(ComponentUtil4.toBoolean(changesToApply.pivotMode.currentValue));
            delete changesToApply.pivotMode;
          }
          if (changesToApply.groupRemoveSingleChildren) {
            api.setGroupRemoveSingleChildren(ComponentUtil4.toBoolean(changesToApply.groupRemoveSingleChildren.currentValue));
            delete changesToApply.groupRemoveSingleChildren;
          }
          if (changesToApply.suppressRowDrag) {
            api.setSuppressRowDrag(ComponentUtil4.toBoolean(changesToApply.suppressRowDrag.currentValue));
            delete changesToApply.suppressRowDrag;
          }
          if (changesToApply.suppressMoveWhenRowDragging) {
            api.setSuppressMoveWhenRowDragging(ComponentUtil4.toBoolean(changesToApply.suppressMoveWhenRowDragging.currentValue));
            delete changesToApply.suppressMoveWhenRowDragging;
          }
          if (changesToApply.suppressRowClickSelection) {
            api.setSuppressRowClickSelection(ComponentUtil4.toBoolean(changesToApply.suppressRowClickSelection.currentValue));
            delete changesToApply.suppressRowClickSelection;
          }
          if (changesToApply.suppressClipboardPaste) {
            api.setSuppressClipboardPaste(ComponentUtil4.toBoolean(changesToApply.suppressClipboardPaste.currentValue));
            delete changesToApply.suppressClipboardPaste;
          }
          if (changesToApply.headerHeight) {
            api.setHeaderHeight(ComponentUtil4.toNumber(changesToApply.headerHeight.currentValue));
            delete changesToApply.headerHeight;
          }
          var dynamicApi = api;
          Object.keys(changesToApply).forEach(function(property) {
            var setterName = "set" + property.charAt(0).toUpperCase() + property.substring(1);
            if (dynamicApi[setterName]) {
              dynamicApi[setterName](changes[property].currentValue);
            }
          });
          var event = {
            type: Events.EVENT_COMPONENT_STATE_CHANGED,
            api: gridOptions.api,
            columnApi: gridOptions.columnApi
          };
          iterateObject(changes, function(key, value) {
            event[key] = value;
          });
          api.dispatchEvent(event);
        };
        ComponentUtil4.toBoolean = function(value) {
          if (typeof value === "boolean") {
            return value;
          }
          if (typeof value === "string") {
            return value.toUpperCase() === "TRUE" || value == "";
          }
          return false;
        };
        ComponentUtil4.toNumber = function(value) {
          if (typeof value === "number") {
            return value;
          }
          if (typeof value === "string") {
            return Number(value);
          }
        };
        ComponentUtil4.EVENTS = [];
        ComponentUtil4.PUBLIC_EVENTS = [];
        ComponentUtil4.EXCLUDED_INTERNAL_EVENTS = [];
        ComponentUtil4.STRING_PROPERTIES = PropertyKeys.STRING_PROPERTIES;
        ComponentUtil4.OBJECT_PROPERTIES = PropertyKeys.OBJECT_PROPERTIES;
        ComponentUtil4.ARRAY_PROPERTIES = PropertyKeys.ARRAY_PROPERTIES;
        ComponentUtil4.NUMBER_PROPERTIES = PropertyKeys.NUMBER_PROPERTIES;
        ComponentUtil4.BOOLEAN_PROPERTIES = PropertyKeys.BOOLEAN_PROPERTIES;
        ComponentUtil4.FUNCTION_PROPERTIES = PropertyKeys.FUNCTION_PROPERTIES;
        ComponentUtil4.ALL_PROPERTIES = PropertyKeys.ALL_PROPERTIES;
        return ComponentUtil4;
      }()
    );
    ComponentUtil3.EVENTS = values(Events);
    ComponentUtil3.EXCLUDED_INTERNAL_EVENTS = [
      Events.EVENT_SCROLLBAR_WIDTH_CHANGED,
      Events.EVENT_CHECKBOX_CHANGED,
      Events.EVENT_HEIGHT_SCALE_CHANGED,
      Events.EVENT_BODY_HEIGHT_CHANGED,
      Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED,
      Events.EVENT_SCROLL_VISIBILITY_CHANGED,
      Events.EVENT_COLUMN_HOVER_CHANGED,
      Events.EVENT_FLASH_CELLS,
      Events.EVENT_PAGINATION_PIXEL_OFFSET_CHANGED,
      Events.EVENT_DISPLAYED_ROWS_CHANGED,
      Events.EVENT_LEFT_PINNED_WIDTH_CHANGED,
      Events.EVENT_RIGHT_PINNED_WIDTH_CHANGED,
      Events.EVENT_ROW_CONTAINER_HEIGHT_CHANGED,
      Events.EVENT_POPUP_TO_FRONT,
      Events.EVENT_KEYBOARD_FOCUS,
      Events.EVENT_MOUSE_FOCUS,
      Events.EVENT_STORE_UPDATED,
      Events.EVENT_COLUMN_PANEL_ITEM_DRAG_START,
      Events.EVENT_COLUMN_PANEL_ITEM_DRAG_END,
      Events.EVENT_FILL_START,
      Events.EVENT_FILL_END
    ];
    ComponentUtil3.PUBLIC_EVENTS = ComponentUtil3.EVENTS.filter(function(e) {
      return !includes(ComponentUtil3.EXCLUDED_INTERNAL_EVENTS, e);
    });
    var __extends$4 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$8 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var AgStackComponentsRegistry = (
      /** @class */
      function(_super) {
        __extends$4(AgStackComponentsRegistry2, _super);
        function AgStackComponentsRegistry2() {
          var _this = _super !== null && _super.apply(this, arguments) || this;
          _this.componentsMappedByName = {};
          return _this;
        }
        AgStackComponentsRegistry2.prototype.setupComponents = function(components) {
          var _this = this;
          if (components) {
            components.forEach(function(componentMeta) {
              return _this.addComponent(componentMeta);
            });
          }
        };
        AgStackComponentsRegistry2.prototype.addComponent = function(componentMeta) {
          var classEscaped = componentMeta.componentName.replace(/([a-z])([A-Z])/g, "$1-$2").toLowerCase();
          var classUpperCase = classEscaped.toUpperCase();
          this.componentsMappedByName[classUpperCase] = componentMeta.componentClass;
        };
        AgStackComponentsRegistry2.prototype.getComponentClass = function(htmlTag) {
          return this.componentsMappedByName[htmlTag];
        };
        AgStackComponentsRegistry2 = __decorate$8([
          Bean3("agStackComponentsRegistry")
        ], AgStackComponentsRegistry2);
        return AgStackComponentsRegistry2;
      }(BeanStub)
    );
    var __spreadArrays$3 = function() {
      for (var s = 0, i = 0, il = arguments.length; i < il; i++)
        s += arguments[i].length;
      for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
          r[k] = a[j];
      return r;
    };
    var ColDefUtil2 = (
      /** @class */
      function() {
        function ColDefUtil3() {
        }
        ColDefUtil3.STRING_PROPERTIES = [
          "headerName",
          "columnGroupShow",
          "headerClass",
          "toolPanelClass",
          "headerValueGetter",
          "pivotKeys",
          "groupId",
          "colId",
          "sort",
          "initialSort",
          "field",
          "type",
          "tooltipComponent",
          "tooltipField",
          "headerTooltip",
          "cellClass",
          "showRowGroup",
          "template",
          "templateUrl",
          "filter",
          "initialAggFunc",
          "aggFunc",
          "cellRenderer",
          "cellEditor",
          "pinned",
          "initialPinned",
          "chartDataType",
          "cellEditorPopupPosition"
        ];
        ColDefUtil3.OBJECT_PROPERTIES = [
          "headerGroupComponent",
          "headerGroupComponentFramework",
          "headerGroupComponentParams",
          "cellStyle",
          "cellRendererParams",
          "cellEditorFramework",
          "cellEditorParams",
          "pinnedRowCellRendererFramework",
          "pinnedRowCellRendererParams",
          "filterFramework",
          "filterParams",
          "pivotValueColumn",
          "headerComponent",
          "headerComponentFramework",
          "headerComponentParams",
          "floatingFilterComponent",
          "floatingFilterComponentParams",
          "floatingFilterComponentFramework",
          "tooltipComponent",
          "tooltipComponentParams",
          "tooltipComponentFramework",
          "refData",
          "columnsMenuParams"
        ];
        ColDefUtil3.ARRAY_PROPERTIES = [
          "children",
          "sortingOrder",
          "allowedAggFuncs",
          "menuTabs",
          "pivotTotalColumnIds",
          "cellClassRules",
          "icons"
        ];
        ColDefUtil3.NUMBER_PROPERTIES = [
          "sortedAt",
          "sortIndex",
          "initialSortIndex",
          "flex",
          "initialFlex",
          "width",
          "initialWidth",
          "minWidth",
          "maxWidth",
          "rowGroupIndex",
          "initialRowGroupIndex",
          "pivotIndex",
          "initialPivotIndex"
        ];
        ColDefUtil3.BOOLEAN_PROPERTIES = [
          "suppressCellFlash",
          "suppressColumnsToolPanel",
          "suppressFiltersToolPanel",
          "openByDefault",
          "marryChildren",
          "hide",
          "initialHide",
          "rowGroup",
          "initialRowGroup",
          "pivot",
          "initialPivot",
          "checkboxSelection",
          "headerCheckboxSelection",
          "headerCheckboxSelectionFilteredOnly",
          "suppressMenu",
          "suppressMovable",
          "lockPosition",
          "lockVisible",
          "lockPinned",
          "unSortIcon",
          "suppressSizeToFit",
          "suppressAutoSize",
          "enableRowGroup",
          "enablePivot",
          "enableValue",
          "editable",
          "suppressPaste",
          "suppressNavigable",
          "enableCellChangeFlash",
          "rowDrag",
          "dndSource",
          "autoHeight",
          "wrapText",
          "sortable",
          "resizable",
          "singleClickEdit",
          "floatingFilter",
          "cellEditorPopup",
          "suppressFillHandle"
        ];
        ColDefUtil3.FUNCTION_PROPERTIES = [
          "dndSourceOnRowDrag",
          "valueGetter",
          "valueSetter",
          "filterValueGetter",
          "keyCreator",
          "cellRenderer",
          "cellRendererFramework",
          "pinnedRowCellRenderer",
          "valueFormatter",
          "pinnedRowValueFormatter",
          "valueParser",
          "comparator",
          "equals",
          "pivotComparator",
          "suppressKeyboardEvent",
          "suppressHeaderKeyboardEvent",
          "colSpan",
          "rowSpan",
          "getQuickFilterText",
          "newValueHandler",
          "onCellValueChanged",
          "onCellClicked",
          "onCellDoubleClicked",
          "onCellContextMenu",
          "rowDragText",
          "tooltipValueGetter",
          "tooltipComponent",
          "tooltipComponentFramework",
          "cellRendererSelector",
          "cellEditorSelector"
        ];
        ColDefUtil3.ALL_PROPERTIES = __spreadArrays$3(ColDefUtil3.ARRAY_PROPERTIES, ColDefUtil3.OBJECT_PROPERTIES, ColDefUtil3.STRING_PROPERTIES, ColDefUtil3.NUMBER_PROPERTIES, ColDefUtil3.FUNCTION_PROPERTIES, ColDefUtil3.BOOLEAN_PROPERTIES);
        ColDefUtil3.FRAMEWORK_PROPERTIES = [
          "__ob__",
          "__v_skip",
          "__metadata__",
          "mappedColumnProperties",
          "hasChildColumns",
          "toColDef",
          "createColDefFromGridColumn"
        ];
        return ColDefUtil3;
      }()
    );
    var Color = (
      /** @class */
      function() {
        function Color2(r, g, b, a) {
          if (a === void 0) {
            a = 1;
          }
          this.r = Math.min(1, Math.max(0, r || 0));
          this.g = Math.min(1, Math.max(0, g || 0));
          this.b = Math.min(1, Math.max(0, b || 0));
          this.a = Math.min(1, Math.max(0, a || 0));
        }
        Color2.fromString = function(str) {
          if (str.indexOf("#") >= 0) {
            return Color2.fromHexString(str);
          }
          var hex = Color2.nameToHex[str];
          if (hex) {
            return Color2.fromHexString(hex);
          }
          if (str.indexOf("rgb") >= 0) {
            return Color2.fromRgbaString(str);
          }
          throw new Error("Invalid color string: '" + str + "'");
        };
        Color2.parseHex = function(input) {
          input = input.replace(/ /g, "").slice(1);
          var parts;
          switch (input.length) {
            case 6:
            case 8:
              parts = [];
              for (var i = 0; i < input.length; i += 2) {
                parts.push(parseInt("" + input[i] + input[i + 1], 16));
              }
              break;
            case 3:
            case 4:
              parts = input.split("").map(function(p) {
                return parseInt(p, 16);
              }).map(function(p) {
                return p + p * 16;
              });
              break;
          }
          if (parts.length >= 3) {
            if (parts.every(function(p) {
              return p >= 0;
            })) {
              if (parts.length === 3) {
                parts.push(255);
              }
              return parts;
            }
          }
        };
        Color2.fromHexString = function(str) {
          var values2 = Color2.parseHex(str);
          if (values2) {
            var r = values2[0], g = values2[1], b = values2[2], a = values2[3];
            return new Color2(r / 255, g / 255, b / 255, a / 255);
          }
          throw new Error("Malformed hexadecimal color string: '" + str + "'");
        };
        Color2.stringToRgba = function(str) {
          var _a2 = [NaN, NaN], po = _a2[0], pc = _a2[1];
          for (var i = 0; i < str.length; i++) {
            var c = str[i];
            if (!po && c === "(") {
              po = i;
            } else if (c === ")") {
              pc = i;
              break;
            }
          }
          var contents = po && pc && str.substring(po + 1, pc);
          if (!contents) {
            return;
          }
          var parts = contents.split(",");
          var rgba = [];
          for (var i = 0; i < parts.length; i++) {
            var part = parts[i];
            var value = parseFloat(part);
            if (isNaN(value)) {
              return;
            }
            if (part.indexOf("%") >= 0) {
              value = Math.max(0, Math.min(100, value));
              value /= 100;
            } else {
              if (i === 3) {
                value = Math.max(0, Math.min(1, value));
              } else {
                value = Math.max(0, Math.min(255, value));
                value /= 255;
              }
            }
            rgba.push(value);
          }
          return rgba;
        };
        Color2.fromRgbaString = function(str) {
          var rgba = Color2.stringToRgba(str);
          if (rgba) {
            if (rgba.length === 3) {
              return new Color2(rgba[0], rgba[1], rgba[2]);
            } else if (rgba.length === 4) {
              return new Color2(rgba[0], rgba[1], rgba[2], rgba[3]);
            }
          }
          throw new Error("Malformed rgb/rgba color string: '" + str + "'");
        };
        Color2.fromArray = function(arr) {
          if (arr.length === 4) {
            return new Color2(arr[0], arr[1], arr[2], arr[3]);
          }
          if (arr.length === 3) {
            return new Color2(arr[0], arr[1], arr[2]);
          }
          throw new Error("The given array should contain 3 or 4 color components (numbers).");
        };
        Color2.fromHSB = function(h2, s, b, alpha) {
          if (alpha === void 0) {
            alpha = 1;
          }
          var rgb = Color2.HSBtoRGB(h2, s, b);
          return new Color2(rgb[0], rgb[1], rgb[2], alpha);
        };
        Color2.padHex = function(str) {
          return str.length === 1 ? "0" + str : str;
        };
        Color2.prototype.toHexString = function() {
          var hex = "#" + Color2.padHex(Math.round(this.r * 255).toString(16)) + Color2.padHex(Math.round(this.g * 255).toString(16)) + Color2.padHex(Math.round(this.b * 255).toString(16));
          if (this.a < 1) {
            hex += Color2.padHex(Math.round(this.a * 255).toString(16));
          }
          return hex;
        };
        Color2.prototype.toRgbaString = function(fractionDigits) {
          if (fractionDigits === void 0) {
            fractionDigits = 3;
          }
          var components = [
            Math.round(this.r * 255),
            Math.round(this.g * 255),
            Math.round(this.b * 255)
          ];
          var k = Math.pow(10, fractionDigits);
          if (this.a !== 1) {
            components.push(Math.round(this.a * k) / k);
            return "rgba(" + components.join(", ") + ")";
          }
          return "rgb(" + components.join(", ") + ")";
        };
        Color2.prototype.toString = function() {
          if (this.a === 1) {
            return this.toHexString();
          }
          return this.toRgbaString();
        };
        Color2.prototype.toHSB = function() {
          return Color2.RGBtoHSB(this.r, this.g, this.b);
        };
        Color2.RGBtoHSB = function(r, g, b) {
          var min = Math.min(r, g, b);
          var max = Math.max(r, g, b);
          var S = max !== 0 ? (max - min) / max : 0;
          var H = NaN;
          if (min !== max) {
            var delta = max - min;
            var rc = (max - r) / delta;
            var gc = (max - g) / delta;
            var bc = (max - b) / delta;
            if (r === max) {
              H = bc - gc;
            } else if (g === max) {
              H = 2 + rc - bc;
            } else {
              H = 4 + gc - rc;
            }
            H /= 6;
            if (H < 0) {
              H = H + 1;
            }
          }
          return [H * 360, S, max];
        };
        Color2.HSBtoRGB = function(H, S, B) {
          if (isNaN(H)) {
            H = 0;
          }
          H = (H % 360 + 360) % 360 / 360;
          var r = 0;
          var g = 0;
          var b = 0;
          if (S === 0) {
            r = g = b = B;
          } else {
            var h2 = (H - Math.floor(H)) * 6;
            var f = h2 - Math.floor(h2);
            var p = B * (1 - S);
            var q = B * (1 - S * f);
            var t = B * (1 - S * (1 - f));
            switch (h2 >> 0) {
              case 0:
                r = B;
                g = t;
                b = p;
                break;
              case 1:
                r = q;
                g = B;
                b = p;
                break;
              case 2:
                r = p;
                g = B;
                b = t;
                break;
              case 3:
                r = p;
                g = q;
                b = B;
                break;
              case 4:
                r = t;
                g = p;
                b = B;
                break;
              case 5:
                r = B;
                g = p;
                b = q;
                break;
            }
          }
          return [r, g, b];
        };
        Color2.prototype.derive = function(hueShift, saturationFactor, brightnessFactor, opacityFactor) {
          var hsb = Color2.RGBtoHSB(this.r, this.g, this.b);
          var b = hsb[2];
          if (b == 0 && brightnessFactor > 1) {
            b = 0.05;
          }
          var h2 = ((hsb[0] + hueShift) % 360 + 360) % 360;
          var s = Math.max(Math.min(hsb[1] * saturationFactor, 1), 0);
          b = Math.max(Math.min(b * brightnessFactor, 1), 0);
          var a = Math.max(Math.min(this.a * opacityFactor, 1), 0);
          var rgba = Color2.HSBtoRGB(h2, s, b);
          rgba.push(a);
          return Color2.fromArray(rgba);
        };
        Color2.prototype.brighter = function() {
          return this.derive(0, 1, 1 / 0.7, 1);
        };
        Color2.prototype.darker = function() {
          return this.derive(0, 1, 0.7, 1);
        };
        Color2.nameToHex = Object.freeze({
          aliceblue: "#F0F8FF",
          antiquewhite: "#FAEBD7",
          aqua: "#00FFFF",
          aquamarine: "#7FFFD4",
          azure: "#F0FFFF",
          beige: "#F5F5DC",
          bisque: "#FFE4C4",
          black: "#000000",
          blanchedalmond: "#FFEBCD",
          blue: "#0000FF",
          blueviolet: "#8A2BE2",
          brown: "#A52A2A",
          burlywood: "#DEB887",
          cadetblue: "#5F9EA0",
          chartreuse: "#7FFF00",
          chocolate: "#D2691E",
          coral: "#FF7F50",
          cornflowerblue: "#6495ED",
          cornsilk: "#FFF8DC",
          crimson: "#DC143C",
          cyan: "#00FFFF",
          darkblue: "#00008B",
          darkcyan: "#008B8B",
          darkgoldenrod: "#B8860B",
          darkgray: "#A9A9A9",
          darkgreen: "#006400",
          darkgrey: "#A9A9A9",
          darkkhaki: "#BDB76B",
          darkmagenta: "#8B008B",
          darkolivegreen: "#556B2F",
          darkorange: "#FF8C00",
          darkorchid: "#9932CC",
          darkred: "#8B0000",
          darksalmon: "#E9967A",
          darkseagreen: "#8FBC8F",
          darkslateblue: "#483D8B",
          darkslategray: "#2F4F4F",
          darkslategrey: "#2F4F4F",
          darkturquoise: "#00CED1",
          darkviolet: "#9400D3",
          deeppink: "#FF1493",
          deepskyblue: "#00BFFF",
          dimgray: "#696969",
          dimgrey: "#696969",
          dodgerblue: "#1E90FF",
          firebrick: "#B22222",
          floralwhite: "#FFFAF0",
          forestgreen: "#228B22",
          fuchsia: "#FF00FF",
          gainsboro: "#DCDCDC",
          ghostwhite: "#F8F8FF",
          gold: "#FFD700",
          goldenrod: "#DAA520",
          gray: "#808080",
          green: "#008000",
          greenyellow: "#ADFF2F",
          grey: "#808080",
          honeydew: "#F0FFF0",
          hotpink: "#FF69B4",
          indianred: "#CD5C5C",
          indigo: "#4B0082",
          ivory: "#FFFFF0",
          khaki: "#F0E68C",
          lavender: "#E6E6FA",
          lavenderblush: "#FFF0F5",
          lawngreen: "#7CFC00",
          lemonchiffon: "#FFFACD",
          lightblue: "#ADD8E6",
          lightcoral: "#F08080",
          lightcyan: "#E0FFFF",
          lightgoldenrodyellow: "#FAFAD2",
          lightgray: "#D3D3D3",
          lightgreen: "#90EE90",
          lightgrey: "#D3D3D3",
          lightpink: "#FFB6C1",
          lightsalmon: "#FFA07A",
          lightseagreen: "#20B2AA",
          lightskyblue: "#87CEFA",
          lightslategray: "#778899",
          lightslategrey: "#778899",
          lightsteelblue: "#B0C4DE",
          lightyellow: "#FFFFE0",
          lime: "#00FF00",
          limegreen: "#32CD32",
          linen: "#FAF0E6",
          magenta: "#FF00FF",
          maroon: "#800000",
          mediumaquamarine: "#66CDAA",
          mediumblue: "#0000CD",
          mediumorchid: "#BA55D3",
          mediumpurple: "#9370DB",
          mediumseagreen: "#3CB371",
          mediumslateblue: "#7B68EE",
          mediumspringgreen: "#00FA9A",
          mediumturquoise: "#48D1CC",
          mediumvioletred: "#C71585",
          midnightblue: "#191970",
          mintcream: "#F5FFFA",
          mistyrose: "#FFE4E1",
          moccasin: "#FFE4B5",
          navajowhite: "#FFDEAD",
          navy: "#000080",
          oldlace: "#FDF5E6",
          olive: "#808000",
          olivedrab: "#6B8E23",
          orange: "#FFA500",
          orangered: "#FF4500",
          orchid: "#DA70D6",
          palegoldenrod: "#EEE8AA",
          palegreen: "#98FB98",
          paleturquoise: "#AFEEEE",
          palevioletred: "#DB7093",
          papayawhip: "#FFEFD5",
          peachpuff: "#FFDAB9",
          peru: "#CD853F",
          pink: "#FFC0CB",
          plum: "#DDA0DD",
          powderblue: "#B0E0E6",
          purple: "#800080",
          rebeccapurple: "#663399",
          red: "#FF0000",
          rosybrown: "#BC8F8F",
          royalblue: "#4169E1",
          saddlebrown: "#8B4513",
          salmon: "#FA8072",
          sandybrown: "#F4A460",
          seagreen: "#2E8B57",
          seashell: "#FFF5EE",
          sienna: "#A0522D",
          silver: "#C0C0C0",
          skyblue: "#87CEEB",
          slateblue: "#6A5ACD",
          slategray: "#708090",
          slategrey: "#708090",
          snow: "#FFFAFA",
          springgreen: "#00FF7F",
          steelblue: "#4682B4",
          tan: "#D2B48C",
          teal: "#008080",
          thistle: "#D8BFD8",
          tomato: "#FF6347",
          turquoise: "#40E0D0",
          violet: "#EE82EE",
          wheat: "#F5DEB3",
          white: "#FFFFFF",
          whitesmoke: "#F5F5F5",
          yellow: "#FFFF00",
          yellowgreen: "#9ACD32"
        });
        return Color2;
      }()
    );
    function stringToArray(strData, delimiter) {
      if (delimiter === void 0) {
        delimiter = ",";
      }
      var data = [];
      var isNewline = function(char) {
        return char === "\r" || char === "\n";
      };
      var insideQuotedField = false;
      if (strData === "") {
        return [[""]];
      }
      var _loop_1 = function(row2, column2, position2) {
        var previousChar = strData[position2 - 1];
        var currentChar = strData[position2];
        var nextChar = strData[position2 + 1];
        var ensureDataExists = function() {
          if (!data[row2]) {
            data[row2] = [];
          }
          if (!data[row2][column2]) {
            data[row2][column2] = "";
          }
        };
        ensureDataExists();
        if (currentChar === '"') {
          if (insideQuotedField) {
            if (nextChar === '"') {
              data[row2][column2] += '"';
              position2++;
            } else {
              insideQuotedField = false;
            }
            return out_row_1 = row2, out_column_1 = column2, out_position_1 = position2, "continue";
          } else if (previousChar === void 0 || previousChar === delimiter || isNewline(previousChar)) {
            insideQuotedField = true;
            return out_row_1 = row2, out_column_1 = column2, out_position_1 = position2, "continue";
          }
        }
        if (!insideQuotedField) {
          if (currentChar === delimiter) {
            column2++;
            ensureDataExists();
            return out_row_1 = row2, out_column_1 = column2, out_position_1 = position2, "continue";
          } else if (isNewline(currentChar)) {
            column2 = 0;
            row2++;
            ensureDataExists();
            if (currentChar === "\r" && nextChar === "\n") {
              position2++;
            }
            return out_row_1 = row2, out_column_1 = column2, out_position_1 = position2, "continue";
          }
        }
        data[row2][column2] += currentChar;
        out_row_1 = row2;
        out_column_1 = column2;
        out_position_1 = position2;
      };
      var out_row_1, out_column_1, out_position_1;
      for (var row = 0, column = 0, position = 0; position < strData.length; position++) {
        _loop_1(row, column, position);
        row = out_row_1;
        column = out_column_1;
        position = out_position_1;
      }
      return data;
    }
    var CsvUtils = Object.freeze({
      __proto__: null,
      stringToArray
    });
    var isSafari;
    var isIE;
    var isEdge;
    var isChrome;
    var isFirefox;
    var isIOS;
    var invisibleScrollbar;
    var browserScrollbarWidth;
    function isBrowserIE() {
      if (isIE === void 0) {
        isIE = /*@cc_on!@*/
        !!document.documentMode;
      }
      return isIE;
    }
    function isBrowserEdge() {
      if (isEdge === void 0) {
        isEdge = !isBrowserIE() && !!window.StyleMedia;
      }
      return isEdge;
    }
    function isBrowserSafari() {
      if (isSafari === void 0) {
        isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
      }
      return isSafari;
    }
    function isBrowserChrome() {
      if (isChrome === void 0) {
        var win = window;
        isChrome = !!win.chrome && (!!win.chrome.webstore || !!win.chrome.runtime) || /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor);
      }
      return isChrome;
    }
    function isBrowserFirefox() {
      if (isFirefox === void 0) {
        var win = window;
        isFirefox = typeof win.InstallTrigger !== "undefined";
      }
      return isFirefox;
    }
    function isIOSUserAgent() {
      if (isIOS === void 0) {
        isIOS = (/iPad|iPhone|iPod/.test(navigator.platform) || // eslint-disable-next-line
        navigator.platform === "MacIntel" && navigator.maxTouchPoints > 1) && // @ts-ignore
        !window.MSStream;
      }
      return isIOS;
    }
    function getTabIndex(el) {
      if (!el) {
        return null;
      }
      var numberTabIndex = el.tabIndex;
      var tabIndex = el.getAttribute("tabIndex");
      if (isBrowserIE() && numberTabIndex === 0 && tabIndex === null) {
        var map2 = {
          a: true,
          body: true,
          button: true,
          frame: true,
          iframe: true,
          img: true,
          input: true,
          isindex: true,
          object: true,
          select: true,
          textarea: true
        };
        return map2[el.nodeName.toLowerCase()] === true ? "0" : null;
      }
      if (numberTabIndex === -1 && (tabIndex === null || tabIndex === "" && !isBrowserFirefox())) {
        return null;
      }
      return numberTabIndex.toString();
    }
    function getMaxDivHeight() {
      if (!document.body) {
        return -1;
      }
      var res = 1e6;
      var testUpTo = navigator.userAgent.toLowerCase().match(/firefox/) ? 6e6 : 1e9;
      var div = document.createElement("div");
      document.body.appendChild(div);
      while (true) {
        var test = res * 2;
        div.style.height = test + "px";
        if (test > testUpTo || div.clientHeight !== test) {
          break;
        } else {
          res = test;
        }
      }
      document.body.removeChild(div);
      return res;
    }
    function getScrollbarWidth() {
      if (browserScrollbarWidth == null) {
        initScrollbarWidthAndVisibility();
      }
      return browserScrollbarWidth;
    }
    function initScrollbarWidthAndVisibility() {
      var body = document.body;
      var div = document.createElement("div");
      div.style.width = div.style.height = "100px";
      div.style.opacity = "0";
      div.style.overflow = "scroll";
      div.style.msOverflowStyle = "scrollbar";
      div.style.position = "absolute";
      body.appendChild(div);
      var width = div.offsetWidth - div.clientWidth;
      if (width === 0 && div.clientWidth === 0) {
        width = null;
      }
      if (div.parentNode) {
        div.parentNode.removeChild(div);
      }
      if (width != null) {
        browserScrollbarWidth = width;
        invisibleScrollbar = width === 0;
      }
    }
    function isInvisibleScrollbar() {
      if (invisibleScrollbar == null) {
        initScrollbarWidthAndVisibility();
      }
      return invisibleScrollbar;
    }
    function hasOverflowScrolling() {
      var prefixes = ["webkit", "moz", "o", "ms"];
      var div = document.createElement("div");
      var body = document.getElementsByTagName("body")[0];
      var found = false;
      var p;
      body.appendChild(div);
      div.setAttribute("style", prefixes.map(function(prefix) {
        return "-" + prefix + "-overflow-scrolling: touch";
      }).concat("overflow-scrolling: touch").join(";"));
      var computedStyle = window.getComputedStyle(div);
      if (computedStyle.overflowScrolling === "touch") {
        found = true;
      }
      if (!found) {
        for (var _i = 0, prefixes_1 = prefixes; _i < prefixes_1.length; _i++) {
          p = prefixes_1[_i];
          if (computedStyle[p + "OverflowScrolling"] === "touch") {
            found = true;
            break;
          }
        }
      }
      if (div.parentNode) {
        div.parentNode.removeChild(div);
      }
      return found;
    }
    function getBodyWidth() {
      if (document.body) {
        return document.body.clientWidth;
      }
      if (window.innerHeight) {
        return window.innerWidth;
      }
      if (document.documentElement && document.documentElement.clientWidth) {
        return document.documentElement.clientWidth;
      }
      return -1;
    }
    function getBodyHeight() {
      if (document.body) {
        return document.body.clientHeight;
      }
      if (window.innerHeight) {
        return window.innerHeight;
      }
      if (document.documentElement && document.documentElement.clientHeight) {
        return document.documentElement.clientHeight;
      }
      return -1;
    }
    var BrowserUtils = Object.freeze({
      __proto__: null,
      isBrowserIE,
      isBrowserEdge,
      isBrowserSafari,
      isBrowserChrome,
      isBrowserFirefox,
      isIOSUserAgent,
      getTabIndex,
      getMaxDivHeight,
      getScrollbarWidth,
      isInvisibleScrollbar,
      hasOverflowScrolling,
      getBodyWidth,
      getBodyHeight
    });
    var rtlNegativeScroll;
    function addCssClass(element, className) {
      if (!element || !className || className.length === 0) {
        return;
      }
      if (className.indexOf(" ") >= 0) {
        className.split(" ").forEach(function(value) {
          return addCssClass(element, value);
        });
        return;
      }
      if (element.classList) {
        element.classList.add(className);
      } else if (element.className && element.className.length > 0) {
        var cssClasses = element.className.split(" ");
        if (cssClasses.indexOf(className) < 0) {
          cssClasses.push(className);
          element.setAttribute("class", cssClasses.join(" "));
        }
      } else {
        element.setAttribute("class", className);
      }
      return element;
    }
    function removeCssClass(element, className) {
      if (!element || !className || className.length === 0) {
        return;
      }
      if (className.indexOf(" ") >= 0) {
        className.split(" ").forEach(function(value) {
          return removeCssClass(element, value);
        });
        return;
      }
      if (element.classList) {
        element.classList.remove(className);
      } else if (element.className && element.className.length > 0) {
        var newClassName = element.className.split(" ").filter(function(c) {
          return c !== className;
        }).join(" ");
        element.setAttribute("class", newClassName);
      }
    }
    function addOrRemoveCssClass(element, className, addOrRemove) {
      if (addOrRemove) {
        addCssClass(element, className);
      } else {
        removeCssClass(element, className);
      }
    }
    function radioCssClass(element, elementClass, otherElementClass) {
      var parent = element.parentElement;
      var sibling = parent && parent.firstChild;
      while (sibling) {
        if (elementClass) {
          addOrRemoveCssClass(sibling, elementClass, sibling === element);
        }
        if (otherElementClass) {
          addOrRemoveCssClass(sibling, otherElementClass, sibling !== element);
        }
        sibling = sibling.nextSibling;
      }
    }
    function containsClass(element, className) {
      if (element.classList) {
        return element.classList.contains(className);
      }
      if (element.className) {
        var onlyClass = element.className === className;
        var contains = element.className.indexOf(" " + className + " ") >= 0;
        var startsWithClass = element.className.indexOf(className + " ") === 0;
        var endsWithClass = element.className.lastIndexOf(" " + className) === element.className.length - className.length - 1;
        return onlyClass || contains || startsWithClass || endsWithClass;
      }
      return false;
    }
    function isFocusableFormField(element) {
      var matches = Element.prototype.matches || Element.prototype.msMatchesSelector;
      var isFocusable = matches.call(element, Constants.INPUT_SELECTOR);
      var isNotFocusable = matches.call(element, Constants.FOCUSABLE_EXCLUDE);
      var isElementVisible = isVisible(element);
      var focusable = isFocusable && !isNotFocusable && isElementVisible;
      return focusable;
    }
    function setDisplayed(element, displayed) {
      addOrRemoveCssClass(element, "ag-hidden", !displayed);
    }
    function setVisible(element, visible) {
      addOrRemoveCssClass(element, "ag-invisible", !visible);
    }
    function setDisabled(element, disabled) {
      var attributeName = "disabled";
      var addOrRemoveDisabledAttribute = disabled ? function(e) {
        return e.setAttribute(attributeName, "");
      } : function(e) {
        return e.removeAttribute(attributeName);
      };
      addOrRemoveDisabledAttribute(element);
      nodeListForEach(element.querySelectorAll("input"), function(input) {
        return addOrRemoveDisabledAttribute(input);
      });
    }
    function isElementChildOfClass(element, cls, maxNest) {
      var counter = 0;
      while (element) {
        if (containsClass(element, cls)) {
          return true;
        }
        element = element.parentElement;
        if (maxNest && ++counter > maxNest) {
          break;
        }
      }
      return false;
    }
    function getElementSize(el) {
      var _a2 = window.getComputedStyle(el), height = _a2.height, width = _a2.width, paddingTop = _a2.paddingTop, paddingRight = _a2.paddingRight, paddingBottom = _a2.paddingBottom, paddingLeft = _a2.paddingLeft, marginTop = _a2.marginTop, marginRight = _a2.marginRight, marginBottom = _a2.marginBottom, marginLeft = _a2.marginLeft, boxSizing = _a2.boxSizing;
      return {
        height: parseFloat(height),
        width: parseFloat(width),
        paddingTop: parseFloat(paddingTop),
        paddingRight: parseFloat(paddingRight),
        paddingBottom: parseFloat(paddingBottom),
        paddingLeft: parseFloat(paddingLeft),
        marginTop: parseFloat(marginTop),
        marginRight: parseFloat(marginRight),
        marginBottom: parseFloat(marginBottom),
        marginLeft: parseFloat(marginLeft),
        boxSizing
      };
    }
    function getInnerHeight(el) {
      var size = getElementSize(el);
      if (size.boxSizing === "border-box") {
        return size.height - size.paddingTop - size.paddingBottom;
      }
      return size.height;
    }
    function getInnerWidth(el) {
      var size = getElementSize(el);
      if (size.boxSizing === "border-box") {
        return size.width - size.paddingLeft - size.paddingRight;
      }
      return size.width;
    }
    function getAbsoluteHeight(el) {
      var size = getElementSize(el);
      var marginRight = size.marginBottom + size.marginTop;
      return Math.ceil(el.offsetHeight + marginRight);
    }
    function getAbsoluteWidth(el) {
      var size = getElementSize(el);
      var marginWidth = size.marginLeft + size.marginRight;
      return Math.ceil(el.offsetWidth + marginWidth);
    }
    function isRtlNegativeScroll() {
      if (typeof rtlNegativeScroll === "boolean") {
        return rtlNegativeScroll;
      }
      var template = document.createElement("div");
      template.style.direction = "rtl";
      template.style.width = "1px";
      template.style.height = "1px";
      template.style.position = "fixed";
      template.style.top = "0px";
      template.style.overflow = "hidden";
      template.dir = "rtl";
      template.innerHTML = /* html */
      '<div style="width: 2px">\n            <span style="display: inline-block; width: 1px"></span>\n            <span style="display: inline-block; width: 1px"></span>\n        </div>';
      document.body.appendChild(template);
      template.scrollLeft = 1;
      rtlNegativeScroll = Math.floor(template.scrollLeft) === 0;
      document.body.removeChild(template);
      return rtlNegativeScroll;
    }
    function getScrollLeft(element, rtl) {
      var scrollLeft = element.scrollLeft;
      if (rtl) {
        scrollLeft = Math.abs(scrollLeft);
        if (isBrowserChrome() && !isRtlNegativeScroll()) {
          scrollLeft = element.scrollWidth - element.clientWidth - scrollLeft;
        }
      }
      return scrollLeft;
    }
    function setScrollLeft(element, value, rtl) {
      if (rtl) {
        if (isRtlNegativeScroll()) {
          value *= -1;
        } else if (isBrowserSafari() || isBrowserChrome()) {
          value = element.scrollWidth - element.clientWidth - value;
        }
      }
      element.scrollLeft = value;
    }
    function clearElement(el) {
      while (el && el.firstChild) {
        el.removeChild(el.firstChild);
      }
    }
    function removeElement(parent, cssSelector) {
      removeFromParent(parent.querySelector(cssSelector));
    }
    function removeFromParent(node) {
      if (node && node.parentNode) {
        node.parentNode.removeChild(node);
      }
    }
    function isVisible(element) {
      return element.offsetParent !== null;
    }
    function loadTemplate(template) {
      var tempDiv = document.createElement("div");
      tempDiv.innerHTML = (template || "").trim();
      return tempDiv.firstChild;
    }
    function appendHtml(eContainer, htmlTemplate) {
      if (eContainer.lastChild) {
        eContainer.insertAdjacentHTML("afterbegin", htmlTemplate);
      } else {
        eContainer.innerHTML = htmlTemplate;
      }
    }
    function getElementAttribute(element, attributeName) {
      if (element.attributes && element.attributes[attributeName]) {
        var attribute = element.attributes[attributeName];
        return attribute.value;
      }
      return null;
    }
    function offsetHeight(element) {
      return element && element.clientHeight ? element.clientHeight : 0;
    }
    function offsetWidth(element) {
      return element && element.clientWidth ? element.clientWidth : 0;
    }
    function ensureDomOrder(eContainer, eChild, eChildBefore) {
      if (eChildBefore && eChildBefore.nextSibling === eChild) {
        return;
      }
      if (eChildBefore) {
        if (eChildBefore.nextSibling) {
          eContainer.insertBefore(eChild, eChildBefore.nextSibling);
        } else {
          eContainer.appendChild(eChild);
        }
      } else {
        if (eContainer.firstChild && eContainer.firstChild !== eChild) {
          eContainer.insertAdjacentElement("afterbegin", eChild);
        }
      }
    }
    function setDomChildOrder(eContainer, orderedChildren) {
      for (var i = 0; i < orderedChildren.length; i++) {
        var correctCellAtIndex = orderedChildren[i];
        var actualCellAtIndex = eContainer.children[i];
        if (actualCellAtIndex !== correctCellAtIndex) {
          eContainer.insertBefore(correctCellAtIndex, actualCellAtIndex);
        }
      }
    }
    function insertWithDomOrder(eContainer, eToInsert, eChildBefore) {
      if (eChildBefore) {
        eChildBefore.insertAdjacentElement("afterend", eToInsert);
      } else {
        if (eContainer.firstChild) {
          eContainer.insertAdjacentElement("afterbegin", eToInsert);
        } else {
          eContainer.appendChild(eToInsert);
        }
      }
    }
    function prependDC(parent, documentFragment) {
      if (exists(parent.firstChild)) {
        parent.insertBefore(documentFragment, parent.firstChild);
      } else {
        parent.appendChild(documentFragment);
      }
    }
    function addStylesToElement(eElement, styles) {
      if (!styles) {
        return;
      }
      Object.keys(styles).forEach(function(key) {
        var keyCamelCase = hyphenToCamelCase(key);
        if (keyCamelCase) {
          eElement.style[keyCamelCase] = styles[key];
        }
      });
    }
    function isHorizontalScrollShowing(element) {
      return element.clientWidth < element.scrollWidth;
    }
    function isVerticalScrollShowing(element) {
      return element.clientHeight < element.scrollHeight;
    }
    function setElementWidth(element, width) {
      if (width === "flex") {
        element.style.removeProperty("width");
        element.style.removeProperty("minWidth");
        element.style.removeProperty("maxWidth");
        element.style.flex = "1 1 auto";
      } else {
        setFixedWidth(element, width);
      }
    }
    function setFixedWidth(element, width) {
      width = formatSize(width);
      element.style.width = width.toString();
      element.style.maxWidth = width.toString();
      element.style.minWidth = width.toString();
    }
    function setElementHeight(element, height) {
      if (height === "flex") {
        element.style.removeProperty("height");
        element.style.removeProperty("minHeight");
        element.style.removeProperty("maxHeight");
        element.style.flex = "1 1 auto";
      } else {
        setFixedHeight(element, height);
      }
    }
    function setFixedHeight(element, height) {
      height = formatSize(height);
      element.style.height = height.toString();
      element.style.maxHeight = height.toString();
      element.style.minHeight = height.toString();
    }
    function formatSize(size) {
      if (typeof size === "number") {
        return size + "px";
      }
      return size;
    }
    function isNode(o) {
      return typeof Node === "function" ? o instanceof Node : o && typeof o === "object" && typeof o.nodeType === "number" && typeof o.nodeName === "string";
    }
    function isElement(o) {
      return typeof HTMLElement === "function" ? o instanceof HTMLElement : o && isNonNullObject(o) && o.nodeType === 1 && typeof o.nodeName === "string";
    }
    function isNodeOrElement(o) {
      return isNode(o) || isElement(o);
    }
    function copyNodeList(nodeList) {
      if (nodeList == null) {
        return [];
      }
      var result = [];
      nodeListForEach(nodeList, function(node) {
        return result.push(node);
      });
      return result;
    }
    function iterateNamedNodeMap(map2, callback) {
      if (!map2) {
        return;
      }
      for (var i = 0; i < map2.length; i++) {
        var attr = map2[i];
        callback(attr.name, attr.value);
      }
    }
    function setCheckboxState(eCheckbox, state) {
      if (typeof state === "boolean") {
        eCheckbox.checked = state;
        eCheckbox.indeterminate = false;
      } else {
        eCheckbox.indeterminate = true;
      }
    }
    function addOrRemoveAttribute(element, name, value) {
      if (value == null) {
        element.removeAttribute(name);
      } else {
        element.setAttribute(name, value.toString());
      }
    }
    function nodeListForEach(nodeList, action) {
      if (nodeList == null) {
        return;
      }
      for (var i = 0; i < nodeList.length; i++) {
        action(nodeList[i]);
      }
    }
    var DomUtils = Object.freeze({
      __proto__: null,
      addCssClass,
      removeCssClass,
      addOrRemoveCssClass,
      radioCssClass,
      containsClass,
      isFocusableFormField,
      setDisplayed,
      setVisible,
      setDisabled,
      isElementChildOfClass,
      getElementSize,
      getInnerHeight,
      getInnerWidth,
      getAbsoluteHeight,
      getAbsoluteWidth,
      isRtlNegativeScroll,
      getScrollLeft,
      setScrollLeft,
      clearElement,
      removeElement,
      removeFromParent,
      isVisible,
      loadTemplate,
      appendHtml,
      getElementAttribute,
      offsetHeight,
      offsetWidth,
      ensureDomOrder,
      setDomChildOrder,
      insertWithDomOrder,
      prependDC,
      addStylesToElement,
      isHorizontalScrollShowing,
      isVerticalScrollShowing,
      setElementWidth,
      setFixedWidth,
      setElementHeight,
      setFixedHeight,
      formatSize,
      isNode,
      isElement,
      isNodeOrElement,
      copyNodeList,
      iterateNamedNodeMap,
      setCheckboxState,
      addOrRemoveAttribute,
      nodeListForEach
    });
    function getNameOfClass(theClass) {
      var funcNameRegex = /function (.{1,})\(/;
      var funcAsString = theClass.toString();
      var results = funcNameRegex.exec(funcAsString);
      return results && results.length > 1 ? results[1] : "";
    }
    function findLineByLeastSquares(values2) {
      var len = values2.length;
      var maxDecimals = 0;
      if (len <= 1) {
        return values2;
      }
      for (var i = 0; i < values2.length; i++) {
        var value = values2[i];
        var splitExponent = value.toString().split("e-");
        if (splitExponent.length > 1) {
          maxDecimals = Math.max(maxDecimals, parseInt(splitExponent[1], 10));
          continue;
        }
        if (Math.floor(value) === value) {
          continue;
        }
        maxDecimals = Math.max(maxDecimals, value.toString().split(".")[1].length);
      }
      var sum_x = 0;
      var sum_y = 0;
      var sum_xy = 0;
      var sum_xx = 0;
      var y = 0;
      for (var x = 0; x < len; x++) {
        y = values2[x];
        sum_x += x;
        sum_y += y;
        sum_xx += x * x;
        sum_xy += x * y;
      }
      var m = (len * sum_xy - sum_x * sum_y) / (len * sum_xx - sum_x * sum_x);
      var b = sum_y / len - m * sum_x / len;
      var result = [];
      for (var x = 0; x <= len; x++) {
        result.push(parseFloat((x * m + b).toFixed(maxDecimals)));
      }
      return result;
    }
    function cssStyleObjectToMarkup(stylesToUse) {
      if (!stylesToUse) {
        return "";
      }
      var resParts = [];
      iterateObject(stylesToUse, function(styleKey, styleValue) {
        var styleKeyDashed = camelCaseToHyphen(styleKey);
        resParts.push(styleKeyDashed + ": " + styleValue + ";");
      });
      return resParts.join(" ");
    }
    function message(msg) {
      var eMessage = document.createElement("div");
      var eBox = document.querySelector("#__ag__message");
      eMessage.innerHTML = msg;
      if (!eBox) {
        var template = '<div id="__ag__message" style="display: inline-block; position: absolute; top: 0px; left: 0px; color: white; background-color: black; z-index: 20; padding: 2px; border: 1px solid darkred; height: 200px; overflow-y: auto;"></div>';
        eBox = loadTemplate(template);
        if (document.body) {
          document.body.appendChild(eBox);
        }
      }
      eBox.insertBefore(eMessage, eBox.children[0]);
    }
    function bindCellRendererToHtmlElement(cellRendererPromise, eTarget) {
      cellRendererPromise.then(function(cellRenderer) {
        var gui = cellRenderer.getGui();
        if (gui != null) {
          if (typeof gui === "object") {
            eTarget.appendChild(gui);
          } else {
            eTarget.innerHTML = gui;
          }
        }
      });
    }
    var GeneralUtils = Object.freeze({
      __proto__: null,
      getNameOfClass,
      findLineByLeastSquares,
      cssStyleObjectToMarkup,
      message,
      bindCellRendererToHtmlElement
    });
    function setAriaAttribute(element, attribute, value) {
      element.setAttribute(ariaAttributeName(attribute), value.toString());
    }
    function removeAriaAttribute(element, attribute) {
      element.removeAttribute(ariaAttributeName(attribute));
    }
    function ariaAttributeName(attribute) {
      return "aria-" + attribute;
    }
    function setAriaRole(element, role) {
      if (role) {
        element.setAttribute("role", role);
      } else {
        element.removeAttribute("role");
      }
    }
    function getAriaSortState(column) {
      var sort;
      if (column.isSortAscending()) {
        sort = "ascending";
      } else if (column.isSortDescending()) {
        sort = "descending";
      } else {
        sort = "none";
      }
      return sort;
    }
    function getAriaLevel(element) {
      return parseInt(element.getAttribute("aria-level"), 10);
    }
    function getAriaPosInSet(element) {
      return parseInt(element.getAttribute("aria-posinset"), 10);
    }
    function getAriaDescribedBy(element) {
      return element.getAttribute("aria-describedby") || "";
    }
    function setAriaLabel(element, label) {
      var key = "label";
      if (label) {
        setAriaAttribute(element, key, label);
      } else {
        removeAriaAttribute(element, key);
      }
    }
    function setAriaLabelledBy(element, labelledBy) {
      var key = "labelledby";
      if (labelledBy) {
        setAriaAttribute(element, key, labelledBy);
      } else {
        removeAriaAttribute(element, key);
      }
    }
    function setAriaDescribedBy(element, describedby) {
      var key = "describedby";
      if (describedby) {
        setAriaAttribute(element, key, describedby);
      } else {
        removeAriaAttribute(element, key);
      }
    }
    function setAriaLevel(element, level) {
      setAriaAttribute(element, "level", level);
    }
    function setAriaDisabled(element, disabled) {
      setAriaAttribute(element, "disabled", disabled);
    }
    function setAriaExpanded(element, expanded) {
      setAriaAttribute(element, "expanded", expanded);
    }
    function removeAriaExpanded(element) {
      removeAriaAttribute(element, "expanded");
    }
    function setAriaSetSize(element, setsize) {
      setAriaAttribute(element, "setsize", setsize);
    }
    function setAriaPosInSet(element, position) {
      setAriaAttribute(element, "posinset", position);
    }
    function setAriaMultiSelectable(element, multiSelectable) {
      setAriaAttribute(element, "multiselectable", multiSelectable);
    }
    function setAriaRowCount(element, rowCount) {
      setAriaAttribute(element, "rowcount", rowCount);
    }
    function setAriaRowIndex(element, rowIndex) {
      setAriaAttribute(element, "rowindex", rowIndex);
    }
    function setAriaColCount(element, colCount) {
      setAriaAttribute(element, "colcount", colCount);
    }
    function setAriaColIndex(element, colIndex) {
      setAriaAttribute(element, "colindex", colIndex);
    }
    function setAriaColSpan(element, colSpan) {
      setAriaAttribute(element, "colspan", colSpan);
    }
    function setAriaSort(element, sort) {
      setAriaAttribute(element, "sort", sort);
    }
    function removeAriaSort(element) {
      removeAriaAttribute(element, "sort");
    }
    function setAriaSelected(element, selected) {
      var attributeName = "selected";
      if (selected) {
        setAriaAttribute(element, attributeName, selected);
      } else {
        removeAriaAttribute(element, attributeName);
      }
    }
    function setAriaChecked(element, checked) {
      setAriaAttribute(element, "checked", checked === void 0 ? "mixed" : checked);
    }
    var AriaUtils = Object.freeze({
      __proto__: null,
      setAriaRole,
      getAriaSortState,
      getAriaLevel,
      getAriaPosInSet,
      getAriaDescribedBy,
      setAriaLabel,
      setAriaLabelledBy,
      setAriaDescribedBy,
      setAriaLevel,
      setAriaDisabled,
      setAriaExpanded,
      removeAriaExpanded,
      setAriaSetSize,
      setAriaPosInSet,
      setAriaMultiSelectable,
      setAriaRowCount,
      setAriaRowIndex,
      setAriaColCount,
      setAriaColIndex,
      setAriaColSpan,
      setAriaSort,
      removeAriaSort,
      setAriaSelected,
      setAriaChecked
    });
    function serialiseDate(date, includeTime, separator) {
      if (includeTime === void 0) {
        includeTime = true;
      }
      if (separator === void 0) {
        separator = "-";
      }
      if (!date) {
        return null;
      }
      var serialised = [date.getFullYear(), date.getMonth() + 1, date.getDate()].map(function(part) {
        return padStartWidthZeros(part, 2);
      }).join(separator);
      if (includeTime) {
        serialised += " " + [date.getHours(), date.getMinutes(), date.getSeconds()].map(function(part) {
          return padStartWidthZeros(part, 2);
        }).join(":");
      }
      return serialised;
    }
    function parseDateTimeFromString(value) {
      if (!value) {
        return null;
      }
      var _a2 = value.split(" "), dateStr = _a2[0], timeStr = _a2[1];
      if (!dateStr) {
        return null;
      }
      var fields = dateStr.split("-").map(function(f) {
        return parseInt(f, 10);
      });
      if (fields.filter(function(f) {
        return !isNaN(f);
      }).length !== 3) {
        return null;
      }
      var year = fields[0], month = fields[1], day = fields[2];
      var date = new Date(year, month - 1, day);
      if (date.getFullYear() !== year || date.getMonth() !== month - 1 || date.getDate() !== day) {
        return null;
      }
      if (!timeStr || timeStr === "00:00:00") {
        return date;
      }
      var _b = timeStr.split(":").map(function(part) {
        return parseInt(part, 10);
      }), hours = _b[0], minutes = _b[1], seconds = _b[2];
      if (hours >= 0 && hours < 24) {
        date.setHours(hours);
      }
      if (minutes >= 0 && minutes < 60) {
        date.setMinutes(minutes);
      }
      if (seconds >= 0 && seconds < 60) {
        date.setSeconds(seconds);
      }
      return date;
    }
    var DateUtils = Object.freeze({
      __proto__: null,
      serialiseDate,
      parseDateTimeFromString
    });
    function fuzzyCheckStrings(inputValues, validValues, allSuggestions) {
      var fuzzyMatches = {};
      var invalidInputs = inputValues.filter(function(inputValue) {
        return !validValues.some(function(validValue) {
          return validValue === inputValue;
        });
      });
      if (invalidInputs.length > 0) {
        invalidInputs.forEach(function(invalidInput) {
          return fuzzyMatches[invalidInput] = fuzzySuggestions(invalidInput, allSuggestions);
        });
      }
      return fuzzyMatches;
    }
    function fuzzySuggestions(inputValue, allSuggestions, hideIrrelevant, weighted) {
      var search = weighted ? string_weighted_distances : string_distances;
      var thisSuggestions = allSuggestions.map(function(text) {
        return {
          value: text,
          relevance: search(inputValue.toLowerCase(), text.toLocaleLowerCase())
        };
      });
      thisSuggestions.sort(function(a, b) {
        return b.relevance - a.relevance;
      });
      if (hideIrrelevant) {
        thisSuggestions = thisSuggestions.filter(function(suggestion) {
          return suggestion.relevance !== 0;
        });
      }
      return thisSuggestions.map(function(suggestion) {
        return suggestion.value;
      });
    }
    function get_bigrams(from) {
      var s = from.toLowerCase();
      var v = new Array(s.length - 1);
      var i;
      var j;
      var ref2;
      for (i = j = 0, ref2 = v.length; j <= ref2; i = j += 1) {
        v[i] = s.slice(i, i + 2);
      }
      return v;
    }
    function string_distances(str1, str2) {
      if (str1.length === 0 && str2.length === 0) {
        return 0;
      }
      var pairs1 = get_bigrams(str1);
      var pairs2 = get_bigrams(str2);
      var union = pairs1.length + pairs2.length;
      var hit_count = 0;
      var j;
      var len;
      for (j = 0, len = pairs1.length; j < len; j++) {
        var x = pairs1[j];
        var k = void 0;
        var len1 = void 0;
        for (k = 0, len1 = pairs2.length; k < len1; k++) {
          var y = pairs2[k];
          if (x === y) {
            hit_count++;
          }
        }
      }
      return hit_count > 0 ? 2 * hit_count / union : 0;
    }
    function string_weighted_distances(str1, str2) {
      var a = str1.replace(/\s/g, "");
      var b = str2.replace(/\s/g, "");
      var weight = 0;
      var lastIndex = 0;
      for (var i = 0; i < a.length; i++) {
        var idx = b.indexOf(a[i], lastIndex);
        if (idx === -1) {
          continue;
        }
        lastIndex = idx;
        weight += 100 - lastIndex * 100 / 1e4 * 100;
      }
      return weight;
    }
    var FuzzyMatchUtils = Object.freeze({
      __proto__: null,
      fuzzyCheckStrings,
      fuzzySuggestions,
      get_bigrams,
      string_distances,
      string_weighted_distances
    });
    var iconNameClassMap = {
      // header column group shown when expanded (click to contract)
      columnGroupOpened: "expanded",
      // header column group shown when contracted (click to expand)
      columnGroupClosed: "contracted",
      // tool panel column group contracted (click to expand)
      columnSelectClosed: "tree-closed",
      // tool panel column group expanded (click to contract)
      columnSelectOpen: "tree-open",
      // column tool panel header expand/collapse all button, shown when some children are expanded and
      //     others are collapsed
      columnSelectIndeterminate: "tree-indeterminate",
      // shown on ghost icon while dragging column to the side of the grid to pin
      columnMovePin: "pin",
      // shown on ghost icon while dragging over part of the page that is not a drop zone
      columnMoveHide: "eye-slash",
      // shown on ghost icon while dragging columns to reorder
      columnMoveMove: "arrows",
      // animating icon shown when dragging a column to the right of the grid causes horizontal scrolling
      columnMoveLeft: "left",
      // animating icon shown when dragging a column to the left of the grid causes horizontal scrolling
      columnMoveRight: "right",
      // shown on ghost icon while dragging over Row Groups drop zone
      columnMoveGroup: "group",
      // shown on ghost icon while dragging over Values drop zone
      columnMoveValue: "aggregation",
      // shown on ghost icon while dragging over pivot drop zone
      columnMovePivot: "pivot",
      // shown on ghost icon while dragging over drop zone that doesn't support it, e.g.
      //     string column over aggregation drop zone
      dropNotAllowed: "not-allowed",
      // shown on row group when contracted (click to expand)
      groupContracted: "tree-closed",
      // shown on row group when expanded (click to contract)
      groupExpanded: "tree-open",
      // context menu chart item
      chart: "chart",
      // chart window title bar
      close: "cross",
      // X (remove) on column 'pill' after adding it to a drop zone list
      cancel: "cancel",
      // indicates the currently active pin state in the "Pin column" sub-menu of the column menu
      check: "tick",
      // "go to first" button in pagination controls
      first: "first",
      // "go to previous" button in pagination controls
      previous: "previous",
      // "go to next" button in pagination controls
      next: "next",
      // "go to last" button in pagination controls
      last: "last",
      // shown on top right of chart when chart is linked to range data (click to unlink)
      linked: "linked",
      // shown on top right of chart when chart is not linked to range data (click to link)
      unlinked: "unlinked",
      // "Choose colour" button on chart settings tab
      colorPicker: "color-picker",
      // rotating spinner shown by the loading cell renderer
      groupLoading: "loading",
      // button to launch enterprise column menu
      menu: "menu",
      // filter tool panel tab
      filter: "filter",
      // column tool panel tab
      columns: "columns",
      // button in chart regular size window title bar (click to maximise)
      maximize: "maximize",
      // button in chart maximised window title bar (click to make regular size)
      minimize: "minimize",
      // "Pin column" item in column header menu
      menuPin: "pin",
      // "Value aggregation" column menu item (shown on numeric columns when grouping is active)"
      menuValue: "aggregation",
      // "Group by {column-name}" item in column header menu
      menuAddRowGroup: "group",
      // "Un-Group by {column-name}" item in column header menu
      menuRemoveRowGroup: "group",
      // context menu copy item
      clipboardCopy: "copy",
      // context menu paste item
      clipboardPaste: "paste",
      // identifies the pivot drop zone
      pivotPanel: "pivot",
      // "Row groups" drop zone in column tool panel
      rowGroupPanel: "group",
      // columns tool panel Values drop zone
      valuePanel: "aggregation",
      // drag handle used to pick up draggable columns
      columnDrag: "grip",
      // drag handle used to pick up draggable rows
      rowDrag: "grip",
      // context menu export item
      save: "save",
      // csv export
      csvExport: "csv",
      // excel export,
      excelExport: "excel",
      // icon on dropdown editors
      smallDown: "small-down",
      // version of small-right used in RTL mode
      smallLeft: "small-left",
      // separater between column 'pills' when you add multiple columns to the header drop zone
      smallRight: "small-right",
      smallUp: "small-up",
      // show on column header when column is sorted ascending
      sortAscending: "asc",
      // show on column header when column is sorted descending
      sortDescending: "desc",
      // show on column header when column has no sort, only when enabled with gridOptions.unSortIcon=true
      sortUnSort: "none"
    };
    function createIcon(iconName, gridOptionsWrapper, column) {
      var iconContents = createIconNoSpan(iconName, gridOptionsWrapper, column);
      if (iconContents && iconContents.className.indexOf("ag-icon") > -1) {
        return iconContents;
      }
      var eResult = document.createElement("span");
      eResult.appendChild(iconContents);
      return eResult;
    }
    function createIconNoSpan(iconName, gridOptionsWrapper, column, forceCreate) {
      var userProvidedIcon = null;
      var icons = column && column.getColDef().icons;
      if (icons) {
        userProvidedIcon = icons[iconName];
      }
      if (gridOptionsWrapper && !userProvidedIcon) {
        var optionsIcons = gridOptionsWrapper.getIcons();
        if (optionsIcons) {
          userProvidedIcon = optionsIcons[iconName];
        }
      }
      if (userProvidedIcon) {
        var rendererResult = void 0;
        if (typeof userProvidedIcon === "function") {
          rendererResult = userProvidedIcon();
        } else if (typeof userProvidedIcon === "string") {
          rendererResult = userProvidedIcon;
        } else {
          throw new Error("icon from grid options needs to be a string or a function");
        }
        if (typeof rendererResult === "string") {
          return loadTemplate(rendererResult);
        }
        if (isNodeOrElement(rendererResult)) {
          return rendererResult;
        }
        console.warn("AG Grid: iconRenderer should return back a string or a dom object");
      } else {
        var span = document.createElement("span");
        var cssClass = iconNameClassMap[iconName];
        if (!cssClass) {
          if (!forceCreate) {
            console.warn("AG Grid: Did not find icon " + iconName);
            cssClass = "";
          } else {
            cssClass = iconName;
          }
        }
        span.setAttribute("class", "ag-icon ag-icon-" + cssClass);
        span.setAttribute("unselectable", "on");
        setAriaRole(span, "presentation");
        return span;
      }
    }
    var IconUtils = Object.freeze({
      __proto__: null,
      iconNameClassMap,
      createIcon,
      createIconNoSpan
    });
    var NUMPAD_DEL_NUMLOCK_ON_KEY = "Del";
    var NUMPAD_DEL_NUMLOCK_ON_CHARCODE = 46;
    function isKeyPressed(event, keyToCheck) {
      return (event.which || event.keyCode) === keyToCheck;
    }
    function isEventFromPrintableCharacter(event) {
      if (event.altKey || event.ctrlKey || event.metaKey) {
        return false;
      }
      var printableCharacter = event.key.length === 1;
      var numpadDelWithNumlockOnForEdgeOrIe = isNumpadDelWithNumlockOnForEdgeOrIe(event);
      return printableCharacter || numpadDelWithNumlockOnForEdgeOrIe;
    }
    function isUserSuppressingKeyboardEvent(gridOptionsWrapper, keyboardEvent, rowNode, column, editing) {
      var gridOptionsFunc = gridOptionsWrapper.getSuppressKeyboardEventFunc();
      var colDefFunc = column ? column.getColDef().suppressKeyboardEvent : void 0;
      if (!gridOptionsFunc && !colDefFunc) {
        return false;
      }
      var params = {
        event: keyboardEvent,
        editing,
        column,
        api: gridOptionsWrapper.getApi(),
        node: rowNode,
        data: rowNode.data,
        colDef: column.getColDef(),
        context: gridOptionsWrapper.getContext(),
        columnApi: gridOptionsWrapper.getColumnApi()
      };
      if (colDefFunc) {
        var colDefFuncResult = colDefFunc(params);
        if (colDefFuncResult) {
          return true;
        }
      }
      if (gridOptionsFunc) {
        return gridOptionsFunc(params);
      }
      return false;
    }
    function isUserSuppressingHeaderKeyboardEvent(gridOptionsWrapper, keyboardEvent, headerRowIndex, column) {
      var colDef = column.getDefinition();
      var colDefFunc = colDef && colDef.suppressHeaderKeyboardEvent;
      if (!exists(colDefFunc)) {
        return false;
      }
      var params = {
        api: gridOptionsWrapper.getApi(),
        columnApi: gridOptionsWrapper.getColumnApi(),
        context: gridOptionsWrapper.getContext(),
        colDef,
        column,
        headerRowIndex,
        event: keyboardEvent
      };
      return !!colDefFunc(params);
    }
    function isNumpadDelWithNumlockOnForEdgeOrIe(event) {
      return (isBrowserEdge() || isBrowserIE()) && event.key === NUMPAD_DEL_NUMLOCK_ON_KEY && event.charCode === NUMPAD_DEL_NUMLOCK_ON_CHARCODE;
    }
    var KeyboardUtils = Object.freeze({
      __proto__: null,
      isKeyPressed,
      isEventFromPrintableCharacter,
      isUserSuppressingKeyboardEvent,
      isUserSuppressingHeaderKeyboardEvent
    });
    function normalizeWheel(event) {
      var PIXEL_STEP = 10;
      var LINE_HEIGHT = 40;
      var PAGE_HEIGHT = 800;
      var sX = 0;
      var sY = 0;
      var pX = 0;
      var pY = 0;
      if ("detail" in event) {
        sY = event.detail;
      }
      if ("wheelDelta" in event) {
        sY = -event.wheelDelta / 120;
      }
      if ("wheelDeltaY" in event) {
        sY = -event.wheelDeltaY / 120;
      }
      if ("wheelDeltaX" in event) {
        sX = -event.wheelDeltaX / 120;
      }
      if ("axis" in event && event.axis === event.HORIZONTAL_AXIS) {
        sX = sY;
        sY = 0;
      }
      pX = sX * PIXEL_STEP;
      pY = sY * PIXEL_STEP;
      if ("deltaY" in event) {
        pY = event.deltaY;
      }
      if ("deltaX" in event) {
        pX = event.deltaX;
      }
      if ((pX || pY) && event.deltaMode) {
        if (event.deltaMode == 1) {
          pX *= LINE_HEIGHT;
          pY *= LINE_HEIGHT;
        } else {
          pX *= PAGE_HEIGHT;
          pY *= PAGE_HEIGHT;
        }
      }
      if (pX && !sX) {
        sX = pX < 1 ? -1 : 1;
      }
      if (pY && !sY) {
        sY = pY < 1 ? -1 : 1;
      }
      return {
        spinX: sX,
        spinY: sY,
        pixelX: pX,
        pixelY: pY
      };
    }
    function isLeftClick(mouseEvent) {
      if ("buttons" in mouseEvent) {
        return mouseEvent.buttons == 1;
      }
      var button = mouseEvent.which || mouseEvent.button;
      return button == 1;
    }
    function areEventsNear(e1, e2, pixelCount) {
      if (pixelCount === 0) {
        return false;
      }
      var diffX = Math.abs(e1.clientX - e2.clientX);
      var diffY = Math.abs(e1.clientY - e2.clientY);
      return Math.max(diffX, diffY) <= pixelCount;
    }
    var MouseUtils = Object.freeze({
      __proto__: null,
      normalizeWheel,
      isLeftClick,
      areEventsNear
    });
    function sortRowNodesByOrder(rowNodes, rowNodeOrder) {
      if (!rowNodes) {
        return;
      }
      var comparator = function(nodeA, nodeB) {
        var positionA = rowNodeOrder[nodeA.id];
        var positionB = rowNodeOrder[nodeB.id];
        var aHasIndex = positionA !== void 0;
        var bHasIndex = positionB !== void 0;
        var bothNodesAreUserNodes = aHasIndex && bHasIndex;
        var bothNodesAreFillerNodes = !aHasIndex && !bHasIndex;
        if (bothNodesAreUserNodes) {
          return positionA - positionB;
        }
        if (bothNodesAreFillerNodes) {
          return nodeA.__objectId - nodeB.__objectId;
        }
        if (aHasIndex) {
          return 1;
        }
        return -1;
      };
      var rowNodeA;
      var rowNodeB;
      var atLeastOneOutOfOrder = false;
      for (var i = 0; i < rowNodes.length - 1; i++) {
        rowNodeA = rowNodes[i];
        rowNodeB = rowNodes[i + 1];
        if (comparator(rowNodeA, rowNodeB) > 0) {
          atLeastOneOutOfOrder = true;
          break;
        }
      }
      if (atLeastOneOutOfOrder) {
        rowNodes.sort(comparator);
      }
    }
    function traverseNodesWithKey(nodes, callback) {
      var keyParts = [];
      recursiveSearchNodes(nodes);
      function recursiveSearchNodes(currentNodes) {
        if (!currentNodes) {
          return;
        }
        currentNodes.forEach(function(node) {
          if (node.group || node.hasChildren()) {
            keyParts.push(node.key);
            var key = keyParts.join("|");
            callback(node, key);
            recursiveSearchNodes(node.childrenAfterGroup);
            keyParts.pop();
          }
        });
      }
    }
    var RowNodeUtils = Object.freeze({
      __proto__: null,
      sortRowNodesByOrder,
      traverseNodesWithKey
    });
    function convertToSet(list) {
      var set2 = /* @__PURE__ */ new Set();
      list.forEach(function(x) {
        return set2.add(x);
      });
      return set2;
    }
    var SetUtils = Object.freeze({
      __proto__: null,
      convertToSet
    });
    var __assign$1 = function() {
      __assign$1 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign$1.apply(this, arguments);
    };
    var utils = __assign$1(__assign$1(__assign$1(__assign$1(__assign$1(__assign$1(__assign$1(__assign$1(__assign$1(__assign$1(__assign$1(__assign$1(__assign$1(__assign$1(__assign$1(__assign$1(__assign$1(__assign$1(__assign$1(__assign$1({}, GeneralUtils), AriaUtils), ArrayUtils), BrowserUtils), CsvUtils), DateUtils), DomUtils), EventUtils), FunctionUtils), FuzzyMatchUtils), GenericUtils), IconUtils), KeyboardUtils), MapUtils), MouseUtils), NumberUtils), ObjectUtils), RowNodeUtils), SetUtils), StringUtils);
    var _ = utils;
    var NumberSequence = (
      /** @class */
      function() {
        function NumberSequence2(initValue, step) {
          if (initValue === void 0) {
            initValue = 0;
          }
          if (step === void 0) {
            step = 1;
          }
          this.nextValue = initValue;
          this.step = step;
        }
        NumberSequence2.prototype.next = function() {
          var valToReturn = this.nextValue;
          this.nextValue += this.step;
          return valToReturn;
        };
        NumberSequence2.prototype.peek = function() {
          return this.nextValue;
        };
        NumberSequence2.prototype.skip = function(count) {
          this.nextValue += count;
        };
        return NumberSequence2;
      }()
    );
    (function(AgPromiseStatus) {
      AgPromiseStatus[AgPromiseStatus["IN_PROGRESS"] = 0] = "IN_PROGRESS";
      AgPromiseStatus[AgPromiseStatus["RESOLVED"] = 1] = "RESOLVED";
    })(exports.AgPromiseStatus || (exports.AgPromiseStatus = {}));
    var AgPromise = (
      /** @class */
      function() {
        function AgPromise2(callback) {
          var _this = this;
          this.status = exports.AgPromiseStatus.IN_PROGRESS;
          this.resolution = null;
          this.waiters = [];
          callback(function(value) {
            return _this.onDone(value);
          }, function(params) {
            return _this.onReject(params);
          });
        }
        AgPromise2.all = function(promises) {
          return new AgPromise2(function(resolve) {
            var remainingToResolve = promises.length;
            var combinedValues = new Array(remainingToResolve);
            forEach(promises, function(promise, index) {
              promise.then(function(value) {
                combinedValues[index] = value;
                remainingToResolve--;
                if (remainingToResolve === 0) {
                  resolve(combinedValues);
                }
              });
            });
          });
        };
        AgPromise2.resolve = function(value) {
          if (value === void 0) {
            value = null;
          }
          return new AgPromise2(function(resolve) {
            return resolve(value);
          });
        };
        AgPromise2.prototype.then = function(func) {
          var _this = this;
          return new AgPromise2(function(resolve) {
            if (_this.status === exports.AgPromiseStatus.RESOLVED) {
              resolve(func(_this.resolution));
            } else {
              _this.waiters.push(function(value) {
                return resolve(func(value));
              });
            }
          });
        };
        AgPromise2.prototype.resolveNow = function(ifNotResolvedValue, ifResolved) {
          return this.status === exports.AgPromiseStatus.RESOLVED ? ifResolved(this.resolution) : ifNotResolvedValue;
        };
        AgPromise2.prototype.onDone = function(value) {
          this.status = exports.AgPromiseStatus.RESOLVED;
          this.resolution = value;
          forEach(this.waiters, function(waiter) {
            return waiter(value);
          });
        };
        AgPromise2.prototype.onReject = function(params) {
          console.warn("TBI");
        };
        return AgPromise2;
      }()
    );
    var Timer = (
      /** @class */
      function() {
        function Timer2() {
          this.timestamp = new Date().getTime();
        }
        Timer2.prototype.print = function(msg) {
          var duration = new Date().getTime() - this.timestamp;
          console.info(msg + " = " + duration);
          this.timestamp = new Date().getTime();
        };
        return Timer2;
      }()
    );
    var __extends$5 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __assign$2 = function() {
      __assign$2 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign$2.apply(this, arguments);
    };
    var __decorate$9 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var TooltipStates;
    (function(TooltipStates2) {
      TooltipStates2[TooltipStates2["NOTHING"] = 0] = "NOTHING";
      TooltipStates2[TooltipStates2["WAITING_TO_SHOW"] = 1] = "WAITING_TO_SHOW";
      TooltipStates2[TooltipStates2["SHOWING"] = 2] = "SHOWING";
    })(TooltipStates || (TooltipStates = {}));
    var CustomTooltipFeature = (
      /** @class */
      function(_super) {
        __extends$5(CustomTooltipFeature2, _super);
        function CustomTooltipFeature2(parentComp) {
          var _this = _super.call(this) || this;
          _this.DEFAULT_HIDE_TOOLTIP_TIMEOUT = 1e4;
          _this.SHOW_QUICK_TOOLTIP_DIFF = 1e3;
          _this.FADE_OUT_TOOLTIP_TIMEOUT = 1e3;
          _this.state = TooltipStates.NOTHING;
          _this.tooltipInstanceCount = 0;
          _this.tooltipMouseTrack = false;
          _this.parentComp = parentComp;
          return _this;
        }
        CustomTooltipFeature2.prototype.postConstruct = function() {
          this.tooltipShowDelay = this.gridOptionsWrapper.getTooltipShowDelay() || 2e3;
          this.tooltipMouseTrack = this.gridOptionsWrapper.isTooltipMouseTrack();
          var el = this.parentComp.getGui();
          this.addManagedListener(el, "mouseenter", this.onMouseEnter.bind(this));
          this.addManagedListener(el, "mouseleave", this.onMouseLeave.bind(this));
          this.addManagedListener(el, "mousemove", this.onMouseMove.bind(this));
          this.addManagedListener(el, "mousedown", this.onMouseDown.bind(this));
          this.addManagedListener(el, "keydown", this.onKeyDown.bind(this));
        };
        CustomTooltipFeature2.prototype.destroy = function() {
          this.setToDoNothing();
          _super.prototype.destroy.call(this);
        };
        CustomTooltipFeature2.prototype.onMouseEnter = function(e) {
          if (isIOSUserAgent()) {
            return;
          }
          if (this.state != TooltipStates.NOTHING) {
            return;
          }
          var delay = this.isLastTooltipHiddenRecently() ? 200 : this.tooltipShowDelay;
          this.showTooltipTimeoutId = window.setTimeout(this.showTooltip.bind(this), delay);
          this.lastMouseEvent = e;
          this.state = TooltipStates.WAITING_TO_SHOW;
        };
        CustomTooltipFeature2.prototype.onMouseLeave = function() {
          this.setToDoNothing();
        };
        CustomTooltipFeature2.prototype.onKeyDown = function() {
          this.setToDoNothing();
        };
        CustomTooltipFeature2.prototype.setToDoNothing = function() {
          if (this.state === TooltipStates.SHOWING) {
            this.hideTooltip();
          }
          this.clearTimeouts();
          this.state = TooltipStates.NOTHING;
        };
        CustomTooltipFeature2.prototype.onMouseMove = function(e) {
          this.lastMouseEvent = e;
          if (this.tooltipMouseTrack && this.state === TooltipStates.SHOWING && this.tooltipComp) {
            this.positionTooltipUnderLastMouseEvent();
          }
        };
        CustomTooltipFeature2.prototype.onMouseDown = function() {
          this.setToDoNothing();
        };
        CustomTooltipFeature2.prototype.hideTooltip = function() {
          if (this.tooltipComp) {
            this.destroyTooltipComp();
            CustomTooltipFeature2.lastTooltipHideTime = new Date().getTime();
          }
          this.state = TooltipStates.NOTHING;
        };
        CustomTooltipFeature2.prototype.destroyTooltipComp = function() {
          var _this = this;
          addCssClass(this.tooltipComp.getGui(), "ag-tooltip-hiding");
          var tooltipPopupDestroyFunc = this.tooltipPopupDestroyFunc;
          var tooltipComp = this.tooltipComp;
          window.setTimeout(function() {
            tooltipPopupDestroyFunc();
            _this.getContext().destroyBean(tooltipComp);
          }, this.FADE_OUT_TOOLTIP_TIMEOUT);
          this.tooltipPopupDestroyFunc = void 0;
          this.tooltipComp = void 0;
        };
        CustomTooltipFeature2.prototype.isLastTooltipHiddenRecently = function() {
          var now = new Date().getTime();
          var then = CustomTooltipFeature2.lastTooltipHideTime;
          return now - then < this.SHOW_QUICK_TOOLTIP_DIFF;
        };
        CustomTooltipFeature2.prototype.showTooltip = function() {
          var params = __assign$2({ api: this.gridApi, columnApi: this.columnApi, context: this.gridOptionsWrapper.getContext() }, this.parentComp.getTooltipParams());
          if (!exists(params.value)) {
            this.setToDoNothing();
            return;
          }
          this.state = TooltipStates.SHOWING;
          this.tooltipInstanceCount++;
          var callback = this.newTooltipComponentCallback.bind(this, this.tooltipInstanceCount);
          var userDetails = this.userComponentFactory.getTooltipCompDetails(params);
          userDetails.newAgStackInstance().then(callback);
        };
        CustomTooltipFeature2.prototype.newTooltipComponentCallback = function(tooltipInstanceCopy, tooltipComp) {
          var compNoLongerNeeded = this.state !== TooltipStates.SHOWING || this.tooltipInstanceCount !== tooltipInstanceCopy;
          if (compNoLongerNeeded) {
            this.getContext().destroyBean(tooltipComp);
            return;
          }
          var eGui = tooltipComp.getGui();
          this.tooltipComp = tooltipComp;
          if (!containsClass(eGui, "ag-tooltip")) {
            addCssClass(eGui, "ag-tooltip-custom");
          }
          if (this.gridOptionsWrapper.isReactUi()) {
            addCssClass(eGui, "ag-tooltip-reactui");
          }
          var translate = this.gridOptionsWrapper.getLocaleTextFunc();
          var addPopupRes = this.popupService.addPopup({
            eChild: eGui,
            ariaLabel: translate("ariaLabelTooltip", "Tooltip")
          });
          if (addPopupRes) {
            this.tooltipPopupDestroyFunc = addPopupRes.hideFunc;
          }
          this.positionTooltipUnderLastMouseEvent();
          this.hideTooltipTimeoutId = window.setTimeout(this.hideTooltip.bind(this), this.DEFAULT_HIDE_TOOLTIP_TIMEOUT);
        };
        CustomTooltipFeature2.prototype.positionTooltipUnderLastMouseEvent = function() {
          this.popupService.positionPopupUnderMouseEvent({
            type: "tooltip",
            mouseEvent: this.lastMouseEvent,
            ePopup: this.tooltipComp.getGui(),
            nudgeY: 18
          });
        };
        CustomTooltipFeature2.prototype.clearTimeouts = function() {
          if (this.showTooltipTimeoutId) {
            window.clearTimeout(this.showTooltipTimeoutId);
            this.showTooltipTimeoutId = void 0;
          }
          if (this.hideTooltipTimeoutId) {
            window.clearTimeout(this.hideTooltipTimeoutId);
            this.hideTooltipTimeoutId = void 0;
          }
        };
        __decorate$9([
          Autowired("popupService")
        ], CustomTooltipFeature2.prototype, "popupService", void 0);
        __decorate$9([
          Autowired("userComponentFactory")
        ], CustomTooltipFeature2.prototype, "userComponentFactory", void 0);
        __decorate$9([
          Autowired("columnApi")
        ], CustomTooltipFeature2.prototype, "columnApi", void 0);
        __decorate$9([
          Autowired("gridApi")
        ], CustomTooltipFeature2.prototype, "gridApi", void 0);
        __decorate$9([
          PostConstruct
        ], CustomTooltipFeature2.prototype, "postConstruct", null);
        return CustomTooltipFeature2;
      }(BeanStub)
    );
    var __extends$6 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$a = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var compIdSequence = new NumberSequence();
    var Component = (
      /** @class */
      function(_super) {
        __extends$6(Component2, _super);
        function Component2(template) {
          var _this = _super.call(this) || this;
          _this.displayed = true;
          _this.visible = true;
          _this.compId = compIdSequence.next();
          _this.cssClassStates = {};
          if (template) {
            _this.setTemplate(template);
          }
          return _this;
        }
        Component2.prototype.preConstructOnComponent = function() {
          this.usingBrowserTooltips = this.gridOptionsWrapper.isEnableBrowserTooltips();
        };
        Component2.prototype.getCompId = function() {
          return this.compId;
        };
        Component2.prototype.getTooltipParams = function() {
          return {
            value: this.tooltipText,
            location: "UNKNOWN"
          };
        };
        Component2.prototype.setTooltip = function(newTooltipText) {
          var _this = this;
          var removeTooltip = function() {
            if (_this.usingBrowserTooltips) {
              _this.getGui().removeAttribute("title");
            } else {
              _this.tooltipFeature = _this.destroyBean(_this.tooltipFeature);
            }
          };
          var addTooltip = function() {
            if (_this.usingBrowserTooltips) {
              _this.getGui().setAttribute("title", _this.tooltipText);
            } else {
              _this.tooltipFeature = _this.createBean(new CustomTooltipFeature(_this));
            }
          };
          if (this.tooltipText != newTooltipText) {
            if (this.tooltipText) {
              removeTooltip();
            }
            if (newTooltipText != null) {
              this.tooltipText = newTooltipText;
              if (this.tooltipText) {
                addTooltip();
              }
            }
          }
        };
        Component2.prototype.createChildComponentsFromTags = function(parentNode, paramsMap) {
          var _this = this;
          var childNodeList = copyNodeList(parentNode.childNodes);
          forEach(childNodeList, function(childNode) {
            if (!(childNode instanceof HTMLElement)) {
              return;
            }
            var childComp = _this.createComponentFromElement(childNode, function(childComp2) {
              var childGui = childComp2.getGui();
              if (childGui) {
                _this.copyAttributesFromNode(childNode, childComp2.getGui());
              }
            }, paramsMap);
            if (childComp) {
              if (childComp.addItems && childNode.children.length) {
                _this.createChildComponentsFromTags(childNode, paramsMap);
                var items = Array.prototype.slice.call(childNode.children);
                childComp.addItems(items);
              }
              _this.swapComponentForNode(childComp, parentNode, childNode);
            } else if (childNode.childNodes) {
              _this.createChildComponentsFromTags(childNode, paramsMap);
            }
          });
        };
        Component2.prototype.createComponentFromElement = function(element, afterPreCreateCallback, paramsMap) {
          var key = element.nodeName;
          var componentParams = paramsMap ? paramsMap[element.getAttribute("ref")] : void 0;
          var ComponentClass = this.agStackComponentsRegistry.getComponentClass(key);
          if (ComponentClass) {
            Component2.elementGettingCreated = element;
            var newComponent = new ComponentClass(componentParams);
            newComponent.setParentComponent(this);
            this.createBean(newComponent, null, afterPreCreateCallback);
            return newComponent;
          }
          return null;
        };
        Component2.prototype.copyAttributesFromNode = function(source, dest) {
          iterateNamedNodeMap(source.attributes, function(name, value) {
            return dest.setAttribute(name, value);
          });
        };
        Component2.prototype.swapComponentForNode = function(newComponent, parentNode, childNode) {
          var eComponent = newComponent.getGui();
          parentNode.replaceChild(eComponent, childNode);
          parentNode.insertBefore(document.createComment(childNode.nodeName), eComponent);
          this.addDestroyFunc(this.destroyBean.bind(this, newComponent));
          this.swapInComponentForQuerySelectors(newComponent, childNode);
        };
        Component2.prototype.swapInComponentForQuerySelectors = function(newComponent, childNode) {
          var thisNoType = this;
          this.iterateOverQuerySelectors(function(querySelector) {
            if (thisNoType[querySelector.attributeName] === childNode) {
              thisNoType[querySelector.attributeName] = newComponent;
            }
          });
        };
        Component2.prototype.iterateOverQuerySelectors = function(action) {
          var thisPrototype = Object.getPrototypeOf(this);
          while (thisPrototype != null) {
            var metaData = thisPrototype.__agComponentMetaData;
            var currentProtoName = getFunctionName(thisPrototype.constructor);
            if (metaData && metaData[currentProtoName] && metaData[currentProtoName].querySelectors) {
              forEach(metaData[currentProtoName].querySelectors, function(querySelector) {
                return action(querySelector);
              });
            }
            thisPrototype = Object.getPrototypeOf(thisPrototype);
          }
        };
        Component2.prototype.setTemplate = function(template, paramsMap) {
          var eGui = loadTemplate(template);
          this.setTemplateFromElement(eGui, paramsMap);
        };
        Component2.prototype.setTemplateFromElement = function(element, paramsMap) {
          this.eGui = element;
          this.eGui.__agComponent = this;
          this.wireQuerySelectors();
          if (!!this.getContext()) {
            this.createChildComponentsFromTags(this.getGui(), paramsMap);
          }
        };
        Component2.prototype.createChildComponentsPreConstruct = function() {
          if (!!this.getGui()) {
            this.createChildComponentsFromTags(this.getGui());
          }
        };
        Component2.prototype.wireQuerySelectors = function() {
          var _this = this;
          if (!this.eGui) {
            return;
          }
          var thisNoType = this;
          this.iterateOverQuerySelectors(function(querySelector) {
            var setResult = function(result) {
              return thisNoType[querySelector.attributeName] = result;
            };
            var topLevelRefMatch = querySelector.refSelector && _this.eGui.getAttribute("ref") === querySelector.refSelector;
            if (topLevelRefMatch) {
              setResult(_this.eGui);
            } else {
              var resultOfQuery = _this.eGui.querySelector(querySelector.querySelector);
              if (resultOfQuery) {
                setResult(resultOfQuery.__agComponent || resultOfQuery);
              }
            }
          });
        };
        Component2.prototype.getGui = function() {
          return this.eGui;
        };
        Component2.prototype.getFocusableElement = function() {
          return this.eGui;
        };
        Component2.prototype.setParentComponent = function(component) {
          this.parentComponent = component;
        };
        Component2.prototype.getParentComponent = function() {
          return this.parentComponent;
        };
        Component2.prototype.setGui = function(eGui) {
          this.eGui = eGui;
        };
        Component2.prototype.queryForHtmlElement = function(cssSelector) {
          return this.eGui.querySelector(cssSelector);
        };
        Component2.prototype.queryForHtmlInputElement = function(cssSelector) {
          return this.eGui.querySelector(cssSelector);
        };
        Component2.prototype.appendChild = function(newChild, container) {
          if (!container) {
            container = this.eGui;
          }
          if (newChild == null) {
            return;
          }
          if (isNodeOrElement(newChild)) {
            container.appendChild(newChild);
          } else {
            var childComponent = newChild;
            container.appendChild(childComponent.getGui());
            this.addDestroyFunc(this.destroyBean.bind(this, childComponent));
          }
        };
        Component2.prototype.isDisplayed = function() {
          return this.displayed;
        };
        Component2.prototype.setVisible = function(visible) {
          if (visible !== this.visible) {
            this.visible = visible;
            setVisible(this.eGui, visible);
          }
        };
        Component2.prototype.setDisplayed = function(displayed) {
          if (displayed !== this.displayed) {
            this.displayed = displayed;
            setDisplayed(this.eGui, displayed);
            var event_1 = {
              type: Component2.EVENT_DISPLAYED_CHANGED,
              visible: this.displayed
            };
            this.dispatchEvent(event_1);
          }
        };
        Component2.prototype.destroy = function() {
          if (this.tooltipFeature) {
            this.tooltipFeature = this.destroyBean(this.tooltipFeature);
          }
          _super.prototype.destroy.call(this);
        };
        Component2.prototype.addGuiEventListener = function(event, listener) {
          var _this = this;
          this.eGui.addEventListener(event, listener);
          this.addDestroyFunc(function() {
            return _this.eGui.removeEventListener(event, listener);
          });
        };
        Component2.prototype.addCssClass = function(className) {
          var updateNeeded = this.cssClassStates[className] !== true;
          if (updateNeeded) {
            addCssClass(this.eGui, className);
            this.cssClassStates[className] = true;
          }
        };
        Component2.prototype.removeCssClass = function(className) {
          var updateNeeded = this.cssClassStates[className] !== false;
          if (updateNeeded) {
            removeCssClass(this.eGui, className);
            this.cssClassStates[className] = false;
          }
        };
        Component2.prototype.addOrRemoveCssClass = function(className, addOrRemove) {
          var updateNeeded = this.cssClassStates[className] !== addOrRemove;
          if (updateNeeded) {
            addOrRemoveCssClass(this.eGui, className, addOrRemove);
            this.cssClassStates[className] = addOrRemove;
          }
        };
        Component2.prototype.getAttribute = function(key) {
          var eGui = this.eGui;
          return eGui ? eGui.getAttribute(key) : null;
        };
        Component2.prototype.getRefElement = function(refName) {
          return this.queryForHtmlElement('[ref="' + refName + '"]');
        };
        Component2.EVENT_DISPLAYED_CHANGED = "displayedChanged";
        __decorate$a([
          Autowired("agStackComponentsRegistry")
        ], Component2.prototype, "agStackComponentsRegistry", void 0);
        __decorate$a([
          PreConstruct
        ], Component2.prototype, "preConstructOnComponent", null);
        __decorate$a([
          PreConstruct
        ], Component2.prototype, "createChildComponentsPreConstruct", null);
        return Component2;
      }(BeanStub)
    );
    function QuerySelector(selector) {
      return querySelectorFunc.bind(this, selector, void 0);
    }
    function RefSelector(ref2) {
      return querySelectorFunc.bind(this, "[ref=" + ref2 + "]", ref2);
    }
    function querySelectorFunc(selector, refSelector, classPrototype, methodOrAttributeName, index) {
      if (selector === null) {
        console.error("AG Grid: QuerySelector selector should not be null");
        return;
      }
      if (typeof index === "number") {
        console.error("AG Grid: QuerySelector should be on an attribute");
        return;
      }
      addToObjectProps(classPrototype, "querySelectors", {
        attributeName: methodOrAttributeName,
        querySelector: selector,
        refSelector
      });
    }
    function addToObjectProps(target, key, value) {
      var props2 = getOrCreateProps$1(target, getFunctionName(target.constructor));
      if (!props2[key]) {
        props2[key] = [];
      }
      props2[key].push(value);
    }
    function getOrCreateProps$1(target, instanceName) {
      if (!target.__agComponentMetaData) {
        target.__agComponentMetaData = {};
      }
      if (!target.__agComponentMetaData[instanceName]) {
        target.__agComponentMetaData[instanceName] = {};
      }
      return target.__agComponentMetaData[instanceName];
    }
    var __extends$7 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$b = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var ReadOnlyFloatingFilter = (
      /** @class */
      function(_super) {
        __extends$7(ReadOnlyFloatingFilter2, _super);
        function ReadOnlyFloatingFilter2() {
          return _super.call(
            this,
            /* html */
            '\n            <div class="ag-floating-filter-input" role="presentation">\n                <ag-input-text-field ref="eFloatingFilterText"></ag-input-text-field>\n            </div>'
          ) || this;
        }
        ReadOnlyFloatingFilter2.prototype.destroy = function() {
          _super.prototype.destroy.call(this);
        };
        ReadOnlyFloatingFilter2.prototype.init = function(params) {
          this.params = params;
          var displayName = this.columnModel.getDisplayNameForColumn(params.column, "header", true);
          var translate = this.gridOptionsWrapper.getLocaleTextFunc();
          this.eFloatingFilterText.setDisabled(true).setInputAriaLabel(displayName + " " + translate("ariaFilterInput", "Filter Input"));
        };
        ReadOnlyFloatingFilter2.prototype.onParentModelChanged = function(parentModel) {
          var _this = this;
          if (!parentModel) {
            this.eFloatingFilterText.setValue("");
            return;
          }
          this.params.parentFilterInstance(function(filterInstance) {
            if (filterInstance.getModelAsString) {
              var modelAsString = filterInstance.getModelAsString(parentModel);
              _this.eFloatingFilterText.setValue(modelAsString);
            }
          });
        };
        __decorate$b([
          RefSelector("eFloatingFilterText")
        ], ReadOnlyFloatingFilter2.prototype, "eFloatingFilterText", void 0);
        __decorate$b([
          Autowired("columnModel")
        ], ReadOnlyFloatingFilter2.prototype, "columnModel", void 0);
        return ReadOnlyFloatingFilter2;
      }(Component)
    );
    var DateCompWrapper = (
      /** @class */
      function() {
        function DateCompWrapper2(context, userComponentFactory, dateComponentParams, eParent) {
          var _this = this;
          this.alive = true;
          this.context = context;
          this.eParent = eParent;
          var compDetails = userComponentFactory.getDateCompDetails(dateComponentParams);
          var promise = compDetails.newAgStackInstance();
          promise.then(function(dateComp) {
            if (!_this.alive) {
              context.destroyBean(dateComp);
              return;
            }
            _this.dateComp = dateComp;
            if (!dateComp) {
              return;
            }
            eParent.appendChild(dateComp.getGui());
            if (dateComp.afterGuiAttached) {
              dateComp.afterGuiAttached();
            }
            if (_this.tempValue) {
              dateComp.setDate(_this.tempValue);
            }
            if (_this.disabled != null) {
              _this.setDateCompDisabled(_this.disabled);
            }
          });
        }
        DateCompWrapper2.prototype.destroy = function() {
          this.alive = false;
          this.dateComp = this.context.destroyBean(this.dateComp);
        };
        DateCompWrapper2.prototype.getDate = function() {
          return this.dateComp ? this.dateComp.getDate() : this.tempValue;
        };
        DateCompWrapper2.prototype.setDate = function(value) {
          if (this.dateComp) {
            this.dateComp.setDate(value);
          } else {
            this.tempValue = value;
          }
        };
        DateCompWrapper2.prototype.setDisabled = function(disabled) {
          if (this.dateComp) {
            this.setDateCompDisabled(disabled);
          } else {
            this.disabled = disabled;
          }
        };
        DateCompWrapper2.prototype.setDisplayed = function(displayed) {
          setDisplayed(this.eParent, displayed);
        };
        DateCompWrapper2.prototype.setInputPlaceholder = function(placeholder) {
          if (this.dateComp && this.dateComp.setInputPlaceholder) {
            this.dateComp.setInputPlaceholder(placeholder);
          }
        };
        DateCompWrapper2.prototype.setInputAriaLabel = function(label) {
          if (this.dateComp && this.dateComp.setInputAriaLabel) {
            this.dateComp.setInputAriaLabel(label);
          }
        };
        DateCompWrapper2.prototype.afterGuiAttached = function(params) {
          if (this.dateComp && typeof this.dateComp.afterGuiAttached === "function") {
            this.dateComp.afterGuiAttached(params);
          }
        };
        DateCompWrapper2.prototype.setDateCompDisabled = function(disabled) {
          if (this.dateComp == null) {
            return;
          }
          if (this.dateComp.setDisabled == null) {
            return;
          }
          this.dateComp.setDisabled(disabled);
        };
        return DateCompWrapper2;
      }()
    );
    var __assign$3 = function() {
      __assign$3 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign$3.apply(this, arguments);
    };
    var OptionsFactory = (
      /** @class */
      function() {
        function OptionsFactory2() {
          this.customFilterOptions = {};
        }
        OptionsFactory2.prototype.init = function(params, defaultOptions) {
          this.filterOptions = params.filterOptions || defaultOptions;
          this.mapCustomOptions();
          this.selectDefaultItem(params);
          this.checkForDeprecatedParams();
        };
        OptionsFactory2.prototype.checkForDeprecatedParams = function() {
          if (_.some(this.filterOptions, function(opt) {
            return typeof opt != "string" && opt.test != null;
          })) {
            console.warn("AG Grid: [IFilterOptionDef] since v26.2.0, test() has been replaced with predicate().");
          }
          if (_.some(this.filterOptions, function(opt) {
            return typeof opt != "string" && opt.hideFilterInput != null;
          })) {
            console.warn("AG Grid: [IFilterOptionDef] since v26.2.0, useOfHideFilterInput has been replaced with numberOfInputs.");
          }
        };
        OptionsFactory2.prototype.getFilterOptions = function() {
          return this.filterOptions;
        };
        OptionsFactory2.prototype.mapCustomOptions = function() {
          var _this = this;
          if (!this.filterOptions) {
            return;
          }
          this.filterOptions.forEach(function(filterOption) {
            if (typeof filterOption === "string") {
              return;
            }
            var requiredProperties = [["displayKey"], ["displayName"], ["predicate", "test"]];
            var propertyCheck = function(keys2) {
              if (!some(keys2, function(key) {
                return filterOption[key] != null;
              })) {
                console.warn("AG Grid: ignoring FilterOptionDef as it doesn't contain one of '" + keys2 + "'");
                return false;
              }
              return true;
            };
            if (!every(requiredProperties, propertyCheck)) {
              _this.filterOptions = _.filter(_this.filterOptions, function(v) {
                return v === filterOption;
              }) || [];
              return;
            }
            var test = filterOption.test;
            var mutatedFilterOptions = __assign$3({}, filterOption);
            if (test != null && filterOption.predicate == null) {
              mutatedFilterOptions.predicate = function(v, cv) {
                return test(v[0], cv);
              };
              delete mutatedFilterOptions.test;
            }
            if (mutatedFilterOptions.hideFilterInput && mutatedFilterOptions.numberOfInputs == null) {
              mutatedFilterOptions.numberOfInputs = 0;
              delete mutatedFilterOptions.hideFilterInput;
            }
            _this.customFilterOptions[filterOption.displayKey] = mutatedFilterOptions;
          });
        };
        OptionsFactory2.prototype.selectDefaultItem = function(params) {
          if (params.defaultOption) {
            this.defaultOption = params.defaultOption;
          } else if (this.filterOptions.length >= 1) {
            var firstFilterOption = this.filterOptions[0];
            if (typeof firstFilterOption === "string") {
              this.defaultOption = firstFilterOption;
            } else if (firstFilterOption.displayKey) {
              this.defaultOption = firstFilterOption.displayKey;
            } else {
              console.warn("AG Grid: invalid FilterOptionDef supplied as it doesn't contain a 'displayKey'");
            }
          } else {
            console.warn("AG Grid: no filter options for filter");
          }
        };
        OptionsFactory2.prototype.getDefaultOption = function() {
          return this.defaultOption;
        };
        OptionsFactory2.prototype.getCustomOption = function(name) {
          return this.customFilterOptions[name];
        };
        return OptionsFactory2;
      }()
    );
    var DEFAULT_FILTER_LOCALE_TEXT = {
      applyFilter: "Apply",
      clearFilter: "Clear",
      resetFilter: "Reset",
      cancelFilter: "Cancel",
      textFilter: "Text Filter",
      numberFilter: "Number Filter",
      dateFilter: "Date Filter",
      setFilter: "Set Filter",
      filterOoo: "Filter...",
      empty: "Choose One",
      equals: "Equals",
      notEqual: "Not equal",
      lessThan: "Less than",
      greaterThan: "Greater than",
      inRange: "In range",
      inRangeStart: "From",
      inRangeEnd: "To",
      lessThanOrEqual: "Less than or equals",
      greaterThanOrEqual: "Greater than or equals",
      contains: "Contains",
      notContains: "Not contains",
      startsWith: "Starts with",
      endsWith: "Ends with",
      andCondition: "AND",
      orCondition: "OR",
      dateFormatOoo: "yyyy-mm-dd"
    };
    var KeyCode = (
      /** @class */
      function() {
        function KeyCode2() {
        }
        KeyCode2.BACKSPACE = 8;
        KeyCode2.TAB = 9;
        KeyCode2.ENTER = 13;
        KeyCode2.SHIFT = 16;
        KeyCode2.ESCAPE = 27;
        KeyCode2.SPACE = 32;
        KeyCode2.LEFT = 37;
        KeyCode2.UP = 38;
        KeyCode2.RIGHT = 39;
        KeyCode2.DOWN = 40;
        KeyCode2.DELETE = 46;
        KeyCode2.A = 65;
        KeyCode2.C = 67;
        KeyCode2.V = 86;
        KeyCode2.D = 68;
        KeyCode2.Z = 90;
        KeyCode2.Y = 89;
        KeyCode2.F2 = 113;
        KeyCode2.PAGE_UP = 33;
        KeyCode2.PAGE_DOWN = 34;
        KeyCode2.PAGE_HOME = 36;
        KeyCode2.PAGE_END = 35;
        return KeyCode2;
      }()
    );
    var __extends$8 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __assign$4 = function() {
      __assign$4 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign$4.apply(this, arguments);
    };
    var __decorate$c = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var ManagedFocusFeature = (
      /** @class */
      function(_super) {
        __extends$8(ManagedFocusFeature2, _super);
        function ManagedFocusFeature2(eFocusableElement, callbacks) {
          if (callbacks === void 0) {
            callbacks = {};
          }
          var _this = _super.call(this) || this;
          _this.eFocusableElement = eFocusableElement;
          _this.callbacks = callbacks;
          _this.callbacks = __assign$4({ shouldStopEventPropagation: function() {
            return false;
          }, onTabKeyDown: function(e) {
            if (e.defaultPrevented) {
              return;
            }
            var nextRoot = _this.focusService.findNextFocusableElement(_this.eFocusableElement, false, e.shiftKey);
            if (!nextRoot) {
              return;
            }
            nextRoot.focus();
            e.preventDefault();
          } }, callbacks);
          return _this;
        }
        ManagedFocusFeature2.prototype.postConstruct = function() {
          addCssClass(this.eFocusableElement, ManagedFocusFeature2.FOCUS_MANAGED_CLASS);
          this.addKeyDownListeners(this.eFocusableElement);
          if (this.callbacks.onFocusIn) {
            this.addManagedListener(this.eFocusableElement, "focusin", this.callbacks.onFocusIn);
          }
          if (this.callbacks.onFocusOut) {
            this.addManagedListener(this.eFocusableElement, "focusout", this.callbacks.onFocusOut);
          }
        };
        ManagedFocusFeature2.prototype.addKeyDownListeners = function(eGui) {
          var _this = this;
          this.addManagedListener(eGui, "keydown", function(e) {
            if (e.defaultPrevented || isStopPropagationForAgGrid(e)) {
              return;
            }
            if (_this.callbacks.shouldStopEventPropagation(e)) {
              stopPropagationForAgGrid(e);
              return;
            }
            if (e.keyCode === KeyCode.TAB) {
              _this.callbacks.onTabKeyDown(e);
            } else if (_this.callbacks.handleKeyDown) {
              _this.callbacks.handleKeyDown(e);
            }
          });
        };
        ManagedFocusFeature2.FOCUS_MANAGED_CLASS = "ag-focus-managed";
        __decorate$c([
          Autowired("focusService")
        ], ManagedFocusFeature2.prototype, "focusService", void 0);
        __decorate$c([
          PostConstruct
        ], ManagedFocusFeature2.prototype, "postConstruct", null);
        return ManagedFocusFeature2;
      }(BeanStub)
    );
    var __extends$9 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$d = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var ProvidedFilter = (
      /** @class */
      function(_super) {
        __extends$9(ProvidedFilter2, _super);
        function ProvidedFilter2(filterNameKey) {
          var _this = _super.call(this) || this;
          _this.filterNameKey = filterNameKey;
          _this.applyActive = false;
          _this.hidePopup = null;
          _this.appliedModel = null;
          return _this;
        }
        ProvidedFilter2.prototype.postConstruct = function() {
          this.resetTemplate();
          this.createManagedBean(new ManagedFocusFeature(this.getFocusableElement(), {
            handleKeyDown: this.handleKeyDown.bind(this)
          }));
        };
        ProvidedFilter2.prototype.handleKeyDown = function(e) {
        };
        ProvidedFilter2.prototype.getFilterTitle = function() {
          return this.translate(this.filterNameKey);
        };
        ProvidedFilter2.prototype.onFilterChanged = function() {
          console.warn("AG Grid: you should not call onFilterChanged() directly on the filter, please call\n        gridApi.onFilterChanged() instead. onFilterChanged is not part of the exposed filter interface (it was\n        a method that existed on an old version of the filters that was not intended for public use.");
          this.providedFilterParams.filterChangedCallback();
        };
        ProvidedFilter2.prototype.isFilterActive = function() {
          return !!this.appliedModel;
        };
        ProvidedFilter2.prototype.resetTemplate = function(paramsMap) {
          var templateString = (
            /* html */
            '\n            <div class="ag-filter-wrapper">\n                <div class="ag-filter-body-wrapper ag-' + this.getCssIdentifier() + '-body-wrapper">\n                    ' + this.createBodyTemplate() + "\n                </div>\n            </div>"
          );
          this.setTemplate(templateString, paramsMap);
        };
        ProvidedFilter2.prototype.isReadOnly = function() {
          return !!this.providedFilterParams.readOnly;
        };
        ProvidedFilter2.prototype.init = function(params) {
          var _this = this;
          this.setParams(params);
          this.resetUiToDefaults(true).then(function() {
            _this.updateUiVisibility();
            _this.setupOnBtApplyDebounce();
          });
        };
        ProvidedFilter2.prototype.setParams = function(params) {
          ProvidedFilter2.checkForDeprecatedParams(params);
          this.providedFilterParams = params;
          if (params.newRowsAction === "keep") {
            this.newRowsActionKeep = true;
          } else if (params.newRowsAction === "clear") {
            this.newRowsActionKeep = false;
          } else {
            var modelsForKeep = [Constants.ROW_MODEL_TYPE_SERVER_SIDE, Constants.ROW_MODEL_TYPE_INFINITE];
            this.newRowsActionKeep = modelsForKeep.indexOf(this.rowModel.getType()) >= 0;
          }
          this.applyActive = ProvidedFilter2.isUseApplyButton(params);
          this.createButtonPanel();
        };
        ProvidedFilter2.prototype.createButtonPanel = function() {
          var _this = this;
          var buttons = this.providedFilterParams.buttons;
          if (!buttons || buttons.length < 1 || this.isReadOnly()) {
            return;
          }
          var eButtonsPanel = document.createElement("div");
          addCssClass(eButtonsPanel, "ag-filter-apply-panel");
          var addButton = function(type) {
            var text;
            var clickListener;
            switch (type) {
              case "apply":
                text = _this.translate("applyFilter");
                clickListener = function(e) {
                  return _this.onBtApply(false, false, e);
                };
                break;
              case "clear":
                text = _this.translate("clearFilter");
                clickListener = function() {
                  return _this.onBtClear();
                };
                break;
              case "reset":
                text = _this.translate("resetFilter");
                clickListener = function() {
                  return _this.onBtReset();
                };
                break;
              case "cancel":
                text = _this.translate("cancelFilter");
                clickListener = function(e) {
                  _this.onBtCancel(e);
                };
                break;
              default:
                console.warn("Unknown button type specified");
                return;
            }
            var button = loadTemplate(
              /* html */
              '<button\n                    type="button"\n                    ref="' + type + 'FilterButton"\n                    class="ag-standard-button ag-filter-apply-panel-button"\n                >' + text + "\n                </button>"
            );
            eButtonsPanel.appendChild(button);
            _this.addManagedListener(button, "click", clickListener);
          };
          convertToSet(buttons).forEach(function(type) {
            return addButton(type);
          });
          this.getGui().appendChild(eButtonsPanel);
        };
        ProvidedFilter2.checkForDeprecatedParams = function(params) {
          var buttons = params.buttons || [];
          if (buttons.length > 0) {
            return;
          }
          var applyButton = params.applyButton, resetButton = params.resetButton, clearButton = params.clearButton;
          if (clearButton) {
            console.warn("AG Grid: as of AG Grid v23.2, filterParams.clearButton is deprecated. Please use filterParams.buttons instead");
            buttons.push("clear");
          }
          if (resetButton) {
            console.warn("AG Grid: as of AG Grid v23.2, filterParams.resetButton is deprecated. Please use filterParams.buttons instead");
            buttons.push("reset");
          }
          if (applyButton) {
            console.warn("AG Grid: as of AG Grid v23.2, filterParams.applyButton is deprecated. Please use filterParams.buttons instead");
            buttons.push("apply");
          }
          if (params.apply) {
            console.warn("AG Grid: as of AG Grid v21, filterParams.apply is deprecated. Please use filterParams.buttons instead");
            buttons.push("apply");
          }
          params.buttons = buttons;
        };
        ProvidedFilter2.prototype.getDefaultDebounceMs = function() {
          return 0;
        };
        ProvidedFilter2.prototype.setupOnBtApplyDebounce = function() {
          var debounceMs = ProvidedFilter2.getDebounceMs(this.providedFilterParams, this.getDefaultDebounceMs());
          this.onBtApplyDebounce = debounce(this.onBtApply.bind(this), debounceMs);
        };
        ProvidedFilter2.prototype.getModel = function() {
          return this.appliedModel;
        };
        ProvidedFilter2.prototype.setModel = function(model2) {
          var _this = this;
          var promise = model2 ? this.setModelIntoUi(model2) : this.resetUiToDefaults();
          return promise.then(function() {
            _this.updateUiVisibility();
            _this.applyModel();
          });
        };
        ProvidedFilter2.prototype.onBtCancel = function(e) {
          var _this = this;
          var currentModel = this.getModel();
          var afterAppliedFunc = function() {
            _this.onUiChanged(false, "prevent");
            if (_this.providedFilterParams.closeOnApply) {
              _this.close(e);
            }
          };
          if (currentModel != null) {
            this.setModelIntoUi(currentModel).then(afterAppliedFunc);
          } else {
            this.resetUiToDefaults().then(afterAppliedFunc);
          }
        };
        ProvidedFilter2.prototype.onBtClear = function() {
          var _this = this;
          this.resetUiToDefaults().then(function() {
            return _this.onUiChanged();
          });
        };
        ProvidedFilter2.prototype.onBtReset = function() {
          this.onBtClear();
          this.onBtApply();
        };
        ProvidedFilter2.prototype.applyModel = function() {
          var newModel = this.getModelFromUi();
          if (!this.isModelValid(newModel)) {
            return false;
          }
          var previousModel = this.appliedModel;
          this.appliedModel = newModel;
          return !this.areModelsEqual(previousModel, newModel);
        };
        ProvidedFilter2.prototype.isModelValid = function(model2) {
          return true;
        };
        ProvidedFilter2.prototype.onBtApply = function(afterFloatingFilter, afterDataChange, e) {
          if (afterFloatingFilter === void 0) {
            afterFloatingFilter = false;
          }
          if (afterDataChange === void 0) {
            afterDataChange = false;
          }
          if (this.applyModel()) {
            this.providedFilterParams.filterChangedCallback({ afterFloatingFilter, afterDataChange });
          }
          var closeOnApply = this.providedFilterParams.closeOnApply;
          if (closeOnApply && this.applyActive && !afterFloatingFilter && !afterDataChange) {
            this.close(e);
          }
        };
        ProvidedFilter2.prototype.onNewRowsLoaded = function() {
          var _this = this;
          if (!this.newRowsActionKeep) {
            this.resetUiToDefaults().then(function() {
              return _this.appliedModel = null;
            });
          }
        };
        ProvidedFilter2.prototype.close = function(e) {
          if (!this.hidePopup) {
            return;
          }
          var keyboardEvent = e;
          var key = keyboardEvent && keyboardEvent.key;
          var params;
          if (key === "Enter" || key === "Space") {
            params = { keyboardEvent };
          }
          this.hidePopup(params);
          this.hidePopup = null;
        };
        ProvidedFilter2.prototype.isNewRowsActionKeep = function() {
          return this.newRowsActionKeep;
        };
        ProvidedFilter2.prototype.onUiChanged = function(fromFloatingFilter, apply) {
          if (fromFloatingFilter === void 0) {
            fromFloatingFilter = false;
          }
          this.updateUiVisibility();
          this.providedFilterParams.filterModifiedCallback();
          if (this.applyActive && !this.isReadOnly) {
            var isValid = this.isModelValid(this.getModelFromUi());
            setDisabled(this.getRefElement("applyFilterButton"), !isValid);
          }
          if (fromFloatingFilter && !apply || apply === "immediately") {
            this.onBtApply(fromFloatingFilter);
          } else if (!this.applyActive && !apply || apply === "debounce") {
            this.onBtApplyDebounce();
          }
        };
        ProvidedFilter2.prototype.afterGuiAttached = function(params) {
          if (params == null) {
            return;
          }
          this.hidePopup = params.hidePopup;
        };
        ProvidedFilter2.getDebounceMs = function(params, debounceDefault) {
          if (ProvidedFilter2.isUseApplyButton(params)) {
            if (params.debounceMs != null) {
              console.warn("AG Grid: debounceMs is ignored when apply button is present");
            }
            return 0;
          }
          return params.debounceMs != null ? params.debounceMs : debounceDefault;
        };
        ProvidedFilter2.isUseApplyButton = function(params) {
          ProvidedFilter2.checkForDeprecatedParams(params);
          return !!params.buttons && params.buttons.indexOf("apply") >= 0;
        };
        ProvidedFilter2.prototype.destroy = function() {
          this.hidePopup = null;
          _super.prototype.destroy.call(this);
        };
        ProvidedFilter2.prototype.translate = function(key) {
          var translate = this.gridOptionsWrapper.getLocaleTextFunc();
          return translate(key, DEFAULT_FILTER_LOCALE_TEXT[key]);
        };
        ProvidedFilter2.prototype.getCellValue = function(rowNode) {
          return this.providedFilterParams.valueGetter(rowNode);
        };
        __decorate$d([
          Autowired("rowModel")
        ], ProvidedFilter2.prototype, "rowModel", void 0);
        __decorate$d([
          PostConstruct
        ], ProvidedFilter2.prototype, "postConstruct", null);
        return ProvidedFilter2;
      }(Component)
    );
    var __extends$a = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$e = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var AgAbstractLabel = (
      /** @class */
      function(_super) {
        __extends$a(AgAbstractLabel2, _super);
        function AgAbstractLabel2(config, template) {
          var _this = _super.call(this, template) || this;
          _this.labelSeparator = "";
          _this.labelAlignment = "left";
          _this.label = "";
          _this.config = config || {};
          return _this;
        }
        AgAbstractLabel2.prototype.postConstruct = function() {
          addCssClass(this.getGui(), "ag-labeled");
          addCssClass(this.eLabel, "ag-label");
          var _a2 = this.config, labelSeparator = _a2.labelSeparator, label = _a2.label, labelWidth = _a2.labelWidth, labelAlignment = _a2.labelAlignment;
          if (labelSeparator != null) {
            this.setLabelSeparator(labelSeparator);
          }
          if (label != null) {
            this.setLabel(label);
          }
          if (labelWidth != null) {
            this.setLabelWidth(labelWidth);
          }
          this.setLabelAlignment(labelAlignment || this.labelAlignment);
          this.refreshLabel();
        };
        AgAbstractLabel2.prototype.refreshLabel = function() {
          clearElement(this.eLabel);
          if (typeof this.label === "string") {
            this.eLabel.innerText = this.label + this.labelSeparator;
          } else if (this.label) {
            this.eLabel.appendChild(this.label);
          }
          if (this.label === "") {
            addCssClass(this.eLabel, "ag-hidden");
            setAriaRole(this.eLabel, "presentation");
          } else {
            removeCssClass(this.eLabel, "ag-hidden");
            setAriaRole(this.eLabel, null);
          }
        };
        AgAbstractLabel2.prototype.setLabelSeparator = function(labelSeparator) {
          if (this.labelSeparator === labelSeparator) {
            return this;
          }
          this.labelSeparator = labelSeparator;
          if (this.label != null) {
            this.refreshLabel();
          }
          return this;
        };
        AgAbstractLabel2.prototype.getLabelId = function() {
          this.eLabel.id = this.eLabel.id || "ag-" + this.getCompId() + "-label";
          return this.eLabel.id;
        };
        AgAbstractLabel2.prototype.getLabel = function() {
          return this.label;
        };
        AgAbstractLabel2.prototype.setLabel = function(label) {
          if (this.label === label) {
            return this;
          }
          this.label = label;
          this.refreshLabel();
          return this;
        };
        AgAbstractLabel2.prototype.setLabelAlignment = function(alignment) {
          var eGui = this.getGui();
          addOrRemoveCssClass(eGui, "ag-label-align-left", alignment === "left");
          addOrRemoveCssClass(eGui, "ag-label-align-right", alignment === "right");
          addOrRemoveCssClass(eGui, "ag-label-align-top", alignment === "top");
          return this;
        };
        AgAbstractLabel2.prototype.setLabelWidth = function(width) {
          if (this.label == null) {
            return this;
          }
          setElementWidth(this.eLabel, width);
          return this;
        };
        __decorate$e([
          PostConstruct
        ], AgAbstractLabel2.prototype, "postConstruct", null);
        return AgAbstractLabel2;
      }(Component)
    );
    var __extends$b = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var AgAbstractField = (
      /** @class */
      function(_super) {
        __extends$b(AgAbstractField2, _super);
        function AgAbstractField2(config, template, className) {
          var _this = _super.call(this, config, template) || this;
          _this.className = className;
          _this.disabled = false;
          return _this;
        }
        AgAbstractField2.prototype.postConstruct = function() {
          _super.prototype.postConstruct.call(this);
          if (this.className) {
            addCssClass(this.getGui(), this.className);
          }
        };
        AgAbstractField2.prototype.onValueChange = function(callbackFn) {
          var _this = this;
          this.addManagedListener(this, AgAbstractField2.EVENT_CHANGED, function() {
            return callbackFn(_this.getValue());
          });
          return this;
        };
        AgAbstractField2.prototype.getWidth = function() {
          return this.getGui().clientWidth;
        };
        AgAbstractField2.prototype.setWidth = function(width) {
          setFixedWidth(this.getGui(), width);
          return this;
        };
        AgAbstractField2.prototype.getPreviousValue = function() {
          return this.previousValue;
        };
        AgAbstractField2.prototype.getValue = function() {
          return this.value;
        };
        AgAbstractField2.prototype.setValue = function(value, silent) {
          if (this.value === value) {
            return this;
          }
          this.previousValue = this.value;
          this.value = value;
          if (!silent) {
            this.dispatchEvent({ type: AgAbstractField2.EVENT_CHANGED });
          }
          return this;
        };
        AgAbstractField2.prototype.setDisabled = function(disabled) {
          disabled = !!disabled;
          var element = this.getGui();
          setDisabled(element, disabled);
          addOrRemoveCssClass(element, "ag-disabled", disabled);
          this.disabled = disabled;
          return this;
        };
        AgAbstractField2.prototype.isDisabled = function() {
          return !!this.disabled;
        };
        AgAbstractField2.EVENT_CHANGED = "valueChange";
        return AgAbstractField2;
      }(AgAbstractLabel)
    );
    var __extends$c = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$f = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var AgPickerField = (
      /** @class */
      function(_super) {
        __extends$c(AgPickerField2, _super);
        function AgPickerField2(config, className, pickerIcon, popupRole) {
          var _this = _super.call(
            this,
            config,
            /* html */
            '<div class="ag-picker-field" role="presentation">\n                <div ref="eLabel"></div>\n                <div ref="eWrapper"\n                    class="ag-wrapper ag-picker-field-wrapper"\n                    tabIndex="-1"\n                    ' + (popupRole ? 'aria-haspopup="' + popupRole + '"' : "") + '\n                >\n                    <div ref="eDisplayField" class="ag-picker-field-display"></div>\n                    <div ref="eIcon" class="ag-picker-field-icon" aria-hidden="true"></div>\n                </div>\n            </div>',
            className
          ) || this;
          _this.pickerIcon = pickerIcon;
          _this.isPickerDisplayed = false;
          _this.isDestroyingPicker = false;
          _this.skipClick = false;
          return _this;
        }
        AgPickerField2.prototype.postConstruct = function() {
          var _this = this;
          _super.prototype.postConstruct.call(this);
          var displayId = this.getCompId() + "-display";
          this.eDisplayField.setAttribute("id", displayId);
          setAriaDescribedBy(this.eWrapper, displayId);
          var clickHandler = function() {
            if (_this.skipClick) {
              _this.skipClick = false;
              return;
            }
            if (_this.isDisabled()) {
              return;
            }
            _this.pickerComponent = _this.showPicker();
          };
          var eGui = this.getGui();
          this.addManagedListener(eGui, "mousedown", function(e) {
            if (!_this.skipClick && _this.pickerComponent && _this.pickerComponent.isAlive() && isVisible(_this.pickerComponent.getGui()) && eGui.contains(e.target)) {
              _this.skipClick = true;
            }
          });
          this.addManagedListener(eGui, "keydown", function(e) {
            switch (e.keyCode) {
              case KeyCode.UP:
              case KeyCode.DOWN:
              case KeyCode.ENTER:
              case KeyCode.SPACE:
                clickHandler();
              case KeyCode.ESCAPE:
                if (_this.isPickerDisplayed) {
                  e.preventDefault();
                }
                break;
            }
          });
          this.addManagedListener(this.eWrapper, "click", clickHandler);
          this.addManagedListener(this.eLabel, "click", clickHandler);
          if (this.pickerIcon) {
            var icon = createIconNoSpan(this.pickerIcon, this.gridOptionsWrapper);
            if (icon) {
              this.eIcon.appendChild(icon);
            }
          }
        };
        AgPickerField2.prototype.refreshLabel = function() {
          if (exists(this.getLabel())) {
            setAriaLabelledBy(this.eWrapper, this.getLabelId());
          } else {
            this.eWrapper.removeAttribute("aria-labelledby");
          }
          _super.prototype.refreshLabel.call(this);
        };
        AgPickerField2.prototype.setAriaLabel = function(label) {
          setAriaLabel(this.eWrapper, label);
          return this;
        };
        AgPickerField2.prototype.setInputWidth = function(width) {
          setElementWidth(this.eWrapper, width);
          return this;
        };
        AgPickerField2.prototype.getFocusableElement = function() {
          return this.eWrapper;
        };
        __decorate$f([
          RefSelector("eLabel")
        ], AgPickerField2.prototype, "eLabel", void 0);
        __decorate$f([
          RefSelector("eWrapper")
        ], AgPickerField2.prototype, "eWrapper", void 0);
        __decorate$f([
          RefSelector("eDisplayField")
        ], AgPickerField2.prototype, "eDisplayField", void 0);
        __decorate$f([
          RefSelector("eIcon")
        ], AgPickerField2.prototype, "eIcon", void 0);
        return AgPickerField2;
      }(AgAbstractField)
    );
    var __extends$d = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$g = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var AgList = (
      /** @class */
      function(_super) {
        __extends$d(AgList2, _super);
        function AgList2(cssIdentifier) {
          if (cssIdentifier === void 0) {
            cssIdentifier = "default";
          }
          var _this = _super.call(
            this,
            /* html */
            '<div class="ag-list ag-' + cssIdentifier + '-list" role="listbox"></div>'
          ) || this;
          _this.cssIdentifier = cssIdentifier;
          _this.options = [];
          _this.itemEls = [];
          return _this;
        }
        AgList2.prototype.init = function() {
          this.addManagedListener(this.getGui(), "keydown", this.handleKeyDown.bind(this));
        };
        AgList2.prototype.handleKeyDown = function(e) {
          var key = e.keyCode;
          switch (key) {
            case KeyCode.ENTER:
              if (!this.highlightedEl) {
                this.setValue(this.getValue());
              } else {
                var pos = this.itemEls.indexOf(this.highlightedEl);
                this.setValueByIndex(pos);
              }
              break;
            case KeyCode.DOWN:
            case KeyCode.UP:
              var isDown = key === KeyCode.DOWN;
              var itemToHighlight = void 0;
              e.preventDefault();
              if (!this.highlightedEl) {
                itemToHighlight = this.itemEls[isDown ? 0 : this.itemEls.length - 1];
              } else {
                var currentIdx = this.itemEls.indexOf(this.highlightedEl);
                var nextPos = currentIdx + (isDown ? 1 : -1);
                nextPos = Math.min(Math.max(nextPos, 0), this.itemEls.length - 1);
                itemToHighlight = this.itemEls[nextPos];
              }
              this.highlightItem(itemToHighlight);
              break;
          }
        };
        AgList2.prototype.addOptions = function(listOptions) {
          var _this = this;
          listOptions.forEach(function(listOption) {
            return _this.addOption(listOption);
          });
          return this;
        };
        AgList2.prototype.addOption = function(listOption) {
          var value = listOption.value, text = listOption.text;
          var sanitisedText = escapeString(text || value);
          this.options.push({ value, text: sanitisedText });
          this.renderOption(value, sanitisedText);
          return this;
        };
        AgList2.prototype.renderOption = function(value, text) {
          var _this = this;
          var itemEl = document.createElement("div");
          setAriaRole(itemEl, "option");
          addCssClass(itemEl, "ag-list-item");
          addCssClass(itemEl, "ag-" + this.cssIdentifier + "-list-item");
          itemEl.innerHTML = "<span>" + text + "</span>";
          itemEl.tabIndex = -1;
          this.itemEls.push(itemEl);
          this.addManagedListener(itemEl, "mouseover", function() {
            return _this.highlightItem(itemEl);
          });
          this.addManagedListener(itemEl, "mouseleave", function() {
            return _this.clearHighlighted();
          });
          this.addManagedListener(itemEl, "click", function() {
            return _this.setValue(value);
          });
          this.getGui().appendChild(itemEl);
        };
        AgList2.prototype.setValue = function(value, silent) {
          if (this.value === value) {
            this.fireItemSelected();
            return this;
          }
          if (value == null) {
            this.reset();
            return this;
          }
          var idx = findIndex(this.options, function(option2) {
            return option2.value === value;
          });
          if (idx !== -1) {
            var option = this.options[idx];
            this.value = option.value;
            this.displayValue = option.text != null ? option.text : option.value;
            this.highlightItem(this.itemEls[idx]);
            if (!silent) {
              this.fireChangeEvent();
            }
          }
          return this;
        };
        AgList2.prototype.setValueByIndex = function(idx) {
          return this.setValue(this.options[idx].value);
        };
        AgList2.prototype.getValue = function() {
          return this.value;
        };
        AgList2.prototype.getDisplayValue = function() {
          return this.displayValue;
        };
        AgList2.prototype.refreshHighlighted = function() {
          var _this = this;
          this.clearHighlighted();
          var idx = findIndex(this.options, function(option) {
            return option.value === _this.value;
          });
          if (idx !== -1) {
            this.highlightItem(this.itemEls[idx]);
          }
        };
        AgList2.prototype.reset = function() {
          this.value = null;
          this.displayValue = null;
          this.clearHighlighted();
          this.fireChangeEvent();
        };
        AgList2.prototype.highlightItem = function(el) {
          if (!el.offsetParent) {
            return;
          }
          this.clearHighlighted();
          this.highlightedEl = el;
          addCssClass(this.highlightedEl, AgList2.ACTIVE_CLASS);
          setAriaSelected(this.highlightedEl, true);
          this.highlightedEl.focus();
        };
        AgList2.prototype.clearHighlighted = function() {
          if (!this.highlightedEl || !this.highlightedEl.offsetParent) {
            return;
          }
          removeCssClass(this.highlightedEl, AgList2.ACTIVE_CLASS);
          setAriaSelected(this.highlightedEl, false);
          this.highlightedEl = null;
        };
        AgList2.prototype.fireChangeEvent = function() {
          this.dispatchEvent({ type: AgAbstractField.EVENT_CHANGED });
          this.fireItemSelected();
        };
        AgList2.prototype.fireItemSelected = function() {
          this.dispatchEvent({ type: AgList2.EVENT_ITEM_SELECTED });
        };
        AgList2.EVENT_ITEM_SELECTED = "selectedItem";
        AgList2.ACTIVE_CLASS = "ag-active-item";
        __decorate$g([
          PostConstruct
        ], AgList2.prototype, "init", null);
        return AgList2;
      }(Component)
    );
    var __extends$e = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$h = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var AgSelect = (
      /** @class */
      function(_super) {
        __extends$e(AgSelect2, _super);
        function AgSelect2(config) {
          return _super.call(this, config, "ag-select", "smallDown", "listbox") || this;
        }
        AgSelect2.prototype.init = function() {
          var _this = this;
          this.listComponent = this.createBean(new AgList("select"));
          this.listComponent.setParentComponent(this);
          this.eWrapper.tabIndex = 0;
          this.listComponent.addManagedListener(this.listComponent, AgList.EVENT_ITEM_SELECTED, function() {
            if (_this.hideList) {
              _this.hideList();
            }
          });
          this.listComponent.addManagedListener(this.listComponent, AgAbstractField.EVENT_CHANGED, function() {
            _this.setValue(_this.listComponent.getValue(), false, true);
            if (_this.hideList) {
              _this.hideList();
            }
          });
        };
        AgSelect2.prototype.showPicker = function() {
          var _this = this;
          var listGui = this.listComponent.getGui();
          var destroyMouseWheelFunc = this.addManagedListener(document.body, "wheel", function(e) {
            if (!listGui.contains(e.target) && _this.hideList) {
              _this.hideList();
            }
          });
          var destroyFocusOutFunc = this.addManagedListener(listGui, "focusout", function(e) {
            if (!listGui.contains(e.relatedTarget) && _this.hideList) {
              _this.hideList();
            }
          });
          var translate = this.gridOptionsWrapper.getLocaleTextFunc();
          var addPopupRes = this.popupService.addPopup({
            modal: true,
            eChild: listGui,
            closeOnEsc: true,
            closedCallback: function() {
              _this.hideList = null;
              _this.isPickerDisplayed = false;
              destroyFocusOutFunc();
              destroyMouseWheelFunc();
              if (_this.isAlive()) {
                _this.getFocusableElement().focus();
              }
            },
            ariaLabel: translate("ariaLabelSelectField", "Select Field")
          });
          if (addPopupRes) {
            this.hideList = addPopupRes.hideFunc;
          }
          this.isPickerDisplayed = true;
          setElementWidth(listGui, getAbsoluteWidth(this.eWrapper));
          listGui.style.maxHeight = getInnerHeight(this.popupService.getPopupParent()) + "px";
          listGui.style.position = "absolute";
          this.popupService.positionPopupUnderComponent({
            type: "ag-list",
            eventSource: this.eWrapper,
            ePopup: listGui,
            keepWithinBounds: true
          });
          this.listComponent.refreshHighlighted();
          return this.listComponent;
        };
        AgSelect2.prototype.addOptions = function(options) {
          var _this = this;
          options.forEach(function(option) {
            return _this.addOption(option);
          });
          return this;
        };
        AgSelect2.prototype.addOption = function(option) {
          this.listComponent.addOption(option);
          return this;
        };
        AgSelect2.prototype.setValue = function(value, silent, fromPicker) {
          if (this.value === value) {
            return this;
          }
          if (!fromPicker) {
            this.listComponent.setValue(value, true);
          }
          var newValue = this.listComponent.getValue();
          if (newValue === this.getValue()) {
            return this;
          }
          this.eDisplayField.innerHTML = this.listComponent.getDisplayValue();
          return _super.prototype.setValue.call(this, value, silent);
        };
        AgSelect2.prototype.destroy = function() {
          if (this.hideList) {
            this.hideList();
          }
          this.destroyBean(this.listComponent);
          _super.prototype.destroy.call(this);
        };
        __decorate$h([
          Autowired("popupService")
        ], AgSelect2.prototype, "popupService", void 0);
        __decorate$h([
          PostConstruct
        ], AgSelect2.prototype, "init", null);
        return AgSelect2;
      }(AgPickerField)
    );
    var __extends$f = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$i = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var AgAbstractInputField = (
      /** @class */
      function(_super) {
        __extends$f(AgAbstractInputField2, _super);
        function AgAbstractInputField2(config, className, inputType, displayFieldTag) {
          if (inputType === void 0) {
            inputType = "text";
          }
          if (displayFieldTag === void 0) {
            displayFieldTag = "input";
          }
          var _this = _super.call(
            this,
            config,
            /* html */
            '\n            <div role="presentation">\n                <div ref="eLabel" class="ag-input-field-label"></div>\n                <div ref="eWrapper" class="ag-wrapper ag-input-wrapper" role="presentation">\n                    <' + displayFieldTag + ' ref="eInput" class="ag-input-field-input"></' + displayFieldTag + ">\n                </div>\n            </div>",
            className
          ) || this;
          _this.inputType = inputType;
          _this.displayFieldTag = displayFieldTag;
          return _this;
        }
        AgAbstractInputField2.prototype.postConstruct = function() {
          _super.prototype.postConstruct.call(this);
          this.setInputType();
          addCssClass(this.eLabel, this.className + "-label");
          addCssClass(this.eWrapper, this.className + "-input-wrapper");
          addCssClass(this.eInput, this.className + "-input");
          addCssClass(this.getGui(), "ag-input-field");
          this.eInput.id = this.eInput.id || "ag-" + this.getCompId() + "-input";
          var _a2 = this.config, width = _a2.width, value = _a2.value;
          if (width != null) {
            this.setWidth(width);
          }
          if (value != null) {
            this.setValue(value);
          }
          this.addInputListeners();
        };
        AgAbstractInputField2.prototype.refreshLabel = function() {
          if (exists(this.getLabel())) {
            setAriaLabelledBy(this.eInput, this.getLabelId());
          } else {
            this.eInput.removeAttribute("aria-labelledby");
          }
          _super.prototype.refreshLabel.call(this);
        };
        AgAbstractInputField2.prototype.addInputListeners = function() {
          var _this = this;
          this.addManagedListener(this.eInput, "input", function(e) {
            return _this.setValue(e.target.value);
          });
        };
        AgAbstractInputField2.prototype.setInputType = function() {
          if (this.displayFieldTag === "input") {
            this.eInput.setAttribute("type", this.inputType);
          }
        };
        AgAbstractInputField2.prototype.getInputElement = function() {
          return this.eInput;
        };
        AgAbstractInputField2.prototype.setInputWidth = function(width) {
          setElementWidth(this.eWrapper, width);
          return this;
        };
        AgAbstractInputField2.prototype.setInputName = function(name) {
          this.getInputElement().setAttribute("name", name);
          return this;
        };
        AgAbstractInputField2.prototype.getFocusableElement = function() {
          return this.eInput;
        };
        AgAbstractInputField2.prototype.setMaxLength = function(length) {
          var eInput = this.eInput;
          eInput.maxLength = length;
          return this;
        };
        AgAbstractInputField2.prototype.setInputPlaceholder = function(placeholder) {
          addOrRemoveAttribute(this.eInput, "placeholder", placeholder);
          return this;
        };
        AgAbstractInputField2.prototype.setInputAriaLabel = function(label) {
          setAriaLabel(this.eInput, label);
          return this;
        };
        AgAbstractInputField2.prototype.setDisabled = function(disabled) {
          setDisabled(this.eInput, disabled);
          return _super.prototype.setDisabled.call(this, disabled);
        };
        __decorate$i([
          RefSelector("eLabel")
        ], AgAbstractInputField2.prototype, "eLabel", void 0);
        __decorate$i([
          RefSelector("eWrapper")
        ], AgAbstractInputField2.prototype, "eWrapper", void 0);
        __decorate$i([
          RefSelector("eInput")
        ], AgAbstractInputField2.prototype, "eInput", void 0);
        return AgAbstractInputField2;
      }(AgAbstractField)
    );
    var __extends$g = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$j = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var ConditionPosition;
    (function(ConditionPosition2) {
      ConditionPosition2[ConditionPosition2["One"] = 0] = "One";
      ConditionPosition2[ConditionPosition2["Two"] = 1] = "Two";
    })(ConditionPosition || (ConditionPosition = {}));
    var SimpleFilter = (
      /** @class */
      function(_super) {
        __extends$g(SimpleFilter2, _super);
        function SimpleFilter2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        SimpleFilter2.prototype.getNumberOfInputs = function(type) {
          var customOpts = this.optionsFactory.getCustomOption(type);
          if (customOpts) {
            var numberOfInputs = customOpts.numberOfInputs;
            return numberOfInputs != null ? numberOfInputs : 1;
          }
          if (type === SimpleFilter2.EMPTY) {
            return 0;
          } else if (type === SimpleFilter2.IN_RANGE) {
            return 2;
          }
          return 1;
        };
        SimpleFilter2.prototype.onFloatingFilterChanged = function(type, value) {
          this.setTypeFromFloatingFilter(type);
          this.setValueFromFloatingFilter(value);
          this.onUiChanged(true);
        };
        SimpleFilter2.prototype.setTypeFromFloatingFilter = function(type) {
          this.eType1.setValue(type);
          this.eType2.setValue(this.optionsFactory.getDefaultOption());
          (this.isDefaultOperator("AND") ? this.eJoinOperatorAnd : this.eJoinOperatorOr).setValue(true);
        };
        SimpleFilter2.prototype.getModelFromUi = function() {
          if (!this.isConditionUiComplete(ConditionPosition.One)) {
            return null;
          }
          if (this.isAllowTwoConditions() && this.isConditionUiComplete(ConditionPosition.Two)) {
            return {
              filterType: this.getFilterType(),
              operator: this.getJoinOperator(),
              condition1: this.createCondition(ConditionPosition.One),
              condition2: this.createCondition(ConditionPosition.Two)
            };
          }
          return this.createCondition(ConditionPosition.One);
        };
        SimpleFilter2.prototype.getConditionTypes = function() {
          return [
            this.eType1.getValue(),
            this.eType2.getValue()
          ];
        };
        SimpleFilter2.prototype.getJoinOperator = function() {
          return this.eJoinOperatorOr.getValue() === true ? "OR" : "AND";
        };
        SimpleFilter2.prototype.areModelsEqual = function(a, b) {
          if (!a && !b) {
            return true;
          }
          if (!a && b || a && !b) {
            return false;
          }
          var aIsSimple = !a.operator;
          var bIsSimple = !b.operator;
          var oneSimpleOneCombined = !aIsSimple && bIsSimple || aIsSimple && !bIsSimple;
          if (oneSimpleOneCombined) {
            return false;
          }
          var res;
          if (aIsSimple) {
            var aSimple = a;
            var bSimple = b;
            res = this.areSimpleModelsEqual(aSimple, bSimple);
          } else {
            var aCombined = a;
            var bCombined = b;
            res = aCombined.operator === bCombined.operator && this.areSimpleModelsEqual(aCombined.condition1, bCombined.condition1) && this.areSimpleModelsEqual(aCombined.condition2, bCombined.condition2);
          }
          return res;
        };
        SimpleFilter2.prototype.setModelIntoUi = function(model2) {
          var isCombined = model2.operator;
          if (isCombined) {
            var combinedModel = model2;
            var orChecked = combinedModel.operator === "OR";
            this.eJoinOperatorAnd.setValue(!orChecked);
            this.eJoinOperatorOr.setValue(orChecked);
            this.eType1.setValue(combinedModel.condition1.type);
            this.eType2.setValue(combinedModel.condition2.type);
            this.setConditionIntoUi(combinedModel.condition1, ConditionPosition.One);
            this.setConditionIntoUi(combinedModel.condition2, ConditionPosition.Two);
          } else {
            var simpleModel = model2;
            this.eJoinOperatorAnd.setValue(this.isDefaultOperator("AND"));
            this.eJoinOperatorOr.setValue(this.isDefaultOperator("OR"));
            this.eType1.setValue(simpleModel.type);
            this.eType2.setValue(this.optionsFactory.getDefaultOption());
            this.setConditionIntoUi(simpleModel, ConditionPosition.One);
            this.setConditionIntoUi(null, ConditionPosition.Two);
          }
          return AgPromise.resolve();
        };
        SimpleFilter2.prototype.doesFilterPass = function(params) {
          var _this = this;
          var model2 = this.getModel();
          if (model2 == null) {
            return true;
          }
          var operator = model2.operator;
          var models = [];
          if (operator) {
            var combinedModel = model2;
            models.push(combinedModel.condition1, combinedModel.condition2);
          } else {
            models.push(model2);
          }
          var combineFunction = operator && operator === "OR" ? some : every;
          return combineFunction(models, function(m) {
            return _this.individualConditionPasses(params, m);
          });
        };
        SimpleFilter2.prototype.setParams = function(params) {
          _super.prototype.setParams.call(this, params);
          this.optionsFactory = new OptionsFactory();
          this.optionsFactory.init(params, this.getDefaultFilterOptions());
          this.allowTwoConditions = !params.suppressAndOrCondition;
          this.alwaysShowBothConditions = !!params.alwaysShowBothConditions;
          this.defaultJoinOperator = this.getDefaultJoinOperator(params.defaultJoinOperator);
          this.putOptionsIntoDropdown();
          this.addChangedListeners();
        };
        SimpleFilter2.prototype.getDefaultJoinOperator = function(defaultJoinOperator) {
          return includes(["AND", "OR"], defaultJoinOperator) ? defaultJoinOperator : "AND";
        };
        SimpleFilter2.prototype.putOptionsIntoDropdown = function() {
          var _this = this;
          var filterOptions = this.optionsFactory.getFilterOptions();
          var eTypes = [this.eType1, this.eType2];
          forEach(filterOptions, function(option) {
            var listOption = typeof option === "string" ? _this.createBoilerplateListOption(option) : _this.createCustomListOption(option);
            forEach(eTypes, function(eType) {
              return eType.addOption(listOption);
            });
          });
          forEach(eTypes, function(eType) {
            return eType.setDisabled(filterOptions.length <= 1);
          });
        };
        SimpleFilter2.prototype.createBoilerplateListOption = function(option) {
          return { value: option, text: this.translate(option) };
        };
        SimpleFilter2.prototype.createCustomListOption = function(option) {
          var displayKey = option.displayKey;
          var customOption = this.optionsFactory.getCustomOption(option.displayKey);
          return {
            value: displayKey,
            text: customOption ? this.gridOptionsWrapper.getLocaleTextFunc()(customOption.displayKey, customOption.displayName) : this.translate(displayKey)
          };
        };
        SimpleFilter2.prototype.isAllowTwoConditions = function() {
          return this.allowTwoConditions;
        };
        SimpleFilter2.prototype.createBodyTemplate = function() {
          return (
            /* html */
            '\n            <ag-select class="ag-filter-select" ref="eOptions1"></ag-select>\n            ' + this.createValueTemplate(ConditionPosition.One) + '\n            <div class="ag-filter-condition" ref="eJoinOperatorPanel">\n               <ag-radio-button ref="eJoinOperatorAnd" class="ag-filter-condition-operator ag-filter-condition-operator-and"></ag-radio-button>\n               <ag-radio-button ref="eJoinOperatorOr" class="ag-filter-condition-operator ag-filter-condition-operator-or"></ag-radio-button>\n            </div>\n            <ag-select class="ag-filter-select" ref="eOptions2"></ag-select>\n            ' + this.createValueTemplate(ConditionPosition.Two)
          );
        };
        SimpleFilter2.prototype.getCssIdentifier = function() {
          return "simple-filter";
        };
        SimpleFilter2.prototype.updateUiVisibility = function() {
          var _this = this;
          var elementConditionGroups = [
            [this.eType1],
            [this.eType2, this.eJoinOperatorPanel, this.eJoinOperatorAnd, this.eJoinOperatorOr]
          ];
          var elementBodies = [this.eCondition1Body, this.eCondition2Body];
          forEach(elementConditionGroups, function(group, position) {
            var visible = _this.isConditionVisible(position);
            var disabled = _this.isConditionDisabled(position);
            forEach(group, function(element) {
              if (element instanceof AgAbstractInputField || element instanceof AgSelect) {
                element.setDisabled(disabled);
                element.setDisplayed(visible);
              } else {
                setDisabled(element, disabled);
                setDisplayed(element, visible);
              }
            });
          });
          forEach(elementBodies, function(element, index) {
            setDisplayed(element, _this.isConditionBodyVisible(index));
          });
          this.forEachInput(function(element, index, position, numberOfInputs) {
            _this.setElementDisplayed(element, index < numberOfInputs);
            _this.setElementDisabled(element, _this.isConditionDisabled(position));
          });
          this.resetPlaceholder();
        };
        SimpleFilter2.prototype.afterGuiAttached = function(params) {
          _super.prototype.afterGuiAttached.call(this, params);
          this.resetPlaceholder();
          if (!params || !params.suppressFocus && !this.isReadOnly()) {
            var firstInput = this.getInputs()[0][0];
            if (!firstInput) {
              return;
            }
            if (firstInput instanceof AgAbstractInputField) {
              firstInput.getInputElement().focus();
            }
          }
        };
        SimpleFilter2.prototype.resetPlaceholder = function() {
          var _this = this;
          var globalTranslate = this.gridOptionsWrapper.getLocaleTextFunc();
          this.forEachInput(function(element, index, _2, numberOfInputs) {
            if (!(element instanceof AgAbstractInputField)) {
              return;
            }
            var placeholder = index === 0 && numberOfInputs > 1 ? "inRangeStart" : index === 0 ? "filterOoo" : "inRangeEnd";
            var ariaLabel = index === 0 && numberOfInputs > 1 ? globalTranslate("ariaFilterFromValue", "Filter from value") : index === 0 ? globalTranslate("ariaFilterValue", "Filter Value") : globalTranslate("ariaFilterToValue", "Filter to Value");
            element.setInputPlaceholder(_this.translate(placeholder));
            element.setInputAriaLabel(ariaLabel);
          });
        };
        SimpleFilter2.prototype.setElementValue = function(element, value, silent) {
          if (element instanceof AgAbstractInputField) {
            element.setValue(value ? String(value) : null, silent);
          }
        };
        SimpleFilter2.prototype.setElementDisplayed = function(element, displayed) {
          if (element instanceof Component) {
            setDisplayed(element.getGui(), displayed);
          }
        };
        SimpleFilter2.prototype.setElementDisabled = function(element, disabled) {
          if (element instanceof Component) {
            setDisabled(element.getGui(), disabled);
          }
        };
        SimpleFilter2.prototype.attachElementOnChange = function(element, listener) {
          if (element instanceof AgAbstractInputField) {
            element.onValueChange(listener);
          }
        };
        SimpleFilter2.prototype.forEachInput = function(cb) {
          var _this = this;
          var inputs = this.getInputs();
          this.getConditionTypes().forEach(function(type, position) {
            var numberOfInputs = _this.getNumberOfInputs(type);
            for (var index = 0; index < inputs[position].length; index++) {
              var input = inputs[position][index];
              if (input != null) {
                cb(input, index, position, numberOfInputs);
              }
            }
          });
        };
        SimpleFilter2.prototype.isConditionVisible = function(position) {
          if (position === 0) {
            return true;
          }
          if (!this.allowTwoConditions) {
            return false;
          }
          if (this.isReadOnly()) {
            return this.isConditionUiComplete(position);
          }
          if (this.alwaysShowBothConditions) {
            return true;
          }
          return this.isConditionUiComplete(position - 1);
        };
        SimpleFilter2.prototype.isConditionDisabled = function(position) {
          if (this.isReadOnly()) {
            return true;
          }
          if (!this.isConditionVisible(position)) {
            return true;
          }
          if (position === 0) {
            return false;
          }
          return !this.isConditionUiComplete(position - 1);
        };
        SimpleFilter2.prototype.isConditionBodyVisible = function(position) {
          if (!this.isConditionVisible(position)) {
            return false;
          }
          var type = this.getConditionTypes()[position];
          var numberOfInputs = this.getNumberOfInputs(type);
          return numberOfInputs > 0;
        };
        SimpleFilter2.prototype.isConditionUiComplete = function(position) {
          var type = this.getConditionTypes()[position];
          if (type === SimpleFilter2.EMPTY) {
            return false;
          }
          if (_.some(this.getValues(position), function(v) {
            return v == null;
          })) {
            return false;
          }
          return true;
        };
        SimpleFilter2.prototype.resetUiToDefaults = function(silent) {
          var _this = this;
          var translate = this.gridOptionsWrapper.getLocaleTextFunc();
          var filteringLabel = translate("ariaFilteringOperator", "Filtering operator");
          var uniqueGroupId = "ag-simple-filter-and-or-" + this.getCompId();
          var defaultOption = this.optionsFactory.getDefaultOption();
          this.eType1.setValue(defaultOption, silent).setAriaLabel(filteringLabel).setDisabled(this.isReadOnly());
          this.eType2.setValue(this.optionsFactory.getDefaultOption(), silent).setAriaLabel(filteringLabel).setDisabled(this.isReadOnly());
          this.eJoinOperatorAnd.setValue(this.isDefaultOperator("AND"), silent).setName(uniqueGroupId).setLabel(this.translate("andCondition")).setDisabled(this.isReadOnly());
          this.eJoinOperatorOr.setValue(this.isDefaultOperator("OR"), silent).setName(uniqueGroupId).setLabel(this.translate("orCondition")).setDisabled(this.isReadOnly());
          this.forEachInput(function(element) {
            _this.setElementValue(element, null, silent);
            _this.setElementDisabled(element, _this.isReadOnly());
          });
          this.resetPlaceholder();
          return AgPromise.resolve();
        };
        SimpleFilter2.prototype.setConditionIntoUi = function(model2, position) {
          var _this = this;
          var values2 = this.mapValuesFromModel(model2);
          this.forEachInput(function(element, index, elPosition, _2) {
            if (elPosition !== position) {
              return;
            }
            _this.setElementValue(element, values2[index] ? values2[index] : null);
          });
        };
        SimpleFilter2.prototype.setValueFromFloatingFilter = function(value) {
          var _this = this;
          this.forEachInput(function(element, index, position, _2) {
            _this.setElementValue(element, index === 0 && position === 0 ? value : null);
          });
        };
        SimpleFilter2.prototype.isDefaultOperator = function(operator) {
          return operator === this.defaultJoinOperator;
        };
        SimpleFilter2.prototype.addChangedListeners = function() {
          var _this = this;
          if (this.isReadOnly()) {
            return;
          }
          var listener = function() {
            return _this.onUiChanged();
          };
          this.eType1.onValueChange(listener);
          this.eType2.onValueChange(listener);
          this.eJoinOperatorOr.onValueChange(listener);
          this.eJoinOperatorAnd.onValueChange(listener);
          this.forEachInput(function(element) {
            _this.attachElementOnChange(element, listener);
          });
        };
        SimpleFilter2.prototype.individualConditionPasses = function(params, filterModel) {
          var cellValue = this.getCellValue(params.node);
          var values2 = this.mapValuesFromModel(filterModel);
          var customFilterOption = this.optionsFactory.getCustomOption(filterModel.type);
          var customFilterResult = this.evaluateCustomFilter(customFilterOption, values2, cellValue);
          if (customFilterResult != null) {
            return customFilterResult;
          }
          if (cellValue == null) {
            return this.evaluateNullValue(filterModel.type);
          }
          return this.evaluateNonNullValue(values2, cellValue, filterModel);
        };
        SimpleFilter2.prototype.evaluateCustomFilter = function(customFilterOption, values2, cellValue) {
          if (customFilterOption == null) {
            return;
          }
          var predicate = customFilterOption.predicate;
          if (predicate != null && !_.some(values2, function(v) {
            return v == null;
          })) {
            return predicate(values2, cellValue);
          }
          return;
        };
        SimpleFilter2.EMPTY = "empty";
        SimpleFilter2.EQUALS = "equals";
        SimpleFilter2.NOT_EQUAL = "notEqual";
        SimpleFilter2.LESS_THAN = "lessThan";
        SimpleFilter2.LESS_THAN_OR_EQUAL = "lessThanOrEqual";
        SimpleFilter2.GREATER_THAN = "greaterThan";
        SimpleFilter2.GREATER_THAN_OR_EQUAL = "greaterThanOrEqual";
        SimpleFilter2.IN_RANGE = "inRange";
        SimpleFilter2.CONTAINS = "contains";
        SimpleFilter2.NOT_CONTAINS = "notContains";
        SimpleFilter2.STARTS_WITH = "startsWith";
        SimpleFilter2.ENDS_WITH = "endsWith";
        __decorate$j([
          RefSelector("eOptions1")
        ], SimpleFilter2.prototype, "eType1", void 0);
        __decorate$j([
          RefSelector("eOptions2")
        ], SimpleFilter2.prototype, "eType2", void 0);
        __decorate$j([
          RefSelector("eJoinOperatorPanel")
        ], SimpleFilter2.prototype, "eJoinOperatorPanel", void 0);
        __decorate$j([
          RefSelector("eJoinOperatorAnd")
        ], SimpleFilter2.prototype, "eJoinOperatorAnd", void 0);
        __decorate$j([
          RefSelector("eJoinOperatorOr")
        ], SimpleFilter2.prototype, "eJoinOperatorOr", void 0);
        __decorate$j([
          RefSelector("eCondition1Body")
        ], SimpleFilter2.prototype, "eCondition1Body", void 0);
        __decorate$j([
          RefSelector("eCondition2Body")
        ], SimpleFilter2.prototype, "eCondition2Body", void 0);
        return SimpleFilter2;
      }(ProvidedFilter)
    );
    var __extends$h = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var ScalarFilter = (
      /** @class */
      function(_super) {
        __extends$h(ScalarFilter2, _super);
        function ScalarFilter2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        ScalarFilter2.prototype.setParams = function(params) {
          _super.prototype.setParams.call(this, params);
          this.scalarFilterParams = params;
          this.checkDeprecatedParams();
        };
        ScalarFilter2.prototype.checkDeprecatedParams = function() {
          if (this.scalarFilterParams.nullComparator) {
            console.warn("AG Grid: Since v21.0, the property filterParams.nullComparator is deprecated. Please use filterParams.includeBlanksInEquals, filterParams.includeBlanksInLessThan and filterParams.includeBlanksInGreaterThan instead.");
            this.scalarFilterParams.includeBlanksInEquals = this.scalarFilterParams.nullComparator.equals;
            this.scalarFilterParams.includeBlanksInLessThan = this.scalarFilterParams.nullComparator.lessThan;
            this.scalarFilterParams.includeBlanksInGreaterThan = this.scalarFilterParams.nullComparator.greaterThan;
          }
        };
        ScalarFilter2.prototype.evaluateNullValue = function(filterType) {
          switch (filterType) {
            case ScalarFilter2.EQUALS:
            case ScalarFilter2.NOT_EQUAL:
              if (this.scalarFilterParams.includeBlanksInEquals) {
                return true;
              }
              break;
            case ScalarFilter2.GREATER_THAN:
            case ScalarFilter2.GREATER_THAN_OR_EQUAL:
              if (this.scalarFilterParams.includeBlanksInGreaterThan) {
                return true;
              }
              break;
            case ScalarFilter2.LESS_THAN:
            case ScalarFilter2.LESS_THAN_OR_EQUAL:
              if (this.scalarFilterParams.includeBlanksInLessThan) {
                return true;
              }
              break;
            case ScalarFilter2.IN_RANGE:
              if (this.scalarFilterParams.includeBlanksInRange) {
                return true;
              }
              break;
          }
          return false;
        };
        ScalarFilter2.prototype.evaluateNonNullValue = function(values2, cellValue, filterModel) {
          var comparator = this.comparator();
          var compareResult = comparator(values2[0], cellValue);
          switch (filterModel.type) {
            case ScalarFilter2.EQUALS:
              return compareResult === 0;
            case ScalarFilter2.NOT_EQUAL:
              return compareResult !== 0;
            case ScalarFilter2.GREATER_THAN:
              return compareResult > 0;
            case ScalarFilter2.GREATER_THAN_OR_EQUAL:
              return compareResult >= 0;
            case ScalarFilter2.LESS_THAN:
              return compareResult < 0;
            case ScalarFilter2.LESS_THAN_OR_EQUAL:
              return compareResult <= 0;
            case ScalarFilter2.IN_RANGE: {
              var compareToResult = comparator(values2[1], cellValue);
              return this.scalarFilterParams.inRangeInclusive ? compareResult >= 0 && compareToResult <= 0 : compareResult > 0 && compareToResult < 0;
            }
            default:
              console.warn('AG Grid: Unexpected type of filter "' + filterModel.type + '", it looks like the filter was configured with incorrect Filter Options');
              return true;
          }
        };
        return ScalarFilter2;
      }(SimpleFilter)
    );
    var __extends$i = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __assign$5 = function() {
      __assign$5 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign$5.apply(this, arguments);
    };
    var __decorate$k = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var DEFAULT_MIN_YEAR = 1e3;
    var DEFAULT_MAX_YEAR = Infinity;
    var DateFilter = (
      /** @class */
      function(_super) {
        __extends$i(DateFilter2, _super);
        function DateFilter2() {
          var _this = _super.call(this, "dateFilter") || this;
          _this.minValidYear = DEFAULT_MIN_YEAR;
          _this.maxValidYear = DEFAULT_MAX_YEAR;
          return _this;
        }
        DateFilter2.prototype.afterGuiAttached = function(params) {
          _super.prototype.afterGuiAttached.call(this, params);
          this.dateCondition1FromComp.afterGuiAttached(params);
        };
        DateFilter2.prototype.mapValuesFromModel = function(filterModel) {
          var _a2 = filterModel || {}, dateFrom = _a2.dateFrom, dateTo = _a2.dateTo, type = _a2.type;
          return [
            dateFrom && parseDateTimeFromString(dateFrom) || null,
            dateTo && parseDateTimeFromString(dateTo) || null
          ].slice(0, this.getNumberOfInputs(type));
        };
        DateFilter2.prototype.comparator = function() {
          return this.dateFilterParams.comparator ? this.dateFilterParams.comparator : this.defaultComparator.bind(this);
        };
        DateFilter2.prototype.defaultComparator = function(filterDate, cellValue) {
          var cellAsDate = cellValue;
          if (cellValue == null || cellAsDate < filterDate) {
            return -1;
          }
          if (cellAsDate > filterDate) {
            return 1;
          }
          return 0;
        };
        DateFilter2.prototype.setParams = function(params) {
          _super.prototype.setParams.call(this, params);
          this.dateFilterParams = params;
          var yearParser = function(param, fallback) {
            if (params[param] != null) {
              if (!isNaN(params[param])) {
                return params[param] == null ? fallback : Number(params[param]);
              } else {
                console.warn("AG Grid: DateFilter " + param + " is not a number");
              }
            }
            return fallback;
          };
          this.minValidYear = yearParser("minValidYear", DEFAULT_MIN_YEAR);
          this.maxValidYear = yearParser("maxValidYear", DEFAULT_MAX_YEAR);
          if (this.minValidYear > this.maxValidYear) {
            console.warn("AG Grid: DateFilter minValidYear should be <= maxValidYear");
          }
          this.createDateComponents();
        };
        DateFilter2.prototype.createDateComponents = function() {
          var _this = this;
          var createDateCompWrapper = function(element) {
            return new DateCompWrapper(_this.getContext(), _this.userComponentFactory, {
              onDateChanged: function() {
                return _this.onUiChanged();
              },
              filterParams: _this.dateFilterParams
            }, element);
          };
          this.dateCondition1FromComp = createDateCompWrapper(this.eCondition1PanelFrom);
          this.dateCondition1ToComp = createDateCompWrapper(this.eCondition1PanelTo);
          this.dateCondition2FromComp = createDateCompWrapper(this.eCondition2PanelFrom);
          this.dateCondition2ToComp = createDateCompWrapper(this.eCondition2PanelTo);
          this.addDestroyFunc(function() {
            _this.forEachInput(function(element) {
              return element.destroy();
            });
          });
        };
        DateFilter2.prototype.setElementValue = function(element, value, silent) {
          element.setDate(value);
        };
        DateFilter2.prototype.setElementDisplayed = function(element, displayed) {
          element.setDisplayed(displayed);
        };
        DateFilter2.prototype.setElementDisabled = function(element, disabled) {
          element.setDisabled(disabled);
        };
        DateFilter2.prototype.getDefaultFilterOptions = function() {
          return DateFilter2.DEFAULT_FILTER_OPTIONS;
        };
        DateFilter2.prototype.createValueTemplate = function(position) {
          var pos = position === ConditionPosition.One ? "1" : "2";
          return (
            /* html */
            '\n            <div class="ag-filter-body" ref="eCondition' + pos + 'Body">\n                <div class="ag-filter-from ag-filter-date-from" ref="eCondition' + pos + 'PanelFrom"></div>\n                <div class="ag-filter-to ag-filter-date-to" ref="eCondition' + pos + 'PanelTo"></div>\n            </div>'
          );
        };
        DateFilter2.prototype.isConditionUiComplete = function(position) {
          var _this = this;
          if (!_super.prototype.isConditionUiComplete.call(this, position)) {
            return false;
          }
          var isValidDate = function(value) {
            return value != null && value.getUTCFullYear() >= _this.minValidYear && value.getUTCFullYear() <= _this.maxValidYear;
          };
          var valid = true;
          this.forEachInput(function(element, index, elPosition, numberOfInputs) {
            if (elPosition !== position || !valid || index >= numberOfInputs) {
              return;
            }
            valid = valid && isValidDate(element.getDate());
          });
          return valid;
        };
        DateFilter2.prototype.areSimpleModelsEqual = function(aSimple, bSimple) {
          return aSimple.dateFrom === bSimple.dateFrom && aSimple.dateTo === bSimple.dateTo && aSimple.type === bSimple.type;
        };
        DateFilter2.prototype.getFilterType = function() {
          return "date";
        };
        DateFilter2.prototype.createCondition = function(position) {
          var type = this.getConditionTypes()[position];
          var model2 = {};
          var values2 = this.getValues(position);
          if (values2.length > 0) {
            model2.dateFrom = serialiseDate(values2[0]);
          }
          if (values2.length > 1) {
            model2.dateTo = serialiseDate(values2[1]);
          }
          return __assign$5({ dateFrom: null, dateTo: null, filterType: this.getFilterType(), type }, model2);
        };
        DateFilter2.prototype.resetPlaceholder = function() {
          var globalTranslate = this.gridOptionsWrapper.getLocaleTextFunc();
          var placeholder = this.translate("dateFormatOoo");
          var ariaLabel = globalTranslate("ariaFilterValue", "Filter Value");
          this.forEachInput(function(element) {
            element.setInputPlaceholder(placeholder);
            element.setInputAriaLabel(ariaLabel);
          });
        };
        DateFilter2.prototype.getInputs = function() {
          return [
            [this.dateCondition1FromComp, this.dateCondition1ToComp],
            [this.dateCondition2FromComp, this.dateCondition2ToComp]
          ];
        };
        DateFilter2.prototype.getValues = function(position) {
          var result = [];
          this.forEachInput(function(element, index, elPosition, numberOfInputs) {
            if (position === elPosition && index < numberOfInputs) {
              result.push(element.getDate());
            }
          });
          return result;
        };
        DateFilter2.DEFAULT_FILTER_OPTIONS = [
          ScalarFilter.EQUALS,
          ScalarFilter.GREATER_THAN,
          ScalarFilter.LESS_THAN,
          ScalarFilter.NOT_EQUAL,
          ScalarFilter.IN_RANGE
        ];
        __decorate$k([
          RefSelector("eCondition1PanelFrom")
        ], DateFilter2.prototype, "eCondition1PanelFrom", void 0);
        __decorate$k([
          RefSelector("eCondition1PanelTo")
        ], DateFilter2.prototype, "eCondition1PanelTo", void 0);
        __decorate$k([
          RefSelector("eCondition2PanelFrom")
        ], DateFilter2.prototype, "eCondition2PanelFrom", void 0);
        __decorate$k([
          RefSelector("eCondition2PanelTo")
        ], DateFilter2.prototype, "eCondition2PanelTo", void 0);
        __decorate$k([
          Autowired("userComponentFactory")
        ], DateFilter2.prototype, "userComponentFactory", void 0);
        return DateFilter2;
      }(ScalarFilter)
    );
    var __extends$j = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var SimpleFloatingFilter = (
      /** @class */
      function(_super) {
        __extends$j(SimpleFloatingFilter2, _super);
        function SimpleFloatingFilter2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        SimpleFloatingFilter2.prototype.getDefaultDebounceMs = function() {
          return 0;
        };
        SimpleFloatingFilter2.prototype.destroy = function() {
          _super.prototype.destroy.call(this);
        };
        SimpleFloatingFilter2.prototype.getTextFromModel = function(model2) {
          if (!model2) {
            return null;
          }
          var isCombined = model2.operator != null;
          if (isCombined) {
            var combinedModel = model2;
            var _a2 = combinedModel || {}, condition1 = _a2.condition1, condition2 = _a2.condition2;
            var customOption1 = this.optionsFactory.getCustomOption(condition1.type);
            var customOption2 = this.optionsFactory.getCustomOption(condition2.type);
            return [
              this.conditionToString(condition1, customOption1),
              combinedModel.operator,
              this.conditionToString(condition2, customOption2)
            ].join(" ");
          } else {
            var condition = model2;
            var customOption = this.optionsFactory.getCustomOption(condition.type);
            var _b = customOption || {}, displayKey = _b.displayKey, displayName = _b.displayName, numberOfInputs = _b.numberOfInputs;
            if (displayKey && displayName && numberOfInputs === 0) {
              this.gridOptionsWrapper.getLocaleTextFunc()(displayKey, displayName);
              return displayName;
            }
            return this.conditionToString(condition, customOption);
          }
        };
        SimpleFloatingFilter2.prototype.isEventFromFloatingFilter = function(event) {
          return event && event.afterFloatingFilter;
        };
        SimpleFloatingFilter2.prototype.getLastType = function() {
          return this.lastType;
        };
        SimpleFloatingFilter2.prototype.isReadOnly = function() {
          return this.readOnly;
        };
        SimpleFloatingFilter2.prototype.setLastTypeFromModel = function(model2) {
          if (!model2) {
            this.lastType = this.optionsFactory.getDefaultOption();
            return;
          }
          var isCombined = model2.operator;
          var condition;
          if (isCombined) {
            var combinedModel = model2;
            condition = combinedModel.condition1;
          } else {
            condition = model2;
          }
          this.lastType = condition.type;
        };
        SimpleFloatingFilter2.prototype.canWeEditAfterModelFromParentFilter = function(model2) {
          if (!model2) {
            return this.isTypeEditable(this.lastType);
          }
          var isCombined = model2.operator;
          if (isCombined) {
            return false;
          }
          var simpleModel = model2;
          return this.isTypeEditable(simpleModel.type);
        };
        SimpleFloatingFilter2.prototype.init = function(params) {
          this.optionsFactory = new OptionsFactory();
          this.optionsFactory.init(params.filterParams, this.getDefaultFilterOptions());
          this.lastType = this.optionsFactory.getDefaultOption();
          this.readOnly = !!params.filterParams.readOnly;
          var editable = this.isTypeEditable(this.lastType);
          this.setEditable(editable);
        };
        SimpleFloatingFilter2.prototype.doesFilterHaveSingleInput = function(filterType) {
          var customFilterOption = this.optionsFactory.getCustomOption(filterType);
          var numberOfInputs = (customFilterOption || {}).numberOfInputs;
          return numberOfInputs == null || numberOfInputs == 1;
        };
        SimpleFloatingFilter2.prototype.isTypeEditable = function(type) {
          return !!type && !this.isReadOnly() && this.doesFilterHaveSingleInput(type) && type !== SimpleFilter.IN_RANGE && type !== SimpleFilter.EMPTY;
        };
        return SimpleFloatingFilter2;
      }(Component)
    );
    var __extends$k = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$l = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var DateFloatingFilter = (
      /** @class */
      function(_super) {
        __extends$k(DateFloatingFilter2, _super);
        function DateFloatingFilter2() {
          return _super.call(
            this,
            /* html */
            '\n            <div class="ag-floating-filter-input" role="presentation">\n                <ag-input-text-field ref="eReadOnlyText"></ag-input-text-field>\n                <div ref="eDateWrapper" style="display: flex;"></div>\n            </div>'
          ) || this;
        }
        DateFloatingFilter2.prototype.getDefaultFilterOptions = function() {
          return DateFilter.DEFAULT_FILTER_OPTIONS;
        };
        DateFloatingFilter2.prototype.conditionToString = function(condition, options) {
          var type = condition.type;
          var numberOfInputs = (options || {}).numberOfInputs;
          var isRange = type == SimpleFilter.IN_RANGE || numberOfInputs === 2;
          var dateFrom = parseDateTimeFromString(condition.dateFrom);
          var dateTo = parseDateTimeFromString(condition.dateTo);
          if (isRange) {
            return serialiseDate(dateFrom, false) + "-" + serialiseDate(dateTo, false);
          }
          if (dateFrom != null) {
            return "" + serialiseDate(dateFrom, false);
          }
          return "" + type;
        };
        DateFloatingFilter2.prototype.init = function(params) {
          _super.prototype.init.call(this, params);
          this.params = params;
          this.createDateComponent();
          var translate = this.gridOptionsWrapper.getLocaleTextFunc();
          this.eReadOnlyText.setDisabled(true).setInputAriaLabel(translate("ariaDateFilterInput", "Date Filter Input"));
        };
        DateFloatingFilter2.prototype.setEditable = function(editable) {
          setDisplayed(this.eDateWrapper, editable);
          setDisplayed(this.eReadOnlyText.getGui(), !editable);
        };
        DateFloatingFilter2.prototype.onParentModelChanged = function(model2, event) {
          if (this.isEventFromFloatingFilter(event)) {
            return;
          }
          _super.prototype.setLastTypeFromModel.call(this, model2);
          var allowEditing = !this.isReadOnly() && this.canWeEditAfterModelFromParentFilter(model2);
          this.setEditable(allowEditing);
          if (allowEditing) {
            if (model2) {
              var dateModel = model2;
              this.dateComp.setDate(parseDateTimeFromString(dateModel.dateFrom));
            } else {
              this.dateComp.setDate(null);
            }
            this.eReadOnlyText.setValue("");
          } else {
            this.eReadOnlyText.setValue(this.getTextFromModel(model2));
            this.dateComp.setDate(null);
          }
        };
        DateFloatingFilter2.prototype.onDateChanged = function() {
          var _this = this;
          var filterValueDate = this.dateComp.getDate();
          var filterValueText = serialiseDate(filterValueDate);
          this.params.parentFilterInstance(function(filterInstance) {
            if (filterInstance) {
              var simpleFilter = filterInstance;
              simpleFilter.onFloatingFilterChanged(_this.getLastType(), parseDateTimeFromString(filterValueText));
            }
          });
        };
        DateFloatingFilter2.prototype.createDateComponent = function() {
          var _this = this;
          var debounceMs = ProvidedFilter.getDebounceMs(this.params.filterParams, this.getDefaultDebounceMs());
          var dateComponentParams = {
            onDateChanged: debounce(this.onDateChanged.bind(this), debounceMs),
            filterParams: this.params.column.getColDef().filterParams
          };
          this.dateComp = new DateCompWrapper(this.getContext(), this.userComponentFactory, dateComponentParams, this.eDateWrapper);
          this.addDestroyFunc(function() {
            return _this.dateComp.destroy();
          });
        };
        __decorate$l([
          Autowired("userComponentFactory")
        ], DateFloatingFilter2.prototype, "userComponentFactory", void 0);
        __decorate$l([
          RefSelector("eReadOnlyText")
        ], DateFloatingFilter2.prototype, "eReadOnlyText", void 0);
        __decorate$l([
          RefSelector("eDateWrapper")
        ], DateFloatingFilter2.prototype, "eDateWrapper", void 0);
        return DateFloatingFilter2;
      }(SimpleFloatingFilter)
    );
    var __extends$l = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$m = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var DefaultDateComponent = (
      /** @class */
      function(_super) {
        __extends$l(DefaultDateComponent2, _super);
        function DefaultDateComponent2() {
          return _super.call(
            this,
            /* html */
            '\n            <div class="ag-filter-filter">\n                <ag-input-text-field class="ag-date-filter" ref="eDateInput"></ag-input-text-field>\n            </div>'
          ) || this;
        }
        DefaultDateComponent2.prototype.destroy = function() {
          _super.prototype.destroy.call(this);
        };
        DefaultDateComponent2.prototype.init = function(params) {
          var _this = this;
          var inputElement = this.eDateInput.getInputElement();
          if (this.shouldUseBrowserDatePicker(params)) {
            if (isBrowserIE()) {
              console.warn("ag-grid: browserDatePicker is specified to true, but it is not supported in IE 11; reverting to text date picker");
            } else {
              inputElement.type = "date";
            }
          }
          this.addManagedListener(inputElement, "mousedown", function() {
            if (_this.eDateInput.isDisabled()) {
              return;
            }
            inputElement.focus();
          });
          this.addManagedListener(inputElement, "input", function(e) {
            if (e.target !== document.activeElement) {
              return;
            }
            if (_this.eDateInput.isDisabled()) {
              return;
            }
            params.onDateChanged();
          });
          var _a2 = params.filterParams || {}, minValidYear = _a2.minValidYear, maxValidYear = _a2.maxValidYear;
          if (minValidYear) {
            inputElement.min = minValidYear + "-01-01";
          }
          if (maxValidYear) {
            inputElement.max = maxValidYear + "-12-31";
          }
        };
        DefaultDateComponent2.prototype.getDate = function() {
          return parseDateTimeFromString(this.eDateInput.getValue());
        };
        DefaultDateComponent2.prototype.setDate = function(date) {
          this.eDateInput.setValue(serialiseDate(date, false));
        };
        DefaultDateComponent2.prototype.setInputPlaceholder = function(placeholder) {
          this.eDateInput.setInputPlaceholder(placeholder);
        };
        DefaultDateComponent2.prototype.setDisabled = function(disabled) {
          this.eDateInput.setDisabled(disabled);
        };
        DefaultDateComponent2.prototype.afterGuiAttached = function(params) {
          if (!params || !params.suppressFocus) {
            this.eDateInput.getInputElement().focus();
          }
        };
        DefaultDateComponent2.prototype.shouldUseBrowserDatePicker = function(params) {
          if (params.filterParams && params.filterParams.browserDatePicker != null) {
            return params.filterParams.browserDatePicker;
          }
          return isBrowserChrome() || isBrowserFirefox();
        };
        __decorate$m([
          RefSelector("eDateInput")
        ], DefaultDateComponent2.prototype, "eDateInput", void 0);
        return DefaultDateComponent2;
      }(Component)
    );
    var __extends$m = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$n = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var NumberFilter = (
      /** @class */
      function(_super) {
        __extends$m(NumberFilter2, _super);
        function NumberFilter2() {
          return _super.call(this, "numberFilter") || this;
        }
        NumberFilter2.prototype.mapValuesFromModel = function(filterModel) {
          var _a2 = filterModel || {}, filter2 = _a2.filter, filterTo = _a2.filterTo, type = _a2.type;
          return [
            filter2 || null,
            filterTo || null
          ].slice(0, this.getNumberOfInputs(type));
        };
        NumberFilter2.prototype.getDefaultDebounceMs = function() {
          return 500;
        };
        NumberFilter2.prototype.comparator = function() {
          return function(left, right) {
            if (left === right) {
              return 0;
            }
            return left < right ? 1 : -1;
          };
        };
        NumberFilter2.prototype.setParams = function(params) {
          this.numberFilterParams = params;
          var allowedCharPattern = this.getAllowedCharPattern();
          if (allowedCharPattern) {
            var config = { allowedCharPattern };
            this.resetTemplate({
              eValueFrom1: config,
              eValueTo1: config,
              eValueFrom2: config,
              eValueTo2: config
            });
          }
          _super.prototype.setParams.call(this, params);
        };
        NumberFilter2.prototype.getDefaultFilterOptions = function() {
          return NumberFilter2.DEFAULT_FILTER_OPTIONS;
        };
        NumberFilter2.prototype.createValueTemplate = function(position) {
          var pos = position === ConditionPosition.One ? "1" : "2";
          var allowedCharPattern = this.getAllowedCharPattern();
          var agElementTag = allowedCharPattern ? "ag-input-text-field" : "ag-input-number-field";
          return (
            /* html */
            '\n            <div class="ag-filter-body" ref="eCondition' + pos + 'Body" role="presentation">\n                <' + agElementTag + ' class="ag-filter-from ag-filter-filter" ref="eValue-index0-' + pos + '"></' + agElementTag + ">\n                <" + agElementTag + ' class="ag-filter-to ag-filter-filter" ref="eValue-index1-' + pos + '"></' + agElementTag + ">\n            </div>"
          );
        };
        NumberFilter2.prototype.getValues = function(position) {
          var _this = this;
          var result = [];
          this.forEachInput(function(element, index, elPosition, numberOfInputs) {
            if (position === elPosition && index < numberOfInputs) {
              result.push(_this.stringToFloat(element.getValue()));
            }
          });
          return result;
        };
        NumberFilter2.prototype.areSimpleModelsEqual = function(aSimple, bSimple) {
          return aSimple.filter === bSimple.filter && aSimple.filterTo === bSimple.filterTo && aSimple.type === bSimple.type;
        };
        NumberFilter2.prototype.getFilterType = function() {
          return "number";
        };
        NumberFilter2.prototype.stringToFloat = function(value) {
          if (typeof value === "number") {
            return value;
          }
          var filterText = makeNull(value);
          if (filterText != null && filterText.trim() === "") {
            filterText = null;
          }
          if (this.numberFilterParams.numberParser) {
            return this.numberFilterParams.numberParser(filterText);
          }
          return filterText == null || filterText.trim() === "-" ? null : parseFloat(filterText);
        };
        NumberFilter2.prototype.createCondition = function(position) {
          var type = this.getConditionTypes()[position];
          var model2 = {
            filterType: this.getFilterType(),
            type
          };
          var values2 = this.getValues(position);
          if (values2.length > 0) {
            model2.filter = values2[0];
          }
          if (values2.length > 1) {
            model2.filterTo = values2[1];
          }
          return model2;
        };
        NumberFilter2.prototype.getInputs = function() {
          return [
            [this.eValueFrom1, this.eValueTo1],
            [this.eValueFrom2, this.eValueTo2]
          ];
        };
        NumberFilter2.prototype.getAllowedCharPattern = function() {
          var allowedCharPattern = (this.numberFilterParams || {}).allowedCharPattern;
          if (allowedCharPattern) {
            return allowedCharPattern;
          }
          if (!isBrowserChrome() && !isBrowserEdge()) {
            return "\\d\\-\\.";
          }
          return null;
        };
        NumberFilter2.DEFAULT_FILTER_OPTIONS = [
          ScalarFilter.EQUALS,
          ScalarFilter.NOT_EQUAL,
          ScalarFilter.LESS_THAN,
          ScalarFilter.LESS_THAN_OR_EQUAL,
          ScalarFilter.GREATER_THAN,
          ScalarFilter.GREATER_THAN_OR_EQUAL,
          ScalarFilter.IN_RANGE
        ];
        __decorate$n([
          RefSelector("eValue-index0-1")
        ], NumberFilter2.prototype, "eValueFrom1", void 0);
        __decorate$n([
          RefSelector("eValue-index1-1")
        ], NumberFilter2.prototype, "eValueTo1", void 0);
        __decorate$n([
          RefSelector("eValue-index0-2")
        ], NumberFilter2.prototype, "eValueFrom2", void 0);
        __decorate$n([
          RefSelector("eValue-index1-2")
        ], NumberFilter2.prototype, "eValueTo2", void 0);
        return NumberFilter2;
      }(ScalarFilter)
    );
    var __extends$n = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$o = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var TextFilter = (
      /** @class */
      function(_super) {
        __extends$n(TextFilter2, _super);
        function TextFilter2() {
          return _super.call(this, "textFilter") || this;
        }
        TextFilter2.trimInput = function(value) {
          var trimmedInput = value && value.trim();
          return trimmedInput === "" ? value : trimmedInput;
        };
        TextFilter2.prototype.getDefaultDebounceMs = function() {
          return 500;
        };
        TextFilter2.prototype.setParams = function(params) {
          _super.prototype.setParams.call(this, params);
          this.textFilterParams = params;
          this.comparator = this.textFilterParams.textCustomComparator || TextFilter2.DEFAULT_COMPARATOR;
          this.formatter = this.textFilterParams.textFormatter || (this.textFilterParams.caseSensitive ? TextFilter2.DEFAULT_FORMATTER : TextFilter2.DEFAULT_LOWERCASE_FORMATTER);
        };
        TextFilter2.prototype.createCondition = function(position) {
          var type = this.getConditionTypes()[position];
          var model2 = {
            filterType: this.getFilterType(),
            type
          };
          var values2 = this.getValues(position);
          if (values2.length > 0) {
            model2.filter = values2[0];
          }
          if (values2.length > 1) {
            model2.filterTo = values2[1];
          }
          return model2;
        };
        TextFilter2.prototype.getFilterType = function() {
          return "text";
        };
        TextFilter2.prototype.areSimpleModelsEqual = function(aSimple, bSimple) {
          return aSimple.filter === bSimple.filter && aSimple.filterTo === bSimple.filterTo && aSimple.type === bSimple.type;
        };
        TextFilter2.prototype.getInputs = function() {
          return [
            [this.eValueFrom1, this.eValueTo1],
            [this.eValueFrom2, this.eValueTo2]
          ];
        };
        TextFilter2.prototype.getValues = function(position) {
          var _this = this;
          var result = [];
          this.forEachInput(function(element, index, elPosition, numberOfInputs) {
            if (position === elPosition && index < numberOfInputs) {
              var value = makeNull(element.getValue());
              var cleanValue = (_this.textFilterParams.trimInput ? TextFilter2.trimInput(value) : value) || null;
              result.push(cleanValue);
              element.setValue(cleanValue, true);
            }
          });
          return result;
        };
        TextFilter2.prototype.getDefaultFilterOptions = function() {
          return TextFilter2.DEFAULT_FILTER_OPTIONS;
        };
        TextFilter2.prototype.createValueTemplate = function(position) {
          var pos = position === ConditionPosition.One ? "1" : "2";
          return (
            /* html */
            '\n            <div class="ag-filter-body" ref="eCondition' + pos + 'Body" role="presentation">\n                <ag-input-text-field class=".ag-filter-from ag-filter-filter" ref="eValue-index0-' + pos + '"></ag-input-text-field>\n                <ag-input-text-field class="ag-filter-to ag-filter-filter" ref="eValue-index1-' + pos + '"></ag-input-text-field>\n            </div>'
          );
        };
        TextFilter2.prototype.mapValuesFromModel = function(filterModel) {
          var _a2 = filterModel || {}, filter2 = _a2.filter, filterTo = _a2.filterTo, type = _a2.type;
          return [
            filter2 || null,
            filterTo || null
          ].slice(0, this.getNumberOfInputs(type));
        };
        TextFilter2.prototype.evaluateNullValue = function(filterType) {
          return filterType === SimpleFilter.NOT_EQUAL || filterType === SimpleFilter.NOT_CONTAINS;
        };
        TextFilter2.prototype.evaluateNonNullValue = function(values2, cellValue, filterModel) {
          var _this = this;
          var formattedValues = _.map(values2, function(v) {
            return _this.formatter(v);
          }) || [];
          var cellValueFormatted = this.formatter(cellValue);
          return _.some(formattedValues, function(v) {
            return _this.comparator(filterModel.type, cellValueFormatted, v);
          });
        };
        TextFilter2.DEFAULT_FILTER_OPTIONS = [
          SimpleFilter.CONTAINS,
          SimpleFilter.NOT_CONTAINS,
          SimpleFilter.EQUALS,
          SimpleFilter.NOT_EQUAL,
          SimpleFilter.STARTS_WITH,
          SimpleFilter.ENDS_WITH
        ];
        TextFilter2.DEFAULT_FORMATTER = function(from) {
          return from;
        };
        TextFilter2.DEFAULT_LOWERCASE_FORMATTER = function(from) {
          return from == null ? null : from.toString().toLowerCase();
        };
        TextFilter2.DEFAULT_COMPARATOR = function(filter2, value, filterText) {
          switch (filter2) {
            case TextFilter2.CONTAINS:
              return value.indexOf(filterText) >= 0;
            case TextFilter2.NOT_CONTAINS:
              return value.indexOf(filterText) < 0;
            case TextFilter2.EQUALS:
              return value === filterText;
            case TextFilter2.NOT_EQUAL:
              return value != filterText;
            case TextFilter2.STARTS_WITH:
              return value.indexOf(filterText) === 0;
            case TextFilter2.ENDS_WITH:
              var index = value.lastIndexOf(filterText);
              return index >= 0 && index === value.length - filterText.length;
            default:
              return false;
          }
        };
        __decorate$o([
          RefSelector("eValue-index0-1")
        ], TextFilter2.prototype, "eValueFrom1", void 0);
        __decorate$o([
          RefSelector("eValue-index1-1")
        ], TextFilter2.prototype, "eValueTo1", void 0);
        __decorate$o([
          RefSelector("eValue-index0-2")
        ], TextFilter2.prototype, "eValueFrom2", void 0);
        __decorate$o([
          RefSelector("eValue-index1-2")
        ], TextFilter2.prototype, "eValueTo2", void 0);
        return TextFilter2;
      }(SimpleFilter)
    );
    var __extends$o = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$p = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var TextInputFloatingFilter = (
      /** @class */
      function(_super) {
        __extends$o(TextInputFloatingFilter2, _super);
        function TextInputFloatingFilter2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        TextInputFloatingFilter2.prototype.postConstruct = function() {
          this.setTemplate(
            /* html */
            '\n            <div class="ag-floating-filter-input" role="presentation">\n                <ag-input-text-field ref="eFloatingFilterInput"></ag-input-text-field>\n            </div>'
          );
        };
        TextInputFloatingFilter2.prototype.getDefaultDebounceMs = function() {
          return 500;
        };
        TextInputFloatingFilter2.prototype.onParentModelChanged = function(model2, event) {
          if (this.isEventFromFloatingFilter(event)) {
            return;
          }
          this.setLastTypeFromModel(model2);
          this.eFloatingFilterInput.setValue(this.getTextFromModel(model2));
          this.setEditable(this.canWeEditAfterModelFromParentFilter(model2));
        };
        TextInputFloatingFilter2.prototype.init = function(params) {
          _super.prototype.init.call(this, params);
          this.params = params;
          this.applyActive = ProvidedFilter.isUseApplyButton(this.params.filterParams);
          if (!this.isReadOnly()) {
            var debounceMs = ProvidedFilter.getDebounceMs(this.params.filterParams, this.getDefaultDebounceMs());
            var toDebounce = debounce(this.syncUpWithParentFilter.bind(this), debounceMs);
            var filterGui = this.eFloatingFilterInput.getGui();
            this.addManagedListener(filterGui, "input", toDebounce);
            this.addManagedListener(filterGui, "keypress", toDebounce);
            this.addManagedListener(filterGui, "keydown", toDebounce);
          }
          var columnDef = params.column.getDefinition();
          if (this.isReadOnly() || columnDef.filterParams && columnDef.filterParams.filterOptions && columnDef.filterParams.filterOptions.length === 1 && columnDef.filterParams.filterOptions[0] === "inRange") {
            this.eFloatingFilterInput.setDisabled(true);
          }
          var displayName = this.columnModel.getDisplayNameForColumn(params.column, "header", true);
          var translate = this.gridOptionsWrapper.getLocaleTextFunc();
          this.eFloatingFilterInput.setInputAriaLabel(displayName + " " + translate("ariaFilterInput", "Filter Input"));
        };
        TextInputFloatingFilter2.prototype.syncUpWithParentFilter = function(e) {
          var _this = this;
          var enterKeyPressed = isKeyPressed(e, KeyCode.ENTER);
          if (this.applyActive && !enterKeyPressed) {
            return;
          }
          var value = this.eFloatingFilterInput.getValue();
          if (this.params.filterParams.trimInput) {
            value = TextFilter.trimInput(value);
            this.eFloatingFilterInput.setValue(value, true);
          }
          this.params.parentFilterInstance(function(filterInstance) {
            if (filterInstance) {
              var simpleFilter = filterInstance;
              simpleFilter.onFloatingFilterChanged(_this.getLastType(), value || null);
            }
          });
        };
        TextInputFloatingFilter2.prototype.conditionToString = function(condition, options) {
          var numberOfInputs = (options || {}).numberOfInputs;
          var isRange = condition.type == SimpleFilter.IN_RANGE || numberOfInputs === 2;
          if (isRange) {
            return condition.filter + "-" + condition.filterTo;
          }
          if (condition.filter != null) {
            return "" + condition.filter;
          }
          return "" + condition.type;
        };
        TextInputFloatingFilter2.prototype.setEditable = function(editable) {
          this.eFloatingFilterInput.setDisabled(!editable);
        };
        __decorate$p([
          Autowired("columnModel")
        ], TextInputFloatingFilter2.prototype, "columnModel", void 0);
        __decorate$p([
          RefSelector("eFloatingFilterInput")
        ], TextInputFloatingFilter2.prototype, "eFloatingFilterInput", void 0);
        __decorate$p([
          PostConstruct
        ], TextInputFloatingFilter2.prototype, "postConstruct", null);
        return TextInputFloatingFilter2;
      }(SimpleFloatingFilter)
    );
    var __extends$p = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var NumberFloatingFilter = (
      /** @class */
      function(_super) {
        __extends$p(NumberFloatingFilter2, _super);
        function NumberFloatingFilter2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        NumberFloatingFilter2.prototype.getDefaultFilterOptions = function() {
          return NumberFilter.DEFAULT_FILTER_OPTIONS;
        };
        return NumberFloatingFilter2;
      }(TextInputFloatingFilter)
    );
    var __extends$q = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var TextFloatingFilter = (
      /** @class */
      function(_super) {
        __extends$q(TextFloatingFilter2, _super);
        function TextFloatingFilter2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        TextFloatingFilter2.prototype.getDefaultFilterOptions = function() {
          return TextFilter.DEFAULT_FILTER_OPTIONS;
        };
        return TextFloatingFilter2;
      }(TextInputFloatingFilter)
    );
    var TouchListener = (
      /** @class */
      function() {
        function TouchListener2(eElement, preventMouseClick) {
          var _this = this;
          if (preventMouseClick === void 0) {
            preventMouseClick = false;
          }
          this.destroyFuncs = [];
          this.touching = false;
          this.eventService = new EventService();
          this.eElement = eElement;
          this.preventMouseClick = preventMouseClick;
          var startListener = this.onTouchStart.bind(this);
          var moveListener = this.onTouchMove.bind(this);
          var endListener = this.onTouchEnd.bind(this);
          this.eElement.addEventListener("touchstart", startListener, { passive: true });
          this.eElement.addEventListener("touchmove", moveListener, { passive: true });
          this.eElement.addEventListener("touchend", endListener, { passive: false });
          this.destroyFuncs.push(function() {
            _this.eElement.removeEventListener("touchstart", startListener, { passive: true });
            _this.eElement.removeEventListener("touchmove", moveListener, { passive: true });
            _this.eElement.removeEventListener("touchend", endListener, { passive: false });
          });
        }
        TouchListener2.prototype.getActiveTouch = function(touchList) {
          for (var i = 0; i < touchList.length; i++) {
            var matches = touchList[i].identifier === this.touchStart.identifier;
            if (matches) {
              return touchList[i];
            }
          }
          return null;
        };
        TouchListener2.prototype.addEventListener = function(eventType, listener) {
          this.eventService.addEventListener(eventType, listener);
        };
        TouchListener2.prototype.removeEventListener = function(eventType, listener) {
          this.eventService.removeEventListener(eventType, listener);
        };
        TouchListener2.prototype.onTouchStart = function(touchEvent) {
          var _this = this;
          if (this.touching) {
            return;
          }
          this.touchStart = touchEvent.touches[0];
          this.touching = true;
          this.moved = false;
          var touchStartCopy = this.touchStart;
          window.setTimeout(function() {
            var touchesMatch = _this.touchStart === touchStartCopy;
            if (_this.touching && touchesMatch && !_this.moved) {
              _this.moved = true;
              var event_1 = {
                type: TouchListener2.EVENT_LONG_TAP,
                touchStart: _this.touchStart,
                touchEvent
              };
              _this.eventService.dispatchEvent(event_1);
            }
          }, 500);
        };
        TouchListener2.prototype.onTouchMove = function(touchEvent) {
          if (!this.touching) {
            return;
          }
          var touch = this.getActiveTouch(touchEvent.touches);
          if (!touch) {
            return;
          }
          var eventIsFarAway = !areEventsNear(touch, this.touchStart, 4);
          if (eventIsFarAway) {
            this.moved = true;
          }
        };
        TouchListener2.prototype.onTouchEnd = function(touchEvent) {
          if (!this.touching) {
            return;
          }
          if (!this.moved) {
            var event_2 = {
              type: TouchListener2.EVENT_TAP,
              touchStart: this.touchStart
            };
            this.eventService.dispatchEvent(event_2);
            this.checkForDoubleTap();
          }
          if (this.preventMouseClick) {
            touchEvent.preventDefault();
          }
          this.touching = false;
        };
        TouchListener2.prototype.checkForDoubleTap = function() {
          var now = new Date().getTime();
          if (this.lastTapTime && this.lastTapTime > 0) {
            var interval = now - this.lastTapTime;
            if (interval > TouchListener2.DOUBLE_TAP_MILLIS) {
              var event_3 = {
                type: TouchListener2.EVENT_DOUBLE_TAP,
                touchStart: this.touchStart
              };
              this.eventService.dispatchEvent(event_3);
              this.lastTapTime = null;
            } else {
              this.lastTapTime = now;
            }
          } else {
            this.lastTapTime = now;
          }
        };
        TouchListener2.prototype.destroy = function() {
          this.destroyFuncs.forEach(function(func) {
            return func();
          });
        };
        TouchListener2.EVENT_TAP = "tap";
        TouchListener2.EVENT_DOUBLE_TAP = "doubleTap";
        TouchListener2.EVENT_LONG_TAP = "longTap";
        TouchListener2.DOUBLE_TAP_MILLIS = 500;
        return TouchListener2;
      }()
    );
    var __extends$r = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$q = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var HeaderComp = (
      /** @class */
      function(_super) {
        __extends$r(HeaderComp2, _super);
        function HeaderComp2() {
          var _this = _super !== null && _super.apply(this, arguments) || this;
          _this.lastMovingChanged = 0;
          return _this;
        }
        HeaderComp2.prototype.destroy = function() {
          _super.prototype.destroy.call(this);
        };
        HeaderComp2.prototype.refresh = function(params) {
          this.params = params;
          if (this.workOutTemplate() != this.currentTemplate) {
            return false;
          }
          if (this.workOutShowMenu() != this.currentShowMenu) {
            return false;
          }
          if (this.workOutSort() != this.currentSort) {
            return false;
          }
          this.setDisplayName(params);
          return true;
        };
        HeaderComp2.prototype.workOutTemplate = function() {
          var template = firstExistingValue(this.params.template, HeaderComp2.TEMPLATE);
          template = template && template.trim ? template.trim() : template;
          return template;
        };
        HeaderComp2.prototype.init = function(params) {
          this.params = params;
          this.currentTemplate = this.workOutTemplate();
          this.setTemplate(this.currentTemplate);
          this.setupTap();
          this.setupIcons(params.column);
          this.setMenu();
          this.setupSort();
          this.setupFilterIcon();
          this.setDisplayName(params);
        };
        HeaderComp2.prototype.setDisplayName = function(params) {
          if (this.currentDisplayName != params.displayName) {
            this.currentDisplayName = params.displayName;
            var displayNameSanitised = escapeString(this.currentDisplayName);
            if (this.eText) {
              this.eText.innerHTML = displayNameSanitised;
            }
          }
        };
        HeaderComp2.prototype.setupIcons = function(column) {
          this.addInIcon("sortAscending", this.eSortAsc, column);
          this.addInIcon("sortDescending", this.eSortDesc, column);
          this.addInIcon("sortUnSort", this.eSortNone, column);
          this.addInIcon("menu", this.eMenu, column);
          this.addInIcon("filter", this.eFilter, column);
        };
        HeaderComp2.prototype.addInIcon = function(iconName, eParent, column) {
          if (eParent == null) {
            return;
          }
          var eIcon = createIconNoSpan(iconName, this.gridOptionsWrapper, column);
          if (eIcon) {
            eParent.appendChild(eIcon);
          }
        };
        HeaderComp2.prototype.setupTap = function() {
          var _this = this;
          var options = this.gridOptionsWrapper;
          if (options.isSuppressTouch()) {
            return;
          }
          var touchListener = new TouchListener(this.getGui(), true);
          var suppressMenuHide = options.isSuppressMenuHide();
          var tapMenuButton = suppressMenuHide && exists(this.eMenu);
          var menuTouchListener = tapMenuButton ? new TouchListener(this.eMenu, true) : touchListener;
          if (this.params.enableMenu) {
            var eventType = tapMenuButton ? "EVENT_TAP" : "EVENT_LONG_TAP";
            var showMenuFn = function(event) {
              options.getApi().showColumnMenuAfterMouseClick(_this.params.column, event.touchStart);
            };
            this.addManagedListener(menuTouchListener, TouchListener[eventType], showMenuFn);
          }
          if (this.params.enableSorting) {
            var tapListener = function(event) {
              var target = event.touchStart.target;
              if (suppressMenuHide && _this.eMenu.contains(target)) {
                return;
              }
              _this.sortController.progressSort(_this.params.column, false, "uiColumnSorted");
            };
            this.addManagedListener(touchListener, TouchListener.EVENT_TAP, tapListener);
          }
          this.addDestroyFunc(function() {
            return touchListener.destroy();
          });
          if (tapMenuButton) {
            this.addDestroyFunc(function() {
              return menuTouchListener.destroy();
            });
          }
        };
        HeaderComp2.prototype.workOutShowMenu = function() {
          var menuHides = !this.gridOptionsWrapper.isSuppressMenuHide();
          var onIpadAndMenuHides = isIOSUserAgent() && menuHides;
          var showMenu = this.params.enableMenu && !onIpadAndMenuHides;
          return showMenu;
        };
        HeaderComp2.prototype.setMenu = function() {
          var _this = this;
          if (!this.eMenu) {
            return;
          }
          this.currentShowMenu = this.workOutShowMenu();
          if (!this.currentShowMenu) {
            removeFromParent(this.eMenu);
            return;
          }
          var suppressMenuHide = this.gridOptionsWrapper.isSuppressMenuHide();
          this.addManagedListener(this.eMenu, "click", function() {
            return _this.showMenu(_this.eMenu);
          });
          addOrRemoveCssClass(this.eMenu, "ag-header-menu-always-show", suppressMenuHide);
        };
        HeaderComp2.prototype.showMenu = function(eventSource) {
          if (!eventSource) {
            eventSource = this.eMenu;
          }
          this.menuFactory.showMenuAfterButtonClick(this.params.column, eventSource, "columnMenu");
        };
        HeaderComp2.prototype.removeSortIcons = function() {
          removeFromParent(this.eSortAsc);
          removeFromParent(this.eSortDesc);
          removeFromParent(this.eSortNone);
          removeFromParent(this.eSortOrder);
        };
        HeaderComp2.prototype.workOutSort = function() {
          return this.params.enableSorting;
        };
        HeaderComp2.prototype.setupSort = function() {
          var _this = this;
          this.currentSort = this.params.enableSorting;
          if (!this.currentSort) {
            this.removeSortIcons();
            return;
          }
          var sortUsingCtrl = this.gridOptionsWrapper.isMultiSortKeyCtrl();
          this.addManagedListener(this.params.column, Column.EVENT_MOVING_CHANGED, function() {
            _this.lastMovingChanged = new Date().getTime();
          });
          if (this.eLabel) {
            this.addManagedListener(this.eLabel, "click", function(event) {
              var moving = _this.params.column.isMoving();
              var nowTime = new Date().getTime();
              var movedRecently = nowTime - _this.lastMovingChanged < 50;
              var columnMoving = moving || movedRecently;
              if (!columnMoving) {
                var multiSort = sortUsingCtrl ? event.ctrlKey || event.metaKey : event.shiftKey;
                _this.params.progressSort(multiSort);
              }
            });
          }
          this.addManagedListener(this.params.column, Column.EVENT_SORT_CHANGED, this.onSortChanged.bind(this));
          this.onSortChanged();
          this.addManagedListener(this.eventService, Events.EVENT_SORT_CHANGED, this.setMultiSortOrder.bind(this));
          this.setMultiSortOrder();
        };
        HeaderComp2.prototype.onSortChanged = function() {
          addOrRemoveCssClass(this.getGui(), "ag-header-cell-sorted-asc", this.params.column.isSortAscending());
          addOrRemoveCssClass(this.getGui(), "ag-header-cell-sorted-desc", this.params.column.isSortDescending());
          addOrRemoveCssClass(this.getGui(), "ag-header-cell-sorted-none", this.params.column.isSortNone());
          if (this.eSortAsc) {
            addOrRemoveCssClass(this.eSortAsc, "ag-hidden", !this.params.column.isSortAscending());
          }
          if (this.eSortDesc) {
            addOrRemoveCssClass(this.eSortDesc, "ag-hidden", !this.params.column.isSortDescending());
          }
          if (this.eSortNone) {
            var alwaysHideNoSort = !this.params.column.getColDef().unSortIcon && !this.gridOptionsWrapper.isUnSortIcon();
            addOrRemoveCssClass(this.eSortNone, "ag-hidden", alwaysHideNoSort || !this.params.column.isSortNone());
          }
        };
        HeaderComp2.prototype.setMultiSortOrder = function() {
          if (!this.eSortOrder) {
            return;
          }
          var col = this.params.column;
          var allColumnsWithSorting = this.sortController.getColumnsWithSortingOrdered();
          var indexThisCol = allColumnsWithSorting.indexOf(col);
          var moreThanOneColSorting = allColumnsWithSorting.length > 1;
          var showIndex = col.isSorting() && moreThanOneColSorting;
          setDisplayed(this.eSortOrder, showIndex);
          if (indexThisCol >= 0) {
            this.eSortOrder.innerHTML = (indexThisCol + 1).toString();
          } else {
            clearElement(this.eSortOrder);
          }
        };
        HeaderComp2.prototype.setupFilterIcon = function() {
          if (!this.eFilter) {
            return;
          }
          this.addManagedListener(this.params.column, Column.EVENT_FILTER_CHANGED, this.onFilterChanged.bind(this));
          this.onFilterChanged();
        };
        HeaderComp2.prototype.onFilterChanged = function() {
          var filterPresent = this.params.column.isFilterActive();
          addOrRemoveCssClass(this.eFilter, "ag-hidden", !filterPresent);
        };
        HeaderComp2.TEMPLATE = '<div class="ag-cell-label-container" role="presentation">\n            <span ref="eMenu" class="ag-header-icon ag-header-cell-menu-button" aria-hidden="true"></span>\n            <div ref="eLabel" class="ag-header-cell-label" role="presentation" unselectable="on">\n                <span ref="eText" class="ag-header-cell-text" unselectable="on"></span>\n                <span ref="eFilter" class="ag-header-icon ag-header-label-icon ag-filter-icon" aria-hidden="true"></span>\n                <span ref="eSortOrder" class="ag-header-icon ag-header-label-icon ag-sort-order" aria-hidden="true"></span>\n                <span ref="eSortAsc" class="ag-header-icon ag-header-label-icon ag-sort-ascending-icon" aria-hidden="true"></span>\n                <span ref="eSortDesc" class="ag-header-icon ag-header-label-icon ag-sort-descending-icon" aria-hidden="true"></span>\n                <span ref="eSortNone" class="ag-header-icon ag-header-label-icon ag-sort-none-icon" aria-hidden="true"></span>\n            </div>\n        </div>';
        __decorate$q([
          Autowired("sortController")
        ], HeaderComp2.prototype, "sortController", void 0);
        __decorate$q([
          Autowired("menuFactory")
        ], HeaderComp2.prototype, "menuFactory", void 0);
        __decorate$q([
          RefSelector("eFilter")
        ], HeaderComp2.prototype, "eFilter", void 0);
        __decorate$q([
          RefSelector("eSortAsc")
        ], HeaderComp2.prototype, "eSortAsc", void 0);
        __decorate$q([
          RefSelector("eSortDesc")
        ], HeaderComp2.prototype, "eSortDesc", void 0);
        __decorate$q([
          RefSelector("eSortNone")
        ], HeaderComp2.prototype, "eSortNone", void 0);
        __decorate$q([
          RefSelector("eSortOrder")
        ], HeaderComp2.prototype, "eSortOrder", void 0);
        __decorate$q([
          RefSelector("eMenu")
        ], HeaderComp2.prototype, "eMenu", void 0);
        __decorate$q([
          RefSelector("eLabel")
        ], HeaderComp2.prototype, "eLabel", void 0);
        __decorate$q([
          RefSelector("eText")
        ], HeaderComp2.prototype, "eText", void 0);
        return HeaderComp2;
      }(Component)
    );
    var __extends$s = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$r = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var HeaderGroupComp = (
      /** @class */
      function(_super) {
        __extends$s(HeaderGroupComp2, _super);
        function HeaderGroupComp2() {
          return _super.call(this, HeaderGroupComp2.TEMPLATE) || this;
        }
        HeaderGroupComp2.prototype.destroy = function() {
          _super.prototype.destroy.call(this);
        };
        HeaderGroupComp2.prototype.init = function(params) {
          this.params = params;
          this.checkWarnings();
          this.setupLabel();
          this.addGroupExpandIcon();
          this.setupExpandIcons();
        };
        HeaderGroupComp2.prototype.checkWarnings = function() {
          var paramsAny = this.params;
          if (paramsAny.template) {
            var message_1 = "A template was provided for Header Group Comp - templates are only supported for Header Comps (not groups)";
            doOnce(function() {
              return console.warn(message_1);
            }, "HeaderGroupComp.templateNotSupported");
          }
        };
        HeaderGroupComp2.prototype.setupExpandIcons = function() {
          var _this = this;
          this.addInIcon("columnGroupOpened", "agOpened");
          this.addInIcon("columnGroupClosed", "agClosed");
          var expandAction = function(event) {
            if (isStopPropagationForAgGrid(event)) {
              return;
            }
            var newExpandedValue = !_this.params.columnGroup.isExpanded();
            _this.columnModel.setColumnGroupOpened(_this.params.columnGroup.getOriginalColumnGroup(), newExpandedValue, "uiColumnExpanded");
          };
          this.addTouchAndClickListeners(this.eCloseIcon, expandAction);
          this.addTouchAndClickListeners(this.eOpenIcon, expandAction);
          var stopPropagationAction = function(event) {
            stopPropagationForAgGrid(event);
          };
          this.addManagedListener(this.eCloseIcon, "dblclick", stopPropagationAction);
          this.addManagedListener(this.eOpenIcon, "dblclick", stopPropagationAction);
          this.addManagedListener(this.getGui(), "dblclick", expandAction);
          this.updateIconVisibility();
          var originalColumnGroup = this.params.columnGroup.getOriginalColumnGroup();
          this.addManagedListener(originalColumnGroup, ProvidedColumnGroup.EVENT_EXPANDED_CHANGED, this.updateIconVisibility.bind(this));
          this.addManagedListener(originalColumnGroup, ProvidedColumnGroup.EVENT_EXPANDABLE_CHANGED, this.updateIconVisibility.bind(this));
        };
        HeaderGroupComp2.prototype.addTouchAndClickListeners = function(eElement, action) {
          var touchListener = new TouchListener(eElement, true);
          this.addManagedListener(touchListener, TouchListener.EVENT_TAP, action);
          this.addDestroyFunc(function() {
            return touchListener.destroy();
          });
          this.addManagedListener(eElement, "click", action);
        };
        HeaderGroupComp2.prototype.updateIconVisibility = function() {
          var columnGroup = this.params.columnGroup;
          if (columnGroup.isExpandable()) {
            var expanded = this.params.columnGroup.isExpanded();
            setDisplayed(this.eOpenIcon, expanded);
            setDisplayed(this.eCloseIcon, !expanded);
          } else {
            setDisplayed(this.eOpenIcon, false);
            setDisplayed(this.eCloseIcon, false);
          }
        };
        HeaderGroupComp2.prototype.addInIcon = function(iconName, refName) {
          var eIcon = createIconNoSpan(iconName, this.gridOptionsWrapper, null);
          if (eIcon) {
            this.getRefElement(refName).appendChild(eIcon);
          }
        };
        HeaderGroupComp2.prototype.addGroupExpandIcon = function() {
          if (!this.params.columnGroup.isExpandable()) {
            setDisplayed(this.eOpenIcon, false);
            setDisplayed(this.eCloseIcon, false);
            return;
          }
        };
        HeaderGroupComp2.prototype.setupLabel = function() {
          var displayName = this.params.displayName;
          if (exists(displayName)) {
            var displayNameSanitised = escapeString(displayName);
            this.getRefElement("agLabel").innerHTML = displayNameSanitised;
          }
        };
        HeaderGroupComp2.TEMPLATE = '<div class="ag-header-group-cell-label" ref="agContainer" role="presentation">\n            <span ref="agLabel" class="ag-header-group-text" role="presentation"></span>\n            <span ref="agOpened" class="ag-header-icon ag-header-expand-icon ag-header-expand-icon-expanded"></span>\n            <span ref="agClosed" class="ag-header-icon ag-header-expand-icon ag-header-expand-icon-collapsed"></span>\n        </div>';
        __decorate$r([
          Autowired("columnModel")
        ], HeaderGroupComp2.prototype, "columnModel", void 0);
        __decorate$r([
          RefSelector("agOpened")
        ], HeaderGroupComp2.prototype, "eOpenIcon", void 0);
        __decorate$r([
          RefSelector("agClosed")
        ], HeaderGroupComp2.prototype, "eCloseIcon", void 0);
        return HeaderGroupComp2;
      }(Component)
    );
    var __extends$t = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var PopupComponent = (
      /** @class */
      function(_super) {
        __extends$t(PopupComponent2, _super);
        function PopupComponent2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        PopupComponent2.prototype.isPopup = function() {
          return true;
        };
        PopupComponent2.prototype.setParentComponent = function(container) {
          addCssClass(container.getGui(), "ag-has-popup");
          _super.prototype.setParentComponent.call(this, container);
        };
        PopupComponent2.prototype.destroy = function() {
          var parentComp = this.parentComponent;
          var hasParent = parentComp && parentComp.isAlive();
          if (hasParent) {
            removeCssClass(parentComp.getGui(), "ag-has-popup");
          }
          _super.prototype.destroy.call(this);
        };
        return PopupComponent2;
      }(Component)
    );
    var __extends$u = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$s = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var LargeTextCellEditor = (
      /** @class */
      function(_super) {
        __extends$u(LargeTextCellEditor2, _super);
        function LargeTextCellEditor2() {
          return _super.call(this, LargeTextCellEditor2.TEMPLATE) || this;
        }
        LargeTextCellEditor2.prototype.init = function(params) {
          this.params = params;
          this.focusAfterAttached = params.cellStartedEdit;
          this.eTextArea.setMaxLength(params.maxLength || 200).setCols(params.cols || 60).setRows(params.rows || 10);
          if (exists(params.value)) {
            this.eTextArea.setValue(params.value.toString(), true);
          }
          this.addGuiEventListener("keydown", this.onKeyDown.bind(this));
        };
        LargeTextCellEditor2.prototype.onKeyDown = function(event) {
          var key = event.which || event.keyCode;
          if (key === KeyCode.LEFT || key === KeyCode.UP || key === KeyCode.RIGHT || key === KeyCode.DOWN || event.shiftKey && key === KeyCode.ENTER) {
            event.stopPropagation();
          }
        };
        LargeTextCellEditor2.prototype.afterGuiAttached = function() {
          var translate = this.gridOptionsWrapper.getLocaleTextFunc();
          this.eTextArea.setInputAriaLabel(translate("ariaInputEditor", "Input Editor"));
          if (this.focusAfterAttached) {
            this.eTextArea.getFocusableElement().focus();
          }
        };
        LargeTextCellEditor2.prototype.getValue = function() {
          return this.params.parseValue(this.eTextArea.getValue());
        };
        LargeTextCellEditor2.TEMPLATE = '<div class="ag-large-text" tabindex="0">\n            <ag-input-text-area ref="eTextArea" class="ag-large-text-input"></ag-input-text-area>\n        </div>';
        __decorate$s([
          RefSelector("eTextArea")
        ], LargeTextCellEditor2.prototype, "eTextArea", void 0);
        return LargeTextCellEditor2;
      }(PopupComponent)
    );
    var __extends$v = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$t = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var SelectCellEditor = (
      /** @class */
      function(_super) {
        __extends$v(SelectCellEditor2, _super);
        function SelectCellEditor2() {
          var _this = _super.call(this, '<div class="ag-cell-edit-wrapper"><ag-select class="ag-cell-editor" ref="eSelect"></ag-select></div>') || this;
          _this.startedByEnter = false;
          return _this;
        }
        SelectCellEditor2.prototype.init = function(params) {
          var _this = this;
          this.focusAfterAttached = params.cellStartedEdit;
          if (missing(params.values)) {
            console.warn("AG Grid: no values found for select cellEditor");
            return;
          }
          this.startedByEnter = params.keyPress === KeyCode.ENTER;
          var hasValue = false;
          params.values.forEach(function(value) {
            var option = { value };
            var valueFormatted = _this.valueFormatterService.formatValue(params.column, null, null, value);
            var valueFormattedExits = valueFormatted !== null && valueFormatted !== void 0;
            option.text = valueFormattedExits ? valueFormatted : value;
            _this.eSelect.addOption(option);
            hasValue = hasValue || params.value === value;
          });
          if (hasValue) {
            this.eSelect.setValue(params.value, true);
          } else if (params.values.length) {
            this.eSelect.setValue(params.values[0], true);
          }
          if (!this.gridOptionsWrapper.isFullRowEdit()) {
            this.eSelect.onValueChange(function() {
              return params.stopEditing();
            });
          }
        };
        SelectCellEditor2.prototype.afterGuiAttached = function() {
          if (this.focusAfterAttached) {
            this.eSelect.getFocusableElement().focus();
          }
          if (this.startedByEnter) {
            this.eSelect.showPicker();
          }
        };
        SelectCellEditor2.prototype.focusIn = function() {
          this.eSelect.getFocusableElement().focus();
        };
        SelectCellEditor2.prototype.getValue = function() {
          return this.eSelect.getValue();
        };
        SelectCellEditor2.prototype.isPopup = function() {
          return false;
        };
        __decorate$t([
          Autowired("valueFormatterService")
        ], SelectCellEditor2.prototype, "valueFormatterService", void 0);
        __decorate$t([
          RefSelector("eSelect")
        ], SelectCellEditor2.prototype, "eSelect", void 0);
        return SelectCellEditor2;
      }(PopupComponent)
    );
    var __extends$w = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var PopupSelectCellEditor = (
      /** @class */
      function(_super) {
        __extends$w(PopupSelectCellEditor2, _super);
        function PopupSelectCellEditor2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        PopupSelectCellEditor2.prototype.isPopup = function() {
          return true;
        };
        return PopupSelectCellEditor2;
      }(SelectCellEditor)
    );
    var __extends$x = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$u = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var TextCellEditor = (
      /** @class */
      function(_super) {
        __extends$x(TextCellEditor2, _super);
        function TextCellEditor2() {
          return _super.call(this, TextCellEditor2.TEMPLATE) || this;
        }
        TextCellEditor2.prototype.init = function(params) {
          this.params = params;
          var eInput = this.eInput;
          var startValue;
          if (params.cellStartedEdit) {
            this.focusAfterAttached = true;
            if (params.keyPress === KeyCode.BACKSPACE || params.keyPress === KeyCode.DELETE) {
              startValue = "";
            } else if (params.charPress) {
              startValue = params.charPress;
            } else {
              startValue = this.getStartValue(params);
              if (params.keyPress !== KeyCode.F2) {
                this.highlightAllOnFocus = true;
              }
            }
          } else {
            this.focusAfterAttached = false;
            startValue = this.getStartValue(params);
          }
          if (startValue != null) {
            eInput.setValue(startValue, true);
          }
          this.addManagedListener(eInput.getGui(), "keydown", function(event) {
            var keyCode = event.keyCode;
            if (keyCode === KeyCode.PAGE_UP || keyCode === KeyCode.PAGE_DOWN) {
              event.preventDefault();
            }
          });
        };
        TextCellEditor2.prototype.afterGuiAttached = function() {
          var translate = this.gridOptionsWrapper.getLocaleTextFunc();
          var eInput = this.eInput;
          eInput.setInputAriaLabel(translate("ariaInputEditor", "Input Editor"));
          if (!this.focusAfterAttached) {
            return;
          }
          if (!isBrowserSafari()) {
            eInput.getFocusableElement().focus();
          }
          var inputEl = eInput.getInputElement();
          if (this.highlightAllOnFocus) {
            inputEl.select();
          } else {
            var value = eInput.getValue();
            var len = exists(value) && value.length || 0;
            if (len) {
              inputEl.setSelectionRange(len, len);
            }
          }
        };
        TextCellEditor2.prototype.focusIn = function() {
          var eInput = this.eInput;
          var focusEl = eInput.getFocusableElement();
          var inputEl = eInput.getInputElement();
          focusEl.focus();
          inputEl.select();
        };
        TextCellEditor2.prototype.focusOut = function() {
          var inputEl = this.eInput.getInputElement();
          if (isBrowserIE()) {
            inputEl.setSelectionRange(0, 0);
          }
        };
        TextCellEditor2.prototype.getValue = function() {
          var eInput = this.eInput;
          return this.params.parseValue(eInput.getValue());
        };
        TextCellEditor2.prototype.getStartValue = function(params) {
          var formatValue = params.useFormatter || params.column.getColDef().refData;
          return formatValue ? params.formatValue(params.value) : params.value;
        };
        TextCellEditor2.prototype.isPopup = function() {
          return false;
        };
        TextCellEditor2.TEMPLATE = '<div class="ag-cell-edit-wrapper"><ag-input-text-field class="ag-cell-editor" ref="eInput"></ag-input-text-field></div>';
        __decorate$u([
          RefSelector("eInput")
        ], TextCellEditor2.prototype, "eInput", void 0);
        return TextCellEditor2;
      }(PopupComponent)
    );
    var __extends$y = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var PopupTextCellEditor = (
      /** @class */
      function(_super) {
        __extends$y(PopupTextCellEditor2, _super);
        function PopupTextCellEditor2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        PopupTextCellEditor2.prototype.isPopup = function() {
          return true;
        };
        return PopupTextCellEditor2;
      }(TextCellEditor)
    );
    var __extends$z = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$v = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var ARROW_UP = "↑";
    var ARROW_DOWN = "↓";
    var AnimateShowChangeCellRenderer = (
      /** @class */
      function(_super) {
        __extends$z(AnimateShowChangeCellRenderer2, _super);
        function AnimateShowChangeCellRenderer2() {
          var _this = _super.call(this, AnimateShowChangeCellRenderer2.TEMPLATE) || this;
          _this.refreshCount = 0;
          return _this;
        }
        AnimateShowChangeCellRenderer2.prototype.init = function(params) {
          this.eValue = this.queryForHtmlElement(".ag-value-change-value");
          this.eDelta = this.queryForHtmlElement(".ag-value-change-delta");
          this.refresh(params);
        };
        AnimateShowChangeCellRenderer2.prototype.showDelta = function(params, delta) {
          var absDelta = Math.abs(delta);
          var valueFormatted = params.formatValue(absDelta);
          var valueToUse = exists(valueFormatted) ? valueFormatted : absDelta;
          var deltaUp = delta >= 0;
          if (deltaUp) {
            this.eDelta.innerHTML = ARROW_UP + valueToUse;
          } else {
            this.eDelta.innerHTML = ARROW_DOWN + valueToUse;
          }
          addOrRemoveCssClass(this.eDelta, "ag-value-change-delta-up", deltaUp);
          addOrRemoveCssClass(this.eDelta, "ag-value-change-delta-down", !deltaUp);
        };
        AnimateShowChangeCellRenderer2.prototype.setTimerToRemoveDelta = function() {
          var _this = this;
          this.refreshCount++;
          var refreshCountCopy = this.refreshCount;
          window.setTimeout(function() {
            if (refreshCountCopy === _this.refreshCount) {
              _this.hideDeltaValue();
            }
          }, 2e3);
        };
        AnimateShowChangeCellRenderer2.prototype.hideDeltaValue = function() {
          removeCssClass(this.eValue, "ag-value-change-value-highlight");
          clearElement(this.eDelta);
        };
        AnimateShowChangeCellRenderer2.prototype.refresh = function(params) {
          var value = params.value;
          if (value === this.lastValue) {
            return false;
          }
          if (exists(params.valueFormatted)) {
            this.eValue.innerHTML = params.valueFormatted;
          } else if (exists(params.value)) {
            this.eValue.innerHTML = value;
          } else {
            clearElement(this.eValue);
          }
          if (this.filterManager.isSuppressFlashingCellsBecauseFiltering()) {
            return false;
          }
          if (typeof value === "number" && typeof this.lastValue === "number") {
            var delta = value - this.lastValue;
            this.showDelta(params, delta);
          }
          if (this.lastValue) {
            addCssClass(this.eValue, "ag-value-change-value-highlight");
          }
          this.setTimerToRemoveDelta();
          this.lastValue = value;
          return true;
        };
        AnimateShowChangeCellRenderer2.TEMPLATE = '<span><span class="ag-value-change-delta"></span><span class="ag-value-change-value"></span></span>';
        __decorate$v([
          Autowired("filterManager")
        ], AnimateShowChangeCellRenderer2.prototype, "filterManager", void 0);
        return AnimateShowChangeCellRenderer2;
      }(Component)
    );
    var __extends$A = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$w = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var AnimateSlideCellRenderer = (
      /** @class */
      function(_super) {
        __extends$A(AnimateSlideCellRenderer2, _super);
        function AnimateSlideCellRenderer2() {
          var _this = _super.call(this, AnimateSlideCellRenderer2.TEMPLATE) || this;
          _this.refreshCount = 0;
          _this.eCurrent = _this.queryForHtmlElement(".ag-value-slide-current");
          return _this;
        }
        AnimateSlideCellRenderer2.prototype.init = function(params) {
          this.refresh(params);
        };
        AnimateSlideCellRenderer2.prototype.addSlideAnimation = function() {
          var _this = this;
          this.refreshCount++;
          var refreshCountCopy = this.refreshCount;
          if (this.ePrevious) {
            this.getGui().removeChild(this.ePrevious);
          }
          this.ePrevious = loadTemplate('<span class="ag-value-slide-previous ag-value-slide-out"></span>');
          this.ePrevious.innerHTML = this.eCurrent.innerHTML;
          this.getGui().insertBefore(this.ePrevious, this.eCurrent);
          window.setTimeout(function() {
            if (refreshCountCopy !== _this.refreshCount) {
              return;
            }
            addCssClass(_this.ePrevious, "ag-value-slide-out-end");
          }, 50);
          window.setTimeout(function() {
            if (refreshCountCopy !== _this.refreshCount) {
              return;
            }
            _this.getGui().removeChild(_this.ePrevious);
            _this.ePrevious = null;
          }, 3e3);
        };
        AnimateSlideCellRenderer2.prototype.refresh = function(params) {
          var value = params.value;
          if (missing(value)) {
            value = "";
          }
          if (value === this.lastValue) {
            return false;
          }
          if (this.filterManager.isSuppressFlashingCellsBecauseFiltering()) {
            return false;
          }
          this.addSlideAnimation();
          this.lastValue = value;
          if (exists(params.valueFormatted)) {
            this.eCurrent.innerHTML = params.valueFormatted;
          } else if (exists(params.value)) {
            this.eCurrent.innerHTML = value;
          } else {
            clearElement(this.eCurrent);
          }
          return true;
        };
        AnimateSlideCellRenderer2.TEMPLATE = '<span>\n            <span class="ag-value-slide-current"></span>\n        </span>';
        __decorate$w([
          Autowired("filterManager")
        ], AnimateSlideCellRenderer2.prototype, "filterManager", void 0);
        return AnimateSlideCellRenderer2;
      }(Component)
    );
    (function(RowHighlightPosition) {
      RowHighlightPosition[RowHighlightPosition["Above"] = 0] = "Above";
      RowHighlightPosition[RowHighlightPosition["Below"] = 1] = "Below";
    })(exports.RowHighlightPosition || (exports.RowHighlightPosition = {}));
    var RowNode = (
      /** @class */
      function() {
        function RowNode2(beans) {
          this.rowIndex = null;
          this.key = null;
          this.childrenMapped = {};
          this.displayed = false;
          this.rowTop = null;
          this.oldRowTop = null;
          this.selectable = true;
          this.__objectId = RowNode2.OBJECT_ID_SEQUENCE++;
          this.__autoHeights = {};
          this.alreadyRendered = false;
          this.highlighted = null;
          this.selected = false;
          this.beans = beans;
        }
        RowNode2.prototype.setData = function(data) {
          this.setDataCommon(data, false);
        };
        RowNode2.prototype.updateData = function(data) {
          this.setDataCommon(data, true);
        };
        RowNode2.prototype.setDataCommon = function(data, update) {
          var oldData = this.data;
          this.data = data;
          this.beans.valueCache.onDataChanged();
          this.updateDataOnDetailNode();
          this.checkRowSelectable();
          var event = this.createDataChangedEvent(data, oldData, update);
          this.dispatchLocalEvent(event);
        };
        RowNode2.prototype.updateDataOnDetailNode = function() {
          if (this.detailNode) {
            this.detailNode.data = this.data;
          }
        };
        RowNode2.prototype.createDataChangedEvent = function(newData, oldData, update) {
          return {
            type: RowNode2.EVENT_DATA_CHANGED,
            node: this,
            oldData,
            newData,
            update
          };
        };
        RowNode2.prototype.createLocalRowEvent = function(type) {
          return {
            type,
            node: this
          };
        };
        RowNode2.prototype.getRowIndexString = function() {
          if (this.rowPinned === Constants.PINNED_TOP) {
            return "t-" + this.rowIndex;
          }
          if (this.rowPinned === Constants.PINNED_BOTTOM) {
            return "b-" + this.rowIndex;
          }
          return this.rowIndex.toString();
        };
        RowNode2.prototype.createDaemonNode = function() {
          var oldNode = new RowNode2(this.beans);
          oldNode.id = this.id;
          oldNode.data = this.data;
          oldNode.daemon = true;
          oldNode.selected = this.selected;
          oldNode.level = this.level;
          return oldNode;
        };
        RowNode2.prototype.setDataAndId = function(data, id) {
          var oldNode = exists(this.id) ? this.createDaemonNode() : null;
          var oldData = this.data;
          this.data = data;
          this.updateDataOnDetailNode();
          this.setId(id);
          this.beans.selectionService.syncInRowNode(this, oldNode);
          this.checkRowSelectable();
          var event = this.createDataChangedEvent(data, oldData, false);
          this.dispatchLocalEvent(event);
        };
        RowNode2.prototype.checkRowSelectable = function() {
          var isRowSelectableFunc = this.beans.gridOptionsWrapper.getIsRowSelectableFunc();
          this.setRowSelectable(isRowSelectableFunc ? isRowSelectableFunc(this) : true);
        };
        RowNode2.prototype.setRowSelectable = function(newVal) {
          if (this.selectable !== newVal) {
            this.selectable = newVal;
            if (this.eventService) {
              this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode2.EVENT_SELECTABLE_CHANGED));
            }
          }
        };
        RowNode2.prototype.setId = function(id) {
          var getRowNodeId = this.beans.gridOptionsWrapper.getRowNodeIdFunc();
          if (getRowNodeId) {
            if (this.data) {
              this.id = getRowNodeId(this.data);
              if (this.id && typeof this.id === "string" && startsWith(this.id, RowNode2.ID_PREFIX_ROW_GROUP)) {
                console.error("AG Grid: Row ID's cannot start with " + RowNode2.ID_PREFIX_ROW_GROUP + ", this is a reserved prefix for AG Grid's row grouping feature.");
              }
              if (this.id && typeof this.id !== "string") {
                this.id = "" + this.id;
              }
            } else {
              this.id = void 0;
            }
          } else {
            this.id = id;
          }
        };
        RowNode2.prototype.isPixelInRange = function(pixel) {
          if (!exists(this.rowTop) || !exists(this.rowHeight)) {
            return false;
          }
          return pixel >= this.rowTop && pixel < this.rowTop + this.rowHeight;
        };
        RowNode2.prototype.setFirstChild = function(firstChild) {
          if (this.firstChild === firstChild) {
            return;
          }
          this.firstChild = firstChild;
          if (this.eventService) {
            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode2.EVENT_FIRST_CHILD_CHANGED));
          }
        };
        RowNode2.prototype.setLastChild = function(lastChild) {
          if (this.lastChild === lastChild) {
            return;
          }
          this.lastChild = lastChild;
          if (this.eventService) {
            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode2.EVENT_LAST_CHILD_CHANGED));
          }
        };
        RowNode2.prototype.setChildIndex = function(childIndex) {
          if (this.childIndex === childIndex) {
            return;
          }
          this.childIndex = childIndex;
          if (this.eventService) {
            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode2.EVENT_CHILD_INDEX_CHANGED));
          }
        };
        RowNode2.prototype.setRowTop = function(rowTop) {
          this.oldRowTop = this.rowTop;
          if (this.rowTop === rowTop) {
            return;
          }
          this.rowTop = rowTop;
          if (this.eventService) {
            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode2.EVENT_TOP_CHANGED));
          }
          this.setDisplayed(rowTop !== null);
        };
        RowNode2.prototype.clearRowTopAndRowIndex = function() {
          this.oldRowTop = null;
          this.setRowTop(null);
          this.setRowIndex(null);
        };
        RowNode2.prototype.setDisplayed = function(displayed) {
          if (this.displayed === displayed) {
            return;
          }
          this.displayed = displayed;
          if (this.eventService) {
            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode2.EVENT_DISPLAYED_CHANGED));
          }
        };
        RowNode2.prototype.setDragging = function(dragging) {
          if (this.dragging === dragging) {
            return;
          }
          this.dragging = dragging;
          if (this.eventService) {
            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode2.EVENT_DRAGGING_CHANGED));
          }
        };
        RowNode2.prototype.setHighlighted = function(highlighted) {
          if (highlighted === this.highlighted) {
            return;
          }
          this.highlighted = highlighted;
          if (this.eventService) {
            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode2.EVENT_HIGHLIGHT_CHANGED));
          }
        };
        RowNode2.prototype.setAllChildrenCount = function(allChildrenCount) {
          if (this.allChildrenCount === allChildrenCount) {
            return;
          }
          this.allChildrenCount = allChildrenCount;
          if (this.eventService) {
            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode2.EVENT_ALL_CHILDREN_COUNT_CHANGED));
          }
        };
        RowNode2.prototype.setMaster = function(master) {
          if (this.master === master) {
            return;
          }
          if (this.master && !master) {
            this.expanded = false;
          }
          this.master = master;
          if (this.eventService) {
            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode2.EVENT_MASTER_CHANGED));
          }
        };
        RowNode2.prototype.setRowHeight = function(rowHeight, estimated) {
          if (estimated === void 0) {
            estimated = false;
          }
          this.rowHeight = rowHeight;
          this.rowHeightEstimated = estimated;
          if (this.eventService) {
            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode2.EVENT_HEIGHT_CHANGED));
          }
        };
        RowNode2.prototype.setRowAutoHeight = function(cellHeight, column) {
          if (!this.__autoHeights) {
            this.__autoHeights = {};
          }
          var autoHeights = this.__autoHeights;
          autoHeights[column.getId()] = cellHeight;
          if (cellHeight != null) {
            if (this.checkAutoHeightsDebounced == null) {
              this.checkAutoHeightsDebounced = debounce(this.checkAutoHeights.bind(this), 1);
            }
            this.checkAutoHeightsDebounced();
          }
        };
        RowNode2.prototype.checkAutoHeights = function() {
          var notAllPresent = false;
          var nonePresent = true;
          var newRowHeight = 0;
          var autoHeights = this.__autoHeights;
          if (autoHeights == null) {
            return;
          }
          var displayedAutoHeightCols = this.beans.columnModel.getAllDisplayedAutoHeightCols();
          displayedAutoHeightCols.forEach(function(col) {
            var cellHeight = autoHeights[col.getId()];
            if (cellHeight == null) {
              notAllPresent = true;
              return;
            }
            nonePresent = false;
            if (cellHeight > newRowHeight) {
              newRowHeight = cellHeight;
            }
          });
          if (notAllPresent) {
            return;
          }
          if (nonePresent || newRowHeight < 10) {
            newRowHeight = this.beans.gridOptionsWrapper.getRowHeightForNode(this).height;
          }
          if (newRowHeight == this.rowHeight) {
            return;
          }
          this.setRowHeight(newRowHeight);
          var rowModel = this.beans.rowModel;
          rowModel.onRowHeightChanged && rowModel.onRowHeightChanged();
        };
        RowNode2.prototype.setRowIndex = function(rowIndex) {
          if (this.rowIndex === rowIndex) {
            return;
          }
          this.rowIndex = rowIndex;
          if (this.eventService) {
            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode2.EVENT_ROW_INDEX_CHANGED));
          }
        };
        RowNode2.prototype.setUiLevel = function(uiLevel) {
          if (this.uiLevel === uiLevel) {
            return;
          }
          this.uiLevel = uiLevel;
          if (this.eventService) {
            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode2.EVENT_UI_LEVEL_CHANGED));
          }
        };
        RowNode2.prototype.setExpanded = function(expanded) {
          if (this.expanded === expanded) {
            return;
          }
          this.expanded = expanded;
          if (this.eventService) {
            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode2.EVENT_EXPANDED_CHANGED));
          }
          var event = assign({}, this.createGlobalRowEvent(Events.EVENT_ROW_GROUP_OPENED), {
            expanded
          });
          this.beans.rowNodeEventThrottle.dispatchExpanded(event);
          if (this.beans.gridOptionsWrapper.isGroupIncludeFooter()) {
            this.beans.rowRenderer.refreshCells({ rowNodes: [this] });
          }
        };
        RowNode2.prototype.createGlobalRowEvent = function(type) {
          return {
            type,
            node: this,
            data: this.data,
            rowIndex: this.rowIndex,
            rowPinned: this.rowPinned,
            context: this.beans.gridOptionsWrapper.getContext(),
            api: this.beans.gridOptionsWrapper.getApi(),
            columnApi: this.beans.gridOptionsWrapper.getColumnApi()
          };
        };
        RowNode2.prototype.dispatchLocalEvent = function(event) {
          if (this.eventService) {
            this.eventService.dispatchEvent(event);
          }
        };
        RowNode2.prototype.setDataValue = function(colKey, newValue, eventSource) {
          var column = this.beans.columnModel.getPrimaryColumn(colKey);
          var oldValue = this.beans.valueService.getValue(column, this);
          this.beans.valueService.setValue(this, column, newValue, eventSource);
          this.dispatchCellChangedEvent(column, newValue, oldValue);
        };
        RowNode2.prototype.setGroupValue = function(colKey, newValue) {
          var column = this.beans.columnModel.getGridColumn(colKey);
          if (missing(this.groupData)) {
            this.groupData = {};
          }
          var columnId = column.getColId();
          var oldValue = this.groupData[columnId];
          if (oldValue === newValue) {
            return;
          }
          this.groupData[columnId] = newValue;
          this.dispatchCellChangedEvent(column, newValue, oldValue);
        };
        RowNode2.prototype.setAggData = function(newAggData) {
          var _this = this;
          var colIds = getAllKeysInObjects([this.aggData, newAggData]);
          var oldAggData = this.aggData;
          this.aggData = newAggData;
          if (this.eventService) {
            colIds.forEach(function(colId) {
              var column = _this.beans.columnModel.getGridColumn(colId);
              var value = _this.aggData ? _this.aggData[colId] : void 0;
              var oldValue = oldAggData ? oldAggData[colId] : void 0;
              _this.dispatchCellChangedEvent(column, value, oldValue);
            });
          }
        };
        RowNode2.prototype.updateHasChildren = function() {
          var newValue = this.group && !this.footer || this.childrenAfterGroup && this.childrenAfterGroup.length > 0;
          if (newValue !== this.__hasChildren) {
            this.__hasChildren = !!newValue;
            if (this.eventService) {
              this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode2.EVENT_HAS_CHILDREN_CHANGED));
            }
          }
        };
        RowNode2.prototype.hasChildren = function() {
          if (this.__hasChildren == null) {
            this.updateHasChildren();
          }
          return this.__hasChildren;
        };
        RowNode2.prototype.isEmptyRowGroupNode = function() {
          return this.group && missingOrEmpty(this.childrenAfterGroup);
        };
        RowNode2.prototype.dispatchCellChangedEvent = function(column, newValue, oldValue) {
          var cellChangedEvent = {
            type: RowNode2.EVENT_CELL_CHANGED,
            node: this,
            column,
            newValue,
            oldValue
          };
          this.dispatchLocalEvent(cellChangedEvent);
        };
        RowNode2.prototype.resetQuickFilterAggregateText = function() {
          this.quickFilterAggregateText = null;
        };
        RowNode2.prototype.isExpandable = function() {
          return this.hasChildren() && !this.footer || this.master ? true : false;
        };
        RowNode2.prototype.isSelected = function() {
          if (this.footer) {
            return this.sibling.isSelected();
          }
          return this.selected;
        };
        RowNode2.prototype.depthFirstSearch = function(callback) {
          if (this.childrenAfterGroup) {
            this.childrenAfterGroup.forEach(function(child) {
              return child.depthFirstSearch(callback);
            });
          }
          callback(this);
        };
        RowNode2.prototype.calculateSelectedFromChildren = function() {
          var atLeastOneSelected = false;
          var atLeastOneDeSelected = false;
          var atLeastOneMixed = false;
          var newSelectedValue;
          if (this.childrenAfterGroup) {
            for (var i = 0; i < this.childrenAfterGroup.length; i++) {
              var child = this.childrenAfterGroup[i];
              if (!child.selectable) {
                continue;
              }
              var childState = child.isSelected();
              switch (childState) {
                case true:
                  atLeastOneSelected = true;
                  break;
                case false:
                  atLeastOneDeSelected = true;
                  break;
                default:
                  atLeastOneMixed = true;
                  break;
              }
            }
          }
          if (atLeastOneMixed) {
            newSelectedValue = void 0;
          } else if (atLeastOneSelected && !atLeastOneDeSelected) {
            newSelectedValue = true;
          } else if (!atLeastOneSelected && atLeastOneDeSelected) {
            newSelectedValue = false;
          } else {
            newSelectedValue = void 0;
          }
          this.selectThisNode(newSelectedValue);
        };
        RowNode2.prototype.setSelectedInitialValue = function(selected) {
          this.selected = selected;
        };
        RowNode2.prototype.setSelected = function(newValue, clearSelection, suppressFinishActions) {
          if (clearSelection === void 0) {
            clearSelection = false;
          }
          if (suppressFinishActions === void 0) {
            suppressFinishActions = false;
          }
          this.setSelectedParams({
            newValue,
            clearSelection,
            suppressFinishActions,
            rangeSelect: false
          });
        };
        RowNode2.prototype.isRowPinned = function() {
          return this.rowPinned === Constants.PINNED_TOP || this.rowPinned === Constants.PINNED_BOTTOM;
        };
        RowNode2.prototype.setSelectedParams = function(params) {
          var groupSelectsChildren = this.beans.gridOptionsWrapper.isGroupSelectsChildren();
          var newValue = params.newValue === true;
          var clearSelection = params.clearSelection === true;
          var suppressFinishActions = params.suppressFinishActions === true;
          var rangeSelect = params.rangeSelect === true;
          var groupSelectsFiltered = groupSelectsChildren && params.groupSelectsFiltered === true;
          if (this.id === void 0) {
            console.warn("AG Grid: cannot select node until id for node is known");
            return 0;
          }
          if (this.rowPinned) {
            console.warn("AG Grid: cannot select pinned rows");
            return 0;
          }
          if (this.footer) {
            return this.sibling.setSelectedParams(params);
          }
          if (rangeSelect && this.beans.selectionService.getLastSelectedNode()) {
            var newRowClicked = this.beans.selectionService.getLastSelectedNode() !== this;
            var allowMultiSelect = this.beans.gridOptionsWrapper.isRowSelectionMulti();
            if (newRowClicked && allowMultiSelect) {
              var nodesChanged = this.doRowRangeSelection(params.newValue);
              this.beans.selectionService.setLastSelectedNode(this);
              return nodesChanged;
            }
          }
          var updatedCount = 0;
          var skipThisNode = groupSelectsFiltered && this.group;
          if (!skipThisNode) {
            var thisNodeWasSelected = this.selectThisNode(newValue);
            if (thisNodeWasSelected) {
              updatedCount++;
            }
          }
          if (groupSelectsChildren && this.group) {
            updatedCount += this.selectChildNodes(newValue, groupSelectsFiltered);
          }
          if (!suppressFinishActions) {
            var clearOtherNodes = newValue && (clearSelection || !this.beans.gridOptionsWrapper.isRowSelectionMulti());
            if (clearOtherNodes) {
              updatedCount += this.beans.selectionService.clearOtherNodes(this);
            }
            if (updatedCount > 0) {
              this.beans.selectionService.updateGroupsFromChildrenSelections();
              var event_1 = {
                type: Events.EVENT_SELECTION_CHANGED,
                api: this.beans.gridApi,
                columnApi: this.beans.columnApi
              };
              this.beans.eventService.dispatchEvent(event_1);
            }
            if (newValue) {
              this.beans.selectionService.setLastSelectedNode(this);
            }
          }
          return updatedCount;
        };
        RowNode2.prototype.doRowRangeSelection = function(value) {
          var _this = this;
          if (value === void 0) {
            value = true;
          }
          var groupsSelectChildren = this.beans.gridOptionsWrapper.isGroupSelectsChildren();
          var lastSelectedNode = this.beans.selectionService.getLastSelectedNode();
          var nodesToSelect = this.beans.rowModel.getNodesInRangeForSelection(this, lastSelectedNode);
          var updatedCount = 0;
          nodesToSelect.forEach(function(rowNode) {
            if (rowNode.group && groupsSelectChildren || value === false && _this === rowNode) {
              return;
            }
            var nodeWasSelected = rowNode.selectThisNode(value);
            if (nodeWasSelected) {
              updatedCount++;
            }
          });
          this.beans.selectionService.updateGroupsFromChildrenSelections();
          var event = {
            type: Events.EVENT_SELECTION_CHANGED,
            api: this.beans.gridApi,
            columnApi: this.beans.columnApi
          };
          this.beans.eventService.dispatchEvent(event);
          return updatedCount;
        };
        RowNode2.prototype.isParentOfNode = function(potentialParent) {
          var parentNode = this.parent;
          while (parentNode) {
            if (parentNode === potentialParent) {
              return true;
            }
            parentNode = parentNode.parent;
          }
          return false;
        };
        RowNode2.prototype.selectThisNode = function(newValue) {
          var selectionNotAllowed = !this.selectable && newValue;
          var selectionNotChanged = this.selected === newValue;
          if (selectionNotAllowed || selectionNotChanged) {
            return false;
          }
          this.selected = newValue;
          if (this.eventService) {
            this.dispatchLocalEvent(this.createLocalRowEvent(RowNode2.EVENT_ROW_SELECTED));
          }
          var event = this.createGlobalRowEvent(Events.EVENT_ROW_SELECTED);
          this.beans.eventService.dispatchEvent(event);
          return true;
        };
        RowNode2.prototype.selectChildNodes = function(newValue, groupSelectsFiltered) {
          var children = groupSelectsFiltered ? this.childrenAfterFilter : this.childrenAfterGroup;
          if (missing(children)) {
            return 0;
          }
          var updatedCount = 0;
          for (var i = 0; i < children.length; i++) {
            updatedCount += children[i].setSelectedParams({
              newValue,
              clearSelection: false,
              suppressFinishActions: true,
              groupSelectsFiltered
            });
          }
          return updatedCount;
        };
        RowNode2.prototype.addEventListener = function(eventType, listener) {
          if (!this.eventService) {
            this.eventService = new EventService();
          }
          this.eventService.addEventListener(eventType, listener);
        };
        RowNode2.prototype.removeEventListener = function(eventType, listener) {
          if (!this.eventService) {
            return;
          }
          this.eventService.removeEventListener(eventType, listener);
          if (this.eventService.noRegisteredListenersExist()) {
            this.eventService = null;
          }
        };
        RowNode2.prototype.onMouseEnter = function() {
          this.dispatchLocalEvent(this.createLocalRowEvent(RowNode2.EVENT_MOUSE_ENTER));
        };
        RowNode2.prototype.onMouseLeave = function() {
          this.dispatchLocalEvent(this.createLocalRowEvent(RowNode2.EVENT_MOUSE_LEAVE));
        };
        RowNode2.prototype.getFirstChildOfFirstChild = function(rowGroupColumn) {
          var currentRowNode = this;
          var isCandidate = true;
          var foundFirstChildPath = false;
          var nodeToSwapIn = null;
          while (isCandidate && !foundFirstChildPath) {
            var parentRowNode = currentRowNode.parent;
            var firstChild = exists(parentRowNode) && currentRowNode.firstChild;
            if (firstChild) {
              if (parentRowNode.rowGroupColumn === rowGroupColumn) {
                foundFirstChildPath = true;
                nodeToSwapIn = parentRowNode;
              }
            } else {
              isCandidate = false;
            }
            currentRowNode = parentRowNode;
          }
          return foundFirstChildPath ? nodeToSwapIn : null;
        };
        RowNode2.prototype.isFullWidthCell = function() {
          var isFullWidthCellFunc = this.beans.gridOptionsWrapper.getIsFullWidthCellFunc();
          return isFullWidthCellFunc ? isFullWidthCellFunc(this) : false;
        };
        RowNode2.prototype.getRoute = function() {
          if (this.key == null) {
            return;
          }
          var res = [];
          var pointer = this;
          while (pointer.key != null) {
            res.push(pointer.key);
            pointer = pointer.parent;
          }
          return res.reverse();
        };
        RowNode2.ID_PREFIX_ROW_GROUP = "row-group-";
        RowNode2.ID_PREFIX_TOP_PINNED = "t-";
        RowNode2.ID_PREFIX_BOTTOM_PINNED = "b-";
        RowNode2.OBJECT_ID_SEQUENCE = 0;
        RowNode2.EVENT_ROW_SELECTED = "rowSelected";
        RowNode2.EVENT_DATA_CHANGED = "dataChanged";
        RowNode2.EVENT_CELL_CHANGED = "cellChanged";
        RowNode2.EVENT_ALL_CHILDREN_COUNT_CHANGED = "allChildrenCountChanged";
        RowNode2.EVENT_MASTER_CHANGED = "masterChanged";
        RowNode2.EVENT_MOUSE_ENTER = "mouseEnter";
        RowNode2.EVENT_MOUSE_LEAVE = "mouseLeave";
        RowNode2.EVENT_HEIGHT_CHANGED = "heightChanged";
        RowNode2.EVENT_TOP_CHANGED = "topChanged";
        RowNode2.EVENT_DISPLAYED_CHANGED = "displayedChanged";
        RowNode2.EVENT_FIRST_CHILD_CHANGED = "firstChildChanged";
        RowNode2.EVENT_LAST_CHILD_CHANGED = "lastChildChanged";
        RowNode2.EVENT_CHILD_INDEX_CHANGED = "childIndexChanged";
        RowNode2.EVENT_ROW_INDEX_CHANGED = "rowIndexChanged";
        RowNode2.EVENT_EXPANDED_CHANGED = "expandedChanged";
        RowNode2.EVENT_HAS_CHILDREN_CHANGED = "hasChildrenChanged";
        RowNode2.EVENT_SELECTABLE_CHANGED = "selectableChanged";
        RowNode2.EVENT_UI_LEVEL_CHANGED = "uiLevelChanged";
        RowNode2.EVENT_HIGHLIGHT_CHANGED = "rowHighlightChanged";
        RowNode2.EVENT_DRAGGING_CHANGED = "draggingChanged";
        return RowNode2;
      }()
    );
    var __extends$B = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$x = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var CheckboxSelectionComponent = (
      /** @class */
      function(_super) {
        __extends$B(CheckboxSelectionComponent2, _super);
        function CheckboxSelectionComponent2() {
          return _super.call(
            this,
            /* html*/
            '\n            <div class="ag-selection-checkbox" role="presentation">\n                <ag-checkbox role="presentation" ref="eCheckbox"></ag-checkbox>\n            </div>'
          ) || this;
        }
        CheckboxSelectionComponent2.prototype.postConstruct = function() {
          this.eCheckbox.setPassive(true);
        };
        CheckboxSelectionComponent2.prototype.getCheckboxId = function() {
          return this.eCheckbox.getInputElement().id;
        };
        CheckboxSelectionComponent2.prototype.onDataChanged = function() {
          this.onSelectionChanged();
        };
        CheckboxSelectionComponent2.prototype.onSelectableChanged = function() {
          this.showOrHideSelect();
        };
        CheckboxSelectionComponent2.prototype.onSelectionChanged = function() {
          var translate = this.gridOptionsWrapper.getLocaleTextFunc();
          var state = this.rowNode.isSelected();
          var stateName = state === void 0 ? translate("ariaIndeterminate", "indeterminate") : state === true ? translate("ariaChecked", "checked") : translate("ariaUnchecked", "unchecked");
          var ariaLabel = translate("ariaRowToggleSelection", "Press Space to toggle row selection");
          this.eCheckbox.setValue(state, true);
          this.eCheckbox.setInputAriaLabel(ariaLabel + " (" + stateName + ")");
        };
        CheckboxSelectionComponent2.prototype.onCheckedClicked = function(event) {
          var groupSelectsFiltered = this.gridOptionsWrapper.isGroupSelectsFiltered();
          var updatedCount = this.rowNode.setSelectedParams({ newValue: false, rangeSelect: event.shiftKey, groupSelectsFiltered });
          return updatedCount;
        };
        CheckboxSelectionComponent2.prototype.onUncheckedClicked = function(event) {
          var groupSelectsFiltered = this.gridOptionsWrapper.isGroupSelectsFiltered();
          var updatedCount = this.rowNode.setSelectedParams({ newValue: true, rangeSelect: event.shiftKey, groupSelectsFiltered });
          return updatedCount;
        };
        CheckboxSelectionComponent2.prototype.init = function(params) {
          var _this = this;
          this.rowNode = params.rowNode;
          this.column = params.column;
          this.onSelectionChanged();
          this.addGuiEventListener("click", function(event) {
            return stopPropagationForAgGrid(event);
          });
          this.addGuiEventListener("dblclick", function(event) {
            return stopPropagationForAgGrid(event);
          });
          this.addManagedListener(this.eCheckbox.getInputElement(), "click", function(event) {
            var isSelected = _this.eCheckbox.getValue();
            var previousValue = _this.eCheckbox.getPreviousValue();
            if (previousValue === void 0) {
              var result = _this.onUncheckedClicked(event || {});
              if (result === 0) {
                _this.onCheckedClicked(event);
              }
            } else if (isSelected) {
              _this.onCheckedClicked(event);
            } else {
              _this.onUncheckedClicked(event || {});
            }
          });
          this.addManagedListener(this.rowNode, RowNode.EVENT_ROW_SELECTED, this.onSelectionChanged.bind(this));
          this.addManagedListener(this.rowNode, RowNode.EVENT_DATA_CHANGED, this.onDataChanged.bind(this));
          this.addManagedListener(this.rowNode, RowNode.EVENT_SELECTABLE_CHANGED, this.onSelectableChanged.bind(this));
          var isRowSelectableFunc = this.gridOptionsWrapper.getIsRowSelectableFunc();
          var checkboxVisibleIsDynamic = isRowSelectableFunc || this.checkboxCallbackExists();
          if (checkboxVisibleIsDynamic) {
            var showOrHideSelectListener = this.showOrHideSelect.bind(this);
            this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, showOrHideSelectListener);
            this.addManagedListener(this.rowNode, RowNode.EVENT_DATA_CHANGED, showOrHideSelectListener);
            this.addManagedListener(this.rowNode, RowNode.EVENT_CELL_CHANGED, showOrHideSelectListener);
            this.showOrHideSelect();
          }
          this.eCheckbox.getInputElement().setAttribute("tabindex", "-1");
        };
        CheckboxSelectionComponent2.prototype.showOrHideSelect = function() {
          var selectable = this.rowNode.selectable;
          if (selectable && this.checkboxCallbackExists()) {
            selectable = this.column.isCellCheckboxSelection(this.rowNode);
          }
          this.setVisible(selectable);
        };
        CheckboxSelectionComponent2.prototype.checkboxCallbackExists = function() {
          var colDef = this.column ? this.column.getColDef() : null;
          return !!colDef && typeof colDef.checkboxSelection === "function";
        };
        __decorate$x([
          RefSelector("eCheckbox")
        ], CheckboxSelectionComponent2.prototype, "eCheckbox", void 0);
        __decorate$x([
          PostConstruct
        ], CheckboxSelectionComponent2.prototype, "postConstruct", null);
        return CheckboxSelectionComponent2;
      }(Component)
    );
    var __extends$C = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$y = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    (function(DragSourceType) {
      DragSourceType[DragSourceType["ToolPanel"] = 0] = "ToolPanel";
      DragSourceType[DragSourceType["HeaderCell"] = 1] = "HeaderCell";
      DragSourceType[DragSourceType["RowDrag"] = 2] = "RowDrag";
      DragSourceType[DragSourceType["ChartPanel"] = 3] = "ChartPanel";
    })(exports.DragSourceType || (exports.DragSourceType = {}));
    (function(VerticalDirection) {
      VerticalDirection[VerticalDirection["Up"] = 0] = "Up";
      VerticalDirection[VerticalDirection["Down"] = 1] = "Down";
    })(exports.VerticalDirection || (exports.VerticalDirection = {}));
    (function(HorizontalDirection) {
      HorizontalDirection[HorizontalDirection["Left"] = 0] = "Left";
      HorizontalDirection[HorizontalDirection["Right"] = 1] = "Right";
    })(exports.HorizontalDirection || (exports.HorizontalDirection = {}));
    var DragAndDropService = (
      /** @class */
      function(_super) {
        __extends$C(DragAndDropService2, _super);
        function DragAndDropService2() {
          var _this = _super !== null && _super.apply(this, arguments) || this;
          _this.dragSourceAndParamsList = [];
          _this.dropTargets = [];
          return _this;
        }
        DragAndDropService_1 = DragAndDropService2;
        DragAndDropService2.prototype.init = function() {
          this.ePinnedIcon = createIcon("columnMovePin", this.gridOptionsWrapper, null);
          this.eHideIcon = createIcon("columnMoveHide", this.gridOptionsWrapper, null);
          this.eMoveIcon = createIcon("columnMoveMove", this.gridOptionsWrapper, null);
          this.eLeftIcon = createIcon("columnMoveLeft", this.gridOptionsWrapper, null);
          this.eRightIcon = createIcon("columnMoveRight", this.gridOptionsWrapper, null);
          this.eGroupIcon = createIcon("columnMoveGroup", this.gridOptionsWrapper, null);
          this.eAggregateIcon = createIcon("columnMoveValue", this.gridOptionsWrapper, null);
          this.ePivotIcon = createIcon("columnMovePivot", this.gridOptionsWrapper, null);
          this.eDropNotAllowedIcon = createIcon("dropNotAllowed", this.gridOptionsWrapper, null);
        };
        DragAndDropService2.prototype.addDragSource = function(dragSource, allowTouch) {
          if (allowTouch === void 0) {
            allowTouch = false;
          }
          var params = {
            eElement: dragSource.eElement,
            dragStartPixels: dragSource.dragStartPixels,
            onDragStart: this.onDragStart.bind(this, dragSource),
            onDragStop: this.onDragStop.bind(this),
            onDragging: this.onDragging.bind(this)
          };
          this.dragSourceAndParamsList.push({ params, dragSource });
          this.dragService.addDragSource(params, allowTouch);
        };
        DragAndDropService2.prototype.removeDragSource = function(dragSource) {
          var sourceAndParams = find(this.dragSourceAndParamsList, function(item) {
            return item.dragSource === dragSource;
          });
          if (sourceAndParams) {
            this.dragService.removeDragSource(sourceAndParams.params);
            removeFromArray(this.dragSourceAndParamsList, sourceAndParams);
          }
        };
        DragAndDropService2.prototype.clearDragSourceParamsList = function() {
          var _this = this;
          this.dragSourceAndParamsList.forEach(function(sourceAndParams) {
            return _this.dragService.removeDragSource(sourceAndParams.params);
          });
          this.dragSourceAndParamsList.length = 0;
        };
        DragAndDropService2.prototype.nudge = function() {
          if (this.dragging) {
            this.onDragging(this.eventLastTime, true);
          }
        };
        DragAndDropService2.prototype.onDragStart = function(dragSource, mouseEvent) {
          this.dragging = true;
          this.dragSource = dragSource;
          this.eventLastTime = mouseEvent;
          this.dragItem = this.dragSource.getDragItem();
          this.lastDropTarget = this.dragSource.dragSourceDropTarget;
          if (this.dragSource.onDragStarted) {
            this.dragSource.onDragStarted();
          }
          this.createGhost();
        };
        DragAndDropService2.prototype.onDragStop = function(mouseEvent) {
          this.eventLastTime = null;
          this.dragging = false;
          if (this.dragSource.onDragStopped) {
            this.dragSource.onDragStopped();
          }
          if (this.lastDropTarget && this.lastDropTarget.onDragStop) {
            var draggingEvent = this.createDropTargetEvent(this.lastDropTarget, mouseEvent, null, null, false);
            this.lastDropTarget.onDragStop(draggingEvent);
          }
          this.lastDropTarget = null;
          this.dragItem = null;
          this.removeGhost();
        };
        DragAndDropService2.prototype.onDragging = function(mouseEvent, fromNudge) {
          var _this = this;
          var hDirection = this.getHorizontalDirection(mouseEvent);
          var vDirection = this.getVerticalDirection(mouseEvent);
          this.eventLastTime = mouseEvent;
          this.positionGhost(mouseEvent);
          var validDropTargets = this.dropTargets.filter(function(target) {
            return _this.isMouseOnDropTarget(mouseEvent, target);
          });
          var len = validDropTargets.length;
          var dropTarget = null;
          if (len > 0) {
            dropTarget = len === 1 ? validDropTargets[0] : validDropTargets.reduce(function(prevTarget, currTarget) {
              if (!prevTarget) {
                return currTarget;
              }
              var prevContainer = prevTarget.getContainer();
              var currContainer = currTarget.getContainer();
              if (prevContainer.contains(currContainer)) {
                return currTarget;
              }
              return prevTarget;
            });
          }
          if (dropTarget !== this.lastDropTarget) {
            this.leaveLastTargetIfExists(mouseEvent, hDirection, vDirection, fromNudge);
            this.enterDragTargetIfExists(dropTarget, mouseEvent, hDirection, vDirection, fromNudge);
            this.lastDropTarget = dropTarget;
          } else if (dropTarget && dropTarget.onDragging) {
            var draggingEvent = this.createDropTargetEvent(dropTarget, mouseEvent, hDirection, vDirection, fromNudge);
            dropTarget.onDragging(draggingEvent);
          }
        };
        DragAndDropService2.prototype.enterDragTargetIfExists = function(dropTarget, mouseEvent, hDirection, vDirection, fromNudge) {
          if (!dropTarget) {
            return;
          }
          if (dropTarget.onDragEnter) {
            var dragEnterEvent = this.createDropTargetEvent(dropTarget, mouseEvent, hDirection, vDirection, fromNudge);
            dropTarget.onDragEnter(dragEnterEvent);
          }
          this.setGhostIcon(dropTarget.getIconName ? dropTarget.getIconName() : null);
        };
        DragAndDropService2.prototype.leaveLastTargetIfExists = function(mouseEvent, hDirection, vDirection, fromNudge) {
          if (!this.lastDropTarget) {
            return;
          }
          if (this.lastDropTarget.onDragLeave) {
            var dragLeaveEvent = this.createDropTargetEvent(this.lastDropTarget, mouseEvent, hDirection, vDirection, fromNudge);
            this.lastDropTarget.onDragLeave(dragLeaveEvent);
          }
          this.setGhostIcon(null);
        };
        DragAndDropService2.prototype.getAllContainersFromDropTarget = function(dropTarget) {
          var secondaryContainers = dropTarget.getSecondaryContainers ? dropTarget.getSecondaryContainers() : null;
          var containers = [[dropTarget.getContainer()]];
          return secondaryContainers ? containers.concat(secondaryContainers) : containers;
        };
        DragAndDropService2.prototype.allContainersIntersect = function(mouseEvent, containers) {
          for (var _i = 0, containers_1 = containers; _i < containers_1.length; _i++) {
            var container = containers_1[_i];
            var rect = container.getBoundingClientRect();
            if (rect.width === 0 || rect.height === 0) {
              return false;
            }
            var horizontalFit = mouseEvent.clientX >= rect.left && mouseEvent.clientX < rect.right;
            var verticalFit = mouseEvent.clientY >= rect.top && mouseEvent.clientY < rect.bottom;
            if (!horizontalFit || !verticalFit) {
              return false;
            }
          }
          return true;
        };
        DragAndDropService2.prototype.isMouseOnDropTarget = function(mouseEvent, dropTarget) {
          var allContainersFromDropTarget = this.getAllContainersFromDropTarget(dropTarget);
          var mouseOverTarget = false;
          for (var _i = 0, allContainersFromDropTarget_1 = allContainersFromDropTarget; _i < allContainersFromDropTarget_1.length; _i++) {
            var currentContainers = allContainersFromDropTarget_1[_i];
            if (this.allContainersIntersect(mouseEvent, currentContainers)) {
              mouseOverTarget = true;
              break;
            }
          }
          return mouseOverTarget && dropTarget.isInterestedIn(this.dragSource.type);
        };
        DragAndDropService2.prototype.addDropTarget = function(dropTarget) {
          this.dropTargets.push(dropTarget);
        };
        DragAndDropService2.prototype.removeDropTarget = function(dropTarget) {
          this.dropTargets = this.dropTargets.filter(function(target) {
            return target.getContainer() !== dropTarget.getContainer();
          });
        };
        DragAndDropService2.prototype.hasExternalDropZones = function() {
          return this.dropTargets.some(function(zones) {
            return zones.external;
          });
        };
        DragAndDropService2.prototype.findExternalZone = function(params) {
          var externalTargets = this.dropTargets.filter(function(target) {
            return target.external;
          });
          return find(externalTargets, function(zone) {
            return zone.getContainer() === params.getContainer();
          });
        };
        DragAndDropService2.prototype.getHorizontalDirection = function(event) {
          var clientX = this.eventLastTime && this.eventLastTime.clientX;
          var eClientX = event.clientX;
          if (clientX === eClientX) {
            return null;
          }
          return clientX > eClientX ? exports.HorizontalDirection.Left : exports.HorizontalDirection.Right;
        };
        DragAndDropService2.prototype.getVerticalDirection = function(event) {
          var clientY = this.eventLastTime && this.eventLastTime.clientY;
          var eClientY = event.clientY;
          if (clientY === eClientY) {
            return null;
          }
          return clientY > eClientY ? exports.VerticalDirection.Up : exports.VerticalDirection.Down;
        };
        DragAndDropService2.prototype.createDropTargetEvent = function(dropTarget, event, hDirection, vDirection, fromNudge) {
          var dropZoneTarget = dropTarget.getContainer();
          var rect = dropZoneTarget.getBoundingClientRect();
          var _a2 = this, api = _a2.gridApi, columnApi = _a2.columnApi, dragItem = _a2.dragItem, dragSource = _a2.dragSource;
          var x = event.clientX - rect.left;
          var y = event.clientY - rect.top;
          return { event, x, y, vDirection, hDirection, dragSource, fromNudge, dragItem, api, columnApi, dropZoneTarget };
        };
        DragAndDropService2.prototype.positionGhost = function(event) {
          var ghost = this.eGhost;
          if (!ghost) {
            return;
          }
          var ghostRect = ghost.getBoundingClientRect();
          var ghostHeight = ghostRect.height;
          var browserWidth = getBodyWidth() - 2;
          var browserHeight = getBodyHeight() - 2;
          var top = event.pageY - ghostHeight / 2;
          var left = event.pageX - 10;
          var usrDocument = this.gridOptionsWrapper.getDocument();
          var windowScrollY = window.pageYOffset || usrDocument.documentElement.scrollTop;
          var windowScrollX = window.pageXOffset || usrDocument.documentElement.scrollLeft;
          if (browserWidth > 0 && left + ghost.clientWidth > browserWidth + windowScrollX) {
            left = browserWidth + windowScrollX - ghost.clientWidth;
          }
          if (left < 0) {
            left = 0;
          }
          if (browserHeight > 0 && top + ghost.clientHeight > browserHeight + windowScrollY) {
            top = browserHeight + windowScrollY - ghost.clientHeight;
          }
          if (top < 0) {
            top = 0;
          }
          ghost.style.left = left + "px";
          ghost.style.top = top + "px";
        };
        DragAndDropService2.prototype.removeGhost = function() {
          if (this.eGhost && this.eGhostParent) {
            this.eGhostParent.removeChild(this.eGhost);
          }
          this.eGhost = null;
        };
        DragAndDropService2.prototype.createGhost = function() {
          this.eGhost = loadTemplate(DragAndDropService_1.GHOST_TEMPLATE);
          var theme = this.environment.getTheme().theme;
          if (theme) {
            addCssClass(this.eGhost, theme);
          }
          this.eGhostIcon = this.eGhost.querySelector(".ag-dnd-ghost-icon");
          this.setGhostIcon(null);
          var eText = this.eGhost.querySelector(".ag-dnd-ghost-label");
          var dragItemName = this.dragSource.dragItemName;
          if (isFunction(dragItemName)) {
            dragItemName = dragItemName();
          }
          eText.innerHTML = escapeString(dragItemName) || "";
          this.eGhost.style.height = "25px";
          this.eGhost.style.top = "20px";
          this.eGhost.style.left = "20px";
          var usrDocument = this.gridOptionsWrapper.getDocument();
          var targetEl = usrDocument.fullscreenElement || usrDocument.querySelector("body");
          this.eGhostParent = targetEl;
          if (!this.eGhostParent) {
            console.warn("AG Grid: could not find document body, it is needed for dragging columns");
          } else {
            this.eGhostParent.appendChild(this.eGhost);
          }
        };
        DragAndDropService2.prototype.setGhostIcon = function(iconName, shake) {
          if (shake === void 0) {
            shake = false;
          }
          clearElement(this.eGhostIcon);
          var eIcon = null;
          if (!iconName) {
            iconName = this.dragSource.defaultIconName || DragAndDropService_1.ICON_NOT_ALLOWED;
          }
          switch (iconName) {
            case DragAndDropService_1.ICON_PINNED:
              eIcon = this.ePinnedIcon;
              break;
            case DragAndDropService_1.ICON_MOVE:
              eIcon = this.eMoveIcon;
              break;
            case DragAndDropService_1.ICON_LEFT:
              eIcon = this.eLeftIcon;
              break;
            case DragAndDropService_1.ICON_RIGHT:
              eIcon = this.eRightIcon;
              break;
            case DragAndDropService_1.ICON_GROUP:
              eIcon = this.eGroupIcon;
              break;
            case DragAndDropService_1.ICON_AGGREGATE:
              eIcon = this.eAggregateIcon;
              break;
            case DragAndDropService_1.ICON_PIVOT:
              eIcon = this.ePivotIcon;
              break;
            case DragAndDropService_1.ICON_NOT_ALLOWED:
              eIcon = this.eDropNotAllowedIcon;
              break;
            case DragAndDropService_1.ICON_HIDE:
              eIcon = this.eHideIcon;
              break;
          }
          addOrRemoveCssClass(this.eGhostIcon, "ag-shake-left-to-right", shake);
          if (eIcon === this.eHideIcon && this.gridOptionsWrapper.isSuppressDragLeaveHidesColumns()) {
            return;
          }
          if (eIcon) {
            this.eGhostIcon.appendChild(eIcon);
          }
        };
        var DragAndDropService_1;
        DragAndDropService2.ICON_PINNED = "pinned";
        DragAndDropService2.ICON_MOVE = "move";
        DragAndDropService2.ICON_LEFT = "left";
        DragAndDropService2.ICON_RIGHT = "right";
        DragAndDropService2.ICON_GROUP = "group";
        DragAndDropService2.ICON_AGGREGATE = "aggregate";
        DragAndDropService2.ICON_PIVOT = "pivot";
        DragAndDropService2.ICON_NOT_ALLOWED = "notAllowed";
        DragAndDropService2.ICON_HIDE = "hide";
        DragAndDropService2.GHOST_TEMPLATE = '<div class="ag-dnd-ghost ag-unselectable">\n            <span class="ag-dnd-ghost-icon ag-shake-left-to-right"></span>\n            <div class="ag-dnd-ghost-label"></div>\n        </div>';
        __decorate$y([
          Autowired("dragService")
        ], DragAndDropService2.prototype, "dragService", void 0);
        __decorate$y([
          Autowired("environment")
        ], DragAndDropService2.prototype, "environment", void 0);
        __decorate$y([
          Autowired("columnApi")
        ], DragAndDropService2.prototype, "columnApi", void 0);
        __decorate$y([
          Autowired("gridApi")
        ], DragAndDropService2.prototype, "gridApi", void 0);
        __decorate$y([
          PostConstruct
        ], DragAndDropService2.prototype, "init", null);
        __decorate$y([
          PreDestroy
        ], DragAndDropService2.prototype, "clearDragSourceParamsList", null);
        DragAndDropService2 = DragAndDropService_1 = __decorate$y([
          Bean3("dragAndDropService")
        ], DragAndDropService2);
        return DragAndDropService2;
      }(BeanStub)
    );
    var __extends$D = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$z = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var RowDragComp = (
      /** @class */
      function(_super) {
        __extends$D(RowDragComp2, _super);
        function RowDragComp2(cellValueFn, rowNode, column, customGui, dragStartPixels, suppressVisibilityChange) {
          var _this = _super.call(this) || this;
          _this.cellValueFn = cellValueFn;
          _this.rowNode = rowNode;
          _this.column = column;
          _this.customGui = customGui;
          _this.dragStartPixels = dragStartPixels;
          _this.suppressVisibilityChange = suppressVisibilityChange;
          _this.dragSource = null;
          return _this;
        }
        RowDragComp2.prototype.isCustomGui = function() {
          return this.customGui != null;
        };
        RowDragComp2.prototype.postConstruct = function() {
          if (!this.customGui) {
            this.setTemplate(
              /* html */
              '<div class="ag-drag-handle ag-row-drag" aria-hidden="true"></div>'
            );
            this.getGui().appendChild(createIconNoSpan("rowDrag", this.beans.gridOptionsWrapper, null));
            this.addDragSource();
          } else {
            this.setDragElement(this.customGui, this.dragStartPixels);
          }
          this.checkCompatibility();
          if (!this.suppressVisibilityChange) {
            var strategy = this.beans.gridOptionsWrapper.isRowDragManaged() ? new ManagedVisibilityStrategy(this, this.beans, this.rowNode, this.column) : new NonManagedVisibilityStrategy(this, this.beans, this.rowNode, this.column);
            this.createManagedBean(strategy, this.beans.context);
          }
        };
        RowDragComp2.prototype.setDragElement = function(dragElement, dragStartPixels) {
          this.setTemplateFromElement(dragElement);
          this.addDragSource(dragStartPixels);
        };
        RowDragComp2.prototype.getSelectedCount = function() {
          var isRowDragMultiRow = this.beans.gridOptionsWrapper.isRowDragMultiRow();
          if (!isRowDragMultiRow) {
            return 1;
          }
          var selection = this.beans.selectionService.getSelectedNodes();
          return selection.indexOf(this.rowNode) !== -1 ? selection.length : 1;
        };
        RowDragComp2.prototype.checkCompatibility = function() {
          var managed = this.beans.gridOptionsWrapper.isRowDragManaged();
          var treeData = this.beans.gridOptionsWrapper.isTreeData();
          if (treeData && managed) {
            doOnce(function() {
              return console.warn("AG Grid: If using row drag with tree data, you cannot have rowDragManaged=true");
            }, "RowDragComp.managedAndTreeData");
          }
        };
        RowDragComp2.prototype.addDragSource = function(dragStartPixels) {
          var _this = this;
          if (dragStartPixels === void 0) {
            dragStartPixels = 4;
          }
          if (this.dragSource) {
            this.removeDragSource();
          }
          var dragItem = {
            rowNode: this.rowNode,
            columns: this.column ? [this.column] : void 0,
            defaultTextValue: this.cellValueFn()
          };
          var rowDragText = this.column && this.column.getColDef().rowDragText;
          this.dragSource = {
            type: exports.DragSourceType.RowDrag,
            eElement: this.getGui(),
            dragItemName: function() {
              var dragItemCount = _this.getSelectedCount();
              if (rowDragText) {
                return rowDragText(dragItem, dragItemCount);
              }
              return dragItemCount === 1 ? _this.cellValueFn() : dragItemCount + " rows";
            },
            getDragItem: function() {
              return dragItem;
            },
            dragStartPixels,
            dragSourceDomDataKey: this.beans.gridOptionsWrapper.getDomDataKey()
          };
          this.addMouseDownListenerIfNeeded();
          this.beans.dragAndDropService.addDragSource(this.dragSource, true);
        };
        RowDragComp2.prototype.addMouseDownListenerIfNeeded = function() {
          var _this = this;
          if (this.customGui || !this.column || !this.gridOptionsWrapper.isEnableCellTextSelect()) {
            return;
          }
          this.addManagedListener(this.getGui(), "mousedown", function(e) {
            e.preventDefault();
            _this.beans.focusService.setFocusedCell(_this.rowNode.rowIndex, _this.column, _this.rowNode.rowPinned, true);
          });
        };
        RowDragComp2.prototype.removeDragSource = function() {
          if (this.dragSource) {
            this.beans.dragAndDropService.removeDragSource(this.dragSource);
          }
          this.dragSource = null;
        };
        __decorate$z([
          Autowired("beans")
        ], RowDragComp2.prototype, "beans", void 0);
        __decorate$z([
          PostConstruct
        ], RowDragComp2.prototype, "postConstruct", null);
        __decorate$z([
          PreDestroy
        ], RowDragComp2.prototype, "removeDragSource", null);
        return RowDragComp2;
      }(Component)
    );
    var VisibilityStrategy = (
      /** @class */
      function(_super) {
        __extends$D(VisibilityStrategy2, _super);
        function VisibilityStrategy2(parent, rowNode, column) {
          var _this = _super.call(this) || this;
          _this.parent = parent;
          _this.rowNode = rowNode;
          _this.column = column;
          return _this;
        }
        VisibilityStrategy2.prototype.setDisplayedOrVisible = function(neverDisplayed) {
          if (neverDisplayed) {
            this.parent.setDisplayed(false);
          } else {
            var shown = true;
            var isShownSometimes = false;
            if (this.column) {
              shown = this.column.isRowDrag(this.rowNode) || this.parent.isCustomGui();
              isShownSometimes = isFunction(this.column.getColDef().rowDrag);
            }
            if (isShownSometimes) {
              this.parent.setDisplayed(true);
              this.parent.setVisible(shown);
            } else {
              this.parent.setDisplayed(shown);
              this.parent.setVisible(true);
            }
          }
        };
        return VisibilityStrategy2;
      }(BeanStub)
    );
    var NonManagedVisibilityStrategy = (
      /** @class */
      function(_super) {
        __extends$D(NonManagedVisibilityStrategy2, _super);
        function NonManagedVisibilityStrategy2(parent, beans, rowNode, column) {
          var _this = _super.call(this, parent, rowNode, column) || this;
          _this.beans = beans;
          return _this;
        }
        NonManagedVisibilityStrategy2.prototype.postConstruct = function() {
          this.addManagedListener(this.beans.gridOptionsWrapper, "suppressRowDrag", this.onSuppressRowDrag.bind(this));
          this.addManagedListener(this.rowNode, RowNode.EVENT_DATA_CHANGED, this.workOutVisibility.bind(this));
          this.addManagedListener(this.rowNode, RowNode.EVENT_CELL_CHANGED, this.workOutVisibility.bind(this));
          this.addManagedListener(this.rowNode, RowNode.EVENT_CELL_CHANGED, this.workOutVisibility.bind(this));
          this.addManagedListener(this.beans.eventService, Events.EVENT_NEW_COLUMNS_LOADED, this.workOutVisibility.bind(this));
          this.workOutVisibility();
        };
        NonManagedVisibilityStrategy2.prototype.onSuppressRowDrag = function() {
          this.workOutVisibility();
        };
        NonManagedVisibilityStrategy2.prototype.workOutVisibility = function() {
          var neverDisplayed = this.beans.gridOptionsWrapper.isSuppressRowDrag();
          this.setDisplayedOrVisible(neverDisplayed);
        };
        __decorate$z([
          PostConstruct
        ], NonManagedVisibilityStrategy2.prototype, "postConstruct", null);
        return NonManagedVisibilityStrategy2;
      }(VisibilityStrategy)
    );
    var ManagedVisibilityStrategy = (
      /** @class */
      function(_super) {
        __extends$D(ManagedVisibilityStrategy2, _super);
        function ManagedVisibilityStrategy2(parent, beans, rowNode, column) {
          var _this = _super.call(this, parent, rowNode, column) || this;
          _this.beans = beans;
          return _this;
        }
        ManagedVisibilityStrategy2.prototype.postConstruct = function() {
          this.addManagedListener(this.beans.eventService, Events.EVENT_SORT_CHANGED, this.workOutVisibility.bind(this));
          this.addManagedListener(this.beans.eventService, Events.EVENT_FILTER_CHANGED, this.workOutVisibility.bind(this));
          this.addManagedListener(this.beans.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.workOutVisibility.bind(this));
          this.addManagedListener(this.beans.eventService, Events.EVENT_NEW_COLUMNS_LOADED, this.workOutVisibility.bind(this));
          this.addManagedListener(this.rowNode, RowNode.EVENT_DATA_CHANGED, this.workOutVisibility.bind(this));
          this.addManagedListener(this.rowNode, RowNode.EVENT_CELL_CHANGED, this.workOutVisibility.bind(this));
          this.addManagedListener(this.beans.gridOptionsWrapper, "suppressRowDrag", this.onSuppressRowDrag.bind(this));
          this.workOutVisibility();
        };
        ManagedVisibilityStrategy2.prototype.onSuppressRowDrag = function() {
          this.workOutVisibility();
        };
        ManagedVisibilityStrategy2.prototype.workOutVisibility = function() {
          var gridBodyCon = this.beans.ctrlsService.getGridBodyCtrl();
          var rowDragFeature = gridBodyCon.getRowDragFeature();
          var shouldPreventRowMove = rowDragFeature && rowDragFeature.shouldPreventRowMove();
          var suppressRowDrag = this.beans.gridOptionsWrapper.isSuppressRowDrag();
          var hasExternalDropZones = this.beans.dragAndDropService.hasExternalDropZones();
          var neverDisplayed = shouldPreventRowMove && !hasExternalDropZones || suppressRowDrag;
          this.setDisplayedOrVisible(neverDisplayed);
        };
        __decorate$z([
          PostConstruct
        ], ManagedVisibilityStrategy2.prototype, "postConstruct", null);
        return ManagedVisibilityStrategy2;
      }(VisibilityStrategy)
    );
    var __extends$E = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __assign$6 = function() {
      __assign$6 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign$6.apply(this, arguments);
    };
    var __decorate$A = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var GroupCellRendererCtrl = (
      /** @class */
      function(_super) {
        __extends$E(GroupCellRendererCtrl2, _super);
        function GroupCellRendererCtrl2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        GroupCellRendererCtrl2.prototype.init = function(comp, eGui, eCheckbox, eExpanded, eContracted, compClass, params) {
          this.params = params;
          this.eGui = eGui;
          this.eCheckbox = eCheckbox;
          this.eExpanded = eExpanded;
          this.eContracted = eContracted;
          this.comp = comp;
          this.compClass = compClass;
          var topLevelFooter = this.isTopLevelFooter();
          var embeddedRowMismatch = this.isEmbeddedRowMismatch();
          var nullValue = params.value == null;
          var skipCell = false;
          if (this.gridOptionsWrapper.isGroupIncludeFooter() && this.gridOptionsWrapper.isGroupHideOpenParents()) {
            var node = params.node;
            if (node.footer) {
              var showRowGroup = params.colDef && params.colDef.showRowGroup;
              var rowGroupColumnId = node.rowGroupColumn && node.rowGroupColumn.getColId();
              skipCell = showRowGroup !== rowGroupColumnId;
            }
          }
          this.cellIsBlank = topLevelFooter ? false : embeddedRowMismatch || nullValue || skipCell;
          if (this.cellIsBlank) {
            return;
          }
          this.setupShowingValueForOpenedParent();
          this.findDisplayedGroupNode();
          this.addFullWidthRowDraggerIfNeeded();
          this.addExpandAndContract();
          this.addCheckboxIfNeeded();
          this.addValueElement();
          this.setupIndent();
        };
        GroupCellRendererCtrl2.prototype.isTopLevelFooter = function() {
          if (!this.gridOptionsWrapper.isGroupIncludeTotalFooter()) {
            return false;
          }
          if (this.params.value != null || this.params.node.level != -1) {
            return false;
          }
          var colDef = this.params.colDef;
          var doingFullWidth = colDef == null;
          if (doingFullWidth) {
            return true;
          }
          if (colDef.showRowGroup === true) {
            return true;
          }
          var rowGroupCols = this.columnModel.getRowGroupColumns();
          if (!rowGroupCols || rowGroupCols.length === 0) {
            return true;
          }
          var firstRowGroupCol = rowGroupCols[0];
          return firstRowGroupCol.getId() === colDef.showRowGroup;
        };
        GroupCellRendererCtrl2.prototype.isEmbeddedRowMismatch = function() {
          if (!this.params.fullWidth || !this.gridOptionsWrapper.isEmbedFullWidthRows()) {
            return false;
          }
          var pinnedLeftCell = this.params.pinned === Constants.PINNED_LEFT;
          var pinnedRightCell = this.params.pinned === Constants.PINNED_RIGHT;
          var bodyCell = !pinnedLeftCell && !pinnedRightCell;
          if (this.gridOptionsWrapper.isEnableRtl()) {
            if (this.columnModel.isPinningLeft()) {
              return !pinnedRightCell;
            }
            return !bodyCell;
          }
          if (this.columnModel.isPinningLeft()) {
            return !pinnedLeftCell;
          }
          return !bodyCell;
        };
        GroupCellRendererCtrl2.prototype.findDisplayedGroupNode = function() {
          var column = this.params.column;
          var rowNode = this.params.node;
          if (this.showingValueForOpenedParent) {
            var pointer = rowNode.parent;
            while (pointer != null) {
              if (pointer.rowGroupColumn && column.isRowGroupDisplayed(pointer.rowGroupColumn.getId())) {
                this.displayedGroupNode = pointer;
                break;
              }
              pointer = pointer.parent;
            }
          }
          if (missing(this.displayedGroupNode)) {
            this.displayedGroupNode = rowNode;
          }
        };
        GroupCellRendererCtrl2.prototype.setupShowingValueForOpenedParent = function() {
          var rowNode = this.params.node;
          var column = this.params.column;
          if (!this.gridOptionsWrapper.isGroupHideOpenParents()) {
            this.showingValueForOpenedParent = false;
            return;
          }
          if (!rowNode.groupData) {
            this.showingValueForOpenedParent = false;
            return;
          }
          var showingGroupNode = rowNode.rowGroupColumn != null;
          if (showingGroupNode) {
            var keyOfGroupingColumn = rowNode.rowGroupColumn.getId();
            var configuredToShowThisGroupLevel = column.isRowGroupDisplayed(keyOfGroupingColumn);
            if (configuredToShowThisGroupLevel) {
              this.showingValueForOpenedParent = false;
              return;
            }
          }
          var valPresent = rowNode.groupData[column.getId()] != null;
          this.showingValueForOpenedParent = valPresent;
        };
        GroupCellRendererCtrl2.prototype.addValueElement = function() {
          if (this.displayedGroupNode.footer) {
            this.addFooterValue();
          } else {
            this.addGroupValue();
            this.addChildCount();
          }
        };
        GroupCellRendererCtrl2.prototype.addGroupValue = function() {
          var paramsAdjusted = this.adjustParamsWithDetailsFromRelatedColumn();
          var innerCompDetails = this.getInnerCompDetails(paramsAdjusted);
          var valueFormatted = paramsAdjusted.valueFormatted, value = paramsAdjusted.value;
          var valueWhenNoRenderer = valueFormatted != null ? valueFormatted : value;
          this.comp.setInnerRenderer(innerCompDetails, valueWhenNoRenderer);
        };
        GroupCellRendererCtrl2.prototype.adjustParamsWithDetailsFromRelatedColumn = function() {
          var relatedColumn = this.displayedGroupNode.rowGroupColumn;
          var column = this.params.column;
          if (!relatedColumn) {
            return this.params;
          }
          var notFullWidth = column != null;
          if (notFullWidth) {
            var showingThisRowGroup = column.isRowGroupDisplayed(relatedColumn.getId());
            if (!showingThisRowGroup) {
              return this.params;
            }
          }
          var params = this.params;
          var _a2 = this.params, value = _a2.value, scope = _a2.scope, node = _a2.node;
          var valueFormatted = this.valueFormatterService.formatValue(relatedColumn, node, scope, value);
          var paramsAdjusted = __assign$6(__assign$6({}, params), { valueFormatted });
          return paramsAdjusted;
        };
        GroupCellRendererCtrl2.prototype.addFooterValue = function() {
          var footerValueGetter = this.params.footerValueGetter;
          var footerValue = "";
          if (footerValueGetter) {
            var paramsClone = cloneObject(this.params);
            paramsClone.value = this.params.value;
            if (typeof footerValueGetter === "function") {
              footerValue = footerValueGetter(paramsClone);
            } else if (typeof footerValueGetter === "string") {
              footerValue = this.expressionService.evaluate(footerValueGetter, paramsClone);
            } else {
              console.warn("AG Grid: footerValueGetter should be either a function or a string (expression)");
            }
          } else {
            footerValue = "Total " + (this.params.value != null ? this.params.value : "");
          }
          var innerCompDetails = this.getInnerCompDetails(this.params);
          this.comp.setInnerRenderer(innerCompDetails, footerValue);
        };
        GroupCellRendererCtrl2.prototype.getInnerCompDetails = function(params) {
          var _this = this;
          if (params.fullWidth) {
            return this.userComponentFactory.getFullWidthGroupRowInnerCellRenderer(this.gridOptions.groupRowRendererParams, params);
          }
          var innerCompDetails = this.userComponentFactory.getInnerRendererDetails(params, params);
          var isGroupRowRenderer = function(details) {
            return details && details.componentClass == _this.compClass;
          };
          if (innerCompDetails && !isGroupRowRenderer(innerCompDetails)) {
            return innerCompDetails;
          }
          var relatedColumn = this.displayedGroupNode.rowGroupColumn;
          var relatedColDef = relatedColumn ? relatedColumn.getColDef() : void 0;
          if (!relatedColDef) {
            return;
          }
          var relatedCompDetails = this.userComponentFactory.getCellRendererDetails(relatedColDef, params);
          if (relatedCompDetails && !isGroupRowRenderer(relatedCompDetails)) {
            return relatedCompDetails;
          }
          if (isGroupRowRenderer(relatedCompDetails) && relatedColDef.cellRendererParams && relatedColDef.cellRendererParams.innerRenderer) {
            var res = this.userComponentFactory.getInnerRendererDetails(relatedColDef.cellRendererParams, params);
            return res;
          }
        };
        GroupCellRendererCtrl2.prototype.addChildCount = function() {
          if (this.params.suppressCount) {
            return;
          }
          this.addManagedListener(this.displayedGroupNode, RowNode.EVENT_ALL_CHILDREN_COUNT_CHANGED, this.updateChildCount.bind(this));
          this.updateChildCount();
        };
        GroupCellRendererCtrl2.prototype.updateChildCount = function() {
          var allChildrenCount = this.displayedGroupNode.allChildrenCount;
          var showingGroupForThisNode = this.isShowRowGroupForThisRow();
          var showCount = showingGroupForThisNode && allChildrenCount != null && allChildrenCount >= 0;
          var countString = showCount ? "(" + allChildrenCount + ")" : "";
          this.comp.setChildCount(countString);
        };
        GroupCellRendererCtrl2.prototype.isShowRowGroupForThisRow = function() {
          if (this.gridOptionsWrapper.isTreeData()) {
            return true;
          }
          var rowGroupColumn = this.displayedGroupNode.rowGroupColumn;
          if (!rowGroupColumn) {
            return false;
          }
          var column = this.params.column;
          var thisColumnIsInterested = column == null || column.isRowGroupDisplayed(rowGroupColumn.getId());
          return thisColumnIsInterested;
        };
        GroupCellRendererCtrl2.prototype.addExpandAndContract = function() {
          var params = this.params;
          var eExpandedIcon = createIconNoSpan("groupExpanded", this.gridOptionsWrapper, null);
          var eContractedIcon = createIconNoSpan("groupContracted", this.gridOptionsWrapper, null);
          if (eExpandedIcon) {
            this.eExpanded.appendChild(eExpandedIcon);
          }
          if (eContractedIcon) {
            this.eContracted.appendChild(eContractedIcon);
          }
          var eGroupCell = params.eGridCell;
          if (!this.gridOptionsWrapper.isEnableGroupEdit() && this.isExpandable() && !params.suppressDoubleClickExpand) {
            this.addManagedListener(eGroupCell, "dblclick", this.onCellDblClicked.bind(this));
          }
          this.addManagedListener(this.eExpanded, "click", this.onExpandClicked.bind(this));
          this.addManagedListener(this.eContracted, "click", this.onExpandClicked.bind(this));
          this.addManagedListener(eGroupCell, "keydown", this.onKeyDown.bind(this));
          this.addManagedListener(params.node, RowNode.EVENT_EXPANDED_CHANGED, this.showExpandAndContractIcons.bind(this));
          this.showExpandAndContractIcons();
          var expandableChangedListener = this.onRowNodeIsExpandableChanged.bind(this);
          this.addManagedListener(this.displayedGroupNode, RowNode.EVENT_ALL_CHILDREN_COUNT_CHANGED, expandableChangedListener);
          this.addManagedListener(this.displayedGroupNode, RowNode.EVENT_MASTER_CHANGED, expandableChangedListener);
          this.addManagedListener(this.displayedGroupNode, RowNode.EVENT_HAS_CHILDREN_CHANGED, expandableChangedListener);
        };
        GroupCellRendererCtrl2.prototype.onExpandClicked = function(mouseEvent) {
          if (isStopPropagationForAgGrid(mouseEvent)) {
            return;
          }
          stopPropagationForAgGrid(mouseEvent);
          this.onExpandOrContract();
        };
        GroupCellRendererCtrl2.prototype.onExpandOrContract = function() {
          var rowNode = this.displayedGroupNode;
          var nextExpandState = !rowNode.expanded;
          rowNode.setExpanded(nextExpandState);
        };
        GroupCellRendererCtrl2.prototype.isExpandable = function() {
          if (this.showingValueForOpenedParent) {
            return true;
          }
          var rowNode = this.displayedGroupNode;
          var reducedLeafNode = this.columnModel.isPivotMode() && rowNode.leafGroup;
          var expandableGroup = rowNode.isExpandable() && !rowNode.footer && !reducedLeafNode;
          if (!expandableGroup) {
            return false;
          }
          var column = this.params.column;
          var displayingForOneColumnOnly = column != null && typeof column.getColDef().showRowGroup === "string";
          if (displayingForOneColumnOnly) {
            var showing = this.isShowRowGroupForThisRow();
            return showing;
          }
          return true;
        };
        GroupCellRendererCtrl2.prototype.showExpandAndContractIcons = function() {
          var _a2 = this, params = _a2.params, displayedGroup = _a2.displayedGroupNode, columnModel = _a2.columnModel;
          var node = params.node;
          var isExpandable = this.isExpandable();
          if (isExpandable) {
            var expanded = this.showingValueForOpenedParent ? true : node.expanded;
            this.comp.setExpandedDisplayed(expanded);
            this.comp.setContractedDisplayed(!expanded);
          } else {
            this.comp.setExpandedDisplayed(false);
            this.comp.setContractedDisplayed(false);
          }
          var pivotMode = columnModel.isPivotMode();
          var pivotModeAndLeafGroup = pivotMode && displayedGroup.leafGroup;
          var addExpandableCss = isExpandable && !pivotModeAndLeafGroup;
          var isTotalFooterNode = node.footer && node.level === -1;
          this.comp.addOrRemoveCssClass("ag-cell-expandable", addExpandableCss);
          this.comp.addOrRemoveCssClass("ag-row-group", addExpandableCss);
          if (pivotMode) {
            this.comp.addOrRemoveCssClass("ag-pivot-leaf-group", pivotModeAndLeafGroup);
          } else if (!isTotalFooterNode) {
            this.comp.addOrRemoveCssClass("ag-row-group-leaf-indent", !addExpandableCss);
          }
        };
        GroupCellRendererCtrl2.prototype.onRowNodeIsExpandableChanged = function() {
          this.showExpandAndContractIcons();
          this.setIndent();
        };
        GroupCellRendererCtrl2.prototype.setupIndent = function() {
          var node = this.params.node;
          var suppressPadding = this.params.suppressPadding;
          if (!suppressPadding) {
            this.addManagedListener(node, RowNode.EVENT_UI_LEVEL_CHANGED, this.setIndent.bind(this));
            this.setIndent();
          }
        };
        GroupCellRendererCtrl2.prototype.setIndent = function() {
          if (this.gridOptionsWrapper.isGroupHideOpenParents()) {
            return;
          }
          var params = this.params;
          var rowNode = params.node;
          var fullWithRow = !!params.colDef;
          var treeData = this.gridOptionsWrapper.isTreeData();
          var manyDimensionThisColumn = !fullWithRow || treeData || params.colDef.showRowGroup === true;
          var paddingCount = manyDimensionThisColumn ? rowNode.uiLevel : 0;
          var userProvidedPaddingPixelsTheDeprecatedWay = params.padding >= 0;
          if (userProvidedPaddingPixelsTheDeprecatedWay) {
            doOnce(function() {
              return console.warn("AG Grid: cellRendererParams.padding no longer works, it was deprecated in since v14.2 and removed in v26, configuring padding for groupCellRenderer should be done with Sass variables and themes. Please see the AG Grid documentation page for Themes, in particular the property $row-group-indent-size.");
            }, "groupCellRenderer->doDeprecatedWay");
          }
          if (this.indentClass) {
            this.comp.addOrRemoveCssClass(this.indentClass, false);
          }
          this.indentClass = "ag-row-group-indent-" + paddingCount;
          this.comp.addOrRemoveCssClass(this.indentClass, true);
        };
        GroupCellRendererCtrl2.prototype.addFullWidthRowDraggerIfNeeded = function() {
          var _this = this;
          if (!this.params.fullWidth || !this.params.rowDrag) {
            return;
          }
          var rowDragComp = new RowDragComp(function() {
            return _this.params.value;
          }, this.params.node);
          this.createManagedBean(rowDragComp, this.context);
          this.eGui.insertAdjacentElement("afterbegin", rowDragComp.getGui());
        };
        GroupCellRendererCtrl2.prototype.isUserWantsSelected = function() {
          var paramsCheckbox = this.params.checkbox;
          if (typeof paramsCheckbox === "function") {
            return paramsCheckbox(this.params);
          }
          return paramsCheckbox === true;
        };
        GroupCellRendererCtrl2.prototype.addCheckboxIfNeeded = function() {
          var _this = this;
          var rowNode = this.displayedGroupNode;
          var checkboxNeeded = this.isUserWantsSelected() && // footers cannot be selected
          !rowNode.footer && // pinned rows cannot be selected
          !rowNode.rowPinned && // details cannot be selected
          !rowNode.detail;
          if (checkboxNeeded) {
            var cbSelectionComponent_1 = new CheckboxSelectionComponent();
            this.getContext().createBean(cbSelectionComponent_1);
            cbSelectionComponent_1.init({ rowNode, column: this.params.column });
            this.eCheckbox.appendChild(cbSelectionComponent_1.getGui());
            this.addDestroyFunc(function() {
              return _this.getContext().destroyBean(cbSelectionComponent_1);
            });
          }
          this.comp.setCheckboxVisible(checkboxNeeded);
        };
        GroupCellRendererCtrl2.prototype.onKeyDown = function(event) {
          var enterKeyPressed = isKeyPressed(event, KeyCode.ENTER);
          if (!enterKeyPressed || this.params.suppressEnterExpand) {
            return;
          }
          var cellEditable = this.params.column && this.params.column.isCellEditable(this.params.node);
          if (cellEditable) {
            return;
          }
          this.onExpandOrContract();
        };
        GroupCellRendererCtrl2.prototype.onCellDblClicked = function(mouseEvent) {
          if (isStopPropagationForAgGrid(mouseEvent)) {
            return;
          }
          var targetIsExpandIcon = isElementInEventPath(this.eExpanded, mouseEvent) || isElementInEventPath(this.eContracted, mouseEvent);
          if (!targetIsExpandIcon) {
            this.onExpandOrContract();
          }
        };
        __decorate$A([
          Autowired("expressionService")
        ], GroupCellRendererCtrl2.prototype, "expressionService", void 0);
        __decorate$A([
          Autowired("valueFormatterService")
        ], GroupCellRendererCtrl2.prototype, "valueFormatterService", void 0);
        __decorate$A([
          Autowired("columnModel")
        ], GroupCellRendererCtrl2.prototype, "columnModel", void 0);
        __decorate$A([
          Autowired("userComponentFactory")
        ], GroupCellRendererCtrl2.prototype, "userComponentFactory", void 0);
        __decorate$A([
          Autowired("gridOptions")
        ], GroupCellRendererCtrl2.prototype, "gridOptions", void 0);
        return GroupCellRendererCtrl2;
      }(BeanStub)
    );
    var __extends$F = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$B = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var GroupCellRenderer = (
      /** @class */
      function(_super) {
        __extends$F(GroupCellRenderer2, _super);
        function GroupCellRenderer2() {
          return _super.call(this, GroupCellRenderer2.TEMPLATE) || this;
        }
        GroupCellRenderer2.prototype.init = function(params) {
          var _this = this;
          var compProxy = {
            setInnerRenderer: function(compDetails, valueToDisplay) {
              return _this.setRenderDetails(compDetails, valueToDisplay);
            },
            setChildCount: function(count) {
              return _this.eChildCount.innerHTML = count;
            },
            addOrRemoveCssClass: function(cssClass, value) {
              return _this.addOrRemoveCssClass(cssClass, value);
            },
            setContractedDisplayed: function(expanded) {
              return setDisplayed(_this.eContracted, expanded);
            },
            setExpandedDisplayed: function(expanded) {
              return setDisplayed(_this.eExpanded, expanded);
            },
            setCheckboxVisible: function(visible) {
              return addOrRemoveCssClass(_this.eCheckbox, "ag-invisible", !visible);
            }
          };
          var ctrl = this.createManagedBean(new GroupCellRendererCtrl());
          var fullWidth = !params.colDef;
          var eGui = this.getGui();
          ctrl.init(compProxy, eGui, this.eCheckbox, this.eExpanded, this.eContracted, this.constructor, params);
          if (fullWidth) {
            setAriaRole(eGui, "gridcell");
          }
        };
        GroupCellRenderer2.prototype.setRenderDetails = function(compDetails, valueToDisplay) {
          var _this = this;
          if (compDetails) {
            var componentPromise = compDetails.newAgStackInstance();
            if (!componentPromise) {
              return;
            }
            componentPromise.then(function(comp) {
              if (!comp) {
                return;
              }
              var destroyComp = function() {
                return _this.context.destroyBean(comp);
              };
              if (_this.isAlive()) {
                _this.eValue.appendChild(comp.getGui());
                _this.addDestroyFunc(destroyComp);
              } else {
                destroyComp();
              }
            });
          } else {
            this.eValue.innerText = valueToDisplay;
          }
        };
        GroupCellRenderer2.prototype.destroy = function() {
          this.getContext().destroyBean(this.innerCellRenderer);
          _super.prototype.destroy.call(this);
        };
        GroupCellRenderer2.prototype.refresh = function() {
          return false;
        };
        GroupCellRenderer2.TEMPLATE = '<span class="ag-cell-wrapper">\n            <span class="ag-group-expanded" ref="eExpanded"></span>\n            <span class="ag-group-contracted" ref="eContracted"></span>\n            <span class="ag-group-checkbox ag-invisible" ref="eCheckbox"></span>\n            <span class="ag-group-value" ref="eValue"></span>\n            <span class="ag-group-child-count" ref="eChildCount"></span>\n        </span>';
        __decorate$B([
          Autowired("userComponentFactory")
        ], GroupCellRenderer2.prototype, "userComponentFactory", void 0);
        __decorate$B([
          RefSelector("eExpanded")
        ], GroupCellRenderer2.prototype, "eExpanded", void 0);
        __decorate$B([
          RefSelector("eContracted")
        ], GroupCellRenderer2.prototype, "eContracted", void 0);
        __decorate$B([
          RefSelector("eCheckbox")
        ], GroupCellRenderer2.prototype, "eCheckbox", void 0);
        __decorate$B([
          RefSelector("eValue")
        ], GroupCellRenderer2.prototype, "eValue", void 0);
        __decorate$B([
          RefSelector("eChildCount")
        ], GroupCellRenderer2.prototype, "eChildCount", void 0);
        return GroupCellRenderer2;
      }(Component)
    );
    var __extends$G = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$C = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var LoadingCellRenderer = (
      /** @class */
      function(_super) {
        __extends$G(LoadingCellRenderer2, _super);
        function LoadingCellRenderer2() {
          return _super.call(this, LoadingCellRenderer2.TEMPLATE) || this;
        }
        LoadingCellRenderer2.prototype.init = function(params) {
          params.node.failedLoad ? this.setupFailed() : this.setupLoading();
        };
        LoadingCellRenderer2.prototype.setupFailed = function() {
          this.eLoadingText.innerText = "ERR";
        };
        LoadingCellRenderer2.prototype.setupLoading = function() {
          var eLoadingIcon = createIconNoSpan("groupLoading", this.gridOptionsWrapper, null);
          if (eLoadingIcon) {
            this.eLoadingIcon.appendChild(eLoadingIcon);
          }
          var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
          this.eLoadingText.innerText = localeTextFunc("loadingOoo", "Loading");
        };
        LoadingCellRenderer2.prototype.refresh = function(params) {
          return false;
        };
        LoadingCellRenderer2.TEMPLATE = '<div class="ag-loading">\n            <span class="ag-loading-icon" ref="eLoadingIcon"></span>\n            <span class="ag-loading-text" ref="eLoadingText"></span>\n        </div>';
        __decorate$C([
          RefSelector("eLoadingIcon")
        ], LoadingCellRenderer2.prototype, "eLoadingIcon", void 0);
        __decorate$C([
          RefSelector("eLoadingText")
        ], LoadingCellRenderer2.prototype, "eLoadingText", void 0);
        return LoadingCellRenderer2;
      }(Component)
    );
    var __extends$H = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var LoadingOverlayComponent = (
      /** @class */
      function(_super) {
        __extends$H(LoadingOverlayComponent2, _super);
        function LoadingOverlayComponent2() {
          return _super.call(this) || this;
        }
        LoadingOverlayComponent2.prototype.destroy = function() {
          _super.prototype.destroy.call(this);
        };
        LoadingOverlayComponent2.prototype.init = function(params) {
          var template = this.gridOptionsWrapper.getOverlayLoadingTemplate() ? this.gridOptionsWrapper.getOverlayLoadingTemplate() : LoadingOverlayComponent2.DEFAULT_LOADING_OVERLAY_TEMPLATE;
          var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
          var localisedTemplate = template.replace("[LOADING...]", localeTextFunc("loadingOoo", "Loading..."));
          this.setTemplate(localisedTemplate);
        };
        LoadingOverlayComponent2.DEFAULT_LOADING_OVERLAY_TEMPLATE = '<span class="ag-overlay-loading-center">[LOADING...]</span>';
        return LoadingOverlayComponent2;
      }(Component)
    );
    var __extends$I = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var NoRowsOverlayComponent = (
      /** @class */
      function(_super) {
        __extends$I(NoRowsOverlayComponent2, _super);
        function NoRowsOverlayComponent2() {
          return _super.call(this) || this;
        }
        NoRowsOverlayComponent2.prototype.destroy = function() {
          _super.prototype.destroy.call(this);
        };
        NoRowsOverlayComponent2.prototype.init = function(params) {
          var template = this.gridOptionsWrapper.getOverlayNoRowsTemplate() ? this.gridOptionsWrapper.getOverlayNoRowsTemplate() : NoRowsOverlayComponent2.DEFAULT_NO_ROWS_TEMPLATE;
          var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
          var localisedTemplate = template.replace("[NO_ROWS_TO_SHOW]", localeTextFunc("noRowsToShow", "No Rows To Show"));
          this.setTemplate(localisedTemplate);
        };
        NoRowsOverlayComponent2.DEFAULT_NO_ROWS_TEMPLATE = '<span class="ag-overlay-no-rows-center">[NO_ROWS_TO_SHOW]</span>';
        return NoRowsOverlayComponent2;
      }(Component)
    );
    var __extends$J = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var TooltipComponent = (
      /** @class */
      function(_super) {
        __extends$J(TooltipComponent2, _super);
        function TooltipComponent2() {
          return _super.call(
            this,
            /* html */
            '<div class="ag-tooltip"></div>'
          ) || this;
        }
        TooltipComponent2.prototype.init = function(params) {
          var value = params.value;
          this.getGui().innerHTML = escapeString(value);
        };
        return TooltipComponent2;
      }(PopupComponent)
    );
    var __extends$K = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$D = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var UserComponentRegistry = (
      /** @class */
      function(_super) {
        __extends$K(UserComponentRegistry2, _super);
        function UserComponentRegistry2() {
          var _this = _super !== null && _super.apply(this, arguments) || this;
          _this.agGridDefaults = {
            //date
            agDateInput: DefaultDateComponent,
            //header
            agColumnHeader: HeaderComp,
            agColumnGroupHeader: HeaderGroupComp,
            //floating filters
            agTextColumnFloatingFilter: TextFloatingFilter,
            agNumberColumnFloatingFilter: NumberFloatingFilter,
            agDateColumnFloatingFilter: DateFloatingFilter,
            agReadOnlyFloatingFilter: ReadOnlyFloatingFilter,
            // renderers
            agAnimateShowChangeCellRenderer: AnimateShowChangeCellRenderer,
            agAnimateSlideCellRenderer: AnimateSlideCellRenderer,
            agGroupCellRenderer: GroupCellRenderer,
            agGroupRowRenderer: GroupCellRenderer,
            agLoadingCellRenderer: LoadingCellRenderer,
            //editors
            agCellEditor: TextCellEditor,
            agTextCellEditor: TextCellEditor,
            agSelectCellEditor: SelectCellEditor,
            agPopupTextCellEditor: PopupTextCellEditor,
            agPopupSelectCellEditor: PopupSelectCellEditor,
            agLargeTextCellEditor: LargeTextCellEditor,
            //filter
            agTextColumnFilter: TextFilter,
            agNumberColumnFilter: NumberFilter,
            agDateColumnFilter: DateFilter,
            //overlays
            agLoadingOverlay: LoadingOverlayComponent,
            agNoRowsOverlay: NoRowsOverlayComponent,
            // tooltips
            agTooltipComponent: TooltipComponent
          };
          _this.agDeprecatedNames = {
            set: {
              newComponentName: "agSetColumnFilter",
              propertyHolder: "filter"
            },
            text: {
              newComponentName: "agTextColumnFilter",
              propertyHolder: "filter"
            },
            number: {
              newComponentName: "agNumberColumnFilter",
              propertyHolder: "filter"
            },
            date: {
              newComponentName: "agDateColumnFilter",
              propertyHolder: "filter"
            },
            group: {
              newComponentName: "agGroupCellRenderer",
              propertyHolder: "cellRenderer"
            },
            animateShowChange: {
              newComponentName: "agAnimateShowChangeCellRenderer",
              propertyHolder: "cellRenderer"
            },
            animateSlide: {
              newComponentName: "agAnimateSlideCellRenderer",
              propertyHolder: "cellRenderer"
            },
            select: {
              newComponentName: "agSelectCellEditor",
              propertyHolder: "cellEditor"
            },
            largeText: {
              newComponentName: "agLargeTextCellEditor",
              propertyHolder: "cellEditor"
            },
            popupSelect: {
              newComponentName: "agPopupSelectCellEditor",
              propertyHolder: "cellEditor"
            },
            popupText: {
              newComponentName: "agPopupTextCellEditor",
              propertyHolder: "cellEditor"
            },
            richSelect: {
              newComponentName: "agRichSelectCellEditor",
              propertyHolder: "cellEditor"
            },
            headerComponent: {
              newComponentName: "agColumnHeader",
              propertyHolder: "headerComponent"
            }
          };
          _this.jsComponents = {};
          _this.frameworkComponents = {};
          return _this;
        }
        UserComponentRegistry2.prototype.init = function() {
          var _this = this;
          if (this.gridOptions.components != null) {
            iterateObject(this.gridOptions.components, function(key, component) {
              return _this.registerComponent(key, component);
            });
          }
          if (this.gridOptions.frameworkComponents != null) {
            iterateObject(this.gridOptions.frameworkComponents, function(key, component) {
              return _this.registerFwComponent(key, component);
            });
          }
        };
        UserComponentRegistry2.prototype.registerDefaultComponent = function(rawName, component) {
          var name = this.translateIfDeprecated(rawName);
          if (this.agGridDefaults[name]) {
            console.error("Trying to overwrite a default component. You should call registerComponent");
            return;
          }
          this.agGridDefaults[name] = component;
        };
        UserComponentRegistry2.prototype.registerComponent = function(rawName, component) {
          var name = this.translateIfDeprecated(rawName);
          if (this.frameworkComponents[name]) {
            console.error("Trying to register a component that you have already registered for frameworks: " + name);
            return;
          }
          this.jsComponents[name] = component;
        };
        UserComponentRegistry2.prototype.registerFwComponent = function(rawName, component) {
          var name = this.translateIfDeprecated(rawName);
          if (this.jsComponents[name]) {
            console.error("Trying to register a component that you have already registered for plain javascript: " + name);
            return;
          }
          this.frameworkComponents[name] = component;
        };
        UserComponentRegistry2.prototype.retrieve = function(rawName) {
          var name = this.translateIfDeprecated(rawName);
          var frameworkComponent = this.frameworkComponents[name] || this.getFrameworkOverrides().frameworkComponent(name);
          if (frameworkComponent) {
            return {
              componentFromFramework: true,
              component: frameworkComponent
            };
          }
          var jsComponent = this.jsComponents[name];
          if (jsComponent) {
            return {
              componentFromFramework: false,
              component: jsComponent
            };
          }
          var defaultComponent = this.agGridDefaults[name];
          if (defaultComponent) {
            return {
              componentFromFramework: false,
              component: defaultComponent
            };
          }
          if (Object.keys(this.agGridDefaults).indexOf(name) < 0) {
            console.warn("AG Grid: Looking for component [" + name + "] but it wasn't found.");
          }
          return null;
        };
        UserComponentRegistry2.prototype.translateIfDeprecated = function(raw) {
          var deprecatedInfo = this.agDeprecatedNames[raw];
          if (deprecatedInfo != null) {
            doOnce(function() {
              console.warn("ag-grid. Since v15.0 component names have been renamed to be namespaced. You should rename " + deprecatedInfo.propertyHolder + ":" + raw + " to " + deprecatedInfo.propertyHolder + ":" + deprecatedInfo.newComponentName);
            }, "DEPRECATE_COMPONENT_" + raw);
            return deprecatedInfo.newComponentName;
          }
          return raw;
        };
        __decorate$D([
          Autowired("gridOptions")
        ], UserComponentRegistry2.prototype, "gridOptions", void 0);
        __decorate$D([
          PostConstruct
        ], UserComponentRegistry2.prototype, "init", null);
        UserComponentRegistry2 = __decorate$D([
          Bean3("userComponentRegistry")
        ], UserComponentRegistry2);
        return UserComponentRegistry2;
      }(BeanStub)
    );
    var DateComponent = {
      propertyName: "dateComponent",
      isCellRenderer: function() {
        return false;
      }
    };
    var HeaderComponent = {
      propertyName: "headerComponent",
      isCellRenderer: function() {
        return false;
      }
    };
    var HeaderGroupComponent = {
      propertyName: "headerGroupComponent",
      isCellRenderer: function() {
        return false;
      }
    };
    var CellRendererComponent = {
      propertyName: "cellRenderer",
      isCellRenderer: function() {
        return true;
      }
    };
    var CellEditorComponent = {
      propertyName: "cellEditor",
      isCellRenderer: function() {
        return false;
      }
    };
    var InnerRendererComponent = {
      propertyName: "innerRenderer",
      isCellRenderer: function() {
        return true;
      }
    };
    var LoadingOverlayComponent$1 = {
      propertyName: "loadingOverlayComponent",
      isCellRenderer: function() {
        return false;
      }
    };
    var NoRowsOverlayComponent$1 = {
      propertyName: "noRowsOverlayComponent",
      isCellRenderer: function() {
        return false;
      }
    };
    var TooltipComponent$1 = {
      propertyName: "tooltipComponent",
      isCellRenderer: function() {
        return false;
      }
    };
    var FilterComponent = {
      propertyName: "filter",
      isCellRenderer: function() {
        return false;
      }
    };
    var FloatingFilterComponent = {
      propertyName: "floatingFilterComponent",
      isCellRenderer: function() {
        return false;
      }
    };
    var ToolPanelComponent = {
      propertyName: "toolPanel",
      isCellRenderer: function() {
        return false;
      }
    };
    var StatusPanelComponent = {
      propertyName: "statusPanel",
      isCellRenderer: function() {
        return false;
      }
    };
    var __extends$L = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$E = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var UserComponentFactory = (
      /** @class */
      function(_super) {
        __extends$L(UserComponentFactory2, _super);
        function UserComponentFactory2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        UserComponentFactory2.prototype.getHeaderCompDetails = function(colDef, params) {
          return this.getCompDetails(colDef, HeaderComponent, "agColumnHeader", params);
        };
        UserComponentFactory2.prototype.getHeaderGroupCompDetails = function(params) {
          var colGroupDef = params.columnGroup.getColGroupDef();
          return this.getCompDetails(colGroupDef, HeaderGroupComponent, "agColumnGroupHeader", params);
        };
        UserComponentFactory2.prototype.getFullWidthCellRendererDetails = function(params, cellRendererType, cellRendererName) {
          return this.getCompDetails(this.gridOptions, { propertyName: cellRendererType, isCellRenderer: function() {
            return true;
          } }, cellRendererName, params);
        };
        UserComponentFactory2.prototype.getInnerRendererDetails = function(def, params) {
          return this.getCompDetails(def, InnerRendererComponent, null, params);
        };
        UserComponentFactory2.prototype.getFullWidthGroupRowInnerCellRenderer = function(def, params) {
          return this.getCompDetails(def, InnerRendererComponent, null, params);
        };
        UserComponentFactory2.prototype.getCellRendererDetails = function(def, params) {
          return this.getCompDetails(def, CellRendererComponent, null, params);
        };
        UserComponentFactory2.prototype.getCellEditorDetails = function(def, params) {
          return this.getCompDetails(def, CellEditorComponent, "agCellEditor", params, true);
        };
        UserComponentFactory2.prototype.getFilterDetails = function(def, params, defaultFilter) {
          return this.getCompDetails(def, FilterComponent, defaultFilter, params, true);
        };
        UserComponentFactory2.prototype.getDateCompDetails = function(params) {
          return this.getCompDetails(this.gridOptions, DateComponent, "agDateInput", params, true);
        };
        UserComponentFactory2.prototype.getLoadingOverlayCompDetails = function(params) {
          return this.getCompDetails(this.gridOptions, LoadingOverlayComponent$1, "agLoadingOverlay", params, true);
        };
        UserComponentFactory2.prototype.getNoRowsOverlayCompDetails = function(params) {
          return this.getCompDetails(this.gridOptions, NoRowsOverlayComponent$1, "agNoRowsOverlay", params, true);
        };
        UserComponentFactory2.prototype.getTooltipCompDetails = function(params) {
          return this.getCompDetails(params.colDef, TooltipComponent$1, "agTooltipComponent", params, true);
        };
        UserComponentFactory2.prototype.getSetFilterCellRendererDetails = function(def, params) {
          return this.getCompDetails(def, CellRendererComponent, null, params);
        };
        UserComponentFactory2.prototype.getFloatingFilterCompDetails = function(def, params, defaultFloatingFilter) {
          return this.getCompDetails(def, FloatingFilterComponent, defaultFloatingFilter, params);
        };
        UserComponentFactory2.prototype.getToolPanelCompDetails = function(toolPanelDef, params) {
          return this.getCompDetails(toolPanelDef, ToolPanelComponent, null, params, true);
        };
        UserComponentFactory2.prototype.getStatusPanelCompDetails = function(def, params) {
          return this.getCompDetails(def, StatusPanelComponent, null, params, true);
        };
        UserComponentFactory2.prototype.getCompDetails = function(defObject, type, defaultName, params, mandatory) {
          var _this = this;
          if (mandatory === void 0) {
            mandatory = false;
          }
          var propertyName = type.propertyName;
          var comp;
          var frameworkComp;
          var paramsFromSelector;
          if (defObject) {
            var defObjectAny = defObject;
            var selectorFunc = defObjectAny[propertyName + "Selector"];
            var selectorRes = selectorFunc ? selectorFunc(params) : null;
            if (selectorRes) {
              comp = selectorRes.component;
              frameworkComp = selectorRes.frameworkComponent;
              paramsFromSelector = selectorRes.params;
            } else {
              comp = defObjectAny[propertyName];
              frameworkComp = defObjectAny[propertyName + "Framework"];
            }
            if (comp === true) {
              comp = void 0;
            }
          }
          var lookupFromRegistry = function(key) {
            var item = _this.userComponentRegistry.retrieve(key);
            if (item) {
              comp = !item.componentFromFramework ? item.component : void 0;
              frameworkComp = item.componentFromFramework ? item.component : void 0;
            } else {
              comp = void 0;
              frameworkComp = void 0;
            }
          };
          if (typeof comp === "string") {
            lookupFromRegistry(comp);
          }
          if (comp == null && frameworkComp == null && defaultName != null) {
            lookupFromRegistry(defaultName);
          }
          if (comp && !this.agComponentUtils.doesImplementIComponent(comp)) {
            comp = this.agComponentUtils.adaptFunction(propertyName, comp);
          }
          if (!comp && !frameworkComp) {
            if (mandatory) {
              var overrideName = defObject ? defObject[propertyName] : defaultName;
              var nameToReport = overrideName ? overrideName : defaultName;
              console.error("Could not find component " + nameToReport + ", did you forget to configure this component?");
            }
            return;
          }
          var paramsMerged = this.mergeParamsWithApplicationProvidedParams(defObject, propertyName, params, paramsFromSelector);
          var componentFromFramework = comp == null;
          var componentClass = comp ? comp : frameworkComp;
          return {
            componentFromFramework,
            componentClass,
            params: paramsMerged,
            type,
            newAgStackInstance: function(defaultCompName) {
              return _this.newAgStackInstance(componentClass, componentFromFramework, paramsMerged, type, defaultCompName);
            }
          };
        };
        UserComponentFactory2.prototype.newAgStackInstance = function(ComponentClass, componentFromFramework, params, type, defaultComponentName) {
          var propertyName = type.propertyName;
          var instance;
          var jsComponent = !componentFromFramework;
          if (jsComponent) {
            instance = new ComponentClass();
          } else {
            var thisComponentConfig = this.componentMetadataProvider.retrieve(propertyName);
            instance = this.frameworkComponentWrapper.wrap(ComponentClass, thisComponentConfig.mandatoryMethodList, thisComponentConfig.optionalMethodList, type, defaultComponentName);
          }
          var deferredInit = this.initComponent(instance, params);
          if (deferredInit == null) {
            return AgPromise.resolve(instance);
          }
          return deferredInit.then(function() {
            return instance;
          });
        };
        UserComponentFactory2.prototype.mergeParamsWithApplicationProvidedParams = function(defObject, propertyName, paramsFromGrid, paramsFromSelector) {
          if (paramsFromSelector === void 0) {
            paramsFromSelector = null;
          }
          var params = {};
          mergeDeep(params, paramsFromGrid);
          var userParams = defObject ? defObject[propertyName + "Params"] : null;
          if (userParams != null) {
            if (typeof userParams === "function") {
              var userParamsFromFunc = userParams(paramsFromGrid);
              mergeDeep(params, userParamsFromFunc);
            } else if (typeof userParams === "object") {
              mergeDeep(params, userParams);
            }
          }
          mergeDeep(params, paramsFromSelector);
          return params;
        };
        UserComponentFactory2.prototype.initComponent = function(component, params) {
          this.context.createBean(component);
          if (component.init == null) {
            return;
          }
          return component.init(params);
        };
        __decorate$E([
          Autowired("gridOptions")
        ], UserComponentFactory2.prototype, "gridOptions", void 0);
        __decorate$E([
          Autowired("agComponentUtils")
        ], UserComponentFactory2.prototype, "agComponentUtils", void 0);
        __decorate$E([
          Autowired("componentMetadataProvider")
        ], UserComponentFactory2.prototype, "componentMetadataProvider", void 0);
        __decorate$E([
          Autowired("userComponentRegistry")
        ], UserComponentFactory2.prototype, "userComponentRegistry", void 0);
        __decorate$E([
          Optional("frameworkComponentWrapper")
        ], UserComponentFactory2.prototype, "frameworkComponentWrapper", void 0);
        UserComponentFactory2 = __decorate$E([
          Bean3("userComponentFactory")
        ], UserComponentFactory2);
        return UserComponentFactory2;
      }(BeanStub)
    );
    var SideBarDefParser = (
      /** @class */
      function() {
        function SideBarDefParser2() {
        }
        SideBarDefParser2.parse = function(toParse) {
          if (!toParse) {
            return null;
          }
          if (toParse === true) {
            return {
              toolPanels: [
                SideBarDefParser2.DEFAULT_COLUMN_COMP,
                SideBarDefParser2.DEFAULT_FILTER_COMP
              ],
              defaultToolPanel: "columns"
            };
          }
          if (typeof toParse === "string") {
            return SideBarDefParser2.parse([toParse]);
          }
          if (Array.isArray(toParse)) {
            var comps_1 = [];
            toParse.forEach(function(key) {
              var lookupResult = SideBarDefParser2.DEFAULT_BY_KEY[key];
              if (!lookupResult) {
                console.warn("ag-grid: the key " + key + " is not a valid key for specifying a tool panel, valid keys are: " + Object.keys(SideBarDefParser2.DEFAULT_BY_KEY).join(","));
                return;
              }
              comps_1.push(lookupResult);
            });
            if (comps_1.length === 0) {
              return null;
            }
            return {
              toolPanels: comps_1,
              defaultToolPanel: comps_1[0].id
            };
          }
          var result = {
            toolPanels: SideBarDefParser2.parseComponents(toParse.toolPanels),
            defaultToolPanel: toParse.defaultToolPanel,
            hiddenByDefault: toParse.hiddenByDefault,
            position: toParse.position
          };
          return result;
        };
        SideBarDefParser2.parseComponents = function(from) {
          var result = [];
          if (!from) {
            return result;
          }
          from.forEach(function(it) {
            var toAdd = null;
            if (typeof it === "string") {
              var lookupResult = SideBarDefParser2.DEFAULT_BY_KEY[it];
              if (!lookupResult) {
                console.warn("ag-grid: the key " + it + " is not a valid key for specifying a tool panel, valid keys are: " + Object.keys(SideBarDefParser2.DEFAULT_BY_KEY).join(","));
                return;
              }
              toAdd = lookupResult;
            } else {
              toAdd = it;
            }
            result.push(toAdd);
          });
          return result;
        };
        SideBarDefParser2.DEFAULT_COLUMN_COMP = {
          id: "columns",
          labelDefault: "Columns",
          labelKey: "columns",
          iconKey: "columns",
          toolPanel: "agColumnsToolPanel"
        };
        SideBarDefParser2.DEFAULT_FILTER_COMP = {
          id: "filters",
          labelDefault: "Filters",
          labelKey: "filters",
          iconKey: "filter",
          toolPanel: "agFiltersToolPanel"
        };
        SideBarDefParser2.DEFAULT_BY_KEY = {
          columns: SideBarDefParser2.DEFAULT_COLUMN_COMP,
          filters: SideBarDefParser2.DEFAULT_FILTER_COMP
        };
        return SideBarDefParser2;
      }()
    );
    var __decorate$F = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __param$3 = function(paramIndex, decorator) {
      return function(target, key) {
        decorator(target, key, paramIndex);
      };
    };
    var __spreadArrays$4 = function() {
      for (var s = 0, i = 0, il = arguments.length; i < il; i++)
        s += arguments[i].length;
      for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
          r[k] = a[j];
      return r;
    };
    var DEFAULT_ROW_HEIGHT = 25;
    var DEFAULT_DETAIL_ROW_HEIGHT = 300;
    var DEFAULT_VIEWPORT_ROW_MODEL_PAGE_SIZE = 5;
    var DEFAULT_VIEWPORT_ROW_MODEL_BUFFER_SIZE = 5;
    var DEFAULT_KEEP_DETAIL_ROW_COUNT = 10;
    function isTrue(value) {
      return value === true || value === "true";
    }
    function toNumber(value) {
      if (typeof value == "number") {
        return value;
      }
      if (typeof value == "string") {
        return parseInt(value, 10);
      }
    }
    function zeroOrGreater(value, defaultValue) {
      if (value >= 0) {
        return value;
      }
      return defaultValue;
    }
    function oneOrGreater(value, defaultValue) {
      var valueNumber = parseInt(value, 10);
      if (isNumeric(valueNumber) && valueNumber > 0) {
        return valueNumber;
      }
      return defaultValue;
    }
    var GridOptionsWrapper = (
      /** @class */
      function() {
        function GridOptionsWrapper2() {
          this.propertyEventService = new EventService();
          this.domDataKey = "__AG_" + Math.random().toString();
          this.destroyed = false;
        }
        GridOptionsWrapper_1 = GridOptionsWrapper2;
        GridOptionsWrapper2.prototype.agWire = function(gridApi, columnApi) {
          this.gridOptions.api = gridApi;
          this.gridOptions.columnApi = columnApi;
          this.checkForDeprecated();
          this.checkForViolations();
        };
        GridOptionsWrapper2.prototype.destroy = function() {
          this.gridOptions.api = null;
          this.gridOptions.columnApi = null;
          this.destroyed = true;
        };
        GridOptionsWrapper2.prototype.init = function() {
          var _this = this;
          if (this.gridOptions.suppressPropertyNamesCheck !== true) {
            this.checkGridOptionsProperties();
            this.checkColumnDefProperties();
          }
          if (this.gridOptions.sideBar != null) {
            this.gridOptions.sideBar = SideBarDefParser.parse(this.gridOptions.sideBar);
          }
          var async = this.useAsyncEvents();
          this.eventService.addGlobalListener(this.globalEventHandler.bind(this), async);
          if (this.isGroupSelectsChildren() && this.isSuppressParentsInRowNodes()) {
            console.warn("AG Grid: 'groupSelectsChildren' does not work with 'suppressParentsInRowNodes', this selection method needs the part in rowNode to work");
          }
          if (this.isGroupSelectsChildren()) {
            if (!this.isRowSelectionMulti()) {
              console.warn("AG Grid: rowSelection must be 'multiple' for groupSelectsChildren to make sense");
            }
            if (this.isRowModelServerSide()) {
              console.warn("AG Grid: group selects children is NOT support for Server Side Row Model. This is because the rows are lazy loaded, so selecting a group is not possible asthe grid has no way of knowing what the children are.");
            }
          }
          if (this.isGroupRemoveSingleChildren() && this.isGroupHideOpenParents()) {
            console.warn("AG Grid: groupRemoveSingleChildren and groupHideOpenParents do not work with each other, you need to pick one. And don't ask us how to us these together on our support forum either you will get the same answer!");
          }
          if (this.isRowModelServerSide()) {
            var msg = function(prop) {
              return "AG Grid: '" + prop + "' is not supported on the Server-Side Row Model";
            };
            if (exists(this.gridOptions.groupDefaultExpanded)) {
              console.warn(msg("groupDefaultExpanded"));
            }
            if (exists(this.gridOptions.groupDefaultExpanded)) {
              console.warn(msg("groupIncludeFooter"));
            }
            if (exists(this.gridOptions.groupDefaultExpanded)) {
              console.warn(msg("groupIncludeTotalFooter"));
            }
          }
          if (this.isEnableRangeSelection()) {
            ModuleRegistry.assertRegistered(exports.ModuleNames.RangeSelectionModule, "enableRangeSelection");
          }
          if (!this.isEnableRangeSelection() && (this.isEnableRangeHandle() || this.isEnableFillHandle())) {
            console.warn("AG Grid: 'enableRangeHandle' and 'enableFillHandle' will not work unless 'enableRangeSelection' is set to true");
          }
          var warnOfDeprecaredIcon = function(name) {
            if (_this.gridOptions.icons && _this.gridOptions.icons[name]) {
              console.warn("gridOptions.icons." + name + " is no longer supported. For information on how to style checkboxes and radio buttons, see https://www.ag-grid.com/javascript-grid-icons/");
            }
          };
          warnOfDeprecaredIcon("radioButtonOff");
          warnOfDeprecaredIcon("radioButtonOn");
          warnOfDeprecaredIcon("checkboxChecked");
          warnOfDeprecaredIcon("checkboxUnchecked");
          warnOfDeprecaredIcon("checkboxIndeterminate");
          this.getScrollbarWidth();
        };
        GridOptionsWrapper2.prototype.checkColumnDefProperties = function() {
          var _this = this;
          if (this.gridOptions.columnDefs == null) {
            return;
          }
          this.gridOptions.columnDefs.forEach(function(colDef) {
            var userProperties = Object.getOwnPropertyNames(colDef);
            var validProperties = __spreadArrays$4(ColDefUtil2.ALL_PROPERTIES, ColDefUtil2.FRAMEWORK_PROPERTIES);
            _this.checkProperties(userProperties, validProperties, validProperties, "colDef", "https://www.ag-grid.com/javascript-grid-column-properties/");
          });
        };
        GridOptionsWrapper2.prototype.checkGridOptionsProperties = function() {
          var userProperties = Object.getOwnPropertyNames(this.gridOptions);
          var validProperties = __spreadArrays$4(PropertyKeys.ALL_PROPERTIES, PropertyKeys.FRAMEWORK_PROPERTIES, values(Events).map(function(event) {
            return ComponentUtil3.getCallbackForEvent(event);
          }));
          var validPropertiesAndExceptions = __spreadArrays$4(validProperties, ["api", "columnApi"]);
          this.checkProperties(userProperties, validPropertiesAndExceptions, validProperties, "gridOptions", "https://www.ag-grid.com/javascript-grid-properties/");
        };
        GridOptionsWrapper2.prototype.checkProperties = function(userProperties, validPropertiesAndExceptions, validProperties, containerName, docsUrl) {
          var invalidProperties = fuzzyCheckStrings(userProperties, validPropertiesAndExceptions, validProperties);
          iterateObject(invalidProperties, function(key, value) {
            console.warn("ag-grid: invalid " + containerName + " property '" + key + "' did you mean any of these: " + value.slice(0, 8).join(", "));
          });
          if (Object.keys(invalidProperties).length > 0) {
            console.warn("ag-grid: to see all the valid " + containerName + " properties please check: " + docsUrl);
          }
        };
        GridOptionsWrapper2.prototype.getDomDataKey = function() {
          return this.domDataKey;
        };
        GridOptionsWrapper2.prototype.getDomData = function(element, key) {
          var domData = element[this.getDomDataKey()];
          return domData ? domData[key] : void 0;
        };
        GridOptionsWrapper2.prototype.setDomData = function(element, key, value) {
          var domDataKey = this.getDomDataKey();
          var domData = element[domDataKey];
          if (missing(domData)) {
            domData = {};
            element[domDataKey] = domData;
          }
          domData[key] = value;
        };
        GridOptionsWrapper2.prototype.isRowSelection = function() {
          return this.gridOptions.rowSelection === "single" || this.gridOptions.rowSelection === "multiple";
        };
        GridOptionsWrapper2.prototype.isSuppressRowDeselection = function() {
          return isTrue(this.gridOptions.suppressRowDeselection);
        };
        GridOptionsWrapper2.prototype.isRowSelectionMulti = function() {
          return this.gridOptions.rowSelection === "multiple";
        };
        GridOptionsWrapper2.prototype.isRowMultiSelectWithClick = function() {
          return isTrue(this.gridOptions.rowMultiSelectWithClick);
        };
        GridOptionsWrapper2.prototype.getContext = function() {
          return this.gridOptions.context;
        };
        GridOptionsWrapper2.prototype.isPivotMode = function() {
          return isTrue(this.gridOptions.pivotMode);
        };
        GridOptionsWrapper2.prototype.isSuppressExpandablePivotGroups = function() {
          return isTrue(this.gridOptions.suppressExpandablePivotGroups);
        };
        GridOptionsWrapper2.prototype.getPivotColumnGroupTotals = function() {
          return this.gridOptions.pivotColumnGroupTotals;
        };
        GridOptionsWrapper2.prototype.getPivotRowTotals = function() {
          return this.gridOptions.pivotRowTotals;
        };
        GridOptionsWrapper2.prototype.isRowModelInfinite = function() {
          return this.gridOptions.rowModelType === Constants.ROW_MODEL_TYPE_INFINITE;
        };
        GridOptionsWrapper2.prototype.isRowModelViewport = function() {
          return this.gridOptions.rowModelType === Constants.ROW_MODEL_TYPE_VIEWPORT;
        };
        GridOptionsWrapper2.prototype.isRowModelServerSide = function() {
          return this.gridOptions.rowModelType === Constants.ROW_MODEL_TYPE_SERVER_SIDE;
        };
        GridOptionsWrapper2.prototype.isRowModelDefault = function() {
          return missing(this.gridOptions.rowModelType) || this.gridOptions.rowModelType === Constants.ROW_MODEL_TYPE_CLIENT_SIDE;
        };
        GridOptionsWrapper2.prototype.isFullRowEdit = function() {
          return this.gridOptions.editType === "fullRow";
        };
        GridOptionsWrapper2.prototype.isSuppressFocusAfterRefresh = function() {
          return isTrue(this.gridOptions.suppressFocusAfterRefresh);
        };
        GridOptionsWrapper2.prototype.isSuppressBrowserResizeObserver = function() {
          return isTrue(this.gridOptions.suppressBrowserResizeObserver);
        };
        GridOptionsWrapper2.prototype.isSuppressMaintainUnsortedOrder = function() {
          return isTrue(this.gridOptions.suppressMaintainUnsortedOrder);
        };
        GridOptionsWrapper2.prototype.isSuppressClearOnFillReduction = function() {
          return isTrue(this.gridOptions.suppressClearOnFillReduction);
        };
        GridOptionsWrapper2.prototype.isShowToolPanel = function() {
          return isTrue(this.gridOptions.sideBar && Array.isArray(this.getSideBar().toolPanels));
        };
        GridOptionsWrapper2.prototype.getSideBar = function() {
          return this.gridOptions.sideBar;
        };
        GridOptionsWrapper2.prototype.isSuppressTouch = function() {
          return isTrue(this.gridOptions.suppressTouch);
        };
        GridOptionsWrapper2.prototype.isMaintainColumnOrder = function() {
          return isTrue(this.gridOptions.maintainColumnOrder);
        };
        GridOptionsWrapper2.prototype.isSuppressRowTransform = function() {
          return isTrue(this.gridOptions.suppressRowTransform);
        };
        GridOptionsWrapper2.prototype.isSuppressColumnStateEvents = function() {
          return isTrue(this.gridOptions.suppressColumnStateEvents);
        };
        GridOptionsWrapper2.prototype.isAllowDragFromColumnsToolPanel = function() {
          return isTrue(this.gridOptions.allowDragFromColumnsToolPanel);
        };
        GridOptionsWrapper2.prototype.useAsyncEvents = function() {
          return !isTrue(this.gridOptions.suppressAsyncEvents);
        };
        GridOptionsWrapper2.prototype.isEnableCellChangeFlash = function() {
          return isTrue(this.gridOptions.enableCellChangeFlash);
        };
        GridOptionsWrapper2.prototype.getCellFlashDelay = function() {
          return this.gridOptions.cellFlashDelay || 500;
        };
        GridOptionsWrapper2.prototype.getCellFadeDelay = function() {
          return this.gridOptions.cellFadeDelay || 1e3;
        };
        GridOptionsWrapper2.prototype.isGroupSelectsChildren = function() {
          var result = isTrue(this.gridOptions.groupSelectsChildren);
          if (result && this.isTreeData()) {
            console.warn("AG Grid: groupSelectsChildren does not work with tree data");
            return false;
          }
          return result;
        };
        GridOptionsWrapper2.prototype.isSuppressRowHoverHighlight = function() {
          return isTrue(this.gridOptions.suppressRowHoverHighlight);
        };
        GridOptionsWrapper2.prototype.isColumnHoverHighlight = function() {
          return isTrue(this.gridOptions.columnHoverHighlight);
        };
        GridOptionsWrapper2.prototype.isGroupSelectsFiltered = function() {
          return isTrue(this.gridOptions.groupSelectsFiltered);
        };
        GridOptionsWrapper2.prototype.isGroupHideOpenParents = function() {
          return isTrue(this.gridOptions.groupHideOpenParents);
        };
        GridOptionsWrapper2.prototype.isGroupMaintainOrder = function() {
          return isTrue(this.gridOptions.groupMaintainOrder);
        };
        GridOptionsWrapper2.prototype.getAutoGroupColumnDef = function() {
          return this.gridOptions.autoGroupColumnDef;
        };
        GridOptionsWrapper2.prototype.isGroupMultiAutoColumn = function() {
          if (this.gridOptions.groupDisplayType) {
            return this.matchesGroupDisplayType("multipleColumns", this.gridOptions.groupDisplayType);
          }
          return isTrue(this.gridOptions.groupHideOpenParents);
        };
        GridOptionsWrapper2.prototype.isGroupUseEntireRow = function(pivotMode) {
          if (pivotMode) {
            return false;
          }
          return this.gridOptions.groupDisplayType ? this.matchesGroupDisplayType("groupRows", this.gridOptions.groupDisplayType) : false;
        };
        GridOptionsWrapper2.prototype.isGroupSuppressAutoColumn = function() {
          var isCustomRowGroups = this.gridOptions.groupDisplayType ? this.matchesGroupDisplayType("custom", this.gridOptions.groupDisplayType) : false;
          if (isCustomRowGroups) {
            return true;
          }
          return this.gridOptions.treeDataDisplayType ? this.matchesTreeDataDisplayType("custom", this.gridOptions.treeDataDisplayType) : false;
        };
        GridOptionsWrapper2.prototype.isGroupRemoveSingleChildren = function() {
          return isTrue(this.gridOptions.groupRemoveSingleChildren);
        };
        GridOptionsWrapper2.prototype.isGroupRemoveLowestSingleChildren = function() {
          return isTrue(this.gridOptions.groupRemoveLowestSingleChildren);
        };
        GridOptionsWrapper2.prototype.isGroupIncludeFooter = function() {
          return isTrue(this.gridOptions.groupIncludeFooter);
        };
        GridOptionsWrapper2.prototype.isGroupIncludeTotalFooter = function() {
          return isTrue(this.gridOptions.groupIncludeTotalFooter);
        };
        GridOptionsWrapper2.prototype.isGroupSuppressBlankHeader = function() {
          return isTrue(this.gridOptions.groupSuppressBlankHeader);
        };
        GridOptionsWrapper2.prototype.isSuppressRowClickSelection = function() {
          return isTrue(this.gridOptions.suppressRowClickSelection);
        };
        GridOptionsWrapper2.prototype.isSuppressCellSelection = function() {
          return isTrue(this.gridOptions.suppressCellSelection);
        };
        GridOptionsWrapper2.prototype.isSuppressMultiSort = function() {
          return isTrue(this.gridOptions.suppressMultiSort);
        };
        GridOptionsWrapper2.prototype.isMultiSortKeyCtrl = function() {
          return this.gridOptions.multiSortKey === "ctrl";
        };
        GridOptionsWrapper2.prototype.isPivotSuppressAutoColumn = function() {
          return isTrue(this.gridOptions.pivotSuppressAutoColumn);
        };
        GridOptionsWrapper2.prototype.isSuppressDragLeaveHidesColumns = function() {
          return isTrue(this.gridOptions.suppressDragLeaveHidesColumns);
        };
        GridOptionsWrapper2.prototype.isSuppressScrollOnNewData = function() {
          return isTrue(this.gridOptions.suppressScrollOnNewData);
        };
        GridOptionsWrapper2.prototype.isSuppressScrollWhenPopupsAreOpen = function() {
          return isTrue(this.gridOptions.suppressScrollWhenPopupsAreOpen);
        };
        GridOptionsWrapper2.prototype.isRowDragEntireRow = function() {
          return isTrue(this.gridOptions.rowDragEntireRow);
        };
        GridOptionsWrapper2.prototype.isSuppressRowDrag = function() {
          return isTrue(this.gridOptions.suppressRowDrag);
        };
        GridOptionsWrapper2.prototype.isRowDragManaged = function() {
          return isTrue(this.gridOptions.rowDragManaged);
        };
        GridOptionsWrapper2.prototype.isSuppressMoveWhenRowDragging = function() {
          return isTrue(this.gridOptions.suppressMoveWhenRowDragging);
        };
        GridOptionsWrapper2.prototype.isRowDragMultiRow = function() {
          return isTrue(this.gridOptions.rowDragMultiRow);
        };
        GridOptionsWrapper2.prototype.getDomLayout = function() {
          var domLayout = this.gridOptions.domLayout || Constants.DOM_LAYOUT_NORMAL;
          var validLayouts = [
            Constants.DOM_LAYOUT_PRINT,
            Constants.DOM_LAYOUT_AUTO_HEIGHT,
            Constants.DOM_LAYOUT_NORMAL
          ];
          if (validLayouts.indexOf(domLayout) === -1) {
            doOnce(function() {
              return console.warn("AG Grid: " + domLayout + " is not valid for DOM Layout, valid values are " + Constants.DOM_LAYOUT_NORMAL + ", " + Constants.DOM_LAYOUT_AUTO_HEIGHT + " and " + Constants.DOM_LAYOUT_PRINT);
            }, "warn about dom layout values");
            return Constants.DOM_LAYOUT_NORMAL;
          }
          return domLayout;
        };
        GridOptionsWrapper2.prototype.isSuppressHorizontalScroll = function() {
          return isTrue(this.gridOptions.suppressHorizontalScroll);
        };
        GridOptionsWrapper2.prototype.isSuppressMaxRenderedRowRestriction = function() {
          return isTrue(this.gridOptions.suppressMaxRenderedRowRestriction);
        };
        GridOptionsWrapper2.prototype.isExcludeChildrenWhenTreeDataFiltering = function() {
          return isTrue(this.gridOptions.excludeChildrenWhenTreeDataFiltering);
        };
        GridOptionsWrapper2.prototype.isAlwaysShowHorizontalScroll = function() {
          return isTrue(this.gridOptions.alwaysShowHorizontalScroll);
        };
        GridOptionsWrapper2.prototype.isAlwaysShowVerticalScroll = function() {
          return isTrue(this.gridOptions.alwaysShowVerticalScroll);
        };
        GridOptionsWrapper2.prototype.isDebounceVerticalScrollbar = function() {
          return isTrue(this.gridOptions.debounceVerticalScrollbar);
        };
        GridOptionsWrapper2.prototype.isSuppressLoadingOverlay = function() {
          return isTrue(this.gridOptions.suppressLoadingOverlay);
        };
        GridOptionsWrapper2.prototype.isSuppressNoRowsOverlay = function() {
          return isTrue(this.gridOptions.suppressNoRowsOverlay);
        };
        GridOptionsWrapper2.prototype.isSuppressFieldDotNotation = function() {
          return isTrue(this.gridOptions.suppressFieldDotNotation);
        };
        GridOptionsWrapper2.prototype.getPinnedTopRowData = function() {
          return this.gridOptions.pinnedTopRowData;
        };
        GridOptionsWrapper2.prototype.getPinnedBottomRowData = function() {
          return this.gridOptions.pinnedBottomRowData;
        };
        GridOptionsWrapper2.prototype.isFunctionsPassive = function() {
          return isTrue(this.gridOptions.functionsPassive);
        };
        GridOptionsWrapper2.prototype.isSuppressChangeDetection = function() {
          return isTrue(this.gridOptions.suppressChangeDetection);
        };
        GridOptionsWrapper2.prototype.isSuppressAnimationFrame = function() {
          return isTrue(this.gridOptions.suppressAnimationFrame);
        };
        GridOptionsWrapper2.prototype.getQuickFilterText = function() {
          return this.gridOptions.quickFilterText;
        };
        GridOptionsWrapper2.prototype.isCacheQuickFilter = function() {
          return isTrue(this.gridOptions.cacheQuickFilter);
        };
        GridOptionsWrapper2.prototype.isUnSortIcon = function() {
          return isTrue(this.gridOptions.unSortIcon);
        };
        GridOptionsWrapper2.prototype.isSuppressMenuHide = function() {
          return isTrue(this.gridOptions.suppressMenuHide);
        };
        GridOptionsWrapper2.prototype.isEnterMovesDownAfterEdit = function() {
          return isTrue(this.gridOptions.enterMovesDownAfterEdit);
        };
        GridOptionsWrapper2.prototype.isEnterMovesDown = function() {
          return isTrue(this.gridOptions.enterMovesDown);
        };
        GridOptionsWrapper2.prototype.isUndoRedoCellEditing = function() {
          return isTrue(this.gridOptions.undoRedoCellEditing);
        };
        GridOptionsWrapper2.prototype.getUndoRedoCellEditingLimit = function() {
          return toNumber(this.gridOptions.undoRedoCellEditingLimit);
        };
        GridOptionsWrapper2.prototype.getRowStyle = function() {
          return this.gridOptions.rowStyle;
        };
        GridOptionsWrapper2.prototype.getRowClass = function() {
          return this.gridOptions.rowClass;
        };
        GridOptionsWrapper2.prototype.getRowStyleFunc = function() {
          return this.gridOptions.getRowStyle;
        };
        GridOptionsWrapper2.prototype.getRowClassFunc = function() {
          return this.gridOptions.getRowClass;
        };
        GridOptionsWrapper2.prototype.rowClassRules = function() {
          return this.gridOptions.rowClassRules;
        };
        GridOptionsWrapper2.prototype.getServerSideStoreType = function() {
          return this.gridOptions.serverSideStoreType;
        };
        GridOptionsWrapper2.prototype.getServerSideStoreParamsFunc = function() {
          return this.gridOptions.getServerSideStoreParams;
        };
        GridOptionsWrapper2.prototype.getCreateChartContainerFunc = function() {
          return this.gridOptions.createChartContainer;
        };
        GridOptionsWrapper2.prototype.getPopupParent = function() {
          return this.gridOptions.popupParent;
        };
        GridOptionsWrapper2.prototype.getBlockLoadDebounceMillis = function() {
          return this.gridOptions.blockLoadDebounceMillis;
        };
        GridOptionsWrapper2.prototype.getPostProcessPopupFunc = function() {
          return this.gridOptions.postProcessPopup;
        };
        GridOptionsWrapper2.prototype.getPaginationNumberFormatterFunc = function() {
          return this.gridOptions.paginationNumberFormatter;
        };
        GridOptionsWrapper2.prototype.getChildCountFunc = function() {
          return this.gridOptions.getChildCount;
        };
        GridOptionsWrapper2.prototype.getIsApplyServerSideTransactionFunc = function() {
          return this.gridOptions.isApplyServerSideTransaction;
        };
        GridOptionsWrapper2.prototype.getDefaultGroupOrderComparator = function() {
          return this.gridOptions.defaultGroupOrderComparator;
        };
        GridOptionsWrapper2.prototype.getIsFullWidthCellFunc = function() {
          return this.gridOptions.isFullWidthCell;
        };
        GridOptionsWrapper2.prototype.getFullWidthCellRendererParams = function() {
          return this.gridOptions.fullWidthCellRendererParams;
        };
        GridOptionsWrapper2.prototype.isEmbedFullWidthRows = function() {
          return isTrue(this.gridOptions.embedFullWidthRows) || isTrue(this.gridOptions.deprecatedEmbedFullWidthRows);
        };
        GridOptionsWrapper2.prototype.isDetailRowAutoHeight = function() {
          return isTrue(this.gridOptions.detailRowAutoHeight);
        };
        GridOptionsWrapper2.prototype.getSuppressKeyboardEventFunc = function() {
          return this.gridOptions.suppressKeyboardEvent;
        };
        GridOptionsWrapper2.prototype.getBusinessKeyForNodeFunc = function() {
          return this.gridOptions.getBusinessKeyForNode;
        };
        GridOptionsWrapper2.prototype.getApi = function() {
          return this.gridOptions.api;
        };
        GridOptionsWrapper2.prototype.getColumnApi = function() {
          return this.gridOptions.columnApi;
        };
        GridOptionsWrapper2.prototype.isImmutableData = function() {
          return isTrue(this.gridOptions.immutableData);
        };
        GridOptionsWrapper2.prototype.isEnsureDomOrder = function() {
          return isTrue(this.gridOptions.ensureDomOrder);
        };
        GridOptionsWrapper2.prototype.isEnableCharts = function() {
          if (isTrue(this.gridOptions.enableCharts)) {
            return ModuleRegistry.assertRegistered(exports.ModuleNames.GridChartsModule, "enableCharts");
          }
          return false;
        };
        GridOptionsWrapper2.prototype.getColResizeDefault = function() {
          return this.gridOptions.colResizeDefault;
        };
        GridOptionsWrapper2.prototype.isSingleClickEdit = function() {
          return isTrue(this.gridOptions.singleClickEdit);
        };
        GridOptionsWrapper2.prototype.isSuppressClickEdit = function() {
          return isTrue(this.gridOptions.suppressClickEdit);
        };
        GridOptionsWrapper2.prototype.isStopEditingWhenCellsLoseFocus = function() {
          return isTrue(this.gridOptions.stopEditingWhenCellsLoseFocus);
        };
        GridOptionsWrapper2.prototype.getGroupDefaultExpanded = function() {
          return this.gridOptions.groupDefaultExpanded;
        };
        GridOptionsWrapper2.prototype.getMaxConcurrentDatasourceRequests = function() {
          return this.gridOptions.maxConcurrentDatasourceRequests;
        };
        GridOptionsWrapper2.prototype.getMaxBlocksInCache = function() {
          return this.gridOptions.maxBlocksInCache;
        };
        GridOptionsWrapper2.prototype.getCacheOverflowSize = function() {
          return this.gridOptions.cacheOverflowSize;
        };
        GridOptionsWrapper2.prototype.getPaginationPageSize = function() {
          return toNumber(this.gridOptions.paginationPageSize);
        };
        GridOptionsWrapper2.prototype.isPaginateChildRows = function() {
          var shouldPaginate = this.isGroupRemoveSingleChildren() || this.isGroupRemoveLowestSingleChildren();
          if (shouldPaginate) {
            return true;
          }
          return isTrue(this.gridOptions.paginateChildRows);
        };
        GridOptionsWrapper2.prototype.getCacheBlockSize = function() {
          return oneOrGreater(this.gridOptions.cacheBlockSize);
        };
        GridOptionsWrapper2.prototype.getInfiniteInitialRowCount = function() {
          return this.gridOptions.infiniteInitialRowCount;
        };
        GridOptionsWrapper2.prototype.isPurgeClosedRowNodes = function() {
          return isTrue(this.gridOptions.purgeClosedRowNodes);
        };
        GridOptionsWrapper2.prototype.isSuppressPaginationPanel = function() {
          return isTrue(this.gridOptions.suppressPaginationPanel);
        };
        GridOptionsWrapper2.prototype.getRowData = function() {
          return this.gridOptions.rowData;
        };
        GridOptionsWrapper2.prototype.isEnableRtl = function() {
          return isTrue(this.gridOptions.enableRtl);
        };
        GridOptionsWrapper2.prototype.getRowGroupPanelShow = function() {
          return this.gridOptions.rowGroupPanelShow;
        };
        GridOptionsWrapper2.prototype.getPivotPanelShow = function() {
          return this.gridOptions.pivotPanelShow;
        };
        GridOptionsWrapper2.prototype.isAngularCompileRows = function() {
          return isTrue(this.gridOptions.angularCompileRows);
        };
        GridOptionsWrapper2.prototype.isAngularCompileFilters = function() {
          return isTrue(this.gridOptions.angularCompileFilters);
        };
        GridOptionsWrapper2.prototype.isDebug = function() {
          return isTrue(this.gridOptions.debug);
        };
        GridOptionsWrapper2.prototype.getColumnDefs = function() {
          return this.gridOptions.columnDefs;
        };
        GridOptionsWrapper2.prototype.getColumnTypes = function() {
          return this.gridOptions.columnTypes;
        };
        GridOptionsWrapper2.prototype.getDatasource = function() {
          return this.gridOptions.datasource;
        };
        GridOptionsWrapper2.prototype.getViewportDatasource = function() {
          return this.gridOptions.viewportDatasource;
        };
        GridOptionsWrapper2.prototype.getServerSideDatasource = function() {
          return this.gridOptions.serverSideDatasource;
        };
        GridOptionsWrapper2.prototype.isAccentedSort = function() {
          return isTrue(this.gridOptions.accentedSort);
        };
        GridOptionsWrapper2.prototype.isEnableBrowserTooltips = function() {
          return isTrue(this.gridOptions.enableBrowserTooltips);
        };
        GridOptionsWrapper2.prototype.isEnableCellExpressions = function() {
          return isTrue(this.gridOptions.enableCellExpressions);
        };
        GridOptionsWrapper2.prototype.isEnableGroupEdit = function() {
          return isTrue(this.gridOptions.enableGroupEdit);
        };
        GridOptionsWrapper2.prototype.isSuppressMiddleClickScrolls = function() {
          return isTrue(this.gridOptions.suppressMiddleClickScrolls);
        };
        GridOptionsWrapper2.prototype.isPreventDefaultOnContextMenu = function() {
          return isTrue(this.gridOptions.preventDefaultOnContextMenu);
        };
        GridOptionsWrapper2.prototype.isSuppressPreventDefaultOnMouseWheel = function() {
          return isTrue(this.gridOptions.suppressPreventDefaultOnMouseWheel);
        };
        GridOptionsWrapper2.prototype.isSuppressColumnVirtualisation = function() {
          return isTrue(this.gridOptions.suppressColumnVirtualisation);
        };
        GridOptionsWrapper2.prototype.isSuppressContextMenu = function() {
          return isTrue(this.gridOptions.suppressContextMenu);
        };
        GridOptionsWrapper2.prototype.isAllowContextMenuWithControlKey = function() {
          return isTrue(this.gridOptions.allowContextMenuWithControlKey);
        };
        GridOptionsWrapper2.prototype.isSuppressCopyRowsToClipboard = function() {
          return isTrue(this.gridOptions.suppressCopyRowsToClipboard);
        };
        GridOptionsWrapper2.prototype.isCopyHeadersToClipboard = function() {
          return isTrue(this.gridOptions.copyHeadersToClipboard);
        };
        GridOptionsWrapper2.prototype.isSuppressClipboardPaste = function() {
          return isTrue(this.gridOptions.suppressClipboardPaste);
        };
        GridOptionsWrapper2.prototype.isSuppressLastEmptyLineOnPaste = function() {
          return isTrue(this.gridOptions.suppressLastEmptyLineOnPaste);
        };
        GridOptionsWrapper2.prototype.isPagination = function() {
          return isTrue(this.gridOptions.pagination);
        };
        GridOptionsWrapper2.prototype.isSuppressEnterpriseResetOnNewColumns = function() {
          return isTrue(this.gridOptions.suppressEnterpriseResetOnNewColumns);
        };
        GridOptionsWrapper2.prototype.getProcessDataFromClipboardFunc = function() {
          return this.gridOptions.processDataFromClipboard;
        };
        GridOptionsWrapper2.prototype.getAsyncTransactionWaitMillis = function() {
          return exists(this.gridOptions.asyncTransactionWaitMillis) ? this.gridOptions.asyncTransactionWaitMillis : Constants.BATCH_WAIT_MILLIS;
        };
        GridOptionsWrapper2.prototype.isSuppressMovableColumns = function() {
          return isTrue(this.gridOptions.suppressMovableColumns);
        };
        GridOptionsWrapper2.prototype.isAnimateRows = function() {
          if (this.isEnsureDomOrder()) {
            return false;
          }
          return isTrue(this.gridOptions.animateRows);
        };
        GridOptionsWrapper2.prototype.isSuppressColumnMoveAnimation = function() {
          return isTrue(this.gridOptions.suppressColumnMoveAnimation);
        };
        GridOptionsWrapper2.prototype.isSuppressAggFuncInHeader = function() {
          return isTrue(this.gridOptions.suppressAggFuncInHeader);
        };
        GridOptionsWrapper2.prototype.isSuppressAggAtRootLevel = function() {
          return isTrue(this.gridOptions.suppressAggAtRootLevel);
        };
        GridOptionsWrapper2.prototype.isSuppressAggFilteredOnly = function() {
          return isTrue(this.gridOptions.suppressAggFilteredOnly);
        };
        GridOptionsWrapper2.prototype.isShowOpenedGroup = function() {
          return isTrue(this.gridOptions.showOpenedGroup);
        };
        GridOptionsWrapper2.prototype.isReactUi = function() {
          return isTrue(this.gridOptions.reactUi);
        };
        GridOptionsWrapper2.prototype.isEnableRangeSelection = function() {
          return ModuleRegistry.isRegistered(exports.ModuleNames.RangeSelectionModule) && isTrue(this.gridOptions.enableRangeSelection);
        };
        GridOptionsWrapper2.prototype.isEnableRangeHandle = function() {
          return isTrue(this.gridOptions.enableRangeHandle);
        };
        GridOptionsWrapper2.prototype.isEnableFillHandle = function() {
          return isTrue(this.gridOptions.enableFillHandle);
        };
        GridOptionsWrapper2.prototype.getFillHandleDirection = function() {
          var direction = this.gridOptions.fillHandleDirection;
          if (!direction) {
            return "xy";
          }
          if (direction !== "x" && direction !== "y" && direction !== "xy") {
            doOnce(function() {
              return console.warn("AG Grid: valid values for fillHandleDirection are 'x', 'y' and 'xy'. Default to 'xy'.");
            }, "warn invalid fill direction");
            return "xy";
          }
          return direction;
        };
        GridOptionsWrapper2.prototype.getFillOperation = function() {
          return this.gridOptions.fillOperation;
        };
        GridOptionsWrapper2.prototype.isSuppressMultiRangeSelection = function() {
          return isTrue(this.gridOptions.suppressMultiRangeSelection);
        };
        GridOptionsWrapper2.prototype.isPaginationAutoPageSize = function() {
          return isTrue(this.gridOptions.paginationAutoPageSize);
        };
        GridOptionsWrapper2.prototype.isRememberGroupStateWhenNewData = function() {
          return isTrue(this.gridOptions.rememberGroupStateWhenNewData);
        };
        GridOptionsWrapper2.prototype.getIcons = function() {
          return this.gridOptions.icons;
        };
        GridOptionsWrapper2.prototype.getAggFuncs = function() {
          return this.gridOptions.aggFuncs;
        };
        GridOptionsWrapper2.prototype.getSortingOrder = function() {
          return this.gridOptions.sortingOrder;
        };
        GridOptionsWrapper2.prototype.getAlignedGrids = function() {
          return this.gridOptions.alignedGrids;
        };
        GridOptionsWrapper2.prototype.isMasterDetail = function() {
          var masterDetail = isTrue(this.gridOptions.masterDetail);
          if (masterDetail) {
            return ModuleRegistry.assertRegistered(exports.ModuleNames.MasterDetailModule, "masterDetail");
          } else {
            return false;
          }
        };
        GridOptionsWrapper2.prototype.isKeepDetailRows = function() {
          return isTrue(this.gridOptions.keepDetailRows);
        };
        GridOptionsWrapper2.prototype.getKeepDetailRowsCount = function() {
          var keepDetailRowsCount = this.gridOptions.keepDetailRowsCount;
          if (exists(keepDetailRowsCount) && keepDetailRowsCount > 0) {
            return this.gridOptions.keepDetailRowsCount;
          }
          return DEFAULT_KEEP_DETAIL_ROW_COUNT;
        };
        GridOptionsWrapper2.prototype.getIsRowMasterFunc = function() {
          return this.gridOptions.isRowMaster;
        };
        GridOptionsWrapper2.prototype.getIsRowSelectableFunc = function() {
          return this.gridOptions.isRowSelectable;
        };
        GridOptionsWrapper2.prototype.getGroupRowRendererParams = function() {
          return this.gridOptions.groupRowRendererParams;
        };
        GridOptionsWrapper2.prototype.getOverlayLoadingTemplate = function() {
          return this.gridOptions.overlayLoadingTemplate;
        };
        GridOptionsWrapper2.prototype.getOverlayNoRowsTemplate = function() {
          return this.gridOptions.overlayNoRowsTemplate;
        };
        GridOptionsWrapper2.prototype.isSuppressAutoSize = function() {
          return isTrue(this.gridOptions.suppressAutoSize);
        };
        GridOptionsWrapper2.prototype.isEnableCellTextSelection = function() {
          return isTrue(this.gridOptions.enableCellTextSelection);
        };
        GridOptionsWrapper2.prototype.isSuppressParentsInRowNodes = function() {
          return isTrue(this.gridOptions.suppressParentsInRowNodes);
        };
        GridOptionsWrapper2.prototype.isSuppressClipboardApi = function() {
          return isTrue(this.gridOptions.suppressClipboardApi);
        };
        GridOptionsWrapper2.prototype.isFunctionsReadOnly = function() {
          return isTrue(this.gridOptions.functionsReadOnly);
        };
        GridOptionsWrapper2.prototype.isFloatingFilter = function() {
          return this.gridOptions.floatingFilter;
        };
        GridOptionsWrapper2.prototype.isEnableCellTextSelect = function() {
          return isTrue(this.gridOptions.enableCellTextSelection);
        };
        GridOptionsWrapper2.prototype.isEnableOldSetFilterModel = function() {
          return isTrue(this.gridOptions.enableOldSetFilterModel);
        };
        GridOptionsWrapper2.prototype.getDefaultColDef = function() {
          return this.gridOptions.defaultColDef;
        };
        GridOptionsWrapper2.prototype.getDefaultColGroupDef = function() {
          return this.gridOptions.defaultColGroupDef;
        };
        GridOptionsWrapper2.prototype.getDefaultExportParams = function(type) {
          if (this.gridOptions.defaultExportParams) {
            console.warn("AG Grid: Since v25.2 `defaultExportParams`  has been replaced by `default" + capitalise(type) + "ExportParams`'");
            if (type === "csv") {
              return this.gridOptions.defaultExportParams;
            }
            return this.gridOptions.defaultExportParams;
          }
          if (type === "csv" && this.gridOptions.defaultCsvExportParams) {
            return this.gridOptions.defaultCsvExportParams;
          }
          if (type === "excel" && this.gridOptions.defaultExcelExportParams) {
            return this.gridOptions.defaultExcelExportParams;
          }
        };
        GridOptionsWrapper2.prototype.isSuppressCsvExport = function() {
          return isTrue(this.gridOptions.suppressCsvExport);
        };
        GridOptionsWrapper2.prototype.isAllowShowChangeAfterFilter = function() {
          return isTrue(this.gridOptions.allowShowChangeAfterFilter);
        };
        GridOptionsWrapper2.prototype.isSuppressExcelExport = function() {
          return isTrue(this.gridOptions.suppressExcelExport);
        };
        GridOptionsWrapper2.prototype.isSuppressMakeColumnVisibleAfterUnGroup = function() {
          return isTrue(this.gridOptions.suppressMakeColumnVisibleAfterUnGroup);
        };
        GridOptionsWrapper2.prototype.getDataPathFunc = function() {
          return this.gridOptions.getDataPath;
        };
        GridOptionsWrapper2.prototype.getIsServerSideGroupFunc = function() {
          return this.gridOptions.isServerSideGroup;
        };
        GridOptionsWrapper2.prototype.getIsServerSideGroupOpenByDefaultFunc = function() {
          return this.gridOptions.isServerSideGroupOpenByDefault;
        };
        GridOptionsWrapper2.prototype.getIsGroupOpenByDefaultFunc = function() {
          return this.gridOptions.isGroupOpenByDefault;
        };
        GridOptionsWrapper2.prototype.getServerSideGroupKeyFunc = function() {
          return this.gridOptions.getServerSideGroupKey;
        };
        GridOptionsWrapper2.prototype.getGroupRowAggNodesFunc = function() {
          return this.gridOptions.groupRowAggNodes;
        };
        GridOptionsWrapper2.prototype.getContextMenuItemsFunc = function() {
          return this.gridOptions.getContextMenuItems;
        };
        GridOptionsWrapper2.prototype.getMainMenuItemsFunc = function() {
          return this.gridOptions.getMainMenuItems;
        };
        GridOptionsWrapper2.prototype.getRowNodeIdFunc = function() {
          return this.gridOptions.getRowNodeId;
        };
        GridOptionsWrapper2.prototype.getNavigateToNextHeaderFunc = function() {
          return this.gridOptions.navigateToNextHeader;
        };
        GridOptionsWrapper2.prototype.getTabToNextHeaderFunc = function() {
          return this.gridOptions.tabToNextHeader;
        };
        GridOptionsWrapper2.prototype.getNavigateToNextCellFunc = function() {
          return this.gridOptions.navigateToNextCell;
        };
        GridOptionsWrapper2.prototype.getTabToNextCellFunc = function() {
          return this.gridOptions.tabToNextCell;
        };
        GridOptionsWrapper2.prototype.getGridTabIndex = function() {
          return (this.gridOptions.tabIndex || 0).toString();
        };
        GridOptionsWrapper2.prototype.isTreeData = function() {
          var usingTreeData = isTrue(this.gridOptions.treeData);
          if (usingTreeData) {
            return ModuleRegistry.assertRegistered(exports.ModuleNames.RowGroupingModule, "Tree Data");
          }
          return false;
        };
        GridOptionsWrapper2.prototype.isValueCache = function() {
          return isTrue(this.gridOptions.valueCache);
        };
        GridOptionsWrapper2.prototype.isValueCacheNeverExpires = function() {
          return isTrue(this.gridOptions.valueCacheNeverExpires);
        };
        GridOptionsWrapper2.prototype.isDeltaSort = function() {
          return isTrue(this.gridOptions.deltaSort);
        };
        GridOptionsWrapper2.prototype.isAggregateOnlyChangedColumns = function() {
          return isTrue(this.gridOptions.aggregateOnlyChangedColumns);
        };
        GridOptionsWrapper2.prototype.getProcessSecondaryColDefFunc = function() {
          return this.gridOptions.processSecondaryColDef;
        };
        GridOptionsWrapper2.prototype.getProcessSecondaryColGroupDefFunc = function() {
          return this.gridOptions.processSecondaryColGroupDef;
        };
        GridOptionsWrapper2.prototype.getSendToClipboardFunc = function() {
          return this.gridOptions.sendToClipboard;
        };
        GridOptionsWrapper2.prototype.getProcessRowPostCreateFunc = function() {
          return this.gridOptions.processRowPostCreate;
        };
        GridOptionsWrapper2.prototype.getProcessCellForClipboardFunc = function() {
          return this.gridOptions.processCellForClipboard;
        };
        GridOptionsWrapper2.prototype.getProcessHeaderForClipboardFunc = function() {
          return this.gridOptions.processHeaderForClipboard;
        };
        GridOptionsWrapper2.prototype.getProcessCellFromClipboardFunc = function() {
          return this.gridOptions.processCellFromClipboard;
        };
        GridOptionsWrapper2.prototype.getViewportRowModelPageSize = function() {
          return oneOrGreater(this.gridOptions.viewportRowModelPageSize, DEFAULT_VIEWPORT_ROW_MODEL_PAGE_SIZE);
        };
        GridOptionsWrapper2.prototype.getViewportRowModelBufferSize = function() {
          return zeroOrGreater(this.gridOptions.viewportRowModelBufferSize, DEFAULT_VIEWPORT_ROW_MODEL_BUFFER_SIZE);
        };
        GridOptionsWrapper2.prototype.isServerSideSortingAlwaysResets = function() {
          return isTrue(this.gridOptions.serverSideSortingAlwaysResets);
        };
        GridOptionsWrapper2.prototype.isServerSideFilteringAlwaysResets = function() {
          return isTrue(this.gridOptions.serverSideFilteringAlwaysResets);
        };
        GridOptionsWrapper2.prototype.getPostSortFunc = function() {
          return this.gridOptions.postSort;
        };
        GridOptionsWrapper2.prototype.getChartToolbarItemsFunc = function() {
          return this.gridOptions.getChartToolbarItems;
        };
        GridOptionsWrapper2.prototype.getChartThemeOverrides = function() {
          return this.gridOptions.chartThemeOverrides;
        };
        GridOptionsWrapper2.prototype.getCustomChartThemes = function() {
          return this.gridOptions.customChartThemes;
        };
        GridOptionsWrapper2.prototype.getChartThemes = function() {
          return this.gridOptions.chartThemes || ["ag-default", "ag-material", "ag-pastel", "ag-vivid", "ag-solar"];
        };
        GridOptionsWrapper2.prototype.getClipboardDeliminator = function() {
          return exists(this.gridOptions.clipboardDeliminator) ? this.gridOptions.clipboardDeliminator : "	";
        };
        GridOptionsWrapper2.prototype.setProperty = function(key, value, force) {
          if (force === void 0) {
            force = false;
          }
          var gridOptionsNoType = this.gridOptions;
          var previousValue = gridOptionsNoType[key];
          if (force || previousValue !== value) {
            gridOptionsNoType[key] = value;
            var event_1 = {
              type: key,
              currentValue: value,
              previousValue
            };
            this.propertyEventService.dispatchEvent(event_1);
          }
        };
        GridOptionsWrapper2.prototype.addEventListener = function(key, listener) {
          this.propertyEventService.addEventListener(key, listener);
        };
        GridOptionsWrapper2.prototype.removeEventListener = function(key, listener) {
          this.propertyEventService.removeEventListener(key, listener);
        };
        GridOptionsWrapper2.prototype.isSkipHeaderOnAutoSize = function() {
          return !!this.gridOptions.skipHeaderOnAutoSize;
        };
        GridOptionsWrapper2.prototype.getAutoSizePadding = function() {
          var value = this.gridOptions.autoSizePadding;
          return value != null && value >= 0 ? value : 20;
        };
        GridOptionsWrapper2.prototype.getHeaderHeight = function() {
          if (typeof this.gridOptions.headerHeight === "number") {
            return this.gridOptions.headerHeight;
          }
          return this.getFromTheme(25, "headerHeight");
        };
        GridOptionsWrapper2.prototype.getFloatingFiltersHeight = function() {
          if (typeof this.gridOptions.floatingFiltersHeight === "number") {
            return this.gridOptions.floatingFiltersHeight;
          }
          return this.getFromTheme(25, "headerHeight");
        };
        GridOptionsWrapper2.prototype.getGroupHeaderHeight = function() {
          if (typeof this.gridOptions.groupHeaderHeight === "number") {
            return this.gridOptions.groupHeaderHeight;
          }
          return this.getHeaderHeight();
        };
        GridOptionsWrapper2.prototype.getPivotHeaderHeight = function() {
          if (typeof this.gridOptions.pivotHeaderHeight === "number") {
            return this.gridOptions.pivotHeaderHeight;
          }
          return this.getHeaderHeight();
        };
        GridOptionsWrapper2.prototype.getPivotGroupHeaderHeight = function() {
          if (typeof this.gridOptions.pivotGroupHeaderHeight === "number") {
            return this.gridOptions.pivotGroupHeaderHeight;
          }
          return this.getGroupHeaderHeight();
        };
        GridOptionsWrapper2.prototype.isExternalFilterPresent = function() {
          if (typeof this.gridOptions.isExternalFilterPresent === "function") {
            return this.gridOptions.isExternalFilterPresent();
          }
          return false;
        };
        GridOptionsWrapper2.prototype.doesExternalFilterPass = function(node) {
          if (typeof this.gridOptions.doesExternalFilterPass === "function") {
            return this.gridOptions.doesExternalFilterPass(node);
          }
          return false;
        };
        GridOptionsWrapper2.prototype.getTooltipShowDelay = function() {
          var tooltipShowDelay = this.gridOptions.tooltipShowDelay;
          if (exists(tooltipShowDelay)) {
            if (tooltipShowDelay < 0) {
              console.warn("ag-grid: tooltipShowDelay should not be lower than 0");
            }
            return Math.max(200, tooltipShowDelay);
          }
          return null;
        };
        GridOptionsWrapper2.prototype.isTooltipMouseTrack = function() {
          return isTrue(this.gridOptions.tooltipMouseTrack);
        };
        GridOptionsWrapper2.prototype.isSuppressModelUpdateAfterUpdateTransaction = function() {
          return isTrue(this.gridOptions.suppressModelUpdateAfterUpdateTransaction);
        };
        GridOptionsWrapper2.prototype.getDocument = function() {
          var result = null;
          if (this.gridOptions.getDocument && exists(this.gridOptions.getDocument)) {
            result = this.gridOptions.getDocument();
          }
          if (result && exists(result)) {
            return result;
          }
          return document;
        };
        GridOptionsWrapper2.prototype.getMinColWidth = function() {
          var minColWidth = this.gridOptions.minColWidth;
          if (exists(minColWidth) && minColWidth > GridOptionsWrapper_1.MIN_COL_WIDTH) {
            return this.gridOptions.minColWidth;
          }
          var measuredMin = this.getFromTheme(null, "headerCellMinWidth");
          return exists(measuredMin) ? Math.max(measuredMin, GridOptionsWrapper_1.MIN_COL_WIDTH) : GridOptionsWrapper_1.MIN_COL_WIDTH;
        };
        GridOptionsWrapper2.prototype.getMaxColWidth = function() {
          if (this.gridOptions.maxColWidth && this.gridOptions.maxColWidth > GridOptionsWrapper_1.MIN_COL_WIDTH) {
            return this.gridOptions.maxColWidth;
          }
          return null;
        };
        GridOptionsWrapper2.prototype.getColWidth = function() {
          if (typeof this.gridOptions.colWidth !== "number" || this.gridOptions.colWidth < GridOptionsWrapper_1.MIN_COL_WIDTH) {
            return 200;
          }
          return this.gridOptions.colWidth;
        };
        GridOptionsWrapper2.prototype.getRowBuffer = function() {
          var rowBuffer = this.gridOptions.rowBuffer;
          if (typeof rowBuffer === "number") {
            if (rowBuffer < 0) {
              doOnce(function() {
                return console.warn("AG Grid: rowBuffer should not be negative");
              }, "warn rowBuffer negative");
              this.gridOptions.rowBuffer = rowBuffer = 0;
            }
          } else {
            rowBuffer = Constants.ROW_BUFFER_SIZE;
          }
          return rowBuffer;
        };
        GridOptionsWrapper2.prototype.getRowBufferInPixels = function() {
          var rowsToBuffer = this.getRowBuffer();
          var defaultRowHeight = this.getRowHeightAsNumber();
          return rowsToBuffer * defaultRowHeight;
        };
        GridOptionsWrapper2.prototype.getScrollbarWidth = function() {
          if (this.scrollbarWidth == null) {
            var useGridOptions = typeof this.gridOptions.scrollbarWidth === "number" && this.gridOptions.scrollbarWidth >= 0;
            var scrollbarWidth = useGridOptions ? this.gridOptions.scrollbarWidth : getScrollbarWidth();
            if (scrollbarWidth != null) {
              this.scrollbarWidth = scrollbarWidth;
              this.eventService.dispatchEvent({
                type: Events.EVENT_SCROLLBAR_WIDTH_CHANGED
              });
            }
          }
          return this.scrollbarWidth;
        };
        GridOptionsWrapper2.prototype.checkForDeprecated = function() {
          var options = this.gridOptions;
          if (options.deprecatedEmbedFullWidthRows) {
            console.warn("AG Grid: since v21.2, deprecatedEmbedFullWidthRows has been replaced with embedFullWidthRows.");
          }
          if (options.enableOldSetFilterModel) {
            console.warn("AG Grid: since v22.x, enableOldSetFilterModel is deprecated. Please move to the new Set Filter Model as the old one may not be supported in v23 onwards.");
          }
          if (options.floatingFilter) {
            console.warn("AG Grid: since v23.1, floatingFilter on the gridOptions is deprecated. Please use floatingFilter on the colDef instead.");
            if (!options.defaultColDef) {
              options.defaultColDef = {};
            }
            if (options.defaultColDef.floatingFilter == null) {
              options.defaultColDef.floatingFilter = true;
            }
          }
          if (options.rowDeselection) {
            console.warn("AG Grid: since v24.x, rowDeselection is deprecated and the behaviour is true by default. Please use `suppressRowDeselection` to prevent rows from being deselected.");
          }
          if (options.enableMultiRowDragging) {
            options.rowDragMultiRow = true;
            delete options.enableMultiRowDragging;
            console.warn("AG Grid: since v26.1, `enableMultiRowDragging` is deprecated. Please use `rowDragMultiRow`.");
          }
          var checkRenamedProperty = function(oldProp, newProp, version) {
            if (options[oldProp] != null) {
              console.warn("ag-grid: since version " + version + ", '" + oldProp + "' is deprecated / renamed, please use the new property name '" + newProp + "' instead.");
              if (options[newProp] == null) {
                options[newProp] = options[oldProp];
              }
            }
          };
          checkRenamedProperty("batchUpdateWaitMillis", "asyncTransactionWaitMillis", "23.1.x");
          checkRenamedProperty("deltaRowDataMode", "immutableData", "23.1.x");
          if (options.immutableColumns || options.deltaColumnMode) {
            console.warn("AG Grid: since v24.0, immutableColumns and deltaColumnMode properties are gone. The grid now works like this as default. To keep column order maintained, set grid property applyColumnDefOrder=true");
          }
          checkRenamedProperty("suppressSetColumnStateEvents", "suppressColumnStateEvents", "24.0.x");
          if (options.groupRowInnerRenderer || options.groupRowInnerRendererParams || options.groupRowInnerRendererFramework) {
            console.warn("AG Grid: since v24.0, grid properties groupRowInnerRenderer, groupRowInnerRendererFramework and groupRowInnerRendererParams are no longer used.");
            console.warn("  Instead use the grid properties groupRowRendererParams.innerRenderer, groupRowRendererParams.innerRendererFramework and groupRowRendererParams.innerRendererParams.");
            console.warn("  For example instead of this:");
            console.warn('    groupRowInnerRenderer: "myRenderer"');
            console.warn("    groupRowInnerRendererParams: {x: a}");
            console.warn("  Replace with this:");
            console.warn("    groupRowRendererParams: {");
            console.warn('      innerRenderer: "myRenderer",');
            console.warn("      innerRendererParams: {x: a}");
            console.warn("    }");
            console.warn("  We have copied the properties over for you. However to stop this error message, please change your application code.");
            if (!options.groupRowRendererParams) {
              options.groupRowRendererParams = {};
            }
            var params = options.groupRowRendererParams;
            if (options.groupRowInnerRenderer) {
              params.innerRenderer = options.groupRowInnerRenderer;
            }
            if (options.groupRowInnerRendererParams) {
              params.innerRendererParams = options.groupRowInnerRendererParams;
            }
            if (options.groupRowInnerRendererFramework) {
              params.innerRendererFramework = options.groupRowInnerRendererFramework;
            }
          }
          if (options.rememberGroupStateWhenNewData) {
            console.warn("AG Grid: since v24.0, grid property rememberGroupStateWhenNewData is deprecated. This feature was provided before Transaction Updates worked (which keep group state). Now that transaction updates are possible and they keep group state, this feature is no longer needed.");
          }
          if (options.detailCellRendererParams && options.detailCellRendererParams.autoHeight) {
            console.warn("AG Grid: since v24.1, grid property detailCellRendererParams.autoHeight is replaced with grid property detailRowAutoHeight. This allows this feature to work when you provide a custom DetailCellRenderer");
            options.detailRowAutoHeight = true;
          }
          if (options.suppressKeyboardEvent) {
            console.warn("AG Grid: since v24.1 suppressKeyboardEvent in the gridOptions has been deprecated and will be removed in\n                 future versions of AG Grid. If you need this to be set for every column use the defaultColDef property.");
          }
          if (options.suppressEnterpriseResetOnNewColumns) {
            console.warn("AG Grid: since v25, grid property suppressEnterpriseResetOnNewColumns is deprecated. This was a temporary property to allow changing columns in Server Side Row Model without triggering a reload. Now that it is possible to dynamically change columns in the grid, this is no longer needed.");
          }
          if (options.suppressColumnStateEvents) {
            console.warn('AG Grid: since v25, grid property suppressColumnStateEvents no longer works due to a refactor that we did. It should be possible to achieve similar using event.source, which would be "api" if the event was due to setting column state via the API');
          }
          if (options.defaultExportParams) {
            console.warn("AG Grid: since v25.2, the grid property `defaultExportParams` has been replaced by `defaultCsvExportParams` and `defaultExcelExportParams`.");
          }
          if (options.stopEditingWhenGridLosesFocus) {
            console.warn("AG Grid: since v25.2.2, the grid property `stopEditingWhenGridLosesFocus` has been replaced by `stopEditingWhenCellsLoseFocus`.");
            options.stopEditingWhenCellsLoseFocus = true;
          }
          if (options.applyColumnDefOrder) {
            console.warn("AG Grid: since v26.0, the grid property `applyColumnDefOrder` is no longer needed, as this is the default behaviour. To turn this behaviour off, set maintainColumnOrder=true");
          }
          if (options.groupMultiAutoColumn) {
            console.warn("AG Grid: since v26.0, the grid property `groupMultiAutoColumn` has been replaced by `groupDisplayType = 'multipleColumns'`");
            options.groupDisplayType = "multipleColumns";
          }
          if (options.groupUseEntireRow) {
            console.warn("AG Grid: since v26.0, the grid property `groupUseEntireRow` has been replaced by `groupDisplayType = 'groupRows'`");
            options.groupDisplayType = "groupRows";
          }
          if (options.groupSuppressAutoColumn) {
            var propName = options.treeData ? "treeDataDisplayType" : "groupDisplayType";
            console.warn("AG Grid: since v26.0, the grid property `groupSuppressAutoColumn` has been replaced by `" + propName + " = 'custom'`");
            options.groupDisplayType = "custom";
          }
          if (options.defaultGroupSortComparator) {
            console.warn("AG Grid: since v26.0, the grid property `defaultGroupSortComparator` has been replaced by `defaultGroupOrderComparator`");
            options.defaultGroupOrderComparator = options.defaultGroupSortComparator;
          }
          if (options.colWidth) {
            console.warn("AG Grid: since v26.1, the grid property `colWidth` is deprecated and should be set via `defaultColDef.width`.");
          }
          if (options.minColWidth) {
            console.warn("AG Grid: since v26.1, the grid property `minColWidth` is deprecated and should be set via `defaultColDef.minWidth`.");
          }
          if (options.maxColWidth) {
            console.warn("AG Grid: since v26.1, the grid property `maxColWidth` is deprecated and should be set via `defaultColDef.maxWidth`.");
          }
        };
        GridOptionsWrapper2.prototype.checkForViolations = function() {
          if (this.isTreeData()) {
            this.treeDataViolations();
          }
        };
        GridOptionsWrapper2.prototype.treeDataViolations = function() {
          if (this.isRowModelDefault()) {
            if (missing(this.getDataPathFunc())) {
              console.warn("AG Grid: property usingTreeData=true with rowModel=clientSide, but you did not provide getDataPath function, please provide getDataPath function if using tree data.");
            }
          }
          if (this.isRowModelServerSide()) {
            if (missing(this.getIsServerSideGroupFunc())) {
              console.warn("AG Grid: property usingTreeData=true with rowModel=serverSide, but you did not provide isServerSideGroup function, please provide isServerSideGroup function if using tree data.");
            }
            if (missing(this.getServerSideGroupKeyFunc())) {
              console.warn("AG Grid: property usingTreeData=true with rowModel=serverSide, but you did not provide getServerSideGroupKey function, please provide getServerSideGroupKey function if using tree data.");
            }
          }
        };
        GridOptionsWrapper2.prototype.getLocaleTextFunc = function() {
          if (this.gridOptions.localeTextFunc) {
            return this.gridOptions.localeTextFunc;
          }
          var localeText = this.gridOptions.localeText;
          return function(key, defaultValue) {
            return localeText && localeText[key] ? localeText[key] : defaultValue;
          };
        };
        GridOptionsWrapper2.prototype.globalEventHandler = function(eventName, event) {
          if (this.destroyed) {
            return;
          }
          var callbackMethodName = ComponentUtil3.getCallbackForEvent(eventName);
          if (typeof this.gridOptions[callbackMethodName] === "function") {
            this.gridOptions[callbackMethodName](event);
          }
        };
        GridOptionsWrapper2.prototype.getRowHeightAsNumber = function() {
          if (!this.gridOptions.rowHeight || missing(this.gridOptions.rowHeight)) {
            return this.getDefaultRowHeight();
          }
          if (this.gridOptions.rowHeight && this.isNumeric(this.gridOptions.rowHeight)) {
            return this.gridOptions.rowHeight;
          }
          console.warn("AG Grid row height must be a number if not using standard row model");
          return this.getDefaultRowHeight();
        };
        GridOptionsWrapper2.prototype.getRowHeightForNode = function(rowNode, allowEstimate, defaultRowHeight) {
          if (allowEstimate === void 0) {
            allowEstimate = false;
          }
          if (defaultRowHeight == null) {
            defaultRowHeight = this.getDefaultRowHeight();
          }
          if (typeof this.gridOptions.getRowHeight === "function") {
            if (allowEstimate) {
              return { height: defaultRowHeight, estimated: true };
            }
            var params = {
              node: rowNode,
              data: rowNode.data,
              api: this.gridOptions.api,
              context: this.gridOptions.context
            };
            var height = this.gridOptions.getRowHeight(params);
            if (this.isNumeric(height)) {
              if (height === 0) {
                doOnce(function() {
                  return console.warn("AG Grid: The return of `getRowHeight` cannot be zero. If the intention is to hide rows, use a filter instead.");
                }, "invalidRowHeight");
              }
              return { height: Math.max(1, height), estimated: false };
            }
          }
          if (rowNode.detail && this.isMasterDetail()) {
            if (this.isNumeric(this.gridOptions.detailRowHeight)) {
              return { height: this.gridOptions.detailRowHeight, estimated: false };
            }
            return { height: DEFAULT_DETAIL_ROW_HEIGHT, estimated: false };
          }
          var rowHeight = this.gridOptions.rowHeight && this.isNumeric(this.gridOptions.rowHeight) ? this.gridOptions.rowHeight : defaultRowHeight;
          return { height: rowHeight, estimated: false };
        };
        GridOptionsWrapper2.prototype.isDynamicRowHeight = function() {
          return typeof this.gridOptions.getRowHeight === "function";
        };
        GridOptionsWrapper2.prototype.getListItemHeight = function() {
          return this.getFromTheme(20, "listItemHeight");
        };
        GridOptionsWrapper2.prototype.chartMenuPanelWidth = function() {
          return this.environment.chartMenuPanelWidth();
        };
        GridOptionsWrapper2.prototype.isNumeric = function(value) {
          return !isNaN(value) && typeof value === "number" && isFinite(value);
        };
        GridOptionsWrapper2.prototype.getFromTheme = function(defaultValue, sassVariableName) {
          var theme = this.environment.getTheme().theme;
          if (theme && theme.indexOf("ag-theme") === 0) {
            return this.environment.getSassVariable(theme, sassVariableName);
          }
          return defaultValue;
        };
        GridOptionsWrapper2.prototype.getDefaultRowHeight = function() {
          return this.getFromTheme(DEFAULT_ROW_HEIGHT, "rowHeight");
        };
        GridOptionsWrapper2.prototype.matchesGroupDisplayType = function(toMatch, supplied) {
          var groupDisplayTypeValues = ["groupRows", "multipleColumns", "custom", "singleColumn"];
          if (groupDisplayTypeValues.indexOf(supplied) < 0) {
            console.warn("AG Grid: '" + supplied + "' is not a valid groupDisplayType value - possible values are: '" + groupDisplayTypeValues.join("', '") + "'");
            return false;
          }
          return supplied === toMatch;
        };
        GridOptionsWrapper2.prototype.matchesTreeDataDisplayType = function(toMatch, supplied) {
          var treeDataDisplayTypeValues = ["auto", "custom"];
          if (treeDataDisplayTypeValues.indexOf(supplied) < 0) {
            console.warn("AG Grid: '" + supplied + "' is not a valid treeDataDisplayType value - possible values are: '" + treeDataDisplayTypeValues.join("', '") + "'");
            return false;
          }
          return supplied === toMatch;
        };
        var GridOptionsWrapper_1;
        GridOptionsWrapper2.MIN_COL_WIDTH = 10;
        GridOptionsWrapper2.PROP_HEADER_HEIGHT = "headerHeight";
        GridOptionsWrapper2.PROP_GROUP_REMOVE_SINGLE_CHILDREN = "groupRemoveSingleChildren";
        GridOptionsWrapper2.PROP_GROUP_REMOVE_LOWEST_SINGLE_CHILDREN = "groupRemoveLowestSingleChildren";
        GridOptionsWrapper2.PROP_PIVOT_HEADER_HEIGHT = "pivotHeaderHeight";
        GridOptionsWrapper2.PROP_SUPPRESS_CLIPBOARD_PASTE = "suppressClipboardPaste";
        GridOptionsWrapper2.PROP_GROUP_HEADER_HEIGHT = "groupHeaderHeight";
        GridOptionsWrapper2.PROP_PIVOT_GROUP_HEADER_HEIGHT = "pivotGroupHeaderHeight";
        GridOptionsWrapper2.PROP_NAVIGATE_TO_NEXT_CELL = "navigateToNextCell";
        GridOptionsWrapper2.PROP_TAB_TO_NEXT_CELL = "tabToNextCell";
        GridOptionsWrapper2.PROP_NAVIGATE_TO_NEXT_HEADER = "navigateToNextHeader";
        GridOptionsWrapper2.PROP_TAB_TO_NEXT_HEADER = "tabToNextHeader";
        GridOptionsWrapper2.PROP_IS_EXTERNAL_FILTER_PRESENT = "isExternalFilterPresent";
        GridOptionsWrapper2.PROP_DOES_EXTERNAL_FILTER_PASS = "doesExternalFilterPass";
        GridOptionsWrapper2.PROP_FLOATING_FILTERS_HEIGHT = "floatingFiltersHeight";
        GridOptionsWrapper2.PROP_SUPPRESS_ROW_CLICK_SELECTION = "suppressRowClickSelection";
        GridOptionsWrapper2.PROP_SUPPRESS_ROW_DRAG = "suppressRowDrag";
        GridOptionsWrapper2.PROP_SUPPRESS_MOVE_WHEN_ROW_DRAG = "suppressMoveWhenRowDragging";
        GridOptionsWrapper2.PROP_GET_ROW_CLASS = "getRowClass";
        GridOptionsWrapper2.PROP_GET_ROW_STYLE = "getRowStyle";
        GridOptionsWrapper2.PROP_GET_ROW_HEIGHT = "getRowHeight";
        GridOptionsWrapper2.PROP_POPUP_PARENT = "popupParent";
        GridOptionsWrapper2.PROP_DOM_LAYOUT = "domLayout";
        GridOptionsWrapper2.PROP_FILL_HANDLE_DIRECTION = "fillHandleDirection";
        GridOptionsWrapper2.PROP_GROUP_ROW_AGG_NODES = "groupRowAggNodes";
        GridOptionsWrapper2.PROP_GET_BUSINESS_KEY_FOR_NODE = "getBusinessKeyForNode";
        GridOptionsWrapper2.PROP_GET_CHILD_COUNT = "getChildCount";
        GridOptionsWrapper2.PROP_PROCESS_ROW_POST_CREATE = "processRowPostCreate";
        GridOptionsWrapper2.PROP_GET_ROW_NODE_ID = "getRowNodeId";
        GridOptionsWrapper2.PROP_IS_FULL_WIDTH_CELL = "isFullWidthCell";
        GridOptionsWrapper2.PROP_IS_ROW_SELECTABLE = "isRowSelectable";
        GridOptionsWrapper2.PROP_IS_ROW_MASTER = "isRowMaster";
        GridOptionsWrapper2.PROP_POST_SORT = "postSort";
        GridOptionsWrapper2.PROP_GET_DOCUMENT = "getDocument";
        GridOptionsWrapper2.PROP_POST_PROCESS_POPUP = "postProcessPopup";
        GridOptionsWrapper2.PROP_DEFAULT_GROUP_ORDER_COMPARATOR = "defaultGroupOrderComparator";
        GridOptionsWrapper2.PROP_PAGINATION_NUMBER_FORMATTER = "paginationNumberFormatter";
        GridOptionsWrapper2.PROP_GET_CONTEXT_MENU_ITEMS = "getContextMenuItems";
        GridOptionsWrapper2.PROP_GET_MAIN_MENU_ITEMS = "getMainMenuItems";
        GridOptionsWrapper2.PROP_PROCESS_CELL_FOR_CLIPBOARD = "processCellForClipboard";
        GridOptionsWrapper2.PROP_PROCESS_CELL_FROM_CLIPBOARD = "processCellFromClipboard";
        GridOptionsWrapper2.PROP_SEND_TO_CLIPBOARD = "sendToClipboard";
        GridOptionsWrapper2.PROP_PROCESS_TO_SECONDARY_COLDEF = "processSecondaryColDef";
        GridOptionsWrapper2.PROP_PROCESS_SECONDARY_COL_GROUP_DEF = "processSecondaryColGroupDef";
        GridOptionsWrapper2.PROP_GET_CHART_TOOLBAR_ITEMS = "getChartToolbarItems";
        GridOptionsWrapper2.PROP_GET_SERVER_SIDE_STORE_PARAMS = "getServerSideStoreParams";
        GridOptionsWrapper2.PROP_IS_SERVER_SIDE_GROUPS_OPEN_BY_DEFAULT = "isServerSideGroupOpenByDefault";
        GridOptionsWrapper2.PROP_IS_APPLY_SERVER_SIDE_TRANSACTION = "isApplyServerSideTransaction";
        GridOptionsWrapper2.PROP_IS_SERVER_SIDE_GROUP = "isServerSideGroup";
        GridOptionsWrapper2.PROP_GET_SERVER_SIDE_GROUP_KEY = "getServerSideGroupKey";
        __decorate$F([
          Autowired("gridOptions")
        ], GridOptionsWrapper2.prototype, "gridOptions", void 0);
        __decorate$F([
          Autowired("eventService")
        ], GridOptionsWrapper2.prototype, "eventService", void 0);
        __decorate$F([
          Autowired("environment")
        ], GridOptionsWrapper2.prototype, "environment", void 0);
        __decorate$F([
          __param$3(0, Qualifier("gridApi")),
          __param$3(1, Qualifier("columnApi"))
        ], GridOptionsWrapper2.prototype, "agWire", null);
        __decorate$F([
          PreDestroy
        ], GridOptionsWrapper2.prototype, "destroy", null);
        __decorate$F([
          PostConstruct
        ], GridOptionsWrapper2.prototype, "init", null);
        GridOptionsWrapper2 = GridOptionsWrapper_1 = __decorate$F([
          Bean3("gridOptionsWrapper")
        ], GridOptionsWrapper2);
        return GridOptionsWrapper2;
      }()
    );
    var ChangedPath = (
      /** @class */
      function() {
        function ChangedPath2(keepingColumns, rootNode) {
          this.active = true;
          this.nodeIdsToColumns = {};
          this.mapToItems = {};
          this.keepingColumns = keepingColumns;
          this.pathRoot = {
            rowNode: rootNode,
            children: null
          };
          this.mapToItems[rootNode.id] = this.pathRoot;
        }
        ChangedPath2.prototype.setInactive = function() {
          this.active = false;
        };
        ChangedPath2.prototype.isActive = function() {
          return this.active;
        };
        ChangedPath2.prototype.depthFirstSearchChangedPath = function(pathItem, callback) {
          if (pathItem.children) {
            for (var i = 0; i < pathItem.children.length; i++) {
              this.depthFirstSearchChangedPath(pathItem.children[i], callback);
            }
          }
          callback(pathItem.rowNode);
        };
        ChangedPath2.prototype.depthFirstSearchEverything = function(rowNode, callback, traverseEverything) {
          if (rowNode.childrenAfterGroup) {
            for (var i = 0; i < rowNode.childrenAfterGroup.length; i++) {
              var childNode = rowNode.childrenAfterGroup[i];
              if (childNode.childrenAfterGroup) {
                this.depthFirstSearchEverything(rowNode.childrenAfterGroup[i], callback, traverseEverything);
              } else if (traverseEverything) {
                callback(childNode);
              }
            }
          }
          callback(rowNode);
        };
        ChangedPath2.prototype.forEachChangedNodeDepthFirst = function(callback, traverseLeafNodes) {
          if (traverseLeafNodes === void 0) {
            traverseLeafNodes = false;
          }
          if (this.active) {
            this.depthFirstSearchChangedPath(this.pathRoot, callback);
          } else {
            this.depthFirstSearchEverything(this.pathRoot.rowNode, callback, traverseLeafNodes);
          }
        };
        ChangedPath2.prototype.executeFromRootNode = function(callback) {
          callback(this.pathRoot.rowNode);
        };
        ChangedPath2.prototype.createPathItems = function(rowNode) {
          var pointer = rowNode;
          var newEntryCount = 0;
          while (!this.mapToItems[pointer.id]) {
            var newEntry = {
              rowNode: pointer,
              children: null
            };
            this.mapToItems[pointer.id] = newEntry;
            newEntryCount++;
            pointer = pointer.parent;
          }
          return newEntryCount;
        };
        ChangedPath2.prototype.populateColumnsMap = function(rowNode, columns) {
          var _this = this;
          if (!this.keepingColumns || !columns) {
            return;
          }
          var pointer = rowNode;
          while (pointer) {
            if (!this.nodeIdsToColumns[pointer.id]) {
              this.nodeIdsToColumns[pointer.id] = {};
            }
            columns.forEach(function(col) {
              return _this.nodeIdsToColumns[pointer.id][col.getId()] = true;
            });
            pointer = pointer.parent;
          }
        };
        ChangedPath2.prototype.linkPathItems = function(rowNode, newEntryCount) {
          var pointer = rowNode;
          for (var i = 0; i < newEntryCount; i++) {
            var thisItem = this.mapToItems[pointer.id];
            var parentItem = this.mapToItems[pointer.parent.id];
            if (!parentItem.children) {
              parentItem.children = [];
            }
            parentItem.children.push(thisItem);
            pointer = pointer.parent;
          }
        };
        ChangedPath2.prototype.addParentNode = function(rowNode, columns) {
          if (!rowNode || rowNode.isRowPinned()) {
            return;
          }
          var newEntryCount = this.createPathItems(rowNode);
          this.linkPathItems(rowNode, newEntryCount);
          this.populateColumnsMap(rowNode, columns);
        };
        ChangedPath2.prototype.canSkip = function(rowNode) {
          return this.active && !this.mapToItems[rowNode.id];
        };
        ChangedPath2.prototype.getValueColumnsForNode = function(rowNode, valueColumns) {
          if (!this.keepingColumns) {
            return valueColumns;
          }
          var colsForThisNode = this.nodeIdsToColumns[rowNode.id];
          var result = valueColumns.filter(function(col) {
            return colsForThisNode[col.getId()];
          });
          return result;
        };
        ChangedPath2.prototype.getNotValueColumnsForNode = function(rowNode, valueColumns) {
          if (!this.keepingColumns) {
            return null;
          }
          var colsForThisNode = this.nodeIdsToColumns[rowNode.id];
          var result = valueColumns.filter(function(col) {
            return !colsForThisNode[col.getId()];
          });
          return result;
        };
        return ChangedPath2;
      }()
    );
    var __extends$M = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$G = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __param$4 = function(paramIndex, decorator) {
      return function(target, key) {
        decorator(target, key, paramIndex);
      };
    };
    var SelectionService = (
      /** @class */
      function(_super) {
        __extends$M(SelectionService2, _super);
        function SelectionService2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        SelectionService2.prototype.setBeans = function(loggerFactory) {
          this.logger = loggerFactory.create("selectionService");
          this.reset();
          if (this.gridOptionsWrapper.isRowModelDefault()) {
            this.addManagedListener(this.eventService, Events.EVENT_ROW_DATA_CHANGED, this.reset.bind(this));
          }
        };
        SelectionService2.prototype.init = function() {
          this.groupSelectsChildren = this.gridOptionsWrapper.isGroupSelectsChildren();
          this.addManagedListener(this.eventService, Events.EVENT_ROW_SELECTED, this.onRowSelected.bind(this));
        };
        SelectionService2.prototype.setLastSelectedNode = function(rowNode) {
          this.lastSelectedNode = rowNode;
        };
        SelectionService2.prototype.getLastSelectedNode = function() {
          return this.lastSelectedNode;
        };
        SelectionService2.prototype.getSelectedNodes = function() {
          var selectedNodes = [];
          iterateObject(this.selectedNodes, function(key, rowNode) {
            if (rowNode) {
              selectedNodes.push(rowNode);
            }
          });
          return selectedNodes;
        };
        SelectionService2.prototype.getSelectedRows = function() {
          var selectedRows = [];
          iterateObject(this.selectedNodes, function(key, rowNode) {
            if (rowNode && rowNode.data) {
              selectedRows.push(rowNode.data);
            }
          });
          return selectedRows;
        };
        SelectionService2.prototype.removeGroupsFromSelection = function() {
          var _this = this;
          iterateObject(this.selectedNodes, function(key, rowNode) {
            if (rowNode && rowNode.group) {
              _this.selectedNodes[rowNode.id] = void 0;
            }
          });
        };
        SelectionService2.prototype.updateGroupsFromChildrenSelections = function(changedPath) {
          if (!this.gridOptionsWrapper.isGroupSelectsChildren()) {
            return;
          }
          if (this.rowModel.getType() !== Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {
            return;
          }
          var clientSideRowModel = this.rowModel;
          var rootNode = clientSideRowModel.getRootNode();
          if (!changedPath) {
            changedPath = new ChangedPath(true, rootNode);
            changedPath.setInactive();
          }
          changedPath.forEachChangedNodeDepthFirst(function(rowNode) {
            if (rowNode !== rootNode) {
              rowNode.calculateSelectedFromChildren();
            }
          });
        };
        SelectionService2.prototype.getNodeForIdIfSelected = function(id) {
          return this.selectedNodes[id];
        };
        SelectionService2.prototype.clearOtherNodes = function(rowNodeToKeepSelected) {
          var _this = this;
          var groupsToRefresh = {};
          var updatedCount = 0;
          iterateObject(this.selectedNodes, function(key, otherRowNode) {
            if (otherRowNode && otherRowNode.id !== rowNodeToKeepSelected.id) {
              var rowNode = _this.selectedNodes[otherRowNode.id];
              updatedCount += rowNode.setSelectedParams({
                newValue: false,
                clearSelection: false,
                suppressFinishActions: true
              });
              if (_this.groupSelectsChildren && otherRowNode.parent) {
                groupsToRefresh[otherRowNode.parent.id] = otherRowNode.parent;
              }
            }
          });
          iterateObject(groupsToRefresh, function(key, group) {
            group.calculateSelectedFromChildren();
          });
          return updatedCount;
        };
        SelectionService2.prototype.onRowSelected = function(event) {
          var rowNode = event.node;
          if (this.groupSelectsChildren && rowNode.group) {
            return;
          }
          if (rowNode.isSelected()) {
            this.selectedNodes[rowNode.id] = rowNode;
          } else {
            this.selectedNodes[rowNode.id] = void 0;
          }
        };
        SelectionService2.prototype.syncInRowNode = function(rowNode, oldNode) {
          this.syncInOldRowNode(rowNode, oldNode);
          this.syncInNewRowNode(rowNode);
        };
        SelectionService2.prototype.syncInOldRowNode = function(rowNode, oldNode) {
          var oldNodeHasDifferentId = exists(oldNode) && rowNode.id !== oldNode.id;
          if (oldNodeHasDifferentId && oldNode) {
            var id = oldNode.id;
            var oldNodeSelected = this.selectedNodes[id] == rowNode;
            if (oldNodeSelected) {
              this.selectedNodes[oldNode.id] = oldNode;
            }
          }
        };
        SelectionService2.prototype.syncInNewRowNode = function(rowNode) {
          if (exists(this.selectedNodes[rowNode.id])) {
            rowNode.setSelectedInitialValue(true);
            this.selectedNodes[rowNode.id] = rowNode;
          } else {
            rowNode.setSelectedInitialValue(false);
          }
        };
        SelectionService2.prototype.reset = function() {
          this.logger.log("reset");
          this.selectedNodes = {};
          this.lastSelectedNode = null;
        };
        SelectionService2.prototype.getBestCostNodeSelection = function() {
          if (this.rowModel.getType() !== Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {
            console.warn("getBestCostNodeSelection is only available when using normal row model");
            return;
          }
          var clientSideRowModel = this.rowModel;
          var topLevelNodes = clientSideRowModel.getTopLevelNodes();
          if (topLevelNodes === null) {
            console.warn("selectAll not available doing rowModel=virtual");
            return;
          }
          var result = [];
          function traverse(nodes) {
            for (var i = 0, l = nodes.length; i < l; i++) {
              var node = nodes[i];
              if (node.isSelected()) {
                result.push(node);
              } else {
                var maybeGroup = node;
                if (maybeGroup.group && maybeGroup.children) {
                  traverse(maybeGroup.children);
                }
              }
            }
          }
          traverse(topLevelNodes);
          return result;
        };
        SelectionService2.prototype.setRowModel = function(rowModel) {
          this.rowModel = rowModel;
        };
        SelectionService2.prototype.isEmpty = function() {
          var count = 0;
          iterateObject(this.selectedNodes, function(nodeId, rowNode) {
            if (rowNode) {
              count++;
            }
          });
          return count === 0;
        };
        SelectionService2.prototype.deselectAllRowNodes = function(justFiltered) {
          if (justFiltered === void 0) {
            justFiltered = false;
          }
          var callback = function(rowNode) {
            return rowNode.selectThisNode(false);
          };
          var rowModelClientSide = this.rowModel.getType() === Constants.ROW_MODEL_TYPE_CLIENT_SIDE;
          if (justFiltered) {
            if (!rowModelClientSide) {
              console.error("AG Grid: selecting just filtered only works with In Memory Row Model");
              return;
            }
            var clientSideRowModel = this.rowModel;
            clientSideRowModel.forEachNodeAfterFilter(callback);
          } else {
            iterateObject(this.selectedNodes, function(id, rowNode) {
              if (rowNode) {
                callback(rowNode);
              }
            });
            this.reset();
          }
          if (rowModelClientSide && this.groupSelectsChildren) {
            this.updateGroupsFromChildrenSelections();
          }
          var event = {
            type: Events.EVENT_SELECTION_CHANGED,
            api: this.gridApi,
            columnApi: this.columnApi
          };
          this.eventService.dispatchEvent(event);
        };
        SelectionService2.prototype.selectAllRowNodes = function(justFiltered) {
          if (justFiltered === void 0) {
            justFiltered = false;
          }
          if (this.rowModel.getType() !== Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {
            throw new Error("selectAll only available with normal row model, ie not " + this.rowModel.getType());
          }
          var clientSideRowModel = this.rowModel;
          var callback = function(rowNode) {
            return rowNode.selectThisNode(true);
          };
          if (justFiltered) {
            clientSideRowModel.forEachNodeAfterFilter(callback);
          } else {
            clientSideRowModel.forEachNode(callback);
          }
          if (this.rowModel.getType() === Constants.ROW_MODEL_TYPE_CLIENT_SIDE && this.groupSelectsChildren) {
            this.updateGroupsFromChildrenSelections();
          }
          var event = {
            type: Events.EVENT_SELECTION_CHANGED,
            api: this.gridApi,
            columnApi: this.columnApi
          };
          this.eventService.dispatchEvent(event);
        };
        SelectionService2.prototype.selectNode = function(rowNode, tryMulti) {
          if (rowNode) {
            rowNode.setSelectedParams({ newValue: true, clearSelection: !tryMulti });
          }
        };
        SelectionService2.prototype.deselectIndex = function(rowIndex) {
          var node = this.rowModel.getRow(rowIndex);
          this.deselectNode(node);
        };
        SelectionService2.prototype.deselectNode = function(rowNode) {
          if (rowNode) {
            rowNode.setSelectedParams({ newValue: false, clearSelection: false });
          }
        };
        SelectionService2.prototype.selectIndex = function(index, tryMulti) {
          var node = this.rowModel.getRow(index);
          this.selectNode(node, tryMulti);
        };
        __decorate$G([
          Autowired("rowModel")
        ], SelectionService2.prototype, "rowModel", void 0);
        __decorate$G([
          Autowired("columnApi")
        ], SelectionService2.prototype, "columnApi", void 0);
        __decorate$G([
          Autowired("gridApi")
        ], SelectionService2.prototype, "gridApi", void 0);
        __decorate$G([
          __param$4(0, Qualifier("loggerFactory"))
        ], SelectionService2.prototype, "setBeans", null);
        __decorate$G([
          PostConstruct
        ], SelectionService2.prototype, "init", null);
        SelectionService2 = __decorate$G([
          Bean3("selectionService")
        ], SelectionService2);
        return SelectionService2;
      }(BeanStub)
    );
    var __decorate$H = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var ColumnApi = (
      /** @class */
      function() {
        function ColumnApi2() {
        }
        ColumnApi2.prototype.sizeColumnsToFit = function(gridWidth) {
          if (typeof gridWidth === "undefined") {
            console.error("AG Grid: missing parameter to columnApi.sizeColumnsToFit(gridWidth)");
          }
          this.columnModel.sizeColumnsToFit(gridWidth, "api");
        };
        ColumnApi2.prototype.setColumnGroupOpened = function(group, newValue) {
          this.columnModel.setColumnGroupOpened(group, newValue, "api");
        };
        ColumnApi2.prototype.getColumnGroup = function(name, instanceId) {
          return this.columnModel.getColumnGroup(name, instanceId);
        };
        ColumnApi2.prototype.getOriginalColumnGroup = function(name) {
          return this.columnModel.getOriginalColumnGroup(name);
        };
        ColumnApi2.prototype.getDisplayNameForColumn = function(column, location) {
          return this.columnModel.getDisplayNameForColumn(column, location) || "";
        };
        ColumnApi2.prototype.getDisplayNameForColumnGroup = function(columnGroup, location) {
          return this.columnModel.getDisplayNameForColumnGroup(columnGroup, location) || "";
        };
        ColumnApi2.prototype.getColumn = function(key) {
          return this.columnModel.getPrimaryColumn(key);
        };
        ColumnApi2.prototype.applyColumnState = function(params) {
          return this.columnModel.applyColumnState(params, "api");
        };
        ColumnApi2.prototype.getColumnState = function() {
          return this.columnModel.getColumnState();
        };
        ColumnApi2.prototype.resetColumnState = function() {
          this.columnModel.resetColumnState("api");
        };
        ColumnApi2.prototype.getColumnGroupState = function() {
          return this.columnModel.getColumnGroupState();
        };
        ColumnApi2.prototype.setColumnGroupState = function(stateItems) {
          this.columnModel.setColumnGroupState(stateItems, "api");
        };
        ColumnApi2.prototype.resetColumnGroupState = function() {
          this.columnModel.resetColumnGroupState("api");
        };
        ColumnApi2.prototype.isPinning = function() {
          return this.columnModel.isPinningLeft() || this.columnModel.isPinningRight();
        };
        ColumnApi2.prototype.isPinningLeft = function() {
          return this.columnModel.isPinningLeft();
        };
        ColumnApi2.prototype.isPinningRight = function() {
          return this.columnModel.isPinningRight();
        };
        ColumnApi2.prototype.getDisplayedColAfter = function(col) {
          return this.columnModel.getDisplayedColAfter(col);
        };
        ColumnApi2.prototype.getDisplayedColBefore = function(col) {
          return this.columnModel.getDisplayedColBefore(col);
        };
        ColumnApi2.prototype.setColumnVisible = function(key, visible) {
          this.columnModel.setColumnVisible(key, visible, "api");
        };
        ColumnApi2.prototype.setColumnsVisible = function(keys2, visible) {
          this.columnModel.setColumnsVisible(keys2, visible, "api");
        };
        ColumnApi2.prototype.setColumnPinned = function(key, pinned) {
          this.columnModel.setColumnPinned(key, pinned, "api");
        };
        ColumnApi2.prototype.setColumnsPinned = function(keys2, pinned) {
          this.columnModel.setColumnsPinned(keys2, pinned, "api");
        };
        ColumnApi2.prototype.getAllColumns = function() {
          return this.columnModel.getAllPrimaryColumns();
        };
        ColumnApi2.prototype.getAllGridColumns = function() {
          return this.columnModel.getAllGridColumns();
        };
        ColumnApi2.prototype.getDisplayedLeftColumns = function() {
          return this.columnModel.getDisplayedLeftColumns();
        };
        ColumnApi2.prototype.getDisplayedCenterColumns = function() {
          return this.columnModel.getDisplayedCenterColumns();
        };
        ColumnApi2.prototype.getDisplayedRightColumns = function() {
          return this.columnModel.getDisplayedRightColumns();
        };
        ColumnApi2.prototype.getAllDisplayedColumns = function() {
          return this.columnModel.getAllDisplayedColumns();
        };
        ColumnApi2.prototype.getAllDisplayedVirtualColumns = function() {
          return this.columnModel.getViewportColumns();
        };
        ColumnApi2.prototype.moveColumn = function(key, toIndex) {
          if (typeof key === "number") {
            console.warn("AG Grid: you are using moveColumn(fromIndex, toIndex) - moveColumn takes a column key and a destination index, not two indexes, to move with indexes use moveColumnByIndex(from,to) instead");
            this.columnModel.moveColumnByIndex(key, toIndex, "api");
          } else {
            this.columnModel.moveColumn(key, toIndex, "api");
          }
        };
        ColumnApi2.prototype.moveColumnByIndex = function(fromIndex, toIndex) {
          this.columnModel.moveColumnByIndex(fromIndex, toIndex, "api");
        };
        ColumnApi2.prototype.moveColumns = function(columnsToMoveKeys, toIndex) {
          this.columnModel.moveColumns(columnsToMoveKeys, toIndex, "api");
        };
        ColumnApi2.prototype.moveRowGroupColumn = function(fromIndex, toIndex) {
          this.columnModel.moveRowGroupColumn(fromIndex, toIndex);
        };
        ColumnApi2.prototype.setColumnAggFunc = function(key, aggFunc) {
          this.columnModel.setColumnAggFunc(key, aggFunc);
        };
        ColumnApi2.prototype.setColumnWidth = function(key, newWidth, finished, source) {
          if (finished === void 0) {
            finished = true;
          }
          this.columnModel.setColumnWidths([{ key, newWidth }], false, finished, source);
        };
        ColumnApi2.prototype.setColumnWidths = function(columnWidths, finished, source) {
          if (finished === void 0) {
            finished = true;
          }
          this.columnModel.setColumnWidths(columnWidths, false, finished, source);
        };
        ColumnApi2.prototype.setPivotMode = function(pivotMode) {
          this.columnModel.setPivotMode(pivotMode);
        };
        ColumnApi2.prototype.isPivotMode = function() {
          return this.columnModel.isPivotMode();
        };
        ColumnApi2.prototype.getSecondaryPivotColumn = function(pivotKeys, valueColKey) {
          return this.columnModel.getSecondaryPivotColumn(pivotKeys, valueColKey);
        };
        ColumnApi2.prototype.setValueColumns = function(colKeys) {
          this.columnModel.setValueColumns(colKeys, "api");
        };
        ColumnApi2.prototype.getValueColumns = function() {
          return this.columnModel.getValueColumns();
        };
        ColumnApi2.prototype.removeValueColumn = function(colKey) {
          this.columnModel.removeValueColumn(colKey, "api");
        };
        ColumnApi2.prototype.removeValueColumns = function(colKeys) {
          this.columnModel.removeValueColumns(colKeys, "api");
        };
        ColumnApi2.prototype.addValueColumn = function(colKey) {
          this.columnModel.addValueColumn(colKey, "api");
        };
        ColumnApi2.prototype.addValueColumns = function(colKeys) {
          this.columnModel.addValueColumns(colKeys, "api");
        };
        ColumnApi2.prototype.setRowGroupColumns = function(colKeys) {
          this.columnModel.setRowGroupColumns(colKeys, "api");
        };
        ColumnApi2.prototype.removeRowGroupColumn = function(colKey) {
          this.columnModel.removeRowGroupColumn(colKey, "api");
        };
        ColumnApi2.prototype.removeRowGroupColumns = function(colKeys) {
          this.columnModel.removeRowGroupColumns(colKeys, "api");
        };
        ColumnApi2.prototype.addRowGroupColumn = function(colKey) {
          this.columnModel.addRowGroupColumn(colKey, "api");
        };
        ColumnApi2.prototype.addRowGroupColumns = function(colKeys) {
          this.columnModel.addRowGroupColumns(colKeys, "api");
        };
        ColumnApi2.prototype.getRowGroupColumns = function() {
          return this.columnModel.getRowGroupColumns();
        };
        ColumnApi2.prototype.setPivotColumns = function(colKeys) {
          this.columnModel.setPivotColumns(colKeys, "api");
        };
        ColumnApi2.prototype.removePivotColumn = function(colKey) {
          this.columnModel.removePivotColumn(colKey, "api");
        };
        ColumnApi2.prototype.removePivotColumns = function(colKeys) {
          this.columnModel.removePivotColumns(colKeys, "api");
        };
        ColumnApi2.prototype.addPivotColumn = function(colKey) {
          this.columnModel.addPivotColumn(colKey, "api");
        };
        ColumnApi2.prototype.addPivotColumns = function(colKeys) {
          this.columnModel.addPivotColumns(colKeys, "api");
        };
        ColumnApi2.prototype.getPivotColumns = function() {
          return this.columnModel.getPivotColumns();
        };
        ColumnApi2.prototype.getLeftDisplayedColumnGroups = function() {
          return this.columnModel.getDisplayedTreeLeft();
        };
        ColumnApi2.prototype.getCenterDisplayedColumnGroups = function() {
          return this.columnModel.getDisplayedTreeCentre();
        };
        ColumnApi2.prototype.getRightDisplayedColumnGroups = function() {
          return this.columnModel.getDisplayedTreeRight();
        };
        ColumnApi2.prototype.getAllDisplayedColumnGroups = function() {
          return this.columnModel.getAllDisplayedTrees();
        };
        ColumnApi2.prototype.autoSizeColumn = function(key, skipHeader) {
          return this.columnModel.autoSizeColumn(key, skipHeader, "api");
        };
        ColumnApi2.prototype.autoSizeColumns = function(keys2, skipHeader) {
          return this.columnModel.autoSizeColumns(keys2, skipHeader, "api");
        };
        ColumnApi2.prototype.autoSizeAllColumns = function(skipHeader) {
          this.columnModel.autoSizeAllColumns(skipHeader, "api");
        };
        ColumnApi2.prototype.setSecondaryColumns = function(colDefs) {
          this.columnModel.setSecondaryColumns(colDefs, "api");
        };
        ColumnApi2.prototype.getSecondaryColumns = function() {
          return this.columnModel.getSecondaryColumns();
        };
        ColumnApi2.prototype.getPrimaryColumns = function() {
          return this.columnModel.getAllPrimaryColumns();
        };
        ColumnApi2.prototype.cleanDownReferencesToAvoidMemoryLeakInCaseApplicationIsKeepingReferenceToDestroyedGrid = function() {
          setTimeout(_.removeAllReferences.bind(window, this, "Column API"), 100);
        };
        ColumnApi2.prototype.columnGroupOpened = function(group, newValue) {
          console.error("AG Grid: columnGroupOpened no longer exists, use setColumnGroupOpened");
          this.setColumnGroupOpened(group, newValue);
        };
        ColumnApi2.prototype.hideColumns = function(colIds, hide) {
          console.error("AG Grid: hideColumns is deprecated, use setColumnsVisible");
          this.columnModel.setColumnsVisible(colIds, !hide, "api");
        };
        ColumnApi2.prototype.hideColumn = function(colId, hide) {
          console.error("AG Grid: hideColumn is deprecated, use setColumnVisible");
          this.columnModel.setColumnVisible(colId, !hide, "api");
        };
        ColumnApi2.prototype.setState = function(columnState) {
          console.error("AG Grid: setState is deprecated, use setColumnState");
          return this.setColumnState(columnState);
        };
        ColumnApi2.prototype.getState = function() {
          console.error("AG Grid: getState is deprecated, use getColumnState");
          return this.getColumnState();
        };
        ColumnApi2.prototype.resetState = function() {
          console.error("AG Grid: resetState is deprecated, use resetColumnState");
          this.resetColumnState();
        };
        ColumnApi2.prototype.getAggregationColumns = function() {
          console.error("AG Grid: getAggregationColumns is deprecated, use getValueColumns");
          return this.columnModel.getValueColumns();
        };
        ColumnApi2.prototype.removeAggregationColumn = function(colKey) {
          console.error("AG Grid: removeAggregationColumn is deprecated, use removeValueColumn");
          this.columnModel.removeValueColumn(colKey, "api");
        };
        ColumnApi2.prototype.removeAggregationColumns = function(colKeys) {
          console.error("AG Grid: removeAggregationColumns is deprecated, use removeValueColumns");
          this.columnModel.removeValueColumns(colKeys, "api");
        };
        ColumnApi2.prototype.addAggregationColumn = function(colKey) {
          console.error("AG Grid: addAggregationColumn is deprecated, use addValueColumn");
          this.columnModel.addValueColumn(colKey, "api");
        };
        ColumnApi2.prototype.addAggregationColumns = function(colKeys) {
          console.error("AG Grid: addAggregationColumns is deprecated, use addValueColumns");
          this.columnModel.addValueColumns(colKeys, "api");
        };
        ColumnApi2.prototype.setColumnAggFunction = function(column, aggFunc) {
          console.error("AG Grid: setColumnAggFunction is deprecated, use setColumnAggFunc");
          this.columnModel.setColumnAggFunc(column, aggFunc, "api");
        };
        ColumnApi2.prototype.getDisplayNameForCol = function(column) {
          console.error("AG Grid: getDisplayNameForCol is deprecated, use getDisplayNameForColumn");
          return this.getDisplayNameForColumn(column, null);
        };
        ColumnApi2.prototype.setColumnState = function(columnState) {
          console.error("AG Grid: setColumnState is deprecated, use applyColumnState");
          return this.columnModel.applyColumnState({ state: columnState, applyOrder: true }, "api");
        };
        __decorate$H([
          Autowired("columnModel")
        ], ColumnApi2.prototype, "columnModel", void 0);
        __decorate$H([
          PreDestroy
        ], ColumnApi2.prototype, "cleanDownReferencesToAvoidMemoryLeakInCaseApplicationIsKeepingReferenceToDestroyedGrid", null);
        ColumnApi2 = __decorate$H([
          Bean3("columnApi")
        ], ColumnApi2);
        return ColumnApi2;
      }()
    );
    (function(SelectionHandleType) {
      SelectionHandleType[SelectionHandleType["FILL"] = 0] = "FILL";
      SelectionHandleType[SelectionHandleType["RANGE"] = 1] = "RANGE";
    })(exports.SelectionHandleType || (exports.SelectionHandleType = {}));
    (function(CellRangeType) {
      CellRangeType[CellRangeType["VALUE"] = 0] = "VALUE";
      CellRangeType[CellRangeType["DIMENSION"] = 1] = "DIMENSION";
    })(exports.CellRangeType || (exports.CellRangeType = {}));
    var CSS_CELL_RANGE_SELECTED = "ag-cell-range-selected";
    var CSS_CELL_RANGE_CHART = "ag-cell-range-chart";
    var CSS_CELL_RANGE_SINGLE_CELL = "ag-cell-range-single-cell";
    var CSS_CELL_RANGE_CHART_CATEGORY = "ag-cell-range-chart-category";
    var CSS_CELL_RANGE_HANDLE = "ag-cell-range-handle";
    var CSS_CELL_RANGE_TOP = "ag-cell-range-top";
    var CSS_CELL_RANGE_RIGHT = "ag-cell-range-right";
    var CSS_CELL_RANGE_BOTTOM = "ag-cell-range-bottom";
    var CSS_CELL_RANGE_LEFT = "ag-cell-range-left";
    var CellRangeFeature = (
      /** @class */
      function() {
        function CellRangeFeature2(beans, ctrl) {
          this.beans = beans;
          this.cellCtrl = ctrl;
        }
        CellRangeFeature2.prototype.setComp = function(cellComp) {
          this.cellComp = cellComp;
          this.onRangeSelectionChanged();
        };
        CellRangeFeature2.prototype.onRangeSelectionChanged = function() {
          this.rangeCount = this.beans.rangeService.getCellRangeCount(this.cellCtrl.getCellPosition());
          this.hasChartRange = this.getHasChartRange();
          this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_SELECTED, this.rangeCount !== 0);
          this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_SELECTED + "-1", this.rangeCount === 1);
          this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_SELECTED + "-2", this.rangeCount === 2);
          this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_SELECTED + "-3", this.rangeCount === 3);
          this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_SELECTED + "-4", this.rangeCount >= 4);
          this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_CHART, this.hasChartRange);
          this.cellComp.setAriaSelected(this.rangeCount > 0 ? true : void 0);
          this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_SINGLE_CELL, this.isSingleCell());
          this.updateRangeBorders();
          this.refreshHandle();
        };
        CellRangeFeature2.prototype.updateRangeBorders = function() {
          var rangeBorders = this.getRangeBorders();
          var isSingleCell = this.isSingleCell();
          var isTop = !isSingleCell && rangeBorders.top;
          var isRight = !isSingleCell && rangeBorders.right;
          var isBottom = !isSingleCell && rangeBorders.bottom;
          var isLeft = !isSingleCell && rangeBorders.left;
          this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_TOP, isTop);
          this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_RIGHT, isRight);
          this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_BOTTOM, isBottom);
          this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_LEFT, isLeft);
        };
        CellRangeFeature2.prototype.isSingleCell = function() {
          var rangeService = this.beans.rangeService;
          return this.rangeCount === 1 && rangeService && !rangeService.isMoreThanOneCell();
        };
        CellRangeFeature2.prototype.getHasChartRange = function() {
          var rangeService = this.beans.rangeService;
          if (!this.rangeCount || !rangeService) {
            return false;
          }
          var cellRanges = rangeService.getCellRanges();
          return cellRanges.length > 0 && cellRanges.every(function(range) {
            return includes([exports.CellRangeType.DIMENSION, exports.CellRangeType.VALUE], range.type);
          });
        };
        CellRangeFeature2.prototype.updateRangeBordersIfRangeCount = function() {
          if (this.rangeCount > 0) {
            this.updateRangeBorders();
            this.refreshHandle();
          }
        };
        CellRangeFeature2.prototype.getRangeBorders = function() {
          var _this = this;
          var isRtl = this.beans.gridOptionsWrapper.isEnableRtl();
          var top = false;
          var right = false;
          var bottom = false;
          var left = false;
          var thisCol = this.cellCtrl.getCellPosition().column;
          var _a2 = this.beans, rangeService = _a2.rangeService, columnModel = _a2.columnModel;
          var leftCol;
          var rightCol;
          if (isRtl) {
            leftCol = columnModel.getDisplayedColAfter(thisCol);
            rightCol = columnModel.getDisplayedColBefore(thisCol);
          } else {
            leftCol = columnModel.getDisplayedColBefore(thisCol);
            rightCol = columnModel.getDisplayedColAfter(thisCol);
          }
          var ranges = rangeService.getCellRanges().filter(function(range2) {
            return rangeService.isCellInSpecificRange(_this.cellCtrl.getCellPosition(), range2);
          });
          if (!leftCol) {
            left = true;
          }
          if (!rightCol) {
            right = true;
          }
          for (var i = 0; i < ranges.length; i++) {
            if (top && right && bottom && left) {
              break;
            }
            var range = ranges[i];
            var startRow = rangeService.getRangeStartRow(range);
            var endRow = rangeService.getRangeEndRow(range);
            if (!top && this.beans.rowPositionUtils.sameRow(startRow, this.cellCtrl.getCellPosition())) {
              top = true;
            }
            if (!bottom && this.beans.rowPositionUtils.sameRow(endRow, this.cellCtrl.getCellPosition())) {
              bottom = true;
            }
            if (!left && leftCol && range.columns.indexOf(leftCol) < 0) {
              left = true;
            }
            if (!right && rightCol && range.columns.indexOf(rightCol) < 0) {
              right = true;
            }
          }
          return { top, right, bottom, left };
        };
        CellRangeFeature2.prototype.refreshHandle = function() {
          if (!this.beans.rangeService) {
            return;
          }
          var shouldHaveSelectionHandle = this.shouldHaveSelectionHandle();
          if (this.selectionHandle && !shouldHaveSelectionHandle) {
            this.selectionHandle = this.beans.context.destroyBean(this.selectionHandle);
          }
          if (shouldHaveSelectionHandle) {
            this.addSelectionHandle();
          }
          this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_HANDLE, !!this.selectionHandle);
        };
        CellRangeFeature2.prototype.shouldHaveSelectionHandle = function() {
          var _a2 = this.beans, gridOptionsWrapper = _a2.gridOptionsWrapper, rangeService = _a2.rangeService;
          var cellRanges = rangeService.getCellRanges();
          var rangesLen = cellRanges.length;
          if (this.rangeCount < 1 || rangesLen < 1) {
            return false;
          }
          var cellRange = last(cellRanges);
          var cellPosition = this.cellCtrl.getCellPosition();
          var isFillHandleAvailable = gridOptionsWrapper.isEnableFillHandle() && !this.cellCtrl.isSuppressFillHandle();
          var isRangeHandleAvailable = gridOptionsWrapper.isEnableRangeHandle();
          var handleIsAvailable = rangesLen === 1 && !this.cellCtrl.isEditing() && (isFillHandleAvailable || isRangeHandleAvailable);
          if (this.hasChartRange) {
            var hasCategoryRange = cellRanges[0].type === exports.CellRangeType.DIMENSION;
            var isCategoryCell = hasCategoryRange && rangeService.isCellInSpecificRange(cellPosition, cellRanges[0]);
            this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_CHART_CATEGORY, isCategoryCell);
            handleIsAvailable = cellRange.type === exports.CellRangeType.VALUE;
          }
          return handleIsAvailable && cellRange.endRow != null && rangeService.isContiguousRange(cellRange) && rangeService.isBottomRightCell(cellRange, cellPosition);
        };
        CellRangeFeature2.prototype.addSelectionHandle = function() {
          var _a2 = this.beans, gridOptionsWrapper = _a2.gridOptionsWrapper, rangeService = _a2.rangeService;
          var cellRangeType = last(rangeService.getCellRanges()).type;
          var selectionHandleFill = gridOptionsWrapper.isEnableFillHandle() && missing(cellRangeType);
          var type = selectionHandleFill ? exports.SelectionHandleType.FILL : exports.SelectionHandleType.RANGE;
          if (this.selectionHandle && this.selectionHandle.getType() !== type) {
            this.selectionHandle = this.beans.context.destroyBean(this.selectionHandle);
          }
          if (!this.selectionHandle) {
            this.selectionHandle = this.beans.selectionHandleFactory.createSelectionHandle(type);
          }
          this.selectionHandle.refresh(this.cellCtrl);
        };
        CellRangeFeature2.prototype.destroy = function() {
          this.beans.context.destroyBean(this.selectionHandle);
        };
        return CellRangeFeature2;
      }()
    );
    var __extends$N = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var CellPositionFeature = (
      /** @class */
      function(_super) {
        __extends$N(CellPositionFeature2, _super);
        function CellPositionFeature2(ctrl, beans) {
          var _this = _super.call(this) || this;
          _this.cellCtrl = ctrl;
          _this.beans = beans;
          _this.column = ctrl.getColumn();
          _this.rowNode = ctrl.getRowNode();
          _this.setupColSpan();
          _this.setupRowSpan();
          return _this;
        }
        CellPositionFeature2.prototype.setupRowSpan = function() {
          this.rowSpan = this.column.getRowSpan(this.rowNode);
        };
        CellPositionFeature2.prototype.setComp = function(comp) {
          this.cellComp = comp;
          this.onLeftChanged();
          this.onWidthChanged();
          this.applyRowSpan();
        };
        CellPositionFeature2.prototype.onDisplayColumnsChanged = function() {
          var colsSpanning = this.getColSpanningList();
          if (!areEqual(this.colsSpanning, colsSpanning)) {
            this.colsSpanning = colsSpanning;
            this.onWidthChanged();
            this.onLeftChanged();
          }
        };
        CellPositionFeature2.prototype.setupColSpan = function() {
          if (this.column.getColDef().colSpan == null) {
            return;
          }
          this.colsSpanning = this.getColSpanningList();
          this.addManagedListener(this.beans.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayColumnsChanged.bind(this));
          this.addManagedListener(this.beans.eventService, Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, this.onWidthChanged.bind(this));
        };
        CellPositionFeature2.prototype.onWidthChanged = function() {
          if (!this.cellComp) {
            return;
          }
          var width = this.getCellWidth();
          this.cellComp.setWidth(width + "px");
        };
        CellPositionFeature2.prototype.getCellWidth = function() {
          if (!this.colsSpanning) {
            return this.column.getActualWidth();
          }
          return this.colsSpanning.reduce(function(width, col) {
            return width + col.getActualWidth();
          }, 0);
        };
        CellPositionFeature2.prototype.getColSpanningList = function() {
          var colSpan = this.column.getColSpan(this.rowNode);
          var colsSpanning = [];
          if (colSpan === 1) {
            colsSpanning.push(this.column);
          } else {
            var pointer = this.column;
            var pinned = this.column.getPinned();
            for (var i = 0; pointer && i < colSpan; i++) {
              colsSpanning.push(pointer);
              pointer = this.beans.columnModel.getDisplayedColAfter(pointer);
              if (!pointer || missing(pointer)) {
                break;
              }
              if (pinned !== pointer.getPinned()) {
                break;
              }
            }
          }
          return colsSpanning;
        };
        CellPositionFeature2.prototype.onLeftChanged = function() {
          if (!this.cellComp) {
            return;
          }
          var left = this.modifyLeftForPrintLayout(this.getCellLeft());
          this.cellComp.setLeft(left + "px");
        };
        CellPositionFeature2.prototype.getCellLeft = function() {
          var mostLeftCol;
          if (this.beans.gridOptionsWrapper.isEnableRtl() && this.colsSpanning) {
            mostLeftCol = last(this.colsSpanning);
          } else {
            mostLeftCol = this.column;
          }
          return mostLeftCol.getLeft();
        };
        CellPositionFeature2.prototype.modifyLeftForPrintLayout = function(leftPosition) {
          if (!this.cellCtrl.isPrintLayout() || this.column.getPinned() === Constants.PINNED_LEFT) {
            return leftPosition;
          }
          var leftWidth = this.beans.columnModel.getDisplayedColumnsLeftWidth();
          if (this.column.getPinned() === Constants.PINNED_RIGHT) {
            var bodyWidth = this.beans.columnModel.getBodyContainerWidth();
            return leftWidth + bodyWidth + (leftPosition || 0);
          }
          return leftWidth + (leftPosition || 0);
        };
        CellPositionFeature2.prototype.applyRowSpan = function() {
          if (this.rowSpan === 1) {
            return;
          }
          var singleRowHeight = this.beans.gridOptionsWrapper.getRowHeightAsNumber();
          var totalRowHeight = singleRowHeight * this.rowSpan;
          this.cellComp.setHeight(totalRowHeight + "px");
          this.cellComp.setZIndex("1");
        };
        CellPositionFeature2.prototype.destroy = function() {
          _super.prototype.destroy.call(this);
        };
        return CellPositionFeature2;
      }(BeanStub)
    );
    var __extends$O = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var CellCustomStyleFeature = (
      /** @class */
      function(_super) {
        __extends$O(CellCustomStyleFeature2, _super);
        function CellCustomStyleFeature2(ctrl, beans) {
          var _this = _super.call(this) || this;
          _this.staticClasses = [];
          _this.cellCtrl = ctrl;
          _this.beans = beans;
          _this.column = ctrl.getColumn();
          _this.rowNode = ctrl.getRowNode();
          return _this;
        }
        CellCustomStyleFeature2.prototype.setComp = function(comp, scope) {
          this.cellComp = comp;
          this.scope = scope;
          this.applyUserStyles();
          this.applyCellClassRules();
          this.applyClassesFromColDef();
        };
        CellCustomStyleFeature2.prototype.applyCellClassRules = function() {
          var _this = this;
          var colDef = this.column.getColDef();
          var cellClassParams = {
            value: this.cellCtrl.getValue(),
            data: this.rowNode.data,
            node: this.rowNode,
            colDef,
            rowIndex: this.rowNode.rowIndex,
            api: this.beans.gridOptionsWrapper.getApi(),
            columnApi: this.beans.gridOptionsWrapper.getColumnApi(),
            $scope: this.scope,
            context: this.beans.gridOptionsWrapper.getContext()
          };
          this.beans.stylingService.processClassRules(colDef.cellClassRules, cellClassParams, function(className) {
            return _this.cellComp.addOrRemoveCssClass(className, true);
          }, function(className) {
            return _this.cellComp.addOrRemoveCssClass(className, false);
          });
        };
        CellCustomStyleFeature2.prototype.applyUserStyles = function() {
          var colDef = this.column.getColDef();
          if (!colDef.cellStyle) {
            return;
          }
          var styles;
          if (typeof colDef.cellStyle === "function") {
            var cellStyleParams = {
              column: this.column,
              value: this.cellCtrl.getValue(),
              colDef,
              data: this.rowNode.data,
              node: this.rowNode,
              rowIndex: this.rowNode.rowIndex,
              $scope: this.scope,
              api: this.beans.gridOptionsWrapper.getApi(),
              columnApi: this.beans.gridOptionsWrapper.getColumnApi(),
              context: this.beans.gridOptionsWrapper.getContext()
            };
            var cellStyleFunc = colDef.cellStyle;
            styles = cellStyleFunc(cellStyleParams);
          } else {
            styles = colDef.cellStyle;
          }
          this.cellComp.setUserStyles(styles);
        };
        CellCustomStyleFeature2.prototype.applyClassesFromColDef = function() {
          var _this = this;
          var colDef = this.column.getColDef();
          var cellClassParams = {
            value: this.cellCtrl.getValue(),
            data: this.rowNode.data,
            node: this.rowNode,
            colDef,
            rowIndex: this.rowNode.rowIndex,
            $scope: this.scope,
            api: this.beans.gridOptionsWrapper.getApi(),
            columnApi: this.beans.gridOptionsWrapper.getColumnApi(),
            context: this.beans.gridOptionsWrapper.getContext()
          };
          if (this.staticClasses.length) {
            this.staticClasses.forEach(function(className) {
              return _this.cellComp.addOrRemoveCssClass(className, false);
            });
          }
          this.staticClasses = this.beans.stylingService.getStaticCellClasses(colDef, cellClassParams);
          if (this.staticClasses.length) {
            this.staticClasses.forEach(function(className) {
              return _this.cellComp.addOrRemoveCssClass(className, true);
            });
          }
        };
        CellCustomStyleFeature2.prototype.destroy = function() {
          _super.prototype.destroy.call(this);
        };
        return CellCustomStyleFeature2;
      }(BeanStub)
    );
    var __extends$P = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var TooltipFeature = (
      /** @class */
      function(_super) {
        __extends$P(TooltipFeature2, _super);
        function TooltipFeature2(ctrl, beans) {
          var _this = _super.call(this) || this;
          _this.ctrl = ctrl;
          _this.beans = beans;
          return _this;
        }
        TooltipFeature2.prototype.setComp = function(comp) {
          this.comp = comp;
          this.setupTooltip();
        };
        TooltipFeature2.prototype.setupTooltip = function() {
          this.browserTooltips = this.beans.gridOptionsWrapper.isEnableBrowserTooltips();
          this.updateTooltipText();
          if (this.browserTooltips) {
            this.comp.setTitle(this.tooltipSanatised != null ? this.tooltipSanatised : void 0);
          } else {
            this.createTooltipFeatureIfNeeded();
          }
        };
        TooltipFeature2.prototype.updateTooltipText = function() {
          this.tooltip = this.ctrl.getTooltipValue();
          this.tooltipSanatised = escapeString(this.tooltip);
        };
        TooltipFeature2.prototype.createTooltipFeatureIfNeeded = function() {
          var _this = this;
          if (this.genericTooltipFeature != null) {
            return;
          }
          var parent = {
            getTooltipParams: function() {
              return _this.getTooltipParams();
            },
            getGui: function() {
              return _this.ctrl.getGui();
            }
          };
          this.genericTooltipFeature = this.createManagedBean(new CustomTooltipFeature(parent), this.beans.context);
        };
        TooltipFeature2.prototype.refreshToolTip = function() {
          this.updateTooltipText();
          if (this.browserTooltips) {
            this.comp.setTitle(this.tooltipSanatised != null ? this.tooltipSanatised : void 0);
          }
        };
        TooltipFeature2.prototype.getTooltipParams = function() {
          var ctrl = this.ctrl;
          var column = ctrl.getColumn ? ctrl.getColumn() : void 0;
          var colDef = ctrl.getColDef ? ctrl.getColDef() : void 0;
          var rowNode = ctrl.getRowNode ? ctrl.getRowNode() : void 0;
          return {
            location: ctrl.getLocation(),
            colDef,
            column,
            rowIndex: ctrl.getRowIndex ? ctrl.getRowIndex() : void 0,
            node: rowNode,
            data: rowNode ? rowNode.data : void 0,
            value: this.getTooltipText(),
            valueFormatted: ctrl.getValueFormatted ? ctrl.getValueFormatted() : void 0
          };
        };
        TooltipFeature2.prototype.getTooltipText = function() {
          return this.tooltip;
        };
        TooltipFeature2.prototype.destroy = function() {
          _super.prototype.destroy.call(this);
        };
        return TooltipFeature2;
      }(BeanStub)
    );
    var __decorate$I = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var Beans = (
      /** @class */
      function() {
        function Beans2() {
        }
        Beans2.prototype.postConstruct = function() {
          this.doingMasterDetail = this.gridOptionsWrapper.isMasterDetail();
          if (this.gridOptionsWrapper.isRowModelDefault()) {
            this.clientSideRowModel = this.rowModel;
          }
          if (this.gridOptionsWrapper.isRowModelServerSide()) {
            this.serverSideRowModel = this.rowModel;
          }
        };
        __decorate$I([
          Autowired("resizeObserverService")
        ], Beans2.prototype, "resizeObserverService", void 0);
        __decorate$I([
          Autowired("paginationProxy")
        ], Beans2.prototype, "paginationProxy", void 0);
        __decorate$I([
          Autowired("context")
        ], Beans2.prototype, "context", void 0);
        __decorate$I([
          Autowired("columnApi")
        ], Beans2.prototype, "columnApi", void 0);
        __decorate$I([
          Autowired("gridApi")
        ], Beans2.prototype, "gridApi", void 0);
        __decorate$I([
          Autowired("gridOptionsWrapper")
        ], Beans2.prototype, "gridOptionsWrapper", void 0);
        __decorate$I([
          Autowired("expressionService")
        ], Beans2.prototype, "expressionService", void 0);
        __decorate$I([
          Autowired("rowRenderer")
        ], Beans2.prototype, "rowRenderer", void 0);
        __decorate$I([
          Autowired("$compile")
        ], Beans2.prototype, "$compile", void 0);
        __decorate$I([
          Autowired("templateService")
        ], Beans2.prototype, "templateService", void 0);
        __decorate$I([
          Autowired("valueService")
        ], Beans2.prototype, "valueService", void 0);
        __decorate$I([
          Autowired("eventService")
        ], Beans2.prototype, "eventService", void 0);
        __decorate$I([
          Autowired("columnModel")
        ], Beans2.prototype, "columnModel", void 0);
        __decorate$I([
          Autowired("headerNavigationService")
        ], Beans2.prototype, "headerNavigationService", void 0);
        __decorate$I([
          Autowired("navigationService")
        ], Beans2.prototype, "navigationService", void 0);
        __decorate$I([
          Autowired("columnAnimationService")
        ], Beans2.prototype, "columnAnimationService", void 0);
        __decorate$I([
          Optional("rangeService")
        ], Beans2.prototype, "rangeService", void 0);
        __decorate$I([
          Autowired("focusService")
        ], Beans2.prototype, "focusService", void 0);
        __decorate$I([
          Optional("contextMenuFactory")
        ], Beans2.prototype, "contextMenuFactory", void 0);
        __decorate$I([
          Autowired("popupService")
        ], Beans2.prototype, "popupService", void 0);
        __decorate$I([
          Autowired("valueFormatterService")
        ], Beans2.prototype, "valueFormatterService", void 0);
        __decorate$I([
          Autowired("stylingService")
        ], Beans2.prototype, "stylingService", void 0);
        __decorate$I([
          Autowired("columnHoverService")
        ], Beans2.prototype, "columnHoverService", void 0);
        __decorate$I([
          Autowired("userComponentFactory")
        ], Beans2.prototype, "userComponentFactory", void 0);
        __decorate$I([
          Autowired("userComponentRegistry")
        ], Beans2.prototype, "userComponentRegistry", void 0);
        __decorate$I([
          Autowired("animationFrameService")
        ], Beans2.prototype, "animationFrameService", void 0);
        __decorate$I([
          Autowired("dragAndDropService")
        ], Beans2.prototype, "dragAndDropService", void 0);
        __decorate$I([
          Autowired("sortController")
        ], Beans2.prototype, "sortController", void 0);
        __decorate$I([
          Autowired("filterManager")
        ], Beans2.prototype, "filterManager", void 0);
        __decorate$I([
          Autowired("rowContainerHeightService")
        ], Beans2.prototype, "rowContainerHeightService", void 0);
        __decorate$I([
          Autowired("frameworkOverrides")
        ], Beans2.prototype, "frameworkOverrides", void 0);
        __decorate$I([
          Autowired("cellPositionUtils")
        ], Beans2.prototype, "cellPositionUtils", void 0);
        __decorate$I([
          Autowired("rowPositionUtils")
        ], Beans2.prototype, "rowPositionUtils", void 0);
        __decorate$I([
          Autowired("selectionService")
        ], Beans2.prototype, "selectionService", void 0);
        __decorate$I([
          Optional("selectionHandleFactory")
        ], Beans2.prototype, "selectionHandleFactory", void 0);
        __decorate$I([
          Autowired("rowCssClassCalculator")
        ], Beans2.prototype, "rowCssClassCalculator", void 0);
        __decorate$I([
          Autowired("rowModel")
        ], Beans2.prototype, "rowModel", void 0);
        __decorate$I([
          Autowired("ctrlsService")
        ], Beans2.prototype, "ctrlsService", void 0);
        __decorate$I([
          Autowired("ctrlsFactory")
        ], Beans2.prototype, "ctrlsFactory", void 0);
        __decorate$I([
          Autowired("agStackComponentsRegistry")
        ], Beans2.prototype, "agStackComponentsRegistry", void 0);
        __decorate$I([
          Autowired("valueCache")
        ], Beans2.prototype, "valueCache", void 0);
        __decorate$I([
          Autowired("rowNodeEventThrottle")
        ], Beans2.prototype, "rowNodeEventThrottle", void 0);
        __decorate$I([
          PostConstruct
        ], Beans2.prototype, "postConstruct", null);
        Beans2 = __decorate$I([
          Bean3("beans")
        ], Beans2);
        return Beans2;
      }()
    );
    var __extends$Q = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var CellMouseListenerFeature = (
      /** @class */
      function(_super) {
        __extends$Q(CellMouseListenerFeature2, _super);
        function CellMouseListenerFeature2(ctrl, beans, column) {
          var _this = _super.call(this) || this;
          _this.cellCtrl = ctrl;
          _this.beans = beans;
          _this.column = column;
          return _this;
        }
        CellMouseListenerFeature2.prototype.onMouseEvent = function(eventName, mouseEvent) {
          if (isStopPropagationForAgGrid(mouseEvent)) {
            return;
          }
          switch (eventName) {
            case "click":
              this.onCellClicked(mouseEvent);
              break;
            case "mousedown":
            case "touchstart":
              this.onMouseDown(mouseEvent);
              break;
            case "dblclick":
              this.onCellDoubleClicked(mouseEvent);
              break;
            case "mouseout":
              this.onMouseOut(mouseEvent);
              break;
            case "mouseover":
              this.onMouseOver(mouseEvent);
              break;
          }
        };
        CellMouseListenerFeature2.prototype.onCellClicked = function(mouseEvent) {
          if (this.isDoubleClickOnIPad()) {
            this.onCellDoubleClicked(mouseEvent);
            mouseEvent.preventDefault();
            return;
          }
          var _a2 = this.beans, eventService = _a2.eventService, gridOptionsWrapper = _a2.gridOptionsWrapper;
          var cellClickedEvent = this.cellCtrl.createEvent(mouseEvent, Events.EVENT_CELL_CLICKED);
          eventService.dispatchEvent(cellClickedEvent);
          var colDef = this.column.getColDef();
          if (colDef.onCellClicked) {
            window.setTimeout(function() {
              return colDef.onCellClicked(cellClickedEvent);
            }, 0);
          }
          var editOnSingleClick = (gridOptionsWrapper.isSingleClickEdit() || colDef.singleClickEdit) && !gridOptionsWrapper.isSuppressClickEdit();
          if (editOnSingleClick) {
            this.cellCtrl.startRowOrCellEdit();
          }
        };
        CellMouseListenerFeature2.prototype.isDoubleClickOnIPad = function() {
          if (!isIOSUserAgent() || isEventSupported("dblclick")) {
            return false;
          }
          var nowMillis = new Date().getTime();
          var res = nowMillis - this.lastIPadMouseClickEvent < 200;
          this.lastIPadMouseClickEvent = nowMillis;
          return res;
        };
        CellMouseListenerFeature2.prototype.onCellDoubleClicked = function(mouseEvent) {
          var colDef = this.column.getColDef();
          var cellDoubleClickedEvent = this.cellCtrl.createEvent(mouseEvent, Events.EVENT_CELL_DOUBLE_CLICKED);
          this.beans.eventService.dispatchEvent(cellDoubleClickedEvent);
          if (typeof colDef.onCellDoubleClicked === "function") {
            window.setTimeout(function() {
              return colDef.onCellDoubleClicked(cellDoubleClickedEvent);
            }, 0);
          }
          var editOnDoubleClick = !this.beans.gridOptionsWrapper.isSingleClickEdit() && !this.beans.gridOptionsWrapper.isSuppressClickEdit();
          if (editOnDoubleClick) {
            this.cellCtrl.startRowOrCellEdit();
          }
        };
        CellMouseListenerFeature2.prototype.onMouseDown = function(mouseEvent) {
          var ctrlKey = mouseEvent.ctrlKey, metaKey = mouseEvent.metaKey, shiftKey = mouseEvent.shiftKey;
          var target = mouseEvent.target;
          var _a2 = this.beans, eventService = _a2.eventService, rangeService = _a2.rangeService;
          if (this.isRightClickInExistingRange(mouseEvent)) {
            return;
          }
          var ranges = rangeService && rangeService.getCellRanges().length != 0;
          if (!shiftKey || !ranges) {
            var forceBrowserFocus = (isBrowserIE() || isBrowserEdge()) && !this.cellCtrl.isEditing() && !isFocusableFormField(target);
            this.cellCtrl.focusCell(forceBrowserFocus);
          }
          if (shiftKey && ranges) {
            mouseEvent.preventDefault();
          }
          if (this.containsWidget(target)) {
            return;
          }
          if (rangeService) {
            var thisCell = this.cellCtrl.getCellPosition();
            if (shiftKey) {
              rangeService.extendLatestRangeToCell(thisCell);
            } else {
              var ctrlKeyPressed = ctrlKey || metaKey;
              rangeService.setRangeToCell(thisCell, ctrlKeyPressed);
            }
          }
          eventService.dispatchEvent(this.cellCtrl.createEvent(mouseEvent, Events.EVENT_CELL_MOUSE_DOWN));
        };
        CellMouseListenerFeature2.prototype.isRightClickInExistingRange = function(mouseEvent) {
          var rangeService = this.beans.rangeService;
          if (rangeService) {
            var cellInRange = rangeService.isCellInAnyRange(this.cellCtrl.getCellPosition());
            if (cellInRange && mouseEvent.button === 2) {
              return true;
            }
          }
          return false;
        };
        CellMouseListenerFeature2.prototype.containsWidget = function(target) {
          return isElementChildOfClass(target, "ag-selection-checkbox", 3);
        };
        CellMouseListenerFeature2.prototype.onMouseOut = function(mouseEvent) {
          if (this.mouseStayingInsideCell(mouseEvent)) {
            return;
          }
          var cellMouseOutEvent = this.cellCtrl.createEvent(mouseEvent, Events.EVENT_CELL_MOUSE_OUT);
          this.beans.eventService.dispatchEvent(cellMouseOutEvent);
          this.beans.columnHoverService.clearMouseOver();
        };
        CellMouseListenerFeature2.prototype.onMouseOver = function(mouseEvent) {
          if (this.mouseStayingInsideCell(mouseEvent)) {
            return;
          }
          var cellMouseOverEvent = this.cellCtrl.createEvent(mouseEvent, Events.EVENT_CELL_MOUSE_OVER);
          this.beans.eventService.dispatchEvent(cellMouseOverEvent);
          this.beans.columnHoverService.setMouseOver([this.column]);
        };
        CellMouseListenerFeature2.prototype.mouseStayingInsideCell = function(e) {
          if (!e.target || !e.relatedTarget) {
            return false;
          }
          var eGui = this.cellCtrl.getGui();
          var cellContainsTarget = eGui.contains(e.target);
          var cellContainsRelatedTarget = eGui.contains(e.relatedTarget);
          return cellContainsTarget && cellContainsRelatedTarget;
        };
        CellMouseListenerFeature2.prototype.destroy = function() {
        };
        return CellMouseListenerFeature2;
      }(Beans)
    );
    var __extends$R = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var CellKeyboardListenerFeature = (
      /** @class */
      function(_super) {
        __extends$R(CellKeyboardListenerFeature2, _super);
        function CellKeyboardListenerFeature2(ctrl, beans, column, rowNode, scope, rowCtrl) {
          var _this = _super.call(this) || this;
          _this.cellCtrl = ctrl;
          _this.beans = beans;
          _this.column = column;
          _this.rowNode = rowNode;
          _this.rowCtrl = rowCtrl;
          return _this;
        }
        CellKeyboardListenerFeature2.prototype.setComp = function(eGui) {
          this.eGui = eGui;
        };
        CellKeyboardListenerFeature2.prototype.onKeyDown = function(event) {
          var key = event.which || event.keyCode;
          switch (key) {
            case KeyCode.ENTER:
              this.onEnterKeyDown(event);
              break;
            case KeyCode.F2:
              this.onF2KeyDown();
              break;
            case KeyCode.ESCAPE:
              this.onEscapeKeyDown();
              break;
            case KeyCode.TAB:
              this.onTabKeyDown(event);
              break;
            case KeyCode.BACKSPACE:
            case KeyCode.DELETE:
              this.onBackspaceOrDeleteKeyPressed(key);
              break;
            case KeyCode.DOWN:
            case KeyCode.UP:
            case KeyCode.RIGHT:
            case KeyCode.LEFT:
              this.onNavigationKeyPressed(event, key);
              break;
          }
        };
        CellKeyboardListenerFeature2.prototype.onNavigationKeyPressed = function(event, key) {
          if (this.cellCtrl.isEditing()) {
            return;
          }
          if (event.shiftKey && this.cellCtrl.isRangeSelectionEnabled()) {
            this.onShiftRangeSelect(key);
          } else {
            this.beans.navigationService.navigateToNextCell(event, key, this.cellCtrl.getCellPosition(), true);
          }
          event.preventDefault();
        };
        CellKeyboardListenerFeature2.prototype.onShiftRangeSelect = function(key) {
          if (!this.beans.rangeService) {
            return;
          }
          var endCell = this.beans.rangeService.extendLatestRangeInDirection(key);
          if (endCell) {
            this.beans.navigationService.ensureCellVisible(endCell);
          }
        };
        CellKeyboardListenerFeature2.prototype.onTabKeyDown = function(event) {
          this.beans.navigationService.onTabKeyDown(this.cellCtrl, event);
        };
        CellKeyboardListenerFeature2.prototype.onBackspaceOrDeleteKeyPressed = function(key) {
          if (!this.cellCtrl.isEditing()) {
            this.cellCtrl.startRowOrCellEdit(key);
          }
        };
        CellKeyboardListenerFeature2.prototype.onEnterKeyDown = function(e) {
          if (this.cellCtrl.isEditing() || this.rowCtrl.isEditing()) {
            this.cellCtrl.stopEditingAndFocus();
          } else {
            if (this.beans.gridOptionsWrapper.isEnterMovesDown()) {
              this.beans.navigationService.navigateToNextCell(null, KeyCode.DOWN, this.cellCtrl.getCellPosition(), false);
            } else {
              this.cellCtrl.startRowOrCellEdit(KeyCode.ENTER);
              if (this.cellCtrl.isEditing()) {
                e.preventDefault();
              }
            }
          }
        };
        CellKeyboardListenerFeature2.prototype.onF2KeyDown = function() {
          if (!this.cellCtrl.isEditing()) {
            this.cellCtrl.startRowOrCellEdit(KeyCode.F2);
          }
        };
        CellKeyboardListenerFeature2.prototype.onEscapeKeyDown = function() {
          if (this.cellCtrl.isEditing()) {
            this.cellCtrl.stopRowOrCellEdit(true);
            this.cellCtrl.focusCell(true);
          }
        };
        CellKeyboardListenerFeature2.prototype.onKeyPress = function(event) {
          var eventTarget = getTarget(event);
          var eventOnChildComponent = eventTarget !== this.eGui;
          if (eventOnChildComponent || this.cellCtrl.isEditing()) {
            return;
          }
          var pressedChar = String.fromCharCode(event.charCode);
          if (pressedChar === " ") {
            this.onSpaceKeyPressed(event);
          } else if (isEventFromPrintableCharacter(event)) {
            this.cellCtrl.startRowOrCellEdit(null, pressedChar);
            event.preventDefault();
          }
        };
        CellKeyboardListenerFeature2.prototype.onSpaceKeyPressed = function(event) {
          var gridOptionsWrapper = this.beans.gridOptionsWrapper;
          if (!this.cellCtrl.isEditing() && gridOptionsWrapper.isRowSelection()) {
            var currentSelection = this.rowNode.isSelected();
            var newSelection = !currentSelection;
            if (newSelection || !gridOptionsWrapper.isSuppressRowDeselection()) {
              var groupSelectsFiltered = this.beans.gridOptionsWrapper.isGroupSelectsFiltered();
              var updatedCount = this.rowNode.setSelectedParams({
                newValue: newSelection,
                rangeSelect: event.shiftKey,
                groupSelectsFiltered
              });
              if (currentSelection === void 0 && updatedCount === 0) {
                this.rowNode.setSelectedParams({
                  newValue: false,
                  rangeSelect: event.shiftKey,
                  groupSelectsFiltered
                });
              }
            }
          }
          event.preventDefault();
        };
        CellKeyboardListenerFeature2.prototype.destroy = function() {
        };
        return CellKeyboardListenerFeature2;
      }(BeanStub)
    );
    var __extends$S = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$J = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var DndSourceComp = (
      /** @class */
      function(_super) {
        __extends$S(DndSourceComp2, _super);
        function DndSourceComp2(rowNode, column, beans, eCell) {
          var _this = _super.call(this, '<div class="ag-drag-handle ag-row-drag" draggable="true"></div>') || this;
          _this.rowNode = rowNode;
          _this.column = column;
          _this.beans = beans;
          _this.eCell = eCell;
          return _this;
        }
        DndSourceComp2.prototype.postConstruct = function() {
          var eGui = this.getGui();
          eGui.appendChild(createIconNoSpan("rowDrag", this.beans.gridOptionsWrapper, null));
          this.addGuiEventListener("mousedown", function(e) {
            e.stopPropagation();
          });
          this.addDragSource();
          this.checkVisibility();
        };
        DndSourceComp2.prototype.addDragSource = function() {
          this.addGuiEventListener("dragstart", this.onDragStart.bind(this));
        };
        DndSourceComp2.prototype.onDragStart = function(dragEvent) {
          var _this = this;
          var providedOnRowDrag = this.column.getColDef().dndSourceOnRowDrag;
          var isIE2 = isBrowserIE();
          if (!isIE2) {
            dragEvent.dataTransfer.setDragImage(this.eCell, 0, 0);
          }
          var defaultOnRowDrag = function() {
            try {
              var jsonData = JSON.stringify(_this.rowNode.data);
              if (isIE2) {
                dragEvent.dataTransfer.setData("text", jsonData);
              } else {
                dragEvent.dataTransfer.setData("application/json", jsonData);
                dragEvent.dataTransfer.setData("text/plain", jsonData);
              }
            } catch (e) {
            }
          };
          if (providedOnRowDrag) {
            providedOnRowDrag({ rowNode: this.rowNode, dragEvent });
          } else {
            defaultOnRowDrag();
          }
        };
        DndSourceComp2.prototype.checkVisibility = function() {
          var visible = this.column.isDndSource(this.rowNode);
          this.setDisplayed(visible);
        };
        __decorate$J([
          PostConstruct
        ], DndSourceComp2.prototype, "postConstruct", null);
        return DndSourceComp2;
      }(Component)
    );
    var __extends$T = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __assign$7 = function() {
      __assign$7 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign$7.apply(this, arguments);
    };
    var CSS_CELL = "ag-cell";
    var CSS_AUTO_HEIGHT = "ag-cell-auto-height";
    var CSS_NORMAL_HEIGHT = "ag-cell-normal-height";
    var CSS_CELL_FOCUS = "ag-cell-focus";
    var CSS_CELL_FIRST_RIGHT_PINNED = "ag-cell-first-right-pinned";
    var CSS_CELL_LAST_LEFT_PINNED = "ag-cell-last-left-pinned";
    var CSS_CELL_NOT_INLINE_EDITING = "ag-cell-not-inline-editing";
    var CSS_CELL_INLINE_EDITING = "ag-cell-inline-editing";
    var CSS_CELL_POPUP_EDITING = "ag-cell-popup-editing";
    var CSS_COLUMN_HOVER = "ag-column-hover";
    var CSS_CELL_WRAP_TEXT = "ag-cell-wrap-text";
    var instanceIdSequence$1 = 0;
    var CellCtrl = (
      /** @class */
      function(_super) {
        __extends$T(CellCtrl2, _super);
        function CellCtrl2(column, rowNode, beans, rowCtrl) {
          var _this = _super.call(this) || this;
          _this.suppressRefreshCell = false;
          _this.column = column;
          _this.rowNode = rowNode;
          _this.beans = beans;
          _this.rowCtrl = rowCtrl;
          _this.instanceId = column.getId() + "-" + instanceIdSequence$1++;
          _this.createCellPosition();
          _this.addFeatures();
          return _this;
        }
        CellCtrl2.prototype.addFeatures = function() {
          var _this = this;
          this.cellPositionFeature = new CellPositionFeature(this, this.beans);
          this.addDestroyFunc(function() {
            return _this.cellPositionFeature.destroy();
          });
          this.cellCustomStyleFeature = new CellCustomStyleFeature(this, this.beans);
          this.addDestroyFunc(function() {
            return _this.cellCustomStyleFeature.destroy();
          });
          this.cellMouseListenerFeature = new CellMouseListenerFeature(this, this.beans, this.column);
          this.addDestroyFunc(function() {
            return _this.cellMouseListenerFeature.destroy();
          });
          this.cellKeyboardListenerFeature = new CellKeyboardListenerFeature(this, this.beans, this.column, this.rowNode, this.scope, this.rowCtrl);
          this.addDestroyFunc(function() {
            return _this.cellKeyboardListenerFeature.destroy();
          });
          var rangeSelectionEnabled = this.beans.rangeService && this.beans.gridOptionsWrapper.isEnableRangeSelection();
          if (rangeSelectionEnabled) {
            this.cellRangeFeature = new CellRangeFeature(this.beans, this);
            this.addDestroyFunc(function() {
              return _this.cellRangeFeature.destroy();
            });
          }
          this.addTooltipFeature();
        };
        CellCtrl2.prototype.addTooltipFeature = function() {
          var _this = this;
          var getTooltipValue = function() {
            var colDef = _this.column.getColDef();
            var data = _this.rowNode.data;
            if (colDef.tooltipField && exists(data)) {
              return getValueUsingField(data, colDef.tooltipField, _this.column.isTooltipFieldContainsDots());
            }
            var valueGetter = colDef.tooltipValueGetter;
            if (valueGetter) {
              return valueGetter({
                location: "cell",
                api: _this.beans.gridOptionsWrapper.getApi(),
                columnApi: _this.beans.gridOptionsWrapper.getColumnApi(),
                context: _this.beans.gridOptionsWrapper.getContext(),
                colDef: _this.column.getColDef(),
                column: _this.column,
                rowIndex: _this.cellPosition.rowIndex,
                node: _this.rowNode,
                data: _this.rowNode.data,
                value: _this.value,
                valueFormatted: _this.valueFormatted
              });
            }
            return null;
          };
          var tooltipCtrl = {
            getColumn: function() {
              return _this.column;
            },
            getColDef: function() {
              return _this.column.getColDef();
            },
            getRowIndex: function() {
              return _this.cellPosition.rowIndex;
            },
            getRowNode: function() {
              return _this.rowNode;
            },
            getGui: function() {
              return _this.getGui();
            },
            getLocation: function() {
              return "cell";
            },
            getTooltipValue,
            // this makes no sense, why is the cell formatted value passed to the tooltip???
            getValueFormatted: function() {
              return _this.valueFormatted;
            }
          };
          this.tooltipFeature = new TooltipFeature(tooltipCtrl, this.beans);
          this.addDestroyFunc(function() {
            return _this.tooltipFeature.destroy();
          });
        };
        CellCtrl2.prototype.setComp = function(comp, scope, eGui, printLayout, startEditing) {
          this.cellComp = comp;
          this.gow = this.beans.gridOptionsWrapper;
          this.scope = scope;
          this.eGui = eGui;
          this.printLayout = printLayout;
          this.updateAndFormatValue(true);
          this.addDomData();
          this.onCellFocused();
          this.applyStaticCssClasses();
          this.setWrapText();
          this.onFirstRightPinnedChanged();
          this.onLastLeftPinnedChanged();
          this.onColumnHover();
          this.setupControlComps();
          this.setupAriaExpanded();
          this.setupAutoHeight();
          var colIdSanitised = escapeString(this.column.getId());
          var ariaColIndex = this.beans.columnModel.getAriaColumnIndex(this.column);
          this.cellComp.setTabIndex(-1);
          this.cellComp.setRole("gridcell");
          this.cellComp.setAriaColIndex(ariaColIndex);
          this.cellComp.setColId(colIdSanitised);
          this.cellComp.setUnselectable(!this.beans.gridOptionsWrapper.isEnableCellTextSelection() ? "on" : null);
          this.cellPositionFeature.setComp(comp);
          this.cellCustomStyleFeature.setComp(comp, scope);
          this.tooltipFeature.setComp(comp);
          this.cellKeyboardListenerFeature.setComp(this.eGui);
          if (this.cellRangeFeature) {
            this.cellRangeFeature.setComp(comp);
          }
          if (startEditing && this.isCellEditable()) {
            this.startEditing();
          } else {
            this.showValue();
          }
        };
        CellCtrl2.prototype.setupAutoHeight = function() {
          var _this = this;
          if (!this.column.getColDef().autoHeight) {
            return;
          }
          var measureHeight = function(timesCalled) {
            var doc = _this.beans.gridOptionsWrapper.getDocument();
            if ((!doc || !doc.contains(_this.eGui)) && timesCalled < 5) {
              _this.beans.frameworkOverrides.setTimeout(function() {
                return measureHeight(timesCalled++);
              }, 0);
              return;
            }
            var newHeight = _this.eGui.offsetHeight;
            _this.rowNode.setRowAutoHeight(newHeight, _this.column);
          };
          var listener = function() {
            return measureHeight(0);
          };
          listener();
          var destroyResizeObserver = this.beans.resizeObserverService.observeResize(this.eGui, listener);
          this.addDestroyFunc(function() {
            destroyResizeObserver();
            _this.rowNode.setRowAutoHeight(void 0, _this.column);
          });
        };
        CellCtrl2.prototype.getInstanceId = function() {
          return this.instanceId;
        };
        CellCtrl2.prototype.showValue = function(forceNewCellRendererInstance) {
          if (forceNewCellRendererInstance === void 0) {
            forceNewCellRendererInstance = false;
          }
          var valueToDisplay = this.valueFormatted != null ? this.valueFormatted : this.value;
          var params = this.createCellRendererParams();
          var compDetails = this.beans.userComponentFactory.getCellRendererDetails(this.column.getColDef(), params);
          this.cellComp.setRenderDetails(compDetails, valueToDisplay, forceNewCellRendererInstance);
          this.refreshHandle();
        };
        CellCtrl2.prototype.setupControlComps = function() {
          var colDef = this.column.getColDef();
          this.includeSelection = this.isIncludeControl(colDef.checkboxSelection);
          this.includeRowDrag = this.isIncludeControl(colDef.rowDrag);
          this.includeDndSource = this.isIncludeControl(colDef.dndSource);
          var forceWrapper = this.beans.gridOptionsWrapper.isEnableCellTextSelection() || this.column.getColDef().autoHeight == true;
          this.cellComp.setIncludeSelection(this.includeSelection);
          this.cellComp.setIncludeDndSource(this.includeDndSource);
          this.cellComp.setIncludeRowDrag(this.includeRowDrag);
          this.cellComp.setForceWrapper(forceWrapper);
        };
        CellCtrl2.prototype.isIncludeControl = function(value) {
          var rowNodePinned = this.rowNode.rowPinned != null;
          var isFunc = typeof value === "function";
          var res = rowNodePinned ? false : isFunc || value === true;
          return res;
        };
        CellCtrl2.prototype.setupAriaExpanded = function() {
          var _this = this;
          var colDef = this.column.getColDef();
          if (!this.rowNode.isExpandable()) {
            return;
          }
          var showRowGroup = colDef.showRowGroup;
          var rowGroupColumn = this.rowNode.rowGroupColumn;
          var showingAllGroups = showRowGroup === true;
          var showingThisGroup = rowGroupColumn && rowGroupColumn.getColId() === showRowGroup;
          var colMatches = showingAllGroups || showingThisGroup;
          if (!colMatches) {
            return;
          }
          var listener = function() {
            _this.cellComp.setAriaExpanded(!!_this.rowNode.expanded);
          };
          this.addManagedListener(this.rowNode, RowNode.EVENT_EXPANDED_CHANGED, listener);
          listener();
        };
        CellCtrl2.prototype.refreshShouldDestroy = function() {
          var colDef = this.column.getColDef();
          var selectionChanged = this.includeSelection != this.isIncludeControl(colDef.checkboxSelection);
          var rowDragChanged = this.includeRowDrag != this.isIncludeControl(colDef.rowDrag);
          var dndSourceChanged = this.includeDndSource != this.isIncludeControl(colDef.dndSource);
          return selectionChanged || rowDragChanged || dndSourceChanged;
        };
        CellCtrl2.prototype.startEditing = function(keyPress, charPress, cellStartedEdit) {
          if (keyPress === void 0) {
            keyPress = null;
          }
          if (charPress === void 0) {
            charPress = null;
          }
          if (cellStartedEdit === void 0) {
            cellStartedEdit = false;
          }
          if (!this.isCellEditable() || this.editing) {
            return;
          }
          var editorParams = this.createCellEditorParams(keyPress, charPress, cellStartedEdit);
          var colDef = this.column.getColDef();
          var compDetails = this.beans.userComponentFactory.getCellEditorDetails(colDef, editorParams);
          var popup = !!colDef.cellEditorPopup;
          var position = colDef.cellEditorPopupPosition;
          this.setEditing(true, popup);
          this.cellComp.setEditDetails(compDetails, popup, position);
          var event = this.createEvent(null, Events.EVENT_CELL_EDITING_STARTED);
          this.beans.eventService.dispatchEvent(event);
        };
        CellCtrl2.prototype.setEditing = function(editing, inPopup) {
          if (inPopup === void 0) {
            inPopup = false;
          }
          if (this.editing === editing) {
            return;
          }
          this.editing = editing;
          this.editingInPopup = inPopup;
          this.setInlineEditingClass();
        };
        CellCtrl2.prototype.stopRowOrCellEdit = function(cancel) {
          if (cancel === void 0) {
            cancel = false;
          }
          if (this.beans.gridOptionsWrapper.isFullRowEdit()) {
            this.rowCtrl.stopRowEditing(cancel);
          } else {
            this.stopEditing(cancel);
          }
        };
        CellCtrl2.prototype.onPopupEditorClosed = function() {
          if (!this.isEditing()) {
            return;
          }
          this.stopEditingAndFocus();
        };
        CellCtrl2.prototype.takeValueFromCellEditor = function(cancel) {
          var noValueResult = { newValueExists: false };
          if (cancel) {
            return noValueResult;
          }
          var cellEditor = this.cellComp.getCellEditor();
          if (!cellEditor) {
            return noValueResult;
          }
          var userWantsToCancel = cellEditor.isCancelAfterEnd && cellEditor.isCancelAfterEnd();
          if (userWantsToCancel) {
            return noValueResult;
          }
          var newValue = cellEditor.getValue();
          return {
            newValue,
            newValueExists: true
          };
        };
        CellCtrl2.prototype.saveNewValue = function(oldValue, newValue) {
          if (newValue !== oldValue) {
            this.suppressRefreshCell = true;
            this.rowNode.setDataValue(this.column, newValue);
            this.suppressRefreshCell = false;
          }
        };
        CellCtrl2.prototype.stopEditing = function(cancel) {
          if (cancel === void 0) {
            cancel = false;
          }
          if (!this.editing) {
            return;
          }
          var _a2 = this.takeValueFromCellEditor(cancel), newValue = _a2.newValue, newValueExists = _a2.newValueExists;
          var oldValue = this.getValueFromValueService();
          if (newValueExists) {
            this.saveNewValue(oldValue, newValue);
          }
          this.setEditing(false);
          this.cellComp.setEditDetails();
          this.updateAndFormatValue();
          this.refreshCell({ forceRefresh: true, suppressFlash: true });
          this.dispatchEditingStoppedEvent(oldValue, newValue);
        };
        CellCtrl2.prototype.dispatchEditingStoppedEvent = function(oldValue, newValue) {
          var editingStoppedEvent = __assign$7(__assign$7({}, this.createEvent(null, Events.EVENT_CELL_EDITING_STOPPED)), {
            oldValue,
            newValue
          });
          this.beans.eventService.dispatchEvent(editingStoppedEvent);
        };
        CellCtrl2.prototype.setInlineEditingClass = function() {
          if (!this.isAlive()) {
            return;
          }
          var editingInline = this.editing && !this.editingInPopup;
          var popupEditorShowing = this.editing && this.editingInPopup;
          this.cellComp.addOrRemoveCssClass(CSS_CELL_INLINE_EDITING, editingInline);
          this.cellComp.addOrRemoveCssClass(CSS_CELL_NOT_INLINE_EDITING, !editingInline);
          this.cellComp.addOrRemoveCssClass(CSS_CELL_POPUP_EDITING, popupEditorShowing);
          this.rowCtrl.setInlineEditingCss(this.editing);
        };
        CellCtrl2.prototype.hackSayEditingInPopup = function() {
          if (this.editingInPopup) {
            return;
          }
          this.editingInPopup = true;
          this.setInlineEditingClass();
        };
        CellCtrl2.prototype.createCellEditorParams = function(keyPress, charPress, cellStartedEdit) {
          var res = {
            value: this.getValueFromValueService(),
            keyPress,
            charPress,
            column: this.column,
            colDef: this.column.getColDef(),
            rowIndex: this.getCellPosition().rowIndex,
            node: this.rowNode,
            data: this.rowNode.data,
            api: this.beans.gridOptionsWrapper.getApi(),
            cellStartedEdit,
            columnApi: this.beans.gridOptionsWrapper.getColumnApi(),
            context: this.beans.gridOptionsWrapper.getContext(),
            onKeyDown: this.onKeyDown.bind(this),
            stopEditing: this.stopEditingAndFocus.bind(this),
            eGridCell: this.getGui(),
            parseValue: this.parseValue.bind(this),
            formatValue: this.formatValue.bind(this)
          };
          if (this.scope) {
            res.$scope = this.scope;
          }
          return res;
        };
        CellCtrl2.prototype.createCellRendererParams = function() {
          var _this = this;
          var addRowCompListener = function(eventType, listener) {
            console.warn("AG Grid: since AG Grid v26, params.addRowCompListener() is deprecated. If you need this functionality, please contact AG Grid support and advise why so that we can revert with an appropriate workaround, as we dont have any valid use cases for it. This method was originally provided as a work around to know when cells were destroyed in AG Grid before custom Cell Renderers could be provided.");
            _this.rowCtrl.addEventListener(eventType, listener);
          };
          var res = {
            value: this.value,
            valueFormatted: this.valueFormatted,
            getValue: this.getValueFromValueService.bind(this),
            setValue: function(value) {
              return _this.beans.valueService.setValue(_this.rowNode, _this.column, value);
            },
            formatValue: this.formatValue.bind(this),
            data: this.rowNode.data,
            node: this.rowNode,
            colDef: this.column.getColDef(),
            column: this.column,
            rowIndex: this.getCellPosition().rowIndex,
            api: this.beans.gridOptionsWrapper.getApi(),
            columnApi: this.beans.gridOptionsWrapper.getColumnApi(),
            context: this.beans.gridOptionsWrapper.getContext(),
            refreshCell: this.refreshCell.bind(this),
            eGridCell: this.getGui(),
            eParentOfValue: this.cellComp.getParentOfValue(),
            registerRowDragger: function(rowDraggerElement, dragStartPixels, value, suppressVisibilityChange) {
              return _this.registerRowDragger(rowDraggerElement, dragStartPixels, suppressVisibilityChange);
            },
            // this function is not documented anywhere, so we could drop it
            // it was in the olden days to allow user to register for when rendered
            // row was removed (the row comp was removed), however now that the user
            // can provide components for cells, the destroy method gets call when this
            // happens so no longer need to fire event.
            addRowCompListener
          };
          if (this.scope) {
            res.$scope = this.scope;
          }
          return res;
        };
        CellCtrl2.prototype.parseValue = function(newValue) {
          var colDef = this.column.getColDef();
          var params = {
            node: this.rowNode,
            data: this.rowNode.data,
            oldValue: this.getValue(),
            newValue,
            colDef,
            column: this.column,
            api: this.beans.gridOptionsWrapper.getApi(),
            columnApi: this.beans.gridOptionsWrapper.getColumnApi(),
            context: this.beans.gridOptionsWrapper.getContext()
          };
          var valueParser = colDef.valueParser;
          return exists(valueParser) ? this.beans.expressionService.evaluate(valueParser, params) : newValue;
        };
        CellCtrl2.prototype.setFocusOutOnEditor = function() {
          if (!this.editing) {
            return;
          }
          var cellEditor = this.cellComp.getCellEditor();
          if (cellEditor && cellEditor.focusOut) {
            cellEditor.focusOut();
          }
        };
        CellCtrl2.prototype.setFocusInOnEditor = function() {
          if (!this.editing) {
            return;
          }
          var cellEditor = this.cellComp.getCellEditor();
          if (cellEditor && cellEditor.focusIn) {
            cellEditor.focusIn();
          } else {
            this.focusCell(true);
          }
        };
        CellCtrl2.prototype.onCellChanged = function(event) {
          var eventImpactsThisCell = event.column === this.column;
          if (eventImpactsThisCell) {
            this.refreshCell({});
          }
        };
        CellCtrl2.prototype.refreshCell = function(params) {
          if (this.suppressRefreshCell || this.editing) {
            return;
          }
          var colDef = this.column.getColDef();
          var newData = params != null && !!params.newData;
          var suppressFlash = params != null && !!params.suppressFlash || !!colDef.suppressCellFlash;
          var noValueProvided = colDef.field == null && colDef.valueGetter == null && colDef.showRowGroup == null;
          var forceRefresh = params && params.forceRefresh || noValueProvided || newData;
          var valuesDifferent = this.updateAndFormatValue();
          var dataNeedsUpdating = forceRefresh || valuesDifferent;
          if (dataNeedsUpdating) {
            this.showValue(newData);
            var processingFilterChange = this.beans.filterManager.isSuppressFlashingCellsBecauseFiltering();
            var flashCell = !suppressFlash && !processingFilterChange && (this.beans.gridOptionsWrapper.isEnableCellChangeFlash() || colDef.enableCellChangeFlash);
            if (flashCell) {
              this.flashCell();
            }
            this.cellCustomStyleFeature.applyUserStyles();
            this.cellCustomStyleFeature.applyClassesFromColDef();
          }
          this.refreshToolTip();
          this.cellCustomStyleFeature.applyCellClassRules();
        };
        CellCtrl2.prototype.stopEditingAndFocus = function(suppressNavigateAfterEdit) {
          if (suppressNavigateAfterEdit === void 0) {
            suppressNavigateAfterEdit = false;
          }
          this.stopRowOrCellEdit();
          this.focusCell(true);
          if (!suppressNavigateAfterEdit) {
            this.navigateAfterEdit();
          }
        };
        CellCtrl2.prototype.navigateAfterEdit = function() {
          var fullRowEdit = this.beans.gridOptionsWrapper.isFullRowEdit();
          if (fullRowEdit) {
            return;
          }
          var enterMovesDownAfterEdit = this.beans.gridOptionsWrapper.isEnterMovesDownAfterEdit();
          if (enterMovesDownAfterEdit) {
            this.beans.navigationService.navigateToNextCell(null, KeyCode.DOWN, this.getCellPosition(), false);
          }
        };
        CellCtrl2.prototype.flashCell = function(delays) {
          var flashDelay = delays && delays.flashDelay;
          var fadeDelay = delays && delays.fadeDelay;
          this.animateCell("data-changed", flashDelay, fadeDelay);
        };
        CellCtrl2.prototype.animateCell = function(cssName, flashDelay, fadeDelay) {
          var _this = this;
          var fullName = "ag-cell-" + cssName;
          var animationFullName = "ag-cell-" + cssName + "-animation";
          var gridOptionsWrapper = this.beans.gridOptionsWrapper;
          if (!flashDelay) {
            flashDelay = gridOptionsWrapper.getCellFlashDelay();
          }
          if (!exists(fadeDelay)) {
            fadeDelay = gridOptionsWrapper.getCellFadeDelay();
          }
          this.cellComp.addOrRemoveCssClass(fullName, true);
          this.cellComp.addOrRemoveCssClass(animationFullName, false);
          window.setTimeout(function() {
            _this.cellComp.addOrRemoveCssClass(fullName, false);
            _this.cellComp.addOrRemoveCssClass(animationFullName, true);
            _this.cellComp.setTransition("background-color " + fadeDelay + "ms");
            window.setTimeout(function() {
              _this.cellComp.addOrRemoveCssClass(animationFullName, false);
              _this.cellComp.setTransition("transition");
            }, fadeDelay);
          }, flashDelay);
        };
        CellCtrl2.prototype.onFlashCells = function(event) {
          var cellId = this.beans.cellPositionUtils.createId(this.getCellPosition());
          var shouldFlash = event.cells[cellId];
          if (shouldFlash) {
            this.animateCell("highlight");
          }
        };
        CellCtrl2.prototype.isCellEditable = function() {
          return this.column.isCellEditable(this.rowNode);
        };
        CellCtrl2.prototype.isSuppressFillHandle = function() {
          return this.column.isSuppressFillHandle();
        };
        CellCtrl2.prototype.formatValue = function(value) {
          var res = this.callValueFormatter(value);
          return res != null ? res : value;
        };
        CellCtrl2.prototype.callValueFormatter = function(value) {
          return this.beans.valueFormatterService.formatValue(this.column, this.rowNode, this.scope, value);
        };
        CellCtrl2.prototype.updateAndFormatValue = function(force) {
          if (force === void 0) {
            force = false;
          }
          var oldValue = this.value;
          var oldValueFormatted = this.valueFormatted;
          this.value = this.getValueFromValueService();
          this.valueFormatted = this.callValueFormatter(this.value);
          var valuesDifferent = force ? true : !this.valuesAreEqual(oldValue, this.value) || this.valueFormatted != oldValueFormatted;
          return valuesDifferent;
        };
        CellCtrl2.prototype.valuesAreEqual = function(val1, val2) {
          var colDef = this.column.getColDef();
          return colDef.equals ? colDef.equals(val1, val2) : val1 === val2;
        };
        CellCtrl2.prototype.getComp = function() {
          return this.cellComp;
        };
        CellCtrl2.prototype.getValueFromValueService = function() {
          var lockedClosedGroup = this.rowNode.leafGroup && this.beans.columnModel.isPivotMode();
          var isOpenGroup = this.rowNode.group && this.rowNode.expanded && !this.rowNode.footer && !lockedClosedGroup;
          var groupFootersEnabled = this.beans.gridOptionsWrapper.isGroupIncludeFooter();
          var groupAlwaysShowAggData = this.beans.gridOptionsWrapper.isGroupSuppressBlankHeader();
          var ignoreAggData = isOpenGroup && groupFootersEnabled && !groupAlwaysShowAggData;
          var value = this.beans.valueService.getValue(this.column, this.rowNode, false, ignoreAggData);
          return value;
        };
        CellCtrl2.prototype.getValue = function() {
          return this.value;
        };
        CellCtrl2.prototype.getValueFormatted = function() {
          return this.valueFormatted;
        };
        CellCtrl2.prototype.addDomData = function() {
          var _this = this;
          var element = this.getGui();
          this.beans.gridOptionsWrapper.setDomData(element, CellCtrl2.DOM_DATA_KEY_CELL_CTRL, this);
          this.addDestroyFunc(function() {
            return _this.beans.gridOptionsWrapper.setDomData(element, CellCtrl2.DOM_DATA_KEY_CELL_CTRL, null);
          });
        };
        CellCtrl2.prototype.createEvent = function(domEvent, eventType) {
          var event = {
            type: eventType,
            node: this.rowNode,
            data: this.rowNode.data,
            value: this.value,
            column: this.column,
            colDef: this.column.getColDef(),
            context: this.beans.gridOptionsWrapper.getContext(),
            api: this.beans.gridApi,
            columnApi: this.beans.columnApi,
            rowPinned: this.rowNode.rowPinned,
            event: domEvent,
            rowIndex: this.rowNode.rowIndex
          };
          if (this.scope) {
            event.$scope = this.scope;
          }
          return event;
        };
        CellCtrl2.prototype.onKeyPress = function(event) {
          this.cellKeyboardListenerFeature.onKeyPress(event);
        };
        CellCtrl2.prototype.onKeyDown = function(event) {
          this.cellKeyboardListenerFeature.onKeyDown(event);
        };
        CellCtrl2.prototype.onMouseEvent = function(eventName, mouseEvent) {
          this.cellMouseListenerFeature.onMouseEvent(eventName, mouseEvent);
        };
        CellCtrl2.prototype.getGui = function() {
          return this.eGui;
        };
        CellCtrl2.prototype.refreshToolTip = function() {
          this.tooltipFeature.refreshToolTip();
        };
        CellCtrl2.prototype.getColSpanningList = function() {
          return this.cellPositionFeature.getColSpanningList();
        };
        CellCtrl2.prototype.onLeftChanged = function() {
          this.cellPositionFeature.onLeftChanged();
          this.refreshAriaIndex();
        };
        CellCtrl2.prototype.refreshAriaIndex = function() {
          var colIdx = this.beans.columnModel.getAriaColumnIndex(this.column);
          this.cellComp.setAriaColIndex(colIdx);
        };
        CellCtrl2.prototype.isSuppressNavigable = function() {
          return this.column.isSuppressNavigable(this.rowNode);
        };
        CellCtrl2.prototype.onWidthChanged = function() {
          return this.cellPositionFeature.onWidthChanged();
        };
        CellCtrl2.prototype.getColumn = function() {
          return this.column;
        };
        CellCtrl2.prototype.getRowNode = function() {
          return this.rowNode;
        };
        CellCtrl2.prototype.getBeans = function() {
          return this.beans;
        };
        CellCtrl2.prototype.isPrintLayout = function() {
          return this.printLayout;
        };
        CellCtrl2.prototype.appendChild = function(htmlElement) {
          this.eGui.appendChild(htmlElement);
        };
        CellCtrl2.prototype.refreshHandle = function() {
          if (this.editing) {
            return;
          }
          if (this.cellRangeFeature) {
            this.cellRangeFeature.refreshHandle();
          }
        };
        CellCtrl2.prototype.getCellPosition = function() {
          return this.cellPosition;
        };
        CellCtrl2.prototype.isEditing = function() {
          return this.editing;
        };
        CellCtrl2.prototype.startRowOrCellEdit = function(keyPress, charPress) {
          if (this.beans.gridOptionsWrapper.isFullRowEdit()) {
            this.rowCtrl.startRowEditing(keyPress, charPress, this);
          } else {
            this.startEditing(keyPress, charPress, true);
          }
        };
        CellCtrl2.prototype.getRowCtrl = function() {
          return this.rowCtrl;
        };
        CellCtrl2.prototype.getRowPosition = function() {
          return {
            rowIndex: this.cellPosition.rowIndex,
            rowPinned: this.cellPosition.rowPinned
          };
        };
        CellCtrl2.prototype.updateRangeBordersIfRangeCount = function() {
          if (this.cellRangeFeature) {
            this.cellRangeFeature.updateRangeBordersIfRangeCount();
          }
        };
        CellCtrl2.prototype.onRangeSelectionChanged = function() {
          if (this.cellRangeFeature) {
            this.cellRangeFeature.onRangeSelectionChanged();
          }
        };
        CellCtrl2.prototype.isRangeSelectionEnabled = function() {
          return this.cellRangeFeature != null;
        };
        CellCtrl2.prototype.focusCell = function(forceBrowserFocus) {
          if (forceBrowserFocus === void 0) {
            forceBrowserFocus = false;
          }
          this.beans.focusService.setFocusedCell(this.getCellPosition().rowIndex, this.column, this.rowNode.rowPinned, forceBrowserFocus);
        };
        CellCtrl2.prototype.onRowIndexChanged = function() {
          this.createCellPosition();
          this.onCellFocused();
          if (this.cellRangeFeature) {
            this.cellRangeFeature.onRangeSelectionChanged();
          }
        };
        CellCtrl2.prototype.onFirstRightPinnedChanged = function() {
          if (!this.cellComp) {
            return;
          }
          var firstRightPinned = this.column.isFirstRightPinned();
          this.cellComp.addOrRemoveCssClass(CSS_CELL_FIRST_RIGHT_PINNED, firstRightPinned);
        };
        CellCtrl2.prototype.onLastLeftPinnedChanged = function() {
          if (!this.cellComp) {
            return;
          }
          var lastLeftPinned = this.column.isLastLeftPinned();
          this.cellComp.addOrRemoveCssClass(CSS_CELL_LAST_LEFT_PINNED, lastLeftPinned);
        };
        CellCtrl2.prototype.onCellFocused = function(event) {
          if (!this.cellComp) {
            return;
          }
          var cellFocused = this.beans.focusService.isCellFocused(this.cellPosition);
          if (!this.gow.isSuppressCellSelection()) {
            this.cellComp.addOrRemoveCssClass(CSS_CELL_FOCUS, cellFocused);
          }
          if (cellFocused && event && event.forceBrowserFocus) {
            var focusEl = this.cellComp.getFocusableElement();
            focusEl.focus();
            if (!document.activeElement || document.activeElement === document.body) {
              focusEl.focus();
            }
          }
          var fullRowEdit = this.beans.gridOptionsWrapper.isFullRowEdit();
          if (!cellFocused && !fullRowEdit && this.editing) {
            this.stopRowOrCellEdit();
          }
        };
        CellCtrl2.prototype.createCellPosition = function() {
          this.cellPosition = {
            rowIndex: this.rowNode.rowIndex,
            rowPinned: this.rowNode.rowPinned,
            column: this.column
          };
        };
        CellCtrl2.prototype.applyStaticCssClasses = function() {
          this.cellComp.addOrRemoveCssClass(CSS_CELL, true);
          this.cellComp.addOrRemoveCssClass(CSS_CELL_NOT_INLINE_EDITING, true);
          var autoHeight = this.column.getColDef().autoHeight == true;
          this.cellComp.addOrRemoveCssClass(CSS_AUTO_HEIGHT, autoHeight);
          this.cellComp.addOrRemoveCssClass(CSS_NORMAL_HEIGHT, !autoHeight);
        };
        CellCtrl2.prototype.onColumnHover = function() {
          if (!this.cellComp) {
            return;
          }
          if (!this.beans.gridOptionsWrapper.isColumnHoverHighlight()) {
            return;
          }
          var isHovered = this.beans.columnHoverService.isHovered(this.column);
          this.cellComp.addOrRemoveCssClass(CSS_COLUMN_HOVER, isHovered);
        };
        CellCtrl2.prototype.onNewColumnsLoaded = function() {
          if (!this.cellComp) {
            return;
          }
          this.setWrapText();
          if (!this.editing) {
            this.refreshCell({ forceRefresh: true, suppressFlash: true });
          }
        };
        CellCtrl2.prototype.setWrapText = function() {
          var value = this.column.getColDef().wrapText == true;
          this.cellComp.addOrRemoveCssClass(CSS_CELL_WRAP_TEXT, value);
        };
        CellCtrl2.prototype.dispatchCellContextMenuEvent = function(event) {
          var colDef = this.column.getColDef();
          var cellContextMenuEvent = this.createEvent(event, Events.EVENT_CELL_CONTEXT_MENU);
          this.beans.eventService.dispatchEvent(cellContextMenuEvent);
          if (colDef.onCellContextMenu) {
            window.setTimeout(function() {
              return colDef.onCellContextMenu(cellContextMenuEvent);
            }, 0);
          }
        };
        CellCtrl2.prototype.getCellRenderer = function() {
          return this.cellComp ? this.cellComp.getCellRenderer() : null;
        };
        CellCtrl2.prototype.getCellEditor = function() {
          return this.cellComp ? this.cellComp.getCellEditor() : null;
        };
        CellCtrl2.prototype.destroy = function() {
          _super.prototype.destroy.call(this);
        };
        CellCtrl2.prototype.createSelectionCheckbox = function() {
          var cbSelectionComponent = new CheckboxSelectionComponent();
          this.beans.context.createBean(cbSelectionComponent);
          cbSelectionComponent.init({ rowNode: this.rowNode, column: this.column });
          return cbSelectionComponent;
        };
        CellCtrl2.prototype.createDndSource = function() {
          var dndSourceComp = new DndSourceComp(this.rowNode, this.column, this.beans, this.eGui);
          this.beans.context.createBean(dndSourceComp);
          return dndSourceComp;
        };
        CellCtrl2.prototype.registerRowDragger = function(customElement, dragStartPixels, suppressVisibilityChange) {
          var _this = this;
          if (this.customRowDragComp) {
            this.customRowDragComp.setDragElement(customElement, dragStartPixels);
            return;
          }
          var newComp = this.createRowDragComp(customElement, dragStartPixels, suppressVisibilityChange);
          if (newComp) {
            this.customRowDragComp = newComp;
            this.addDestroyFunc(function() {
              return _this.beans.context.destroyBean(newComp);
            });
          }
        };
        CellCtrl2.prototype.createRowDragComp = function(customElement, dragStartPixels, suppressVisibilityChange) {
          var _this = this;
          var pagination = this.beans.gridOptionsWrapper.isPagination();
          var rowDragManaged = this.beans.gridOptionsWrapper.isRowDragManaged();
          var clientSideRowModelActive = this.beans.gridOptionsWrapper.isRowModelDefault();
          if (rowDragManaged) {
            if (!clientSideRowModelActive) {
              doOnce(function() {
                return console.warn("AG Grid: managed row dragging is only allowed in the Client Side Row Model");
              }, "CellComp.addRowDragging");
              return;
            }
            if (pagination) {
              doOnce(function() {
                return console.warn("AG Grid: managed row dragging is not possible when doing pagination");
              }, "CellComp.addRowDragging");
              return;
            }
          }
          var rowDragComp = new RowDragComp(function() {
            return _this.value;
          }, this.rowNode, this.column, customElement, dragStartPixels, suppressVisibilityChange);
          this.beans.context.createBean(rowDragComp);
          return rowDragComp;
        };
        CellCtrl2.DOM_DATA_KEY_CELL_CTRL = "cellCtrl";
        return CellCtrl2;
      }(BeanStub)
    );
    var __assign$8 = function() {
      __assign$8 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign$8.apply(this, arguments);
    };
    var AngularRowUtils = (
      /** @class */
      function() {
        function AngularRowUtils2() {
        }
        AngularRowUtils2.createChildScopeOrNull = function(rowNode, parentScope, gridOptionsWrapper) {
          var isAngularCompileRows = gridOptionsWrapper.isAngularCompileRows();
          if (!isAngularCompileRows) {
            return null;
          }
          var newChildScope = parentScope.$new();
          newChildScope.data = __assign$8({}, rowNode.data);
          newChildScope.rowNode = rowNode;
          newChildScope.context = gridOptionsWrapper.getContext();
          var destroyFunc = function() {
            newChildScope.$destroy();
            newChildScope.data = null;
            newChildScope.rowNode = null;
            newChildScope.context = null;
          };
          return {
            scope: newChildScope,
            scopeDestroyFunc: destroyFunc
          };
        };
        return AngularRowUtils2;
      }()
    );
    var __extends$U = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __spreadArrays$5 = function() {
      for (var s = 0, i = 0, il = arguments.length; i < il; i++)
        s += arguments[i].length;
      for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
          r[k] = a[j];
      return r;
    };
    var RowType;
    (function(RowType2) {
      RowType2["Normal"] = "Normal";
      RowType2["FullWidth"] = "FullWidth";
      RowType2["FullWidthLoading"] = "FullWidthLoading";
      RowType2["FullWidthGroup"] = "FullWidthGroup";
      RowType2["FullWidthDetail"] = "FullWidthDetail";
    })(RowType || (RowType = {}));
    var FullWidthRenderers = convertToMap([
      [RowType.FullWidthLoading, "agLoadingCellRenderer"],
      [RowType.FullWidthGroup, "agGroupRowRenderer"],
      [RowType.FullWidthDetail, "agDetailCellRenderer"]
    ]);
    var FullWidthKeys = convertToMap([
      [RowType.FullWidth, "fullWidthCellRenderer"],
      [RowType.FullWidthLoading, "loadingCellRenderer"],
      [RowType.FullWidthGroup, "groupRowRenderer"],
      [RowType.FullWidthDetail, "detailCellRenderer"]
    ]);
    var instanceIdSequence$2 = 0;
    var RowCtrl = (
      /** @class */
      function(_super) {
        __extends$U(RowCtrl2, _super);
        function RowCtrl2(parentScope, rowNode, beans, animateIn, useAnimationFrameForCreate, printLayout) {
          var _this = _super.call(this) || this;
          _this.allRowGuis = [];
          _this.active = true;
          _this.centerCellCtrls = { list: [], map: {} };
          _this.leftCellCtrls = { list: [], map: {} };
          _this.rightCellCtrls = { list: [], map: {} };
          _this.lastMouseDownOnDragger = false;
          _this.updateColumnListsPending = false;
          _this.parentScope = parentScope;
          _this.beans = beans;
          _this.rowNode = rowNode;
          _this.paginationPage = _this.beans.paginationProxy.getCurrentPage();
          _this.useAnimationFrameForCreate = useAnimationFrameForCreate;
          _this.printLayout = printLayout;
          _this.instanceId = rowNode.id + "-" + instanceIdSequence$2++;
          _this.setAnimateFlags(animateIn);
          _this.rowFocused = _this.beans.focusService.isRowFocused(_this.rowNode.rowIndex, _this.rowNode.rowPinned);
          _this.setupAngular1Scope();
          _this.rowLevel = _this.beans.rowCssClassCalculator.calculateRowLevel(_this.rowNode);
          _this.setRowType();
          _this.addListeners();
          _this.setInitialRowTop();
          return _this;
        }
        RowCtrl2.prototype.getBeans = function() {
          return this.beans;
        };
        RowCtrl2.prototype.getInstanceId = function() {
          return this.instanceId;
        };
        RowCtrl2.prototype.setComp = function(rowComp, element, pinned) {
          var gui = { rowComp, element, pinned };
          this.allRowGuis.push(gui);
          if (pinned === Constants.PINNED_LEFT) {
            this.leftGui = gui;
          } else if (pinned === Constants.PINNED_RIGHT) {
            this.rightGui = gui;
          } else if (this.isFullWidth() && !this.beans.gridOptionsWrapper.isEmbedFullWidthRows()) {
            this.fullWidthGui = gui;
          } else {
            this.centerGui = gui;
          }
          var allNormalPresent = this.leftGui != null && this.rightGui != null && this.centerGui != null;
          var fullWidthPresent = this.fullWidthGui != null;
          if (allNormalPresent || fullWidthPresent) {
            this.initialiseRowComps();
          }
        };
        RowCtrl2.prototype.isCacheable = function() {
          return this.rowType === RowType.FullWidthDetail && this.beans.gridOptionsWrapper.isKeepDetailRows();
        };
        RowCtrl2.prototype.setCached = function(cached) {
          var displayValue = cached ? "none" : void 0;
          this.allRowGuis.forEach(function(rg) {
            return rg.rowComp.setDisplay(displayValue);
          });
        };
        RowCtrl2.prototype.initialiseRowComps = function() {
          var _this = this;
          var gow = this.beans.gridOptionsWrapper;
          this.onRowHeightChanged();
          this.updateRowIndexes();
          this.setFocusedClasses();
          this.setStylesFromGridOptions();
          if (gow.isRowSelection() && this.rowNode.selectable) {
            this.onRowSelected();
          }
          this.updateColumnLists(!this.useAnimationFrameForCreate);
          if (this.slideRowIn) {
            executeNextVMTurn(this.onTopChanged.bind(this));
          }
          if (this.fadeRowIn) {
            executeNextVMTurn(function() {
              _this.allRowGuis.forEach(function(gui) {
                return gui.rowComp.addOrRemoveCssClass("ag-opacity-zero", false);
              });
            });
          }
          var businessKey = this.getRowBusinessKey();
          var rowIdSanitised = escapeString(this.rowNode.id);
          var businessKeySanitised = escapeString(businessKey);
          this.allRowGuis.forEach(function(gui) {
            var comp = gui.rowComp;
            comp.setRole("row");
            var initialRowClasses = _this.getInitialRowClasses(gui.pinned);
            initialRowClasses.forEach(function(name) {
              return comp.addOrRemoveCssClass(name, true);
            });
            if (_this.rowNode.group) {
              comp.setAriaExpanded(_this.rowNode.expanded == true);
            }
            if (rowIdSanitised != null) {
              comp.setRowId(rowIdSanitised);
            }
            if (businessKeySanitised != null) {
              comp.setRowBusinessKey(businessKeySanitised);
            }
            if (_this.isFullWidth()) {
              comp.setTabIndex(-1);
            }
            gow.setDomData(gui.element, RowCtrl2.DOM_DATA_KEY_ROW_CTRL, _this);
            _this.addDestroyFunc(function() {
              return gow.setDomData(gui.element, RowCtrl2.DOM_DATA_KEY_ROW_CTRL, null);
            });
            if (_this.useAnimationFrameForCreate) {
              _this.beans.animationFrameService.createTask(_this.addHoverFunctionality.bind(_this, gui.element), _this.rowNode.rowIndex, "createTasksP2");
            } else {
              _this.addHoverFunctionality(gui.element);
            }
            if (_this.isFullWidth()) {
              _this.setupFullWidth(gui);
            }
            if (gow.isRowDragEntireRow()) {
              _this.addRowDraggerToRow(gui);
            }
            _this.beans.animationFrameService.addDestroyTask(function() {
              if (_this.isAlive()) {
                gui.rowComp.addOrRemoveCssClass("ag-after-created", true);
              }
            });
          });
          this.executeProcessRowPostCreateFunc();
        };
        RowCtrl2.prototype.addRowDraggerToRow = function(gui) {
          var gow = this.beans.gridOptionsWrapper;
          if (gow.isEnableRangeSelection()) {
            doOnce(function() {
              console.warn("AG Grid: Setting `rowDragEntireRow: true` in the gridOptions doesn't work with `enableRangeSelection: true`");
            }, "rowDragAndRangeSelectionEnabled");
            return;
          }
          var rowDragComp = new RowDragComp(function() {
            return "1 row";
          }, this.rowNode, void 0, gui.element, void 0, true);
          this.createManagedBean(rowDragComp, this.beans.context);
        };
        RowCtrl2.prototype.getFullWidthCellRendererType = function() {
          return FullWidthKeys.get(this.rowType);
        };
        RowCtrl2.prototype.getFullWidthCellRendererName = function() {
          return FullWidthRenderers.get(this.rowType);
        };
        RowCtrl2.prototype.setupFullWidth = function(gui) {
          var params = this.createFullWidthParams(gui.element, gui.pinned);
          var cellRendererType = this.getFullWidthCellRendererType();
          var cellRendererName = this.getFullWidthCellRendererName();
          var compDetails = this.beans.userComponentFactory.getFullWidthCellRendererDetails(params, cellRendererType, cellRendererName);
          if (compDetails) {
            gui.rowComp.showFullWidth(compDetails);
          } else {
            var masterDetailModuleLoaded = ModuleRegistry.isRegistered(exports.ModuleNames.MasterDetailModule);
            if (cellRendererName === "agDetailCellRenderer" && !masterDetailModuleLoaded) {
              console.warn("AG Grid: cell renderer agDetailCellRenderer (for master detail) not found. Did you forget to include the master detail module?");
            } else {
              console.error("AG Grid: fullWidthCellRenderer " + cellRendererName + " not found");
            }
          }
        };
        RowCtrl2.prototype.getScope = function() {
          return this.scope;
        };
        RowCtrl2.prototype.isPrintLayout = function() {
          return this.printLayout;
        };
        RowCtrl2.prototype.setupAngular1Scope = function() {
          var scopeResult = AngularRowUtils.createChildScopeOrNull(this.rowNode, this.parentScope, this.beans.gridOptionsWrapper);
          if (scopeResult) {
            this.scope = scopeResult.scope;
            this.addDestroyFunc(scopeResult.scopeDestroyFunc);
          }
        };
        RowCtrl2.prototype.getCellElement = function(column) {
          var cellCtrl = this.getCellCtrl(column);
          return cellCtrl ? cellCtrl.getGui() : null;
        };
        RowCtrl2.prototype.executeProcessRowPostCreateFunc = function() {
          var func = this.beans.gridOptionsWrapper.getProcessRowPostCreateFunc();
          if (!func) {
            return;
          }
          var params = {
            eRow: this.centerGui ? this.centerGui.element : void 0,
            ePinnedLeftRow: this.leftGui ? this.leftGui.element : void 0,
            ePinnedRightRow: this.rightGui ? this.rightGui.element : void 0,
            node: this.rowNode,
            api: this.beans.gridOptionsWrapper.getApi(),
            rowIndex: this.rowNode.rowIndex,
            addRenderedRowListener: this.addEventListener.bind(this),
            columnApi: this.beans.gridOptionsWrapper.getColumnApi(),
            context: this.beans.gridOptionsWrapper.getContext()
          };
          func(params);
        };
        RowCtrl2.prototype.setRowType = function() {
          var isStub = this.rowNode.stub;
          var isFullWidthCell = this.rowNode.isFullWidthCell();
          var isDetailCell = this.beans.doingMasterDetail && this.rowNode.detail;
          var pivotMode = this.beans.columnModel.isPivotMode();
          var isGroupRow = !!this.rowNode.group && !this.rowNode.footer;
          var isFullWidthGroup = isGroupRow && this.beans.gridOptionsWrapper.isGroupUseEntireRow(pivotMode);
          if (isStub) {
            this.rowType = RowType.FullWidthLoading;
          } else if (isDetailCell) {
            this.rowType = RowType.FullWidthDetail;
          } else if (isFullWidthCell) {
            this.rowType = RowType.FullWidth;
          } else if (isFullWidthGroup) {
            this.rowType = RowType.FullWidthGroup;
          } else {
            this.rowType = RowType.Normal;
          }
        };
        RowCtrl2.prototype.updateColumnLists = function(suppressAnimationFrame) {
          var _this = this;
          if (suppressAnimationFrame === void 0) {
            suppressAnimationFrame = false;
          }
          if (this.isFullWidth()) {
            return;
          }
          var noAnimation = suppressAnimationFrame || this.beans.gridOptionsWrapper.isSuppressAnimationFrame() || this.printLayout;
          if (noAnimation) {
            this.updateColumnListsImpl();
            return;
          }
          if (this.updateColumnListsPending) {
            return;
          }
          this.beans.animationFrameService.createTask(function() {
            if (!_this.active) {
              return;
            }
            _this.updateColumnListsImpl();
          }, this.rowNode.rowIndex, "createTasksP1");
          this.updateColumnListsPending = true;
        };
        RowCtrl2.prototype.createCellCtrls = function(prev, cols, pinned) {
          var _this = this;
          if (pinned === void 0) {
            pinned = null;
          }
          var res = {
            list: [],
            map: {}
          };
          var addCell = function(colInstanceId, cellCtrl) {
            res.list.push(cellCtrl);
            res.map[colInstanceId] = cellCtrl;
          };
          cols.forEach(function(col) {
            var colInstanceId = col.getInstanceId();
            var cellCtrl = prev.map[colInstanceId];
            if (!cellCtrl) {
              cellCtrl = new CellCtrl(col, _this.rowNode, _this.beans, _this);
            }
            addCell(colInstanceId, cellCtrl);
          });
          prev.list.forEach(function(prevCellCtrl) {
            var cellInResult = res.map[prevCellCtrl.getColumn().getInstanceId()] != null;
            if (cellInResult) {
              return;
            }
            var keepCell = !_this.isCellEligibleToBeRemoved(prevCellCtrl, pinned);
            if (keepCell) {
              addCell(prevCellCtrl.getColumn().getInstanceId(), prevCellCtrl);
              return;
            }
            prevCellCtrl.destroy();
          });
          return res;
        };
        RowCtrl2.prototype.updateColumnListsImpl = function() {
          var _this = this;
          this.updateColumnListsPending = false;
          var columnModel = this.beans.columnModel;
          if (this.printLayout) {
            this.centerCellCtrls = this.createCellCtrls(this.centerCellCtrls, columnModel.getAllDisplayedColumns());
            this.leftCellCtrls = { list: [], map: {} };
            this.rightCellCtrls = { list: [], map: {} };
          } else {
            var centerCols = columnModel.getViewportCenterColumnsForRow(this.rowNode);
            this.centerCellCtrls = this.createCellCtrls(this.centerCellCtrls, centerCols);
            var leftCols = columnModel.getDisplayedLeftColumnsForRow(this.rowNode);
            this.leftCellCtrls = this.createCellCtrls(this.leftCellCtrls, leftCols, Constants.PINNED_LEFT);
            var rightCols = columnModel.getDisplayedRightColumnsForRow(this.rowNode);
            this.rightCellCtrls = this.createCellCtrls(this.rightCellCtrls, rightCols, Constants.PINNED_RIGHT);
          }
          this.allRowGuis.forEach(function(item) {
            var cellControls = item.pinned === Constants.PINNED_LEFT ? _this.leftCellCtrls : item.pinned === Constants.PINNED_RIGHT ? _this.rightCellCtrls : _this.centerCellCtrls;
            item.rowComp.setCellCtrls(cellControls.list);
          });
        };
        RowCtrl2.prototype.isCellEligibleToBeRemoved = function(cellCtrl, nextContainerPinned) {
          var REMOVE_CELL = true;
          var KEEP_CELL = false;
          var column = cellCtrl.getColumn();
          if (column.getPinned() != nextContainerPinned) {
            return REMOVE_CELL;
          }
          var editing = cellCtrl.isEditing();
          var focused = this.beans.focusService.isCellFocused(cellCtrl.getCellPosition());
          var mightWantToKeepCell = editing || focused;
          if (mightWantToKeepCell) {
            var column_1 = cellCtrl.getColumn();
            var displayedColumns = this.beans.columnModel.getAllDisplayedColumns();
            var cellStillDisplayed = displayedColumns.indexOf(column_1) >= 0;
            return cellStillDisplayed ? KEEP_CELL : REMOVE_CELL;
          }
          return REMOVE_CELL;
        };
        RowCtrl2.prototype.setAnimateFlags = function(animateIn) {
          if (animateIn) {
            var oldRowTopExists = exists(this.rowNode.oldRowTop);
            this.slideRowIn = oldRowTopExists;
            this.fadeRowIn = !oldRowTopExists;
          } else {
            this.slideRowIn = false;
            this.fadeRowIn = false;
          }
        };
        RowCtrl2.prototype.isEditing = function() {
          return this.editingRow;
        };
        RowCtrl2.prototype.stopRowEditing = function(cancel) {
          this.stopEditing(cancel);
        };
        RowCtrl2.prototype.isFullWidth = function() {
          return this.rowType !== RowType.Normal;
        };
        RowCtrl2.prototype.getRowType = function() {
          return this.rowType;
        };
        RowCtrl2.prototype.refreshFullWidth = function() {
          var _this = this;
          var tryRefresh = function(gui, pinned) {
            if (!gui) {
              return true;
            }
            var cellRenderer = gui.rowComp.getFullWidthCellRenderer();
            if (!cellRenderer) {
              return false;
            }
            if (!cellRenderer.refresh) {
              return false;
            }
            var params = _this.createFullWidthParams(gui.element, pinned);
            var refreshSucceeded = cellRenderer.refresh(params);
            return refreshSucceeded;
          };
          var fullWidthSuccess = tryRefresh(this.fullWidthGui, null);
          var centerSuccess = tryRefresh(this.centerGui, null);
          var leftSuccess = tryRefresh(this.leftGui, Constants.PINNED_LEFT);
          var rightSuccess = tryRefresh(this.rightGui, Constants.PINNED_RIGHT);
          var allFullWidthRowsRefreshed = fullWidthSuccess && centerSuccess && leftSuccess && rightSuccess;
          return allFullWidthRowsRefreshed;
        };
        RowCtrl2.prototype.addListeners = function() {
          this.addManagedListener(this.rowNode, RowNode.EVENT_HEIGHT_CHANGED, this.onRowHeightChanged.bind(this));
          this.addManagedListener(this.rowNode, RowNode.EVENT_ROW_SELECTED, this.onRowSelected.bind(this));
          this.addManagedListener(this.rowNode, RowNode.EVENT_ROW_INDEX_CHANGED, this.onRowIndexChanged.bind(this));
          this.addManagedListener(this.rowNode, RowNode.EVENT_TOP_CHANGED, this.onTopChanged.bind(this));
          this.addManagedListener(this.rowNode, RowNode.EVENT_EXPANDED_CHANGED, this.updateExpandedCss.bind(this));
          this.addManagedListener(this.rowNode, RowNode.EVENT_HAS_CHILDREN_CHANGED, this.updateExpandedCss.bind(this));
          this.addManagedListener(this.rowNode, RowNode.EVENT_DATA_CHANGED, this.onRowNodeDataChanged.bind(this));
          this.addManagedListener(this.rowNode, RowNode.EVENT_CELL_CHANGED, this.onRowNodeCellChanged.bind(this));
          this.addManagedListener(this.rowNode, RowNode.EVENT_HIGHLIGHT_CHANGED, this.onRowNodeHighlightChanged.bind(this));
          this.addManagedListener(this.rowNode, RowNode.EVENT_DRAGGING_CHANGED, this.onRowNodeDraggingChanged.bind(this));
          this.addManagedListener(this.rowNode, RowNode.EVENT_UI_LEVEL_CHANGED, this.onUiLevelChanged.bind(this));
          var eventService = this.beans.eventService;
          this.addManagedListener(eventService, Events.EVENT_PAGINATION_PIXEL_OFFSET_CHANGED, this.onPaginationPixelOffsetChanged.bind(this));
          this.addManagedListener(eventService, Events.EVENT_HEIGHT_SCALE_CHANGED, this.onTopChanged.bind(this));
          this.addManagedListener(eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));
          this.addManagedListener(eventService, Events.EVENT_VIRTUAL_COLUMNS_CHANGED, this.onVirtualColumnsChanged.bind(this));
          this.addManagedListener(eventService, Events.EVENT_CELL_FOCUSED, this.onCellFocusChanged.bind(this));
          this.addManagedListener(eventService, Events.EVENT_PAGINATION_CHANGED, this.onPaginationChanged.bind(this));
          this.addManagedListener(eventService, Events.EVENT_MODEL_UPDATED, this.onModelUpdated.bind(this));
          this.addManagedListener(eventService, Events.EVENT_COLUMN_MOVED, this.onColumnMoved.bind(this));
          this.addListenersForCellComps();
        };
        RowCtrl2.prototype.onColumnMoved = function() {
          this.updateColumnLists();
        };
        RowCtrl2.prototype.addListenersForCellComps = function() {
          var _this = this;
          this.addManagedListener(this.rowNode, RowNode.EVENT_ROW_INDEX_CHANGED, function() {
            _this.getAllCellCtrls().forEach(function(cellCtrl) {
              return cellCtrl.onRowIndexChanged();
            });
          });
          this.addManagedListener(this.rowNode, RowNode.EVENT_CELL_CHANGED, function(event) {
            _this.getAllCellCtrls().forEach(function(cellCtrl) {
              return cellCtrl.onCellChanged(event);
            });
          });
        };
        RowCtrl2.prototype.onRowNodeDataChanged = function(event) {
          this.getAllCellCtrls().forEach(function(cellCtrl) {
            return cellCtrl.refreshCell({
              suppressFlash: !event.update,
              newData: !event.update
            });
          });
          this.onRowSelected();
          this.postProcessCss();
        };
        RowCtrl2.prototype.onRowNodeCellChanged = function() {
          this.postProcessCss();
        };
        RowCtrl2.prototype.postProcessCss = function() {
          this.setStylesFromGridOptions();
          this.postProcessClassesFromGridOptions();
          this.postProcessRowClassRules();
          this.postProcessRowDragging();
        };
        RowCtrl2.prototype.onRowNodeHighlightChanged = function() {
          var highlighted = this.rowNode.highlighted;
          this.allRowGuis.forEach(function(gui) {
            var aboveOn = highlighted === exports.RowHighlightPosition.Above;
            var belowOn = highlighted === exports.RowHighlightPosition.Below;
            gui.rowComp.addOrRemoveCssClass("ag-row-highlight-above", aboveOn);
            gui.rowComp.addOrRemoveCssClass("ag-row-highlight-below", belowOn);
          });
        };
        RowCtrl2.prototype.onRowNodeDraggingChanged = function() {
          this.postProcessRowDragging();
        };
        RowCtrl2.prototype.postProcessRowDragging = function() {
          var dragging = this.rowNode.dragging;
          this.allRowGuis.forEach(function(gui) {
            return gui.rowComp.addOrRemoveCssClass("ag-row-dragging", dragging);
          });
        };
        RowCtrl2.prototype.updateExpandedCss = function() {
          var expandable = this.rowNode.isExpandable();
          var expanded = this.rowNode.expanded == true;
          this.allRowGuis.forEach(function(gui) {
            gui.rowComp.addOrRemoveCssClass("ag-row-group", expandable);
            gui.rowComp.addOrRemoveCssClass("ag-row-group-expanded", expandable && expanded);
            gui.rowComp.addOrRemoveCssClass("ag-row-group-contracted", expandable && !expanded);
            gui.rowComp.setAriaExpanded(expandable && expanded);
          });
        };
        RowCtrl2.prototype.onDisplayedColumnsChanged = function() {
          this.updateColumnLists(true);
          if (this.beans.columnModel.wasAutoRowHeightEverActive()) {
            this.rowNode.checkAutoHeights();
          }
        };
        RowCtrl2.prototype.onVirtualColumnsChanged = function() {
          this.updateColumnLists();
        };
        RowCtrl2.prototype.getRowPosition = function() {
          return {
            rowPinned: this.rowNode.rowPinned,
            rowIndex: this.rowNode.rowIndex
          };
        };
        RowCtrl2.prototype.onKeyboardNavigate = function(keyboardEvent) {
          var currentFullWidthComp = find(this.allRowGuis, function(c) {
            return c.element.contains(keyboardEvent.target);
          });
          var currentFullWidthContainer = currentFullWidthComp ? currentFullWidthComp.element : null;
          var isFullWidthContainerFocused = currentFullWidthContainer === keyboardEvent.target;
          if (!isFullWidthContainerFocused) {
            return;
          }
          var node = this.rowNode;
          var lastFocusedCell = this.beans.focusService.getFocusedCell();
          var cellPosition = {
            rowIndex: node.rowIndex,
            rowPinned: node.rowPinned,
            column: lastFocusedCell && lastFocusedCell.column
          };
          this.beans.navigationService.navigateToNextCell(keyboardEvent, keyboardEvent.keyCode, cellPosition, true);
          keyboardEvent.preventDefault();
        };
        RowCtrl2.prototype.onTabKeyDown = function(keyboardEvent) {
          if (keyboardEvent.defaultPrevented || isStopPropagationForAgGrid(keyboardEvent)) {
            return;
          }
          var currentFullWidthComp = find(this.allRowGuis, function(c) {
            return c.element.contains(keyboardEvent.target);
          });
          var currentFullWidthContainer = currentFullWidthComp ? currentFullWidthComp.element : null;
          var isFullWidthContainerFocused = currentFullWidthContainer === keyboardEvent.target;
          var nextEl = null;
          if (!isFullWidthContainerFocused) {
            nextEl = this.beans.focusService.findNextFocusableElement(currentFullWidthContainer, false, keyboardEvent.shiftKey);
          }
          if (this.isFullWidth() && isFullWidthContainerFocused || !nextEl) {
            this.beans.navigationService.onTabKeyDown(this, keyboardEvent);
          }
        };
        RowCtrl2.prototype.onFullWidthRowFocused = function(event) {
          var node = this.rowNode;
          var isFocused = this.isFullWidth() && event.rowIndex === node.rowIndex && event.rowPinned == node.rowPinned;
          var element = this.fullWidthGui ? this.fullWidthGui.element : this.centerGui.element;
          addOrRemoveCssClass(element, "ag-full-width-focus", isFocused);
          if (isFocused) {
            element.focus({ preventScroll: true });
          }
        };
        RowCtrl2.prototype.refreshCell = function(cellCtrl) {
          this.centerCellCtrls = this.removeCellCtrl(this.centerCellCtrls, cellCtrl);
          this.leftCellCtrls = this.removeCellCtrl(this.leftCellCtrls, cellCtrl);
          this.rightCellCtrls = this.removeCellCtrl(this.rightCellCtrls, cellCtrl);
          this.updateColumnLists();
        };
        RowCtrl2.prototype.removeCellCtrl = function(prev, cellCtrlToRemove) {
          var res = {
            list: [],
            map: {}
          };
          prev.list.forEach(function(cellCtrl) {
            if (cellCtrl === cellCtrlToRemove) {
              return;
            }
            res.list.push(cellCtrl);
            res.map[cellCtrl.getInstanceId()] = cellCtrl;
          });
          return res;
        };
        RowCtrl2.prototype.onMouseEvent = function(eventName, mouseEvent) {
          switch (eventName) {
            case "dblclick":
              this.onRowDblClick(mouseEvent);
              break;
            case "click":
              this.onRowClick(mouseEvent);
              break;
            case "touchstart":
            case "mousedown":
              this.onRowMouseDown(mouseEvent);
              break;
          }
        };
        RowCtrl2.prototype.createRowEvent = function(type, domEvent) {
          return {
            type,
            node: this.rowNode,
            data: this.rowNode.data,
            rowIndex: this.rowNode.rowIndex,
            rowPinned: this.rowNode.rowPinned,
            context: this.beans.gridOptionsWrapper.getContext(),
            api: this.beans.gridOptionsWrapper.getApi(),
            columnApi: this.beans.gridOptionsWrapper.getColumnApi(),
            event: domEvent
          };
        };
        RowCtrl2.prototype.createRowEventWithSource = function(type, domEvent) {
          var event = this.createRowEvent(type, domEvent);
          event.source = this;
          return event;
        };
        RowCtrl2.prototype.onRowDblClick = function(mouseEvent) {
          if (isStopPropagationForAgGrid(mouseEvent)) {
            return;
          }
          var agEvent = this.createRowEventWithSource(Events.EVENT_ROW_DOUBLE_CLICKED, mouseEvent);
          this.beans.eventService.dispatchEvent(agEvent);
        };
        RowCtrl2.prototype.onRowMouseDown = function(mouseEvent) {
          this.lastMouseDownOnDragger = isElementChildOfClass(mouseEvent.target, "ag-row-drag", 3);
          if (!this.isFullWidth()) {
            return;
          }
          var node = this.rowNode;
          var columnModel = this.beans.columnModel;
          this.beans.focusService.setFocusedCell(node.rowIndex, columnModel.getAllDisplayedColumns()[0], node.rowPinned, true);
        };
        RowCtrl2.prototype.onRowClick = function(mouseEvent) {
          var stop = isStopPropagationForAgGrid(mouseEvent) || this.lastMouseDownOnDragger;
          if (stop) {
            return;
          }
          var agEvent = this.createRowEventWithSource(Events.EVENT_ROW_CLICKED, mouseEvent);
          this.beans.eventService.dispatchEvent(agEvent);
          var multiSelectKeyPressed = mouseEvent.ctrlKey || mouseEvent.metaKey;
          var shiftKeyPressed = mouseEvent.shiftKey;
          var groupSelectsChildren = this.beans.gridOptionsWrapper.isGroupSelectsChildren();
          if (
            // we do not allow selecting groups by clicking (as the click here expands the group), or if it's a detail row,
            // so return if it's a group row
            groupSelectsChildren && this.rowNode.group || // this is needed so we don't unselect other rows when we click this row, eg if this row is not selectable,
            // and we click it, the selection should not change (ie any currently selected row should stay selected)
            !this.rowNode.selectable || // we also don't allow selection of pinned rows
            this.rowNode.rowPinned || // if no selection method enabled, do nothing
            !this.beans.gridOptionsWrapper.isRowSelection() || // if click selection suppressed, do nothing
            this.beans.gridOptionsWrapper.isSuppressRowClickSelection()
          ) {
            return;
          }
          var multiSelectOnClick = this.beans.gridOptionsWrapper.isRowMultiSelectWithClick();
          var rowDeselectionWithCtrl = !this.beans.gridOptionsWrapper.isSuppressRowDeselection();
          if (this.rowNode.isSelected()) {
            if (multiSelectOnClick) {
              this.rowNode.setSelectedParams({ newValue: false });
            } else if (multiSelectKeyPressed) {
              if (rowDeselectionWithCtrl) {
                this.rowNode.setSelectedParams({ newValue: false });
              }
            } else {
              this.rowNode.setSelectedParams({ newValue: !shiftKeyPressed, clearSelection: !shiftKeyPressed, rangeSelect: shiftKeyPressed });
            }
          } else {
            var clearSelection = multiSelectOnClick ? false : !multiSelectKeyPressed;
            this.rowNode.setSelectedParams({ newValue: true, clearSelection, rangeSelect: shiftKeyPressed });
          }
        };
        RowCtrl2.prototype.setupDetailRowAutoHeight = function(eDetailGui) {
          var _this = this;
          if (!this.beans.gridOptionsWrapper.isDetailRowAutoHeight()) {
            return;
          }
          var checkRowSizeFunc = function() {
            var clientHeight = eDetailGui.clientHeight;
            if (clientHeight != null && clientHeight > 0) {
              var updateRowHeightFunc = function() {
                _this.rowNode.setRowHeight(clientHeight);
                if (_this.beans.clientSideRowModel) {
                  _this.beans.clientSideRowModel.onRowHeightChanged();
                } else if (_this.beans.serverSideRowModel) {
                  _this.beans.serverSideRowModel.onRowHeightChanged();
                }
              };
              _this.beans.frameworkOverrides.setTimeout(updateRowHeightFunc, 0);
            }
          };
          var resizeObserverDestroyFunc = this.beans.resizeObserverService.observeResize(eDetailGui, checkRowSizeFunc);
          this.addDestroyFunc(resizeObserverDestroyFunc);
          checkRowSizeFunc();
        };
        RowCtrl2.prototype.createFullWidthParams = function(eRow, pinned) {
          var _this = this;
          var params = {
            fullWidth: true,
            data: this.rowNode.data,
            node: this.rowNode,
            value: this.rowNode.key,
            valueFormatted: this.rowNode.key,
            $scope: this.scope ? this.scope : this.parentScope,
            $compile: this.beans.$compile,
            rowIndex: this.rowNode.rowIndex,
            api: this.beans.gridOptionsWrapper.getApi(),
            columnApi: this.beans.gridOptionsWrapper.getColumnApi(),
            context: this.beans.gridOptionsWrapper.getContext(),
            // these need to be taken out, as part of 'afterAttached' now
            eGridCell: eRow,
            eParentOfValue: eRow,
            pinned,
            addRenderedRowListener: this.addEventListener.bind(this),
            registerRowDragger: function(rowDraggerElement, dragStartPixels, value, suppressVisibilityChange) {
              return _this.addFullWidthRowDragging(rowDraggerElement, dragStartPixels, value, suppressVisibilityChange);
            }
          };
          return params;
        };
        RowCtrl2.prototype.addFullWidthRowDragging = function(rowDraggerElement, dragStartPixels, value, suppressVisibilityChange) {
          if (value === void 0) {
            value = "";
          }
          if (!this.isFullWidth()) {
            return;
          }
          var rowDragComp = new RowDragComp(function() {
            return value;
          }, this.rowNode, void 0, rowDraggerElement, dragStartPixels, suppressVisibilityChange);
          this.createManagedBean(rowDragComp, this.beans.context);
        };
        RowCtrl2.prototype.onUiLevelChanged = function() {
          var newLevel = this.beans.rowCssClassCalculator.calculateRowLevel(this.rowNode);
          if (this.rowLevel != newLevel) {
            var classToAdd_1 = "ag-row-level-" + newLevel;
            var classToRemove_1 = "ag-row-level-" + this.rowLevel;
            this.allRowGuis.forEach(function(gui) {
              gui.rowComp.addOrRemoveCssClass(classToAdd_1, true);
              gui.rowComp.addOrRemoveCssClass(classToRemove_1, false);
            });
          }
          this.rowLevel = newLevel;
        };
        RowCtrl2.prototype.isFirstRowOnPage = function() {
          return this.rowNode.rowIndex === this.beans.paginationProxy.getPageFirstRow();
        };
        RowCtrl2.prototype.isLastRowOnPage = function() {
          return this.rowNode.rowIndex === this.beans.paginationProxy.getPageLastRow();
        };
        RowCtrl2.prototype.onModelUpdated = function() {
          var newFirst = this.isFirstRowOnPage();
          var newLast = this.isLastRowOnPage();
          if (this.firstRowOnPage !== newFirst) {
            this.firstRowOnPage = newFirst;
            this.allRowGuis.forEach(function(gui) {
              return gui.rowComp.addOrRemoveCssClass("ag-row-first", newFirst);
            });
          }
          if (this.lastRowOnPage !== newLast) {
            this.lastRowOnPage = newLast;
            this.allRowGuis.forEach(function(gui) {
              return gui.rowComp.addOrRemoveCssClass("ag-row-last", newLast);
            });
          }
        };
        RowCtrl2.prototype.stopEditing = function(cancel) {
          if (cancel === void 0) {
            cancel = false;
          }
          this.getAllCellCtrls().forEach(function(cellCtrl) {
            return cellCtrl.stopEditing(cancel);
          });
          if (!this.editingRow) {
            return;
          }
          if (!cancel) {
            var event_1 = this.createRowEvent(Events.EVENT_ROW_VALUE_CHANGED);
            this.beans.eventService.dispatchEvent(event_1);
          }
          this.setEditingRow(false);
        };
        RowCtrl2.prototype.setInlineEditingCss = function(editing) {
          this.allRowGuis.forEach(function(gui) {
            gui.rowComp.addOrRemoveCssClass("ag-row-inline-editing", editing);
            gui.rowComp.addOrRemoveCssClass("ag-row-not-inline-editing", !editing);
          });
        };
        RowCtrl2.prototype.setEditingRow = function(value) {
          this.editingRow = value;
          this.allRowGuis.forEach(function(gui) {
            return gui.rowComp.addOrRemoveCssClass("ag-row-editing", value);
          });
          var event = value ? this.createRowEvent(Events.EVENT_ROW_EDITING_STARTED) : this.createRowEvent(Events.EVENT_ROW_EDITING_STOPPED);
          this.beans.eventService.dispatchEvent(event);
        };
        RowCtrl2.prototype.startRowEditing = function(keyPress, charPress, sourceRenderedCell) {
          if (keyPress === void 0) {
            keyPress = null;
          }
          if (charPress === void 0) {
            charPress = null;
          }
          if (sourceRenderedCell === void 0) {
            sourceRenderedCell = null;
          }
          if (this.editingRow) {
            return;
          }
          this.getAllCellCtrls().forEach(function(cellCtrl) {
            var cellStartedEdit = cellCtrl === sourceRenderedCell;
            if (cellStartedEdit) {
              cellCtrl.startEditing(keyPress, charPress, cellStartedEdit);
            } else {
              cellCtrl.startEditing(null, null, cellStartedEdit);
            }
          });
          this.setEditingRow(true);
        };
        RowCtrl2.prototype.getAllCellCtrls = function() {
          var res = __spreadArrays$5(this.centerCellCtrls.list, this.leftCellCtrls.list, this.rightCellCtrls.list);
          return res;
        };
        RowCtrl2.prototype.postProcessClassesFromGridOptions = function() {
          var _this = this;
          var cssClasses = this.beans.rowCssClassCalculator.processClassesFromGridOptions(this.rowNode, this.scope);
          if (!cssClasses || !cssClasses.length) {
            return;
          }
          cssClasses.forEach(function(classStr) {
            _this.allRowGuis.forEach(function(c) {
              return c.rowComp.addOrRemoveCssClass(classStr, true);
            });
          });
        };
        RowCtrl2.prototype.postProcessRowClassRules = function() {
          var _this = this;
          this.beans.rowCssClassCalculator.processRowClassRules(this.rowNode, this.scope, function(className) {
            _this.allRowGuis.forEach(function(gui) {
              return gui.rowComp.addOrRemoveCssClass(className, true);
            });
          }, function(className) {
            _this.allRowGuis.forEach(function(gui) {
              return gui.rowComp.addOrRemoveCssClass(className, false);
            });
          });
        };
        RowCtrl2.prototype.setStylesFromGridOptions = function() {
          var rowStyles = this.processStylesFromGridOptions();
          this.allRowGuis.forEach(function(gui) {
            return gui.rowComp.setUserStyles(rowStyles);
          });
        };
        RowCtrl2.prototype.getRowBusinessKey = function() {
          var businessKeyForNodeFunc = this.beans.gridOptionsWrapper.getBusinessKeyForNodeFunc();
          if (typeof businessKeyForNodeFunc !== "function") {
            return;
          }
          return businessKeyForNodeFunc(this.rowNode);
        };
        RowCtrl2.prototype.getInitialRowClasses = function(pinned) {
          var params = {
            rowNode: this.rowNode,
            rowFocused: this.rowFocused,
            fadeRowIn: this.fadeRowIn,
            rowIsEven: this.rowNode.rowIndex % 2 === 0,
            rowLevel: this.rowLevel,
            fullWidthRow: this.isFullWidth(),
            firstRowOnPage: this.isFirstRowOnPage(),
            lastRowOnPage: this.isLastRowOnPage(),
            printLayout: this.printLayout,
            expandable: this.rowNode.isExpandable(),
            scope: this.scope,
            pinned
          };
          return this.beans.rowCssClassCalculator.getInitialRowClasses(params);
        };
        RowCtrl2.prototype.processStylesFromGridOptions = function() {
          var rowStyle = this.beans.gridOptionsWrapper.getRowStyle();
          if (rowStyle && typeof rowStyle === "function") {
            console.warn("AG Grid: rowStyle should be an object of key/value styles, not be a function, use getRowStyle() instead");
            return;
          }
          var rowStyleFunc = this.beans.gridOptionsWrapper.getRowStyleFunc();
          var rowStyleFuncResult;
          if (rowStyleFunc) {
            var params = {
              data: this.rowNode.data,
              node: this.rowNode,
              rowIndex: this.rowNode.rowIndex,
              $scope: this.scope,
              api: this.beans.gridOptionsWrapper.getApi(),
              columnApi: this.beans.gridOptionsWrapper.getColumnApi(),
              context: this.beans.gridOptionsWrapper.getContext()
            };
            rowStyleFuncResult = rowStyleFunc(params);
          }
          return assign({}, rowStyle, rowStyleFuncResult);
        };
        RowCtrl2.prototype.onRowSelected = function() {
          var _this = this;
          var selected = this.rowNode.isSelected();
          this.allRowGuis.forEach(function(gui) {
            gui.rowComp.setAriaSelected(selected ? true : void 0);
            gui.rowComp.addOrRemoveCssClass("ag-row-selected", selected);
            gui.rowComp.setAriaLabel(_this.createAriaLabel());
          });
        };
        RowCtrl2.prototype.createAriaLabel = function() {
          var selected = this.rowNode.isSelected();
          if (selected && this.beans.gridOptionsWrapper.isSuppressRowDeselection()) {
            return void 0;
          }
          var translate = this.beans.gridOptionsWrapper.getLocaleTextFunc();
          var label = translate(selected ? "ariaRowDeselect" : "ariaRowSelect", "Press SPACE to " + (selected ? "deselect" : "select") + " this row.");
          return label;
        };
        RowCtrl2.prototype.isUseAnimationFrameForCreate = function() {
          return this.useAnimationFrameForCreate;
        };
        RowCtrl2.prototype.addHoverFunctionality = function(eRow) {
          var _this = this;
          if (!this.active) {
            return;
          }
          this.addManagedListener(eRow, "mouseenter", function() {
            return _this.rowNode.onMouseEnter();
          });
          this.addManagedListener(eRow, "mouseleave", function() {
            return _this.rowNode.onMouseLeave();
          });
          this.addManagedListener(this.rowNode, RowNode.EVENT_MOUSE_ENTER, function() {
            if (!_this.beans.gridOptionsWrapper.isSuppressRowHoverHighlight()) {
              addCssClass(eRow, "ag-row-hover");
            }
          });
          this.addManagedListener(this.rowNode, RowNode.EVENT_MOUSE_LEAVE, function() {
            removeCssClass(eRow, "ag-row-hover");
          });
        };
        RowCtrl2.prototype.roundRowTopToBounds = function(rowTop) {
          var gridBodyCon = this.beans.ctrlsService.getGridBodyCtrl();
          var range = gridBodyCon.getScrollFeature().getVScrollPosition();
          var minPixel = this.applyPaginationOffset(range.top, true) - 100;
          var maxPixel = this.applyPaginationOffset(range.bottom, true) + 100;
          return Math.min(Math.max(minPixel, rowTop), maxPixel);
        };
        RowCtrl2.prototype.getFrameworkOverrides = function() {
          return this.beans.frameworkOverrides;
        };
        RowCtrl2.prototype.onRowHeightChanged = function() {
          if (exists(this.rowNode.rowHeight)) {
            var heightPx_1 = this.rowNode.rowHeight + "px";
            this.allRowGuis.forEach(function(gui) {
              return gui.rowComp.setHeight(heightPx_1);
            });
          }
        };
        RowCtrl2.prototype.addEventListener = function(eventType, listener) {
          if (eventType === "renderedRowRemoved" || eventType === "rowRemoved") {
            eventType = Events.EVENT_VIRTUAL_ROW_REMOVED;
            console.warn("AG Grid: Since version 11, event renderedRowRemoved is now called " + Events.EVENT_VIRTUAL_ROW_REMOVED);
          }
          _super.prototype.addEventListener.call(this, eventType, listener);
        };
        RowCtrl2.prototype.removeEventListener = function(eventType, listener) {
          if (eventType === "renderedRowRemoved" || eventType === "rowRemoved") {
            eventType = Events.EVENT_VIRTUAL_ROW_REMOVED;
            console.warn("AG Grid: Since version 11, event renderedRowRemoved and rowRemoved is now called " + Events.EVENT_VIRTUAL_ROW_REMOVED);
          }
          _super.prototype.removeEventListener.call(this, eventType, listener);
        };
        RowCtrl2.prototype.destroyFirstPass = function() {
          this.active = false;
          this.setupRemoveAnimation();
          var event = this.createRowEvent(Events.EVENT_VIRTUAL_ROW_REMOVED);
          this.dispatchEvent(event);
          this.beans.eventService.dispatchEvent(event);
          _super.prototype.destroy.call(this);
        };
        RowCtrl2.prototype.setupRemoveAnimation = function() {
          var rowStillVisibleJustNotInViewport = this.rowNode.rowTop != null;
          if (rowStillVisibleJustNotInViewport) {
            var rowTop = this.roundRowTopToBounds(this.rowNode.rowTop);
            this.setRowTop(rowTop);
          } else {
            this.allRowGuis.forEach(function(gui) {
              return gui.rowComp.addOrRemoveCssClass("ag-opacity-zero", true);
            });
          }
        };
        RowCtrl2.prototype.destroySecondPass = function() {
          this.allRowGuis.length = 0;
          var destroyCellCtrls = function(ctrls) {
            ctrls.list.forEach(function(c) {
              return c.destroy();
            });
            return { list: [], map: {} };
          };
          this.centerCellCtrls = destroyCellCtrls(this.centerCellCtrls);
          this.leftCellCtrls = destroyCellCtrls(this.leftCellCtrls);
          this.rightCellCtrls = destroyCellCtrls(this.rightCellCtrls);
        };
        RowCtrl2.prototype.setFocusedClasses = function() {
          var _this = this;
          this.allRowGuis.forEach(function(gui) {
            gui.rowComp.addOrRemoveCssClass("ag-row-focus", _this.rowFocused);
            gui.rowComp.addOrRemoveCssClass("ag-row-no-focus", !_this.rowFocused);
          });
        };
        RowCtrl2.prototype.onCellFocusChanged = function() {
          var rowFocused = this.beans.focusService.isRowFocused(this.rowNode.rowIndex, this.rowNode.rowPinned);
          if (rowFocused !== this.rowFocused) {
            this.rowFocused = rowFocused;
            this.setFocusedClasses();
          }
          if (!rowFocused && this.editingRow) {
            this.stopEditing(false);
          }
        };
        RowCtrl2.prototype.onPaginationChanged = function() {
          var currentPage = this.beans.paginationProxy.getCurrentPage();
          if (this.paginationPage !== currentPage) {
            this.paginationPage = currentPage;
            this.onTopChanged();
          }
        };
        RowCtrl2.prototype.onTopChanged = function() {
          this.setRowTop(this.rowNode.rowTop);
        };
        RowCtrl2.prototype.onPaginationPixelOffsetChanged = function() {
          this.onTopChanged();
        };
        RowCtrl2.prototype.applyPaginationOffset = function(topPx, reverse) {
          if (reverse === void 0) {
            reverse = false;
          }
          if (this.rowNode.isRowPinned()) {
            return topPx;
          }
          var pixelOffset = this.beans.paginationProxy.getPixelOffset();
          var multiplier = reverse ? 1 : -1;
          return topPx + pixelOffset * multiplier;
        };
        RowCtrl2.prototype.setRowTop = function(pixels) {
          if (this.printLayout) {
            return;
          }
          if (exists(pixels)) {
            var afterPaginationPixels = this.applyPaginationOffset(pixels);
            var afterScalingPixels = this.rowNode.isRowPinned() ? afterPaginationPixels : this.beans.rowContainerHeightService.getRealPixelPosition(afterPaginationPixels);
            var topPx = afterScalingPixels + "px";
            this.setRowTopStyle(topPx);
          }
        };
        RowCtrl2.prototype.getInitialRowTop = function() {
          return this.initialTop;
        };
        RowCtrl2.prototype.getInitialTransform = function() {
          return this.initialTransform;
        };
        RowCtrl2.prototype.setInitialRowTop = function() {
          if (this.printLayout) {
            return "";
          }
          var pixels = this.slideRowIn ? this.roundRowTopToBounds(this.rowNode.oldRowTop) : this.rowNode.rowTop;
          var afterPaginationPixels = this.applyPaginationOffset(pixels);
          var afterScalingPixels = this.rowNode.isRowPinned() ? afterPaginationPixels : this.beans.rowContainerHeightService.getRealPixelPosition(afterPaginationPixels);
          var res = afterScalingPixels + "px";
          var suppressRowTransform = this.beans.gridOptionsWrapper.isSuppressRowTransform();
          if (suppressRowTransform) {
            this.initialTop = res;
          } else {
            this.initialTransform = "translateY(" + res + ")";
          }
        };
        RowCtrl2.prototype.setRowTopStyle = function(topPx) {
          var suppressRowTransform = this.beans.gridOptionsWrapper.isSuppressRowTransform();
          this.allRowGuis.forEach(function(gui) {
            return suppressRowTransform ? gui.rowComp.setTop(topPx) : gui.rowComp.setTransform("translateY(" + topPx + ")");
          });
        };
        RowCtrl2.prototype.getRowNode = function() {
          return this.rowNode;
        };
        RowCtrl2.prototype.getCellCtrl = function(column) {
          var res = null;
          this.getAllCellCtrls().forEach(function(cellCtrl) {
            if (cellCtrl.getColumn() == column) {
              res = cellCtrl;
            }
          });
          if (res != null) {
            return res;
          }
          this.getAllCellCtrls().forEach(function(cellCtrl) {
            if (cellCtrl.getColSpanningList().indexOf(column) >= 0) {
              res = cellCtrl;
            }
          });
          return res;
        };
        RowCtrl2.prototype.onRowIndexChanged = function() {
          if (this.rowNode.rowIndex != null) {
            this.onCellFocusChanged();
            this.updateRowIndexes();
          }
        };
        RowCtrl2.prototype.updateRowIndexes = function() {
          var _this = this;
          var rowIndexStr = this.rowNode.getRowIndexString();
          var headerRowCount = this.beans.headerNavigationService.getHeaderRowCount();
          var rowIsEven = this.rowNode.rowIndex % 2 === 0;
          this.allRowGuis.forEach(function(c) {
            c.rowComp.setRowIndex(rowIndexStr);
            c.rowComp.setAriaRowIndex(headerRowCount + _this.rowNode.rowIndex + 1);
            c.rowComp.addOrRemoveCssClass("ag-row-even", rowIsEven);
            c.rowComp.addOrRemoveCssClass("ag-row-odd", !rowIsEven);
          });
        };
        RowCtrl2.prototype.getPinnedLeftRowElement = function() {
          return this.leftGui ? this.leftGui.element : void 0;
        };
        RowCtrl2.prototype.getPinnedRightRowElement = function() {
          return this.rightGui ? this.rightGui.element : void 0;
        };
        RowCtrl2.prototype.getBodyRowElement = function() {
          return this.centerGui ? this.centerGui.element : void 0;
        };
        RowCtrl2.prototype.getFullWidthRowElement = function() {
          return this.fullWidthGui ? this.fullWidthGui.element : void 0;
        };
        RowCtrl2.DOM_DATA_KEY_ROW_CTRL = "renderedRow";
        return RowCtrl2;
      }(BeanStub)
    );
    var __extends$V = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$K = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __spreadArrays$6 = function() {
      for (var s = 0, i = 0, il = arguments.length; i < il; i++)
        s += arguments[i].length;
      for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
          r[k] = a[j];
      return r;
    };
    var RowRenderer = (
      /** @class */
      function(_super) {
        __extends$V(RowRenderer2, _super);
        function RowRenderer2() {
          var _this = _super !== null && _super.apply(this, arguments) || this;
          _this.destroyFuncsForColumnListeners = [];
          _this.rowCtrlsByRowIndex = {};
          _this.zombieRowCtrls = {};
          _this.allRowCtrls = [];
          _this.topRowCtrls = [];
          _this.bottomRowCtrls = [];
          _this.refreshInProgress = false;
          return _this;
        }
        RowRenderer2.prototype.postConstruct = function() {
          var _this = this;
          this.ctrlsService.whenReady(function() {
            _this.gridBodyCtrl = _this.ctrlsService.getGridBodyCtrl();
            _this.initialise();
          });
        };
        RowRenderer2.prototype.initialise = function() {
          this.addManagedListener(this.eventService, Events.EVENT_PAGINATION_CHANGED, this.onPageLoaded.bind(this));
          this.addManagedListener(this.eventService, Events.EVENT_PINNED_ROW_DATA_CHANGED, this.onPinnedRowDataChanged.bind(this));
          this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));
          this.addManagedListener(this.eventService, Events.EVENT_BODY_SCROLL, this.redrawAfterScroll.bind(this));
          this.addManagedListener(this.eventService, Events.EVENT_BODY_HEIGHT_CHANGED, this.redrawAfterScroll.bind(this));
          this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_DOM_LAYOUT, this.onDomLayoutChanged.bind(this));
          this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, this.onNewColumnsLoaded.bind(this));
          this.registerCellEventListeners();
          this.initialiseCache();
          this.printLayout = this.gridOptionsWrapper.getDomLayout() === Constants.DOM_LAYOUT_PRINT;
          this.embedFullWidthRows = this.printLayout || this.gridOptionsWrapper.isEmbedFullWidthRows();
          this.redrawAfterModelUpdate();
        };
        RowRenderer2.prototype.initialiseCache = function() {
          if (this.gridOptionsWrapper.isKeepDetailRows()) {
            var countProp = this.gridOptionsWrapper.getKeepDetailRowsCount();
            var count = countProp != null ? countProp : 3;
            this.cachedRowCtrls = new RowCtrlCache(count);
          }
        };
        RowRenderer2.prototype.getRowCtrls = function() {
          return this.allRowCtrls;
        };
        RowRenderer2.prototype.updateAllRowCtrls = function() {
          var liveList = getAllValuesInObject(this.rowCtrlsByRowIndex);
          if (this.beans.gridOptionsWrapper.isEnsureDomOrder()) {
            liveList.sort(function(a, b) {
              return a.getRowNode().rowIndex - b.getRowNode.rowIndex;
            });
          }
          var zombieList = getAllValuesInObject(this.zombieRowCtrls);
          var cachedList = this.cachedRowCtrls ? this.cachedRowCtrls.getEntries() : [];
          this.allRowCtrls = __spreadArrays$6(liveList, zombieList, cachedList);
        };
        RowRenderer2.prototype.registerCellEventListeners = function() {
          var _this = this;
          this.addManagedListener(this.eventService, Events.EVENT_CELL_FOCUSED, function(event) {
            _this.getAllCellCtrls().forEach(function(cellCtrl) {
              return cellCtrl.onCellFocused(event);
            });
            _this.getAllRowCtrls().forEach(function(rowCtrl) {
              if (rowCtrl.isFullWidth()) {
                rowCtrl.onFullWidthRowFocused(event);
              }
            });
          });
          this.addManagedListener(this.eventService, Events.EVENT_FLASH_CELLS, function(event) {
            _this.getAllCellCtrls().forEach(function(cellCtrl) {
              return cellCtrl.onFlashCells(event);
            });
          });
          this.addManagedListener(this.eventService, Events.EVENT_COLUMN_HOVER_CHANGED, function() {
            _this.getAllCellCtrls().forEach(function(cellCtrl) {
              return cellCtrl.onColumnHover();
            });
          });
          this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, function() {
            if (_this.printLayout) {
              _this.getAllCellCtrls().forEach(function(cellCtrl) {
                return cellCtrl.onLeftChanged();
              });
            }
          });
          var rangeSelectionEnabled = this.gridOptionsWrapper.isEnableRangeSelection();
          if (rangeSelectionEnabled) {
            this.addManagedListener(this.eventService, Events.EVENT_RANGE_SELECTION_CHANGED, function() {
              _this.getAllCellCtrls().forEach(function(cellCtrl) {
                return cellCtrl.onRangeSelectionChanged();
              });
            });
            this.addManagedListener(this.eventService, Events.EVENT_COLUMN_MOVED, function() {
              _this.getAllCellCtrls().forEach(function(cellCtrl) {
                return cellCtrl.updateRangeBordersIfRangeCount();
              });
            });
            this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PINNED, function() {
              _this.getAllCellCtrls().forEach(function(cellCtrl) {
                return cellCtrl.updateRangeBordersIfRangeCount();
              });
            });
            this.addManagedListener(this.eventService, Events.EVENT_COLUMN_VISIBLE, function() {
              _this.getAllCellCtrls().forEach(function(cellCtrl) {
                return cellCtrl.updateRangeBordersIfRangeCount();
              });
            });
          }
          this.refreshListenersToColumnsForCellComps();
          this.addManagedListener(this.eventService, Events.EVENT_GRID_COLUMNS_CHANGED, this.refreshListenersToColumnsForCellComps.bind(this));
          this.addDestroyFunc(this.removeGridColumnListeners.bind(this));
        };
        RowRenderer2.prototype.removeGridColumnListeners = function() {
          this.destroyFuncsForColumnListeners.forEach(function(func) {
            return func();
          });
          this.destroyFuncsForColumnListeners.length = 0;
        };
        RowRenderer2.prototype.refreshListenersToColumnsForCellComps = function() {
          var _this = this;
          this.removeGridColumnListeners();
          var cols = this.columnModel.getAllGridColumns();
          if (!cols) {
            return;
          }
          cols.forEach(function(col) {
            var forEachCellWithThisCol = function(callback) {
              _this.getAllCellCtrls().forEach(function(cellCtrl) {
                if (cellCtrl.getColumn() === col) {
                  callback(cellCtrl);
                }
              });
            };
            var leftChangedListener = function() {
              forEachCellWithThisCol(function(cellCtrl) {
                return cellCtrl.onLeftChanged();
              });
            };
            var widthChangedListener = function() {
              forEachCellWithThisCol(function(cellCtrl) {
                return cellCtrl.onWidthChanged();
              });
            };
            var firstRightPinnedChangedListener = function() {
              forEachCellWithThisCol(function(cellCtrl) {
                return cellCtrl.onFirstRightPinnedChanged();
              });
            };
            var lastLeftPinnedChangedListener = function() {
              forEachCellWithThisCol(function(cellCtrl) {
                return cellCtrl.onLastLeftPinnedChanged();
              });
            };
            col.addEventListener(Column.EVENT_LEFT_CHANGED, leftChangedListener);
            col.addEventListener(Column.EVENT_WIDTH_CHANGED, widthChangedListener);
            col.addEventListener(Column.EVENT_FIRST_RIGHT_PINNED_CHANGED, firstRightPinnedChangedListener);
            col.addEventListener(Column.EVENT_LAST_LEFT_PINNED_CHANGED, lastLeftPinnedChangedListener);
            _this.destroyFuncsForColumnListeners.push(function() {
              col.removeEventListener(Column.EVENT_LEFT_CHANGED, leftChangedListener);
              col.removeEventListener(Column.EVENT_WIDTH_CHANGED, widthChangedListener);
              col.removeEventListener(Column.EVENT_FIRST_RIGHT_PINNED_CHANGED, firstRightPinnedChangedListener);
              col.removeEventListener(Column.EVENT_LAST_LEFT_PINNED_CHANGED, lastLeftPinnedChangedListener);
            });
          });
        };
        RowRenderer2.prototype.onDomLayoutChanged = function() {
          var printLayout = this.gridOptionsWrapper.getDomLayout() === Constants.DOM_LAYOUT_PRINT;
          var embedFullWidthRows = printLayout || this.gridOptionsWrapper.isEmbedFullWidthRows();
          var destroyRows = embedFullWidthRows !== this.embedFullWidthRows || this.printLayout !== printLayout;
          this.printLayout = printLayout;
          this.embedFullWidthRows = embedFullWidthRows;
          if (destroyRows) {
            this.redrawAfterModelUpdate();
          }
        };
        RowRenderer2.prototype.datasourceChanged = function() {
          this.firstRenderedRow = 0;
          this.lastRenderedRow = -1;
          var rowIndexesToRemove = Object.keys(this.rowCtrlsByRowIndex);
          this.removeRowCtrls(rowIndexesToRemove);
        };
        RowRenderer2.prototype.onPageLoaded = function(event) {
          var params = {
            recycleRows: event.keepRenderedRows,
            animate: event.animate,
            newData: event.newData,
            newPage: event.newPage,
            // because this is a model updated event (not pinned rows), we
            // can skip updating the pinned rows. this is needed so that if user
            // is doing transaction updates, the pinned rows are not getting constantly
            // trashed - or editing cells in pinned rows are not refreshed and put into read mode
            onlyBody: true
          };
          this.redrawAfterModelUpdate(params);
        };
        RowRenderer2.prototype.getAllCellsForColumn = function(column) {
          var res = [];
          this.getAllRowCtrls().forEach(function(rowCtrl) {
            var eCell = rowCtrl.getCellElement(column);
            if (eCell) {
              res.push(eCell);
            }
          });
          return res;
        };
        RowRenderer2.prototype.refreshFloatingRowComps = function() {
          this.refreshFloatingRows(this.topRowCtrls, this.pinnedRowModel.getPinnedTopRowData());
          this.refreshFloatingRows(this.bottomRowCtrls, this.pinnedRowModel.getPinnedBottomRowData());
        };
        RowRenderer2.prototype.getTopRowCtrls = function() {
          return this.topRowCtrls;
        };
        RowRenderer2.prototype.getBottomRowCtrls = function() {
          return this.bottomRowCtrls;
        };
        RowRenderer2.prototype.refreshFloatingRows = function(rowComps, rowNodes) {
          var _this = this;
          rowComps.forEach(function(row) {
            row.destroyFirstPass();
            row.destroySecondPass();
          });
          rowComps.length = 0;
          if (!rowNodes) {
            return;
          }
          rowNodes.forEach(function(rowNode) {
            var rowCon = new RowCtrl(_this.$scope, rowNode, _this.beans, false, false, _this.printLayout);
            rowComps.push(rowCon);
          });
        };
        RowRenderer2.prototype.onPinnedRowDataChanged = function() {
          var params = {
            recycleRows: true
          };
          this.redrawAfterModelUpdate(params);
        };
        RowRenderer2.prototype.getRenderedIndexesForRowNodes = function(rowNodes) {
          var result = [];
          if (missing(rowNodes)) {
            return result;
          }
          iterateObject(this.rowCtrlsByRowIndex, function(index, renderedRow) {
            var rowNode = renderedRow.getRowNode();
            if (rowNodes.indexOf(rowNode) >= 0) {
              result.push(index);
            }
          });
          return result;
        };
        RowRenderer2.prototype.redrawRows = function(rowNodes) {
          var partialRefresh = rowNodes != null && rowNodes.length > 0;
          if (partialRefresh) {
            var indexesToRemove = this.getRenderedIndexesForRowNodes(rowNodes);
            this.removeRowCtrls(indexesToRemove);
          }
          this.redrawAfterModelUpdate({
            recycleRows: partialRefresh
          });
        };
        RowRenderer2.prototype.getCellToRestoreFocusToAfterRefresh = function(params) {
          var focusedCell = params.suppressKeepFocus ? null : this.focusService.getFocusCellToUseAfterRefresh();
          if (focusedCell == null) {
            return null;
          }
          var activeElement = document.activeElement;
          var cellDomData = this.gridOptionsWrapper.getDomData(activeElement, CellCtrl.DOM_DATA_KEY_CELL_CTRL);
          var rowDomData = this.gridOptionsWrapper.getDomData(activeElement, RowCtrl.DOM_DATA_KEY_ROW_CTRL);
          var gridElementFocused = cellDomData || rowDomData;
          return gridElementFocused ? focusedCell : null;
        };
        RowRenderer2.prototype.redrawAfterModelUpdate = function(params) {
          if (params === void 0) {
            params = {};
          }
          this.getLockOnRefresh();
          var focusedCell = this.getCellToRestoreFocusToAfterRefresh(params);
          this.updateContainerHeights();
          this.scrollToTopIfNewData(params);
          var recycleRows = !this.printLayout && !!params.recycleRows;
          var animate = params.animate && this.gridOptionsWrapper.isAnimateRows();
          var rowsToRecycle = recycleRows ? this.recycleRows() : null;
          if (!recycleRows) {
            this.removeAllRowComps();
          }
          var isFocusedCellGettingRecycled = function() {
            if (focusedCell == null || rowsToRecycle == null) {
              return false;
            }
            var res = false;
            iterateObject(rowsToRecycle, function(key, rowComp) {
              var rowNode = rowComp.getRowNode();
              var rowIndexEqual = rowNode.rowIndex == focusedCell.rowIndex;
              var pinnedEqual = rowNode.rowPinned == focusedCell.rowPinned;
              if (rowIndexEqual && pinnedEqual) {
                res = true;
              }
            });
            return res;
          };
          var focusedCellRecycled = isFocusedCellGettingRecycled();
          this.redraw(rowsToRecycle, animate);
          if (!params.onlyBody) {
            this.refreshFloatingRowComps();
          }
          this.dispatchDisplayedRowsChanged();
          if (!focusedCellRecycled) {
            this.restoreFocusedCell(focusedCell);
          }
          this.releaseLockOnRefresh();
        };
        RowRenderer2.prototype.scrollToTopIfNewData = function(params) {
          var scrollToTop = params.newData || params.newPage;
          var suppressScrollToTop = this.gridOptionsWrapper.isSuppressScrollOnNewData();
          if (scrollToTop && !suppressScrollToTop) {
            this.gridBodyCtrl.getScrollFeature().scrollToTop();
          }
        };
        RowRenderer2.prototype.updateContainerHeights = function() {
          if (this.printLayout) {
            this.rowContainerHeightService.setModelHeight(null);
            return;
          }
          var containerHeight = this.paginationProxy.getCurrentPageHeight();
          if (containerHeight === 0) {
            containerHeight = 1;
          }
          this.rowContainerHeightService.setModelHeight(containerHeight);
        };
        RowRenderer2.prototype.getLockOnRefresh = function() {
          if (this.refreshInProgress) {
            throw new Error("AG Grid: cannot get grid to draw rows when it is in the middle of drawing rows. Your code probably called a grid API method while the grid was in the render stage. To overcome this, put the API call into a timeout, e.g. instead of api.refreshView(), call setTimeout(function() { api.refreshView(); }, 0). To see what part of your code that caused the refresh check this stacktrace.");
          }
          this.refreshInProgress = true;
        };
        RowRenderer2.prototype.releaseLockOnRefresh = function() {
          this.refreshInProgress = false;
        };
        RowRenderer2.prototype.restoreFocusedCell = function(cellPosition) {
          if (cellPosition) {
            this.focusService.setFocusedCell(cellPosition.rowIndex, cellPosition.column, cellPosition.rowPinned, true);
          }
        };
        RowRenderer2.prototype.stopEditing = function(cancel) {
          if (cancel === void 0) {
            cancel = false;
          }
          this.getAllRowCtrls().forEach(function(rowCtrl) {
            rowCtrl.stopEditing(cancel);
          });
        };
        RowRenderer2.prototype.onNewColumnsLoaded = function() {
          this.getAllCellCtrls().forEach(function(cellCtrl) {
            return cellCtrl.onNewColumnsLoaded();
          });
        };
        RowRenderer2.prototype.getAllCellCtrls = function() {
          var res = [];
          this.getAllRowCtrls().forEach(function(rowCtrl) {
            return res = res.concat(rowCtrl.getAllCellCtrls());
          });
          return res;
        };
        RowRenderer2.prototype.getAllRowCtrls = function() {
          var _this = this;
          var res = __spreadArrays$6(this.topRowCtrls, this.bottomRowCtrls);
          Object.keys(this.rowCtrlsByRowIndex).forEach(function(key) {
            return res.push(_this.rowCtrlsByRowIndex[key]);
          });
          return res;
        };
        RowRenderer2.prototype.addRenderedRowListener = function(eventName, rowIndex, callback) {
          var rowComp = this.rowCtrlsByRowIndex[rowIndex];
          if (rowComp) {
            rowComp.addEventListener(eventName, callback);
          }
        };
        RowRenderer2.prototype.flashCells = function(params) {
          if (params === void 0) {
            params = {};
          }
          var flashDelay = params.flashDelay, fadeDelay = params.fadeDelay;
          this.getCellCtrls(params.rowNodes, params.columns).forEach(function(cellCtrl) {
            return cellCtrl.flashCell({ flashDelay, fadeDelay });
          });
        };
        RowRenderer2.prototype.refreshCells = function(params) {
          if (params === void 0) {
            params = {};
          }
          var refreshCellParams = {
            forceRefresh: params.force,
            newData: false,
            suppressFlash: params.suppressFlash
          };
          this.getCellCtrls(params.rowNodes, params.columns).forEach(function(cellCtrl) {
            if (cellCtrl.refreshShouldDestroy()) {
              var rowCtrl = cellCtrl.getRowCtrl();
              if (rowCtrl) {
                rowCtrl.refreshCell(cellCtrl);
              }
            } else {
              cellCtrl.refreshCell(refreshCellParams);
            }
          });
        };
        RowRenderer2.prototype.getCellRendererInstances = function(params) {
          var res = this.getCellCtrls(params.rowNodes, params.columns).map(function(cellCtrl) {
            return cellCtrl.getCellRenderer();
          }).filter(function(renderer) {
            return renderer != null;
          });
          return res;
        };
        RowRenderer2.prototype.getCellEditorInstances = function(params) {
          var res = [];
          this.getCellCtrls(params.rowNodes, params.columns).forEach(function(cellCtrl) {
            var cellEditor = cellCtrl.getCellEditor();
            if (cellEditor) {
              res.push(cellEditor);
            }
          });
          return res;
        };
        RowRenderer2.prototype.getEditingCells = function() {
          var res = [];
          this.getAllCellCtrls().forEach(function(cellCtrl) {
            if (cellCtrl.isEditing()) {
              var cellPosition = cellCtrl.getCellPosition();
              res.push(cellPosition);
            }
          });
          return res;
        };
        RowRenderer2.prototype.getCellCtrls = function(rowNodes, columns) {
          var _this = this;
          var rowIdsMap;
          var res = [];
          if (exists(rowNodes)) {
            rowIdsMap = {
              top: {},
              bottom: {},
              normal: {}
            };
            rowNodes.forEach(function(rowNode) {
              var id = rowNode.id;
              if (rowNode.rowPinned === Constants.PINNED_TOP) {
                rowIdsMap.top[id] = true;
              } else if (rowNode.rowPinned === Constants.PINNED_BOTTOM) {
                rowIdsMap.bottom[id] = true;
              } else {
                rowIdsMap.normal[id] = true;
              }
            });
          }
          var colIdsMap;
          if (exists(columns)) {
            colIdsMap = {};
            columns.forEach(function(colKey) {
              var column = _this.columnModel.getGridColumn(colKey);
              if (exists(column)) {
                colIdsMap[column.getId()] = true;
              }
            });
          }
          var processRow = function(rowComp) {
            var rowNode = rowComp.getRowNode();
            var id = rowNode.id;
            var floating = rowNode.rowPinned;
            if (exists(rowIdsMap)) {
              if (floating === Constants.PINNED_BOTTOM) {
                if (!rowIdsMap.bottom[id]) {
                  return;
                }
              } else if (floating === Constants.PINNED_TOP) {
                if (!rowIdsMap.top[id]) {
                  return;
                }
              } else {
                if (!rowIdsMap.normal[id]) {
                  return;
                }
              }
            }
            rowComp.getAllCellCtrls().forEach(function(cellCtrl) {
              var colId = cellCtrl.getColumn().getId();
              var excludeColFromRefresh = colIdsMap && !colIdsMap[colId];
              if (excludeColFromRefresh) {
                return;
              }
              res.push(cellCtrl);
            });
          };
          iterateObject(this.rowCtrlsByRowIndex, function(index, rowComp) {
            processRow(rowComp);
          });
          if (this.topRowCtrls) {
            this.topRowCtrls.forEach(processRow);
          }
          if (this.bottomRowCtrls) {
            this.bottomRowCtrls.forEach(processRow);
          }
          return res;
        };
        RowRenderer2.prototype.destroy = function() {
          this.removeAllRowComps();
          _super.prototype.destroy.call(this);
        };
        RowRenderer2.prototype.removeAllRowComps = function() {
          var rowIndexesToRemove = Object.keys(this.rowCtrlsByRowIndex);
          this.removeRowCtrls(rowIndexesToRemove);
        };
        RowRenderer2.prototype.recycleRows = function() {
          var stubNodeIndexes = [];
          iterateObject(this.rowCtrlsByRowIndex, function(index, rowComp) {
            var stubNode = rowComp.getRowNode().id == null;
            if (stubNode) {
              stubNodeIndexes.push(index);
            }
          });
          this.removeRowCtrls(stubNodeIndexes);
          var nodesByIdMap = {};
          iterateObject(this.rowCtrlsByRowIndex, function(index, rowComp) {
            var rowNode = rowComp.getRowNode();
            nodesByIdMap[rowNode.id] = rowComp;
          });
          this.rowCtrlsByRowIndex = {};
          return nodesByIdMap;
        };
        RowRenderer2.prototype.removeRowCtrls = function(rowsToRemove) {
          var _this = this;
          rowsToRemove.forEach(function(indexToRemove) {
            var rowCtrl = _this.rowCtrlsByRowIndex[indexToRemove];
            if (rowCtrl) {
              rowCtrl.destroyFirstPass();
              rowCtrl.destroySecondPass();
            }
            delete _this.rowCtrlsByRowIndex[indexToRemove];
          });
        };
        RowRenderer2.prototype.redrawAfterScroll = function() {
          this.getLockOnRefresh();
          this.redraw(null, false, true);
          this.releaseLockOnRefresh();
          this.dispatchDisplayedRowsChanged();
        };
        RowRenderer2.prototype.removeRowCompsNotToDraw = function(indexesToDraw) {
          var indexesToDrawMap = {};
          indexesToDraw.forEach(function(index) {
            return indexesToDrawMap[index] = true;
          });
          var existingIndexes = Object.keys(this.rowCtrlsByRowIndex);
          var indexesNotToDraw = existingIndexes.filter(function(index) {
            return !indexesToDrawMap[index];
          });
          this.removeRowCtrls(indexesNotToDraw);
        };
        RowRenderer2.prototype.calculateIndexesToDraw = function(rowsToRecycle) {
          var _this = this;
          var indexesToDraw = createArrayOfNumbers(this.firstRenderedRow, this.lastRenderedRow);
          var checkRowToDraw = function(indexStr, rowComp) {
            var index = rowComp.getRowNode().rowIndex;
            if (index == null) {
              return;
            }
            if (index < _this.firstRenderedRow || index > _this.lastRenderedRow) {
              if (_this.doNotUnVirtualiseRow(rowComp)) {
                indexesToDraw.push(index);
              }
            }
          };
          iterateObject(this.rowCtrlsByRowIndex, checkRowToDraw);
          iterateObject(rowsToRecycle, checkRowToDraw);
          indexesToDraw.sort(function(a, b) {
            return a - b;
          });
          return indexesToDraw;
        };
        RowRenderer2.prototype.redraw = function(rowsToRecycle, animate, afterScroll) {
          var _this = this;
          if (animate === void 0) {
            animate = false;
          }
          if (afterScroll === void 0) {
            afterScroll = false;
          }
          this.rowContainerHeightService.updateOffset();
          this.workOutFirstAndLastRowsToRender();
          var indexesToDraw = this.calculateIndexesToDraw(rowsToRecycle);
          this.removeRowCompsNotToDraw(indexesToDraw);
          if (this.printLayout) {
            animate = false;
          }
          indexesToDraw.forEach(function(rowIndex) {
            var rowCtrl = _this.createOrUpdateRowCtrl(rowIndex, rowsToRecycle, animate, afterScroll);
            if (exists(rowCtrl))
              ;
          });
          if (rowsToRecycle) {
            var useAnimationFrame = afterScroll && !this.gridOptionsWrapper.isSuppressAnimationFrame() && !this.printLayout;
            if (useAnimationFrame) {
              this.beans.animationFrameService.addDestroyTask(function() {
                _this.destroyRowCtrls(rowsToRecycle, animate);
                _this.updateAllRowCtrls();
                _this.dispatchDisplayedRowsChanged();
              });
            } else {
              this.destroyRowCtrls(rowsToRecycle, animate);
            }
          }
          this.updateAllRowCtrls();
          this.checkAngularCompile();
          this.gridBodyCtrl.updateRowCount();
        };
        RowRenderer2.prototype.dispatchDisplayedRowsChanged = function() {
          var event = { type: Events.EVENT_DISPLAYED_ROWS_CHANGED };
          this.eventService.dispatchEvent(event);
        };
        RowRenderer2.prototype.onDisplayedColumnsChanged = function() {
          var pinningLeft = this.columnModel.isPinningLeft();
          var pinningRight = this.columnModel.isPinningRight();
          var atLeastOneChanged = this.pinningLeft !== pinningLeft || pinningRight !== this.pinningRight;
          if (atLeastOneChanged) {
            this.pinningLeft = pinningLeft;
            this.pinningRight = pinningRight;
            if (this.embedFullWidthRows) {
              this.redrawFullWidthEmbeddedRows();
            }
          }
        };
        RowRenderer2.prototype.redrawFullWidthEmbeddedRows = function() {
          var rowsToRemove = [];
          iterateObject(this.rowCtrlsByRowIndex, function(id, rowComp) {
            if (rowComp.isFullWidth()) {
              var rowIndex = rowComp.getRowNode().rowIndex;
              rowsToRemove.push(rowIndex.toString());
            }
          });
          this.refreshFloatingRowComps();
          this.removeRowCtrls(rowsToRemove);
          this.redrawAfterScroll();
        };
        RowRenderer2.prototype.refreshFullWidthRows = function(rowNodesToRefresh) {
          var rowsToRemove = [];
          var selectivelyRefreshing = !!rowNodesToRefresh;
          var idsToRefresh = selectivelyRefreshing ? {} : void 0;
          if (selectivelyRefreshing && idsToRefresh) {
            rowNodesToRefresh.forEach(function(r) {
              return idsToRefresh[r.id] = true;
            });
          }
          iterateObject(this.rowCtrlsByRowIndex, function(id, rowCtrl) {
            if (!rowCtrl.isFullWidth()) {
              return;
            }
            var rowNode = rowCtrl.getRowNode();
            if (selectivelyRefreshing && idsToRefresh) {
              var parentId = rowNode.level > 0 && rowNode.parent ? rowNode.parent.id : void 0;
              var skipThisNode = !idsToRefresh[rowNode.id] && !idsToRefresh[parentId];
              if (skipThisNode) {
                return;
              }
            }
            var fullWidthRowsRefreshed = rowCtrl.refreshFullWidth();
            if (!fullWidthRowsRefreshed) {
              var rowIndex = rowCtrl.getRowNode().rowIndex;
              rowsToRemove.push(rowIndex.toString());
            }
          });
          this.removeRowCtrls(rowsToRemove);
          this.redrawAfterScroll();
        };
        RowRenderer2.prototype.createOrUpdateRowCtrl = function(rowIndex, rowsToRecycle, animate, afterScroll) {
          var rowNode;
          var rowCon = this.rowCtrlsByRowIndex[rowIndex];
          if (!rowCon) {
            rowNode = this.paginationProxy.getRow(rowIndex);
            if (exists(rowNode) && exists(rowsToRecycle) && rowsToRecycle[rowNode.id] && rowNode.alreadyRendered) {
              rowCon = rowsToRecycle[rowNode.id];
              rowsToRecycle[rowNode.id] = null;
            }
          }
          var creatingNewRowCon = !rowCon;
          if (creatingNewRowCon) {
            if (!rowNode) {
              rowNode = this.paginationProxy.getRow(rowIndex);
            }
            if (exists(rowNode)) {
              rowCon = this.createRowCon(rowNode, animate, afterScroll);
            } else {
              return;
            }
          }
          if (rowNode) {
            rowNode.alreadyRendered = true;
          }
          this.rowCtrlsByRowIndex[rowIndex] = rowCon;
          return rowCon;
        };
        RowRenderer2.prototype.destroyRowCtrls = function(rowCtrlsMap, animate) {
          var _this = this;
          var executeInAWhileFuncs = [];
          iterateObject(rowCtrlsMap, function(nodeId, rowCtrl) {
            if (!rowCtrl) {
              return;
            }
            if (_this.cachedRowCtrls && rowCtrl.isCacheable()) {
              _this.cachedRowCtrls.addRow(rowCtrl);
              return;
            }
            rowCtrl.destroyFirstPass();
            if (animate) {
              _this.zombieRowCtrls[rowCtrl.getInstanceId()] = rowCtrl;
              executeInAWhileFuncs.push(function() {
                rowCtrl.destroySecondPass();
                delete _this.zombieRowCtrls[rowCtrl.getInstanceId()];
              });
            } else {
              rowCtrl.destroySecondPass();
            }
          });
          if (animate) {
            executeInAWhileFuncs.push(function() {
              _this.updateAllRowCtrls();
              _this.dispatchDisplayedRowsChanged();
            });
            executeInAWhile(executeInAWhileFuncs);
          }
        };
        RowRenderer2.prototype.checkAngularCompile = function() {
          var _this = this;
          if (this.gridOptionsWrapper.isAngularCompileRows()) {
            window.setTimeout(function() {
              _this.$scope.$apply();
            }, 0);
          }
        };
        RowRenderer2.prototype.workOutFirstAndLastRowsToRender = function() {
          var _this = this;
          var newFirst;
          var newLast;
          if (!this.paginationProxy.isRowsToRender()) {
            newFirst = 0;
            newLast = -1;
          } else if (this.printLayout) {
            newFirst = this.paginationProxy.getPageFirstRow();
            newLast = this.paginationProxy.getPageLastRow();
          } else {
            var bufferPixels = this.gridOptionsWrapper.getRowBufferInPixels();
            var gridBodyCon = this.ctrlsService.getGridBodyCtrl();
            var rowHeightsChanged = false;
            var firstPixel = void 0;
            var lastPixel = void 0;
            do {
              var paginationOffset = this.paginationProxy.getPixelOffset();
              var _a2 = this.paginationProxy.getCurrentPagePixelRange(), pageFirstPixel = _a2.pageFirstPixel, pageLastPixel = _a2.pageLastPixel;
              var divStretchOffset = this.rowContainerHeightService.getDivStretchOffset();
              var bodyVRange = gridBodyCon.getScrollFeature().getVScrollPosition();
              var bodyTopPixel = bodyVRange.top;
              var bodyBottomPixel = bodyVRange.bottom;
              firstPixel = Math.max(bodyTopPixel + paginationOffset - bufferPixels, pageFirstPixel) + divStretchOffset;
              lastPixel = Math.min(bodyBottomPixel + paginationOffset + bufferPixels, pageLastPixel) + divStretchOffset;
              rowHeightsChanged = this.ensureAllRowsInRangeHaveHeightsCalculated(firstPixel, lastPixel);
            } while (rowHeightsChanged);
            var firstRowIndex = this.paginationProxy.getRowIndexAtPixel(firstPixel);
            var lastRowIndex = this.paginationProxy.getRowIndexAtPixel(lastPixel);
            var pageFirstRow = this.paginationProxy.getPageFirstRow();
            var pageLastRow = this.paginationProxy.getPageLastRow();
            if (firstRowIndex < pageFirstRow) {
              firstRowIndex = pageFirstRow;
            }
            if (lastRowIndex > pageLastRow) {
              lastRowIndex = pageLastRow;
            }
            newFirst = firstRowIndex;
            newLast = lastRowIndex;
          }
          var rowLayoutNormal = this.gridOptionsWrapper.getDomLayout() === Constants.DOM_LAYOUT_NORMAL;
          var suppressRowCountRestriction = this.gridOptionsWrapper.isSuppressMaxRenderedRowRestriction();
          var rowBufferMaxSize = Math.max(this.gridOptionsWrapper.getRowBuffer(), 500);
          if (rowLayoutNormal && !suppressRowCountRestriction) {
            if (newLast - newFirst > rowBufferMaxSize) {
              newLast = newFirst + rowBufferMaxSize;
            }
          }
          var firstDiffers = newFirst !== this.firstRenderedRow;
          var lastDiffers = newLast !== this.lastRenderedRow;
          if (firstDiffers || lastDiffers) {
            this.firstRenderedRow = newFirst;
            this.lastRenderedRow = newLast;
            var event_1 = {
              type: Events.EVENT_VIEWPORT_CHANGED,
              firstRow: newFirst,
              lastRow: newLast,
              api: this.gridApi,
              columnApi: this.columnApi
            };
            this.eventService.dispatchEvent(event_1);
          }
          if (this.paginationProxy.isRowsToRender()) {
            var event_2 = {
              type: Events.EVENT_FIRST_DATA_RENDERED,
              firstRow: newFirst,
              lastRow: newLast,
              api: this.gridApi,
              columnApi: this.columnApi
            };
            window.setTimeout(function() {
              return _this.eventService.dispatchEventOnce(event_2);
            }, 50);
          }
        };
        RowRenderer2.prototype.ensureAllRowsInRangeHaveHeightsCalculated = function(topPixel, bottomPixel) {
          var res = this.paginationProxy.ensureRowHeightsValid(topPixel, bottomPixel, -1, -1);
          if (res) {
            this.updateContainerHeights();
          }
          return res;
        };
        RowRenderer2.prototype.getFirstVirtualRenderedRow = function() {
          return this.firstRenderedRow;
        };
        RowRenderer2.prototype.getLastVirtualRenderedRow = function() {
          return this.lastRenderedRow;
        };
        RowRenderer2.prototype.doNotUnVirtualiseRow = function(rowComp) {
          var REMOVE_ROW = false;
          var KEEP_ROW = true;
          var rowNode = rowComp.getRowNode();
          var rowHasFocus = this.focusService.isRowNodeFocused(rowNode);
          var rowIsEditing = rowComp.isEditing();
          var rowIsDetail = rowNode.detail;
          var mightWantToKeepRow = rowHasFocus || rowIsEditing || rowIsDetail;
          if (!mightWantToKeepRow) {
            return REMOVE_ROW;
          }
          var rowNodePresent = this.paginationProxy.isRowPresent(rowNode);
          return rowNodePresent ? KEEP_ROW : REMOVE_ROW;
        };
        RowRenderer2.prototype.createRowCon = function(rowNode, animate, afterScroll) {
          var rowCtrlFromCache = this.cachedRowCtrls ? this.cachedRowCtrls.getRow(rowNode) : null;
          if (rowCtrlFromCache) {
            return rowCtrlFromCache;
          }
          var suppressAnimationFrame = this.gridOptionsWrapper.isSuppressAnimationFrame();
          var useAnimationFrameForCreate = afterScroll && !suppressAnimationFrame && !this.printLayout;
          var res = new RowCtrl(this.$scope, rowNode, this.beans, animate, useAnimationFrameForCreate, this.printLayout);
          return res;
        };
        RowRenderer2.prototype.getRenderedNodes = function() {
          var renderedRows = this.rowCtrlsByRowIndex;
          return Object.keys(renderedRows).map(function(key) {
            return renderedRows[key].getRowNode();
          });
        };
        RowRenderer2.prototype.getRowByPosition = function(rowPosition) {
          var rowComponent;
          switch (rowPosition.rowPinned) {
            case Constants.PINNED_TOP:
              rowComponent = this.topRowCtrls[rowPosition.rowIndex];
              break;
            case Constants.PINNED_BOTTOM:
              rowComponent = this.bottomRowCtrls[rowPosition.rowIndex];
              break;
            default:
              rowComponent = this.rowCtrlsByRowIndex[rowPosition.rowIndex];
              break;
          }
          return rowComponent;
        };
        RowRenderer2.prototype.getRowNode = function(gridRow) {
          switch (gridRow.rowPinned) {
            case Constants.PINNED_TOP:
              return this.pinnedRowModel.getPinnedTopRowData()[gridRow.rowIndex];
            case Constants.PINNED_BOTTOM:
              return this.pinnedRowModel.getPinnedBottomRowData()[gridRow.rowIndex];
            default:
              return this.rowModel.getRow(gridRow.rowIndex);
          }
        };
        RowRenderer2.prototype.isRangeInRenderedViewport = function(startIndex, endIndex) {
          var parentClosed = startIndex == null || endIndex == null;
          if (parentClosed) {
            return false;
          }
          var blockAfterViewport = startIndex > this.lastRenderedRow;
          var blockBeforeViewport = endIndex < this.firstRenderedRow;
          var blockInsideViewport = !blockBeforeViewport && !blockAfterViewport;
          return blockInsideViewport;
        };
        __decorate$K([
          Autowired("paginationProxy")
        ], RowRenderer2.prototype, "paginationProxy", void 0);
        __decorate$K([
          Autowired("columnModel")
        ], RowRenderer2.prototype, "columnModel", void 0);
        __decorate$K([
          Autowired("$scope")
        ], RowRenderer2.prototype, "$scope", void 0);
        __decorate$K([
          Autowired("pinnedRowModel")
        ], RowRenderer2.prototype, "pinnedRowModel", void 0);
        __decorate$K([
          Autowired("rowModel")
        ], RowRenderer2.prototype, "rowModel", void 0);
        __decorate$K([
          Autowired("focusService")
        ], RowRenderer2.prototype, "focusService", void 0);
        __decorate$K([
          Autowired("columnApi")
        ], RowRenderer2.prototype, "columnApi", void 0);
        __decorate$K([
          Autowired("gridApi")
        ], RowRenderer2.prototype, "gridApi", void 0);
        __decorate$K([
          Autowired("beans")
        ], RowRenderer2.prototype, "beans", void 0);
        __decorate$K([
          Autowired("rowContainerHeightService")
        ], RowRenderer2.prototype, "rowContainerHeightService", void 0);
        __decorate$K([
          Optional("ctrlsService")
        ], RowRenderer2.prototype, "ctrlsService", void 0);
        __decorate$K([
          PostConstruct
        ], RowRenderer2.prototype, "postConstruct", null);
        RowRenderer2 = __decorate$K([
          Bean3("rowRenderer")
        ], RowRenderer2);
        return RowRenderer2;
      }(BeanStub)
    );
    var RowCtrlCache = (
      /** @class */
      function() {
        function RowCtrlCache2(maxCount) {
          this.entriesMap = {};
          this.entriesList = [];
          this.maxCount = maxCount;
        }
        RowCtrlCache2.prototype.toString = function() {
          return this.entriesList.map(function(item) {
            return item.getRowNode().data.name;
          }).join(", ");
        };
        RowCtrlCache2.prototype.addRow = function(rowCtrl) {
          this.entriesMap[rowCtrl.getRowNode().id] = rowCtrl;
          this.entriesList.push(rowCtrl);
          rowCtrl.setCached(true);
          if (this.entriesList.length > this.maxCount) {
            var rowCtrlToDestroy = this.entriesList[0];
            rowCtrlToDestroy.destroyFirstPass();
            rowCtrlToDestroy.destroySecondPass();
            this.removeFromCache(rowCtrlToDestroy);
          }
        };
        RowCtrlCache2.prototype.getRow = function(rowNode) {
          if (rowNode == null || rowNode.id == null) {
            return null;
          }
          var res = this.entriesMap[rowNode.id];
          if (!res) {
            return null;
          }
          this.removeFromCache(res);
          res.setCached(false);
          var rowNodeMismatch = res.getRowNode() != rowNode;
          return rowNodeMismatch ? null : res;
        };
        RowCtrlCache2.prototype.removeFromCache = function(rowCtrl) {
          var rowNodeId = rowCtrl.getRowNode().id;
          delete this.entriesMap[rowNodeId];
          removeFromArray(this.entriesList, rowCtrl);
        };
        RowCtrlCache2.prototype.getEntries = function() {
          return this.entriesList;
        };
        return RowCtrlCache2;
      }()
    );
    var __extends$W = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var AbstractHeaderCellComp = (
      /** @class */
      function(_super) {
        __extends$W(AbstractHeaderCellComp2, _super);
        function AbstractHeaderCellComp2(template, ctrl) {
          var _this = _super.call(this, template) || this;
          _this.ctrl = ctrl;
          return _this;
        }
        AbstractHeaderCellComp2.prototype.getCtrl = function() {
          return this.ctrl;
        };
        return AbstractHeaderCellComp2;
      }(Component)
    );
    var __extends$X = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$L = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var HeaderCellComp = (
      /** @class */
      function(_super) {
        __extends$X(HeaderCellComp2, _super);
        function HeaderCellComp2(ctrl) {
          var _this = _super.call(this, HeaderCellComp2.TEMPLATE, ctrl) || this;
          _this.headerCompVersion = 0;
          _this.column = ctrl.getColumnGroupChild();
          _this.pinned = ctrl.getPinned();
          return _this;
        }
        HeaderCellComp2.prototype.postConstruct = function() {
          var _this = this;
          var eGui = this.getGui();
          var setAttribute = function(name, value, element) {
            var actualElement = element ? element : eGui;
            if (value != null && value != "") {
              actualElement.setAttribute(name, value);
            } else {
              actualElement.removeAttribute(name);
            }
          };
          var compProxy = {
            setWidth: function(width) {
              return eGui.style.width = width;
            },
            addOrRemoveCssClass: function(cssClassName, on) {
              return _this.addOrRemoveCssClass(cssClassName, on);
            },
            setAriaSort: function(sort) {
              return sort ? setAriaSort(eGui, sort) : removeAriaSort(eGui);
            },
            setColId: function(id) {
              return setAttribute("col-id", id);
            },
            setTitle: function(title) {
              return setAttribute("title", title);
            },
            setAriaDescribedBy: function(value) {
              return setAriaDescribedBy(eGui, value);
            },
            setUserCompDetails: function(compDetails) {
              return _this.setUserCompDetails(compDetails);
            },
            getUserCompInstance: function() {
              return _this.headerComp;
            }
          };
          this.ctrl.setComp(compProxy, this.getGui(), this.eResize);
          var selectAllGui = this.ctrl.getSelectAllGui();
          this.eResize.insertAdjacentElement("afterend", selectAllGui);
        };
        HeaderCellComp2.prototype.destroyHeaderComp = function() {
          if (this.headerComp) {
            this.getGui().removeChild(this.headerCompGui);
            this.headerComp = this.destroyBean(this.headerComp);
            this.headerCompGui = void 0;
          }
        };
        HeaderCellComp2.prototype.setUserCompDetails = function(compDetails) {
          var _this = this;
          this.headerCompVersion++;
          var versionCopy = this.headerCompVersion;
          compDetails.newAgStackInstance().then(function(comp) {
            return _this.afterCompCreated(versionCopy, comp);
          });
        };
        HeaderCellComp2.prototype.afterCompCreated = function(version, headerComp) {
          if (version != this.headerCompVersion || !this.isAlive()) {
            this.destroyBean(headerComp);
            return;
          }
          this.destroyHeaderComp();
          this.headerComp = headerComp;
          this.headerCompGui = headerComp.getGui();
          this.getGui().appendChild(this.headerCompGui);
          this.ctrl.setDragSource(this.headerCompGui);
        };
        HeaderCellComp2.TEMPLATE = '<div class="ag-header-cell" role="columnheader" unselectable="on" tabindex="-1">\n            <div ref="eResize" class="ag-header-cell-resize" role="presentation"></div>\n        </div>';
        __decorate$L([
          RefSelector("eResize")
        ], HeaderCellComp2.prototype, "eResize", void 0);
        __decorate$L([
          PostConstruct
        ], HeaderCellComp2.prototype, "postConstruct", null);
        __decorate$L([
          PreDestroy
        ], HeaderCellComp2.prototype, "destroyHeaderComp", null);
        return HeaderCellComp2;
      }(AbstractHeaderCellComp)
    );
    var __extends$Y = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$M = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var HeaderGroupCellComp = (
      /** @class */
      function(_super) {
        __extends$Y(HeaderGroupCellComp2, _super);
        function HeaderGroupCellComp2(ctrl) {
          return _super.call(this, HeaderGroupCellComp2.TEMPLATE, ctrl) || this;
        }
        HeaderGroupCellComp2.prototype.postConstruct = function() {
          var _this = this;
          var eGui = this.getGui();
          var setAttribute = function(key, value) {
            return value != void 0 ? eGui.setAttribute(key, value) : eGui.removeAttribute(key);
          };
          var compProxy = {
            addOrRemoveCssClass: function(cssClassName, on) {
              return _this.addOrRemoveCssClass(cssClassName, on);
            },
            addOrRemoveResizableCssClass: function(cssClassName, on) {
              return addOrRemoveCssClass(_this.eResize, cssClassName, on);
            },
            setWidth: function(width) {
              return eGui.style.width = width;
            },
            setColId: function(id) {
              return eGui.setAttribute("col-id", id);
            },
            setAriaExpanded: function(expanded) {
              return setAttribute("aria-expanded", expanded);
            },
            setTitle: function(title) {
              return setAttribute("title", title);
            },
            setUserCompDetails: function(details) {
              return _this.setUserCompDetails(details);
            }
          };
          this.ctrl.setComp(compProxy, eGui, this.eResize);
        };
        HeaderGroupCellComp2.prototype.setUserCompDetails = function(details) {
          var _this = this;
          details.newAgStackInstance().then(function(comp) {
            return _this.afterHeaderCompCreated(comp);
          });
        };
        HeaderGroupCellComp2.prototype.afterHeaderCompCreated = function(headerGroupComp) {
          var _this = this;
          var destroyFunc = function() {
            return _this.destroyBean(headerGroupComp);
          };
          if (!this.isAlive()) {
            destroyFunc();
            return;
          }
          this.getGui().appendChild(headerGroupComp.getGui());
          this.addDestroyFunc(destroyFunc);
          this.ctrl.setDragSource(headerGroupComp.getGui());
        };
        HeaderGroupCellComp2.TEMPLATE = '<div class="ag-header-group-cell" role="columnheader" tabindex="-1">\n            <div ref="eResize" class="ag-header-cell-resize" role="presentation"></div>\n        </div>';
        __decorate$M([
          Autowired("userComponentFactory")
        ], HeaderGroupCellComp2.prototype, "userComponentFactory", void 0);
        __decorate$M([
          RefSelector("eResize")
        ], HeaderGroupCellComp2.prototype, "eResize", void 0);
        __decorate$M([
          PostConstruct
        ], HeaderGroupCellComp2.prototype, "postConstruct", null);
        return HeaderGroupCellComp2;
      }(AbstractHeaderCellComp)
    );
    var __extends$Z = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$N = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var HeaderFilterCellComp = (
      /** @class */
      function(_super) {
        __extends$Z(HeaderFilterCellComp2, _super);
        function HeaderFilterCellComp2(ctrl) {
          return _super.call(this, HeaderFilterCellComp2.TEMPLATE, ctrl) || this;
        }
        HeaderFilterCellComp2.prototype.postConstruct = function() {
          var _this = this;
          var eGui = this.getGui();
          var compProxy = {
            addOrRemoveCssClass: function(cssClassName, on) {
              return _this.addOrRemoveCssClass(cssClassName, on);
            },
            addOrRemoveBodyCssClass: function(cssClassName, on) {
              return addOrRemoveCssClass(_this.eFloatingFilterBody, cssClassName, on);
            },
            addOrRemoveButtonWrapperCssClass: function(cssClassName, on) {
              return addOrRemoveCssClass(_this.eButtonWrapper, cssClassName, on);
            },
            setCompDetails: function(compDetails) {
              return _this.setCompDetails(compDetails);
            },
            getFloatingFilterComp: function() {
              return _this.compPromise;
            },
            setWidth: function(width) {
              return eGui.style.width = width;
            },
            setMenuIcon: function(eIcon) {
              return _this.eButtonShowMainFilter.appendChild(eIcon);
            }
          };
          this.ctrl.setComp(compProxy, eGui, this.eButtonShowMainFilter, this.eFloatingFilterBody);
        };
        HeaderFilterCellComp2.prototype.setCompDetails = function(compDetails) {
          var _this = this;
          this.compPromise = compDetails.newAgStackInstance();
          this.compPromise.then(function(comp) {
            return _this.afterCompCreated(comp);
          });
        };
        HeaderFilterCellComp2.prototype.afterCompCreated = function(comp) {
          var _this = this;
          if (!comp) {
            return;
          }
          this.addDestroyFunc(function() {
            return _this.context.destroyBean(comp);
          });
          if (!this.isAlive()) {
            return;
          }
          this.eFloatingFilterBody.appendChild(comp.getGui());
          if (comp.afterGuiAttached) {
            comp.afterGuiAttached();
          }
        };
        HeaderFilterCellComp2.TEMPLATE = '<div class="ag-header-cell ag-floating-filter" role="gridcell" tabindex="-1">\n            <div ref="eFloatingFilterBody" role="presentation"></div>\n            <div class="ag-floating-filter-button ag-hidden" ref="eButtonWrapper" role="presentation">\n                <button type="button" aria-label="Open Filter Menu" class="ag-floating-filter-button-button" ref="eButtonShowMainFilter" tabindex="-1"></button>\n            </div>\n        </div>';
        __decorate$N([
          RefSelector("eFloatingFilterBody")
        ], HeaderFilterCellComp2.prototype, "eFloatingFilterBody", void 0);
        __decorate$N([
          RefSelector("eButtonWrapper")
        ], HeaderFilterCellComp2.prototype, "eButtonWrapper", void 0);
        __decorate$N([
          RefSelector("eButtonShowMainFilter")
        ], HeaderFilterCellComp2.prototype, "eButtonShowMainFilter", void 0);
        __decorate$N([
          PostConstruct
        ], HeaderFilterCellComp2.prototype, "postConstruct", null);
        return HeaderFilterCellComp2;
      }(AbstractHeaderCellComp)
    );
    var __extends$_ = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$O = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    (function(HeaderRowType) {
      HeaderRowType["COLUMN_GROUP"] = "group";
      HeaderRowType["COLUMN"] = "column";
      HeaderRowType["FLOATING_FILTER"] = "filter";
    })(exports.HeaderRowType || (exports.HeaderRowType = {}));
    var HeaderRowComp = (
      /** @class */
      function(_super) {
        __extends$_(HeaderRowComp2, _super);
        function HeaderRowComp2(ctrl) {
          var _this = _super.call(this) || this;
          _this.headerComps = {};
          var extraClass = ctrl.getType() == exports.HeaderRowType.COLUMN_GROUP ? "ag-header-row-column-group" : ctrl.getType() == exports.HeaderRowType.FLOATING_FILTER ? "ag-header-row-column-filter" : "ag-header-row-column";
          _this.setTemplate(
            /* html */
            '<div class="ag-header-row ' + extraClass + '" role="row"></div>'
          );
          _this.ctrl = ctrl;
          return _this;
        }
        HeaderRowComp2.prototype.init = function() {
          var _this = this;
          var compProxy = {
            setTransform: function(transform) {
              return _this.getGui().style.transform = transform;
            },
            setHeight: function(height) {
              return _this.getGui().style.height = height;
            },
            setTop: function(top) {
              return _this.getGui().style.top = top;
            },
            setHeaderCtrls: function(ctrls) {
              return _this.setHeaderCtrls(ctrls);
            },
            setWidth: function(width) {
              return _this.getGui().style.width = width;
            },
            setAriaRowIndex: function(rowIndex) {
              return setAriaRowIndex(_this.getGui(), rowIndex);
            }
          };
          this.ctrl.setComp(compProxy);
        };
        HeaderRowComp2.prototype.destroyHeaderCtrls = function() {
          this.setHeaderCtrls([]);
        };
        HeaderRowComp2.prototype.setHeaderCtrls = function(ctrls) {
          var _this = this;
          if (!this.isAlive()) {
            return;
          }
          var oldComps = this.headerComps;
          this.headerComps = {};
          ctrls.forEach(function(ctrl) {
            var id = ctrl.getInstanceId();
            var comp = oldComps[id];
            delete oldComps[id];
            if (comp == null) {
              comp = _this.createHeaderComp(ctrl);
              _this.getGui().appendChild(comp.getGui());
            }
            _this.headerComps[id] = comp;
          });
          iterateObject(oldComps, function(id, comp) {
            _this.getGui().removeChild(comp.getGui());
            _this.destroyBean(comp);
          });
          var ensureDomOrder2 = this.gridOptionsWrapper.isEnsureDomOrder();
          if (ensureDomOrder2) {
            var comps = getAllValuesInObject(this.headerComps);
            comps.sort(function(a, b) {
              var leftA = a.getCtrl().getColumnGroupChild().getLeft();
              var leftB = b.getCtrl().getColumnGroupChild().getLeft();
              return leftA - leftB;
            });
            var elementsInOrder = comps.map(function(c) {
              return c.getGui();
            });
            setDomChildOrder(this.getGui(), elementsInOrder);
          }
        };
        HeaderRowComp2.prototype.createHeaderComp = function(headerCtrl) {
          var result;
          switch (this.ctrl.getType()) {
            case exports.HeaderRowType.COLUMN_GROUP:
              result = new HeaderGroupCellComp(headerCtrl);
              break;
            case exports.HeaderRowType.FLOATING_FILTER:
              result = new HeaderFilterCellComp(headerCtrl);
              break;
            default:
              result = new HeaderCellComp(headerCtrl);
              break;
          }
          this.createBean(result);
          result.setParentComponent(this);
          return result;
        };
        __decorate$O([
          PostConstruct
        ], HeaderRowComp2.prototype, "init", null);
        __decorate$O([
          PreDestroy
        ], HeaderRowComp2.prototype, "destroyHeaderCtrls", null);
        return HeaderRowComp2;
      }(Component)
    );
    var __extends$$ = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$P = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    (function(HeaderNavigationDirection) {
      HeaderNavigationDirection[HeaderNavigationDirection["UP"] = 0] = "UP";
      HeaderNavigationDirection[HeaderNavigationDirection["DOWN"] = 1] = "DOWN";
      HeaderNavigationDirection[HeaderNavigationDirection["LEFT"] = 2] = "LEFT";
      HeaderNavigationDirection[HeaderNavigationDirection["RIGHT"] = 3] = "RIGHT";
    })(exports.HeaderNavigationDirection || (exports.HeaderNavigationDirection = {}));
    var HeaderNavigationService = (
      /** @class */
      function(_super) {
        __extends$$(HeaderNavigationService2, _super);
        function HeaderNavigationService2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        HeaderNavigationService2.prototype.postConstruct = function() {
          var _this = this;
          this.ctrlsService.whenReady(function(p) {
            _this.gridBodyCon = p.gridBodyCtrl;
          });
        };
        HeaderNavigationService2.prototype.getHeaderRowCount = function() {
          var centerHeaderContainer = this.ctrlsService.getHeaderRowContainerCtrl();
          return centerHeaderContainer ? centerHeaderContainer.getRowCount() : 0;
        };
        HeaderNavigationService2.prototype.getHeaderRowType = function(rowIndex) {
          var centerHeaderContainer = this.ctrlsService.getHeaderRowContainerCtrl();
          if (centerHeaderContainer) {
            return centerHeaderContainer.getRowType(rowIndex);
          }
        };
        HeaderNavigationService2.prototype.navigateVertically = function(direction, fromHeader, event) {
          if (!fromHeader) {
            fromHeader = this.focusService.getFocusedHeader();
          }
          if (!fromHeader) {
            return false;
          }
          var headerRowIndex = fromHeader.headerRowIndex, column = fromHeader.column;
          var rowLen = this.getHeaderRowCount();
          var isUp = direction === exports.HeaderNavigationDirection.UP;
          var nextRow = isUp ? headerRowIndex - 1 : headerRowIndex + 1;
          var nextFocusColumn = null;
          var skipColumn = false;
          if (nextRow < 0) {
            nextRow = 0;
            nextFocusColumn = column;
            skipColumn = true;
          }
          if (nextRow >= rowLen) {
            nextRow = -1;
          }
          var currentRowType = this.getHeaderRowType(headerRowIndex);
          if (!skipColumn) {
            if (currentRowType === exports.HeaderRowType.COLUMN_GROUP) {
              var currentColumn = column;
              nextFocusColumn = isUp ? column.getParent() : currentColumn.getDisplayedChildren()[0];
            } else if (currentRowType === exports.HeaderRowType.FLOATING_FILTER) {
              nextFocusColumn = column;
            } else {
              var currentColumn = column;
              nextFocusColumn = isUp ? currentColumn.getParent() : currentColumn;
            }
            if (!nextFocusColumn) {
              return false;
            }
          }
          return this.focusService.focusHeaderPosition({
            headerPosition: { headerRowIndex: nextRow, column: nextFocusColumn },
            allowUserOverride: true,
            event
          });
        };
        HeaderNavigationService2.prototype.navigateHorizontally = function(direction, fromTab, event) {
          if (fromTab === void 0) {
            fromTab = false;
          }
          var focusedHeader = this.focusService.getFocusedHeader();
          var isLeft = direction === exports.HeaderNavigationDirection.LEFT;
          var isRtl = this.gridOptionsWrapper.isEnableRtl();
          var nextHeader;
          var normalisedDirection;
          if (isLeft !== isRtl) {
            normalisedDirection = "Before";
            nextHeader = this.headerPositionUtils.findHeader(focusedHeader, normalisedDirection);
          } else {
            normalisedDirection = "After";
            nextHeader = this.headerPositionUtils.findHeader(focusedHeader, normalisedDirection);
          }
          if (nextHeader) {
            return this.focusService.focusHeaderPosition({
              headerPosition: nextHeader,
              direction: normalisedDirection,
              fromTab,
              allowUserOverride: true,
              event
            });
          }
          if (!fromTab) {
            return true;
          }
          return this.focusNextHeaderRow(focusedHeader, normalisedDirection, event);
        };
        HeaderNavigationService2.prototype.focusNextHeaderRow = function(focusedHeader, direction, event) {
          var currentIndex = focusedHeader.headerRowIndex;
          var nextPosition = null;
          var nextRowIndex;
          if (direction === "Before") {
            if (currentIndex > 0) {
              nextRowIndex = currentIndex - 1;
              nextPosition = this.headerPositionUtils.findColAtEdgeForHeaderRow(nextRowIndex, "end");
            }
          } else {
            nextRowIndex = currentIndex + 1;
            nextPosition = this.headerPositionUtils.findColAtEdgeForHeaderRow(nextRowIndex, "start");
          }
          return this.focusService.focusHeaderPosition({
            headerPosition: nextPosition,
            direction,
            fromTab: true,
            allowUserOverride: true,
            event
          });
        };
        HeaderNavigationService2.prototype.scrollToColumn = function(column, direction) {
          if (direction === void 0) {
            direction = "After";
          }
          if (column.getPinned()) {
            return;
          }
          var columnToScrollTo;
          if (column instanceof ColumnGroup) {
            var columns = column.getDisplayedLeafColumns();
            columnToScrollTo = direction === "Before" ? last(columns) : columns[0];
          } else {
            columnToScrollTo = column;
          }
          this.gridBodyCon.getScrollFeature().ensureColumnVisible(columnToScrollTo);
          this.gridBodyCon.getScrollFeature().horizontallyScrollHeaderCenterAndFloatingCenter();
          this.animationFrameService.flushAllFrames();
        };
        __decorate$P([
          Autowired("focusService")
        ], HeaderNavigationService2.prototype, "focusService", void 0);
        __decorate$P([
          Autowired("headerPositionUtils")
        ], HeaderNavigationService2.prototype, "headerPositionUtils", void 0);
        __decorate$P([
          Autowired("animationFrameService")
        ], HeaderNavigationService2.prototype, "animationFrameService", void 0);
        __decorate$P([
          Autowired("ctrlsService")
        ], HeaderNavigationService2.prototype, "ctrlsService", void 0);
        __decorate$P([
          PostConstruct
        ], HeaderNavigationService2.prototype, "postConstruct", null);
        HeaderNavigationService2 = __decorate$P([
          Bean3("headerNavigationService")
        ], HeaderNavigationService2);
        return HeaderNavigationService2;
      }(BeanStub)
    );
    var __extends$10 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$Q = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var GridHeaderCtrl = (
      /** @class */
      function(_super) {
        __extends$10(GridHeaderCtrl2, _super);
        function GridHeaderCtrl2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        GridHeaderCtrl2.prototype.setComp = function(comp, eGui, eFocusableElement) {
          this.comp = comp;
          this.eGui = eGui;
          this.createManagedBean(new ManagedFocusFeature(eFocusableElement, {
            onTabKeyDown: this.onTabKeyDown.bind(this),
            handleKeyDown: this.handleKeyDown.bind(this),
            onFocusOut: this.onFocusOut.bind(this)
          }));
          this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, this.onPivotModeChanged.bind(this));
          this.onPivotModeChanged();
          this.setupHeaderHeight();
          this.ctrlsService.registerGridHeaderCtrl(this);
        };
        GridHeaderCtrl2.prototype.setupHeaderHeight = function() {
          var listener = this.setHeaderHeight.bind(this);
          listener();
          this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_HEADER_HEIGHT, listener);
          this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_PIVOT_HEADER_HEIGHT, listener);
          this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_GROUP_HEADER_HEIGHT, listener);
          this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_PIVOT_GROUP_HEADER_HEIGHT, listener);
          this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_FLOATING_FILTERS_HEIGHT, listener);
          this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, listener);
        };
        GridHeaderCtrl2.prototype.setHeaderHeight = function() {
          var _a2 = this, columnModel = _a2.columnModel, gridOptionsWrapper = _a2.gridOptionsWrapper;
          var numberOfFloating = 0;
          var headerRowCount = columnModel.getHeaderRowCount();
          var totalHeaderHeight;
          var groupHeight;
          var headerHeight;
          if (columnModel.isPivotMode()) {
            groupHeight = gridOptionsWrapper.getPivotGroupHeaderHeight();
            headerHeight = gridOptionsWrapper.getPivotHeaderHeight();
          } else {
            var hasFloatingFilters = columnModel.hasFloatingFilters();
            if (hasFloatingFilters) {
              headerRowCount++;
              numberOfFloating = 1;
            }
            groupHeight = gridOptionsWrapper.getGroupHeaderHeight();
            headerHeight = gridOptionsWrapper.getHeaderHeight();
          }
          var numberOfNonGroups = 1 + numberOfFloating;
          var numberOfGroups = headerRowCount - numberOfNonGroups;
          totalHeaderHeight = numberOfFloating * gridOptionsWrapper.getFloatingFiltersHeight();
          totalHeaderHeight += numberOfGroups * groupHeight;
          totalHeaderHeight += headerHeight;
          var px = totalHeaderHeight + 1 + "px";
          this.comp.setHeightAndMinHeight(px);
        };
        GridHeaderCtrl2.prototype.onPivotModeChanged = function() {
          var pivotMode = this.columnModel.isPivotMode();
          this.comp.addOrRemoveCssClass("ag-pivot-on", pivotMode);
          this.comp.addOrRemoveCssClass("ag-pivot-off", !pivotMode);
        };
        GridHeaderCtrl2.prototype.onTabKeyDown = function(e) {
          var isRtl = this.gridOptionsWrapper.isEnableRtl();
          var direction = e.shiftKey !== isRtl ? exports.HeaderNavigationDirection.LEFT : exports.HeaderNavigationDirection.RIGHT;
          if (this.headerNavigationService.navigateHorizontally(direction, true, e) || this.focusService.focusNextGridCoreContainer(e.shiftKey)) {
            e.preventDefault();
          }
        };
        GridHeaderCtrl2.prototype.handleKeyDown = function(e) {
          var direction = null;
          switch (e.keyCode) {
            case KeyCode.LEFT:
              direction = exports.HeaderNavigationDirection.LEFT;
            case KeyCode.RIGHT:
              if (!exists(direction)) {
                direction = exports.HeaderNavigationDirection.RIGHT;
              }
              this.headerNavigationService.navigateHorizontally(direction, false, e);
              break;
            case KeyCode.UP:
              direction = exports.HeaderNavigationDirection.UP;
            case KeyCode.DOWN:
              if (!exists(direction)) {
                direction = exports.HeaderNavigationDirection.DOWN;
              }
              if (this.headerNavigationService.navigateVertically(direction, null, e)) {
                e.preventDefault();
              }
              break;
            default:
              return;
          }
        };
        GridHeaderCtrl2.prototype.onFocusOut = function(e) {
          var relatedTarget = e.relatedTarget;
          if (!relatedTarget && this.eGui.contains(document.activeElement)) {
            return;
          }
          if (!this.eGui.contains(relatedTarget)) {
            this.focusService.clearFocusedHeader();
          }
        };
        __decorate$Q([
          Autowired("headerNavigationService")
        ], GridHeaderCtrl2.prototype, "headerNavigationService", void 0);
        __decorate$Q([
          Autowired("focusService")
        ], GridHeaderCtrl2.prototype, "focusService", void 0);
        __decorate$Q([
          Autowired("columnModel")
        ], GridHeaderCtrl2.prototype, "columnModel", void 0);
        __decorate$Q([
          Autowired("ctrlsService")
        ], GridHeaderCtrl2.prototype, "ctrlsService", void 0);
        return GridHeaderCtrl2;
      }(BeanStub)
    );
    var __extends$11 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$R = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var CenterWidthFeature = (
      /** @class */
      function(_super) {
        __extends$11(CenterWidthFeature2, _super);
        function CenterWidthFeature2(callback) {
          var _this = _super.call(this) || this;
          _this.callback = callback;
          return _this;
        }
        CenterWidthFeature2.prototype.postConstruct = function() {
          var listener = this.setWidth.bind(this);
          this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_DOM_LAYOUT, listener);
          this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, listener);
          this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, listener);
          this.setWidth();
        };
        CenterWidthFeature2.prototype.setWidth = function() {
          var columnModel = this.columnModel;
          var printLayout = this.gridOptionsWrapper.getDomLayout() === Constants.DOM_LAYOUT_PRINT;
          var centerWidth = columnModel.getBodyContainerWidth();
          var leftWidth = columnModel.getDisplayedColumnsLeftWidth();
          var rightWidth = columnModel.getDisplayedColumnsRightWidth();
          var totalWidth = printLayout ? centerWidth + leftWidth + rightWidth : centerWidth;
          this.callback(totalWidth);
        };
        __decorate$R([
          Autowired("columnModel")
        ], CenterWidthFeature2.prototype, "columnModel", void 0);
        __decorate$R([
          PostConstruct
        ], CenterWidthFeature2.prototype, "postConstruct", null);
        return CenterWidthFeature2;
      }(BeanStub)
    );
    var __decorate$S = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var MoveColumnFeature = (
      /** @class */
      function() {
        function MoveColumnFeature2(pinned, eContainer) {
          this.needToMoveLeft = false;
          this.needToMoveRight = false;
          this.pinned = pinned;
          this.eContainer = eContainer;
          this.centerContainer = !exists(pinned);
        }
        MoveColumnFeature2.prototype.init = function() {
          var _this = this;
          this.ctrlsService.whenReady(function() {
            _this.gridBodyCon = _this.ctrlsService.getGridBodyCtrl();
          });
        };
        MoveColumnFeature2.prototype.getIconName = function() {
          return this.pinned ? DragAndDropService.ICON_PINNED : DragAndDropService.ICON_MOVE;
        };
        MoveColumnFeature2.prototype.onDragEnter = function(draggingEvent) {
          var columns = draggingEvent.dragItem.columns;
          var dragCameFromToolPanel = draggingEvent.dragSource.type === exports.DragSourceType.ToolPanel;
          if (dragCameFromToolPanel) {
            this.setColumnsVisible(columns, true, "uiColumnDragged");
          } else {
            var visibleState_1 = draggingEvent.dragItem.visibleState;
            var visibleColumns = (columns || []).filter(function(column) {
              return visibleState_1[column.getId()];
            });
            this.setColumnsVisible(visibleColumns, true, "uiColumnDragged");
          }
          this.setColumnsPinned(columns, this.pinned, "uiColumnDragged");
          this.onDragging(draggingEvent, true);
        };
        MoveColumnFeature2.prototype.onDragLeave = function(draggingEvent) {
          var hideColumnOnExit = !this.gridOptionsWrapper.isSuppressDragLeaveHidesColumns() && !draggingEvent.fromNudge;
          if (hideColumnOnExit) {
            var dragItem = draggingEvent.dragSource.getDragItem();
            var columns = dragItem.columns;
            this.setColumnsVisible(columns, false, "uiColumnDragged");
          }
          this.ensureIntervalCleared();
        };
        MoveColumnFeature2.prototype.setColumnsVisible = function(columns, visible, source) {
          if (source === void 0) {
            source = "api";
          }
          if (columns) {
            var allowedCols = columns.filter(function(c) {
              return !c.getColDef().lockVisible;
            });
            this.columnModel.setColumnsVisible(allowedCols, visible, source);
          }
        };
        MoveColumnFeature2.prototype.setColumnsPinned = function(columns, pinned, source) {
          if (source === void 0) {
            source = "api";
          }
          if (columns) {
            var allowedCols = columns.filter(function(c) {
              return !c.getColDef().lockPinned;
            });
            this.columnModel.setColumnsPinned(allowedCols, pinned, source);
          }
        };
        MoveColumnFeature2.prototype.onDragStop = function() {
          this.ensureIntervalCleared();
        };
        MoveColumnFeature2.prototype.normaliseX = function(x) {
          if (this.gridOptionsWrapper.isEnableRtl()) {
            var clientWidth = this.eContainer.clientWidth;
            x = clientWidth - x;
          }
          if (this.centerContainer) {
            x += this.ctrlsService.getCenterRowContainerCtrl().getCenterViewportScrollLeft();
          }
          return x;
        };
        MoveColumnFeature2.prototype.checkCenterForScrolling = function(xAdjustedForScroll) {
          if (this.centerContainer) {
            var firstVisiblePixel = this.ctrlsService.getCenterRowContainerCtrl().getCenterViewportScrollLeft();
            var lastVisiblePixel = firstVisiblePixel + this.ctrlsService.getCenterRowContainerCtrl().getCenterWidth();
            if (this.gridOptionsWrapper.isEnableRtl()) {
              this.needToMoveRight = xAdjustedForScroll < firstVisiblePixel + 50;
              this.needToMoveLeft = xAdjustedForScroll > lastVisiblePixel - 50;
            } else {
              this.needToMoveLeft = xAdjustedForScroll < firstVisiblePixel + 50;
              this.needToMoveRight = xAdjustedForScroll > lastVisiblePixel - 50;
            }
            if (this.needToMoveLeft || this.needToMoveRight) {
              this.ensureIntervalStarted();
            } else {
              this.ensureIntervalCleared();
            }
          }
        };
        MoveColumnFeature2.prototype.onDragging = function(draggingEvent, fromEnter) {
          var _this = this;
          if (fromEnter === void 0) {
            fromEnter = false;
          }
          this.lastDraggingEvent = draggingEvent;
          if (missing(draggingEvent.hDirection)) {
            return;
          }
          var mouseXNormalised = this.normaliseX(draggingEvent.x);
          if (!fromEnter) {
            this.checkCenterForScrolling(mouseXNormalised);
          }
          var hDirectionNormalised = this.normaliseDirection(draggingEvent.hDirection);
          var dragSourceType = draggingEvent.dragSource.type;
          var columnsToMove = draggingEvent.dragSource.getDragItem().columns;
          columnsToMove = columnsToMove.filter(function(col) {
            if (col.getColDef().lockPinned) {
              return col.getPinned() == _this.pinned;
            }
            return true;
          });
          this.attemptMoveColumns(dragSourceType, columnsToMove, hDirectionNormalised, mouseXNormalised, fromEnter);
        };
        MoveColumnFeature2.prototype.normaliseDirection = function(hDirection) {
          if (this.gridOptionsWrapper.isEnableRtl()) {
            switch (hDirection) {
              case exports.HorizontalDirection.Left:
                return exports.HorizontalDirection.Right;
              case exports.HorizontalDirection.Right:
                return exports.HorizontalDirection.Left;
              default:
                console.error("AG Grid: Unknown direction " + hDirection);
            }
          } else {
            return hDirection;
          }
        };
        MoveColumnFeature2.prototype.calculateOldIndex = function(movingCols) {
          var gridCols = this.columnModel.getAllGridColumns();
          var indexes = sortNumerically(movingCols.map(function(col) {
            return gridCols.indexOf(col);
          }));
          var firstIndex = indexes[0];
          var lastIndex = last(indexes);
          var spread = lastIndex - firstIndex;
          var gapsExist = spread !== indexes.length - 1;
          return gapsExist ? null : firstIndex;
        };
        MoveColumnFeature2.prototype.attemptMoveColumns = function(dragSourceType, allMovingColumns, hDirection, mouseX, fromEnter) {
          var draggingLeft = hDirection === exports.HorizontalDirection.Left;
          var draggingRight = hDirection === exports.HorizontalDirection.Right;
          var allMovingColumnsOrdered = allMovingColumns.slice();
          this.columnModel.sortColumnsLikeGridColumns(allMovingColumnsOrdered);
          var validMoves = this.calculateValidMoves(allMovingColumnsOrdered, draggingRight, mouseX);
          var oldIndex = this.calculateOldIndex(allMovingColumnsOrdered);
          if (validMoves.length === 0) {
            return;
          }
          var firstValidMove = validMoves[0];
          var constrainDirection = oldIndex !== null && !fromEnter;
          if (dragSourceType == exports.DragSourceType.HeaderCell) {
            constrainDirection = oldIndex !== null;
          }
          if (constrainDirection) {
            if (draggingLeft && firstValidMove >= oldIndex) {
              return;
            }
            if (draggingRight && firstValidMove <= oldIndex) {
              return;
            }
          }
          for (var i = 0; i < validMoves.length; i++) {
            var move = validMoves[i];
            if (!this.columnModel.doesMovePassRules(allMovingColumnsOrdered, move)) {
              continue;
            }
            this.columnModel.moveColumns(allMovingColumnsOrdered, move, "uiColumnDragged");
            return;
          }
        };
        MoveColumnFeature2.prototype.calculateValidMoves = function(movingCols, draggingRight, mouseX) {
          var isMoveBlocked = this.gridOptionsWrapper.isSuppressMovableColumns() || movingCols.some(function(col2) {
            return col2.getColDef().suppressMovable;
          });
          if (isMoveBlocked) {
            return [];
          }
          var allDisplayedCols = this.columnModel.getDisplayedColumns(this.pinned);
          var allGridCols = this.columnModel.getAllGridColumns();
          var movingDisplayedCols = allDisplayedCols.filter(function(col2) {
            return includes(movingCols, col2);
          });
          var otherDisplayedCols = allDisplayedCols.filter(function(col2) {
            return !includes(movingCols, col2);
          });
          var otherGridCols = allGridCols.filter(function(col2) {
            return !includes(movingCols, col2);
          });
          var displayIndex = 0;
          var availableWidth = mouseX;
          if (draggingRight) {
            var widthOfMovingDisplayedCols_1 = 0;
            movingDisplayedCols.forEach(function(col2) {
              return widthOfMovingDisplayedCols_1 += col2.getActualWidth();
            });
            availableWidth -= widthOfMovingDisplayedCols_1;
          }
          if (availableWidth > 0) {
            for (var i = 0; i < otherDisplayedCols.length; i++) {
              var col = otherDisplayedCols[i];
              availableWidth -= col.getActualWidth();
              if (availableWidth < 0) {
                break;
              }
              displayIndex++;
            }
            if (draggingRight) {
              displayIndex++;
            }
          }
          var firstValidMove;
          if (displayIndex > 0) {
            var leftColumn = otherDisplayedCols[displayIndex - 1];
            firstValidMove = otherGridCols.indexOf(leftColumn) + 1;
          } else {
            firstValidMove = otherGridCols.indexOf(otherDisplayedCols[0]);
            if (firstValidMove === -1) {
              firstValidMove = 0;
            }
          }
          var validMoves = [firstValidMove];
          var numberComparator = function(a, b) {
            return a - b;
          };
          if (draggingRight) {
            var pointer = firstValidMove + 1;
            var lastIndex = allGridCols.length - 1;
            while (pointer <= lastIndex) {
              validMoves.push(pointer);
              pointer++;
            }
            validMoves.sort(numberComparator);
          } else {
            var pointer = firstValidMove;
            var lastIndex = allGridCols.length - 1;
            var displacedCol = allGridCols[pointer];
            while (pointer <= lastIndex && this.isColumnHidden(allDisplayedCols, displacedCol)) {
              pointer++;
              validMoves.push(pointer);
              displacedCol = allGridCols[pointer];
            }
            pointer = firstValidMove - 1;
            var firstDisplayIndex = 0;
            while (pointer >= firstDisplayIndex) {
              validMoves.push(pointer);
              pointer--;
            }
            validMoves.sort(numberComparator).reverse();
          }
          return validMoves;
        };
        MoveColumnFeature2.prototype.isColumnHidden = function(displayedColumns, col) {
          return displayedColumns.indexOf(col) < 0;
        };
        MoveColumnFeature2.prototype.ensureIntervalStarted = function() {
          if (!this.movingIntervalId) {
            this.intervalCount = 0;
            this.failedMoveAttempts = 0;
            this.movingIntervalId = window.setInterval(this.moveInterval.bind(this), 100);
            if (this.needToMoveLeft) {
              this.dragAndDropService.setGhostIcon(DragAndDropService.ICON_LEFT, true);
            } else {
              this.dragAndDropService.setGhostIcon(DragAndDropService.ICON_RIGHT, true);
            }
          }
        };
        MoveColumnFeature2.prototype.ensureIntervalCleared = function() {
          if (this.movingIntervalId) {
            window.clearInterval(this.movingIntervalId);
            this.movingIntervalId = null;
            this.dragAndDropService.setGhostIcon(DragAndDropService.ICON_MOVE);
          }
        };
        MoveColumnFeature2.prototype.moveInterval = function() {
          var pixelsToMove;
          this.intervalCount++;
          pixelsToMove = 10 + this.intervalCount * 5;
          if (pixelsToMove > 100) {
            pixelsToMove = 100;
          }
          var pixelsMoved = null;
          var scrollFeature = this.gridBodyCon.getScrollFeature();
          if (this.needToMoveLeft) {
            pixelsMoved = scrollFeature.scrollHorizontally(-pixelsToMove);
          } else if (this.needToMoveRight) {
            pixelsMoved = scrollFeature.scrollHorizontally(pixelsToMove);
          }
          if (pixelsMoved !== 0) {
            this.onDragging(this.lastDraggingEvent);
            this.failedMoveAttempts = 0;
          } else {
            this.failedMoveAttempts++;
            var columns = this.lastDraggingEvent.dragItem.columns;
            var columnsThatCanPin = columns.filter(function(c) {
              return !c.getColDef().lockPinned;
            });
            if (columnsThatCanPin.length > 0) {
              this.dragAndDropService.setGhostIcon(DragAndDropService.ICON_PINNED);
              if (this.failedMoveAttempts > 7) {
                var pinType = this.needToMoveLeft ? Constants.PINNED_LEFT : Constants.PINNED_RIGHT;
                this.setColumnsPinned(columnsThatCanPin, pinType, "uiColumnDragged");
                this.dragAndDropService.nudge();
              }
            }
          }
        };
        __decorate$S([
          Autowired("columnModel")
        ], MoveColumnFeature2.prototype, "columnModel", void 0);
        __decorate$S([
          Autowired("dragAndDropService")
        ], MoveColumnFeature2.prototype, "dragAndDropService", void 0);
        __decorate$S([
          Autowired("gridOptionsWrapper")
        ], MoveColumnFeature2.prototype, "gridOptionsWrapper", void 0);
        __decorate$S([
          Autowired("ctrlsService")
        ], MoveColumnFeature2.prototype, "ctrlsService", void 0);
        __decorate$S([
          PostConstruct
        ], MoveColumnFeature2.prototype, "init", null);
        return MoveColumnFeature2;
      }()
    );
    var __decorate$T = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var BodyDropPivotTarget = (
      /** @class */
      function() {
        function BodyDropPivotTarget2(pinned) {
          this.columnsToAggregate = [];
          this.columnsToGroup = [];
          this.columnsToPivot = [];
          this.pinned = pinned;
        }
        BodyDropPivotTarget2.prototype.onDragEnter = function(draggingEvent) {
          var _this = this;
          this.clearColumnsList();
          if (this.gridOptionsWrapper.isFunctionsReadOnly()) {
            return;
          }
          var dragColumns = draggingEvent.dragItem.columns;
          if (!dragColumns) {
            return;
          }
          dragColumns.forEach(function(column) {
            if (!column.isPrimary()) {
              return;
            }
            if (column.isAnyFunctionActive()) {
              return;
            }
            if (column.isAllowValue()) {
              _this.columnsToAggregate.push(column);
            } else if (column.isAllowRowGroup()) {
              _this.columnsToGroup.push(column);
            } else if (column.isAllowPivot()) {
              _this.columnsToPivot.push(column);
            }
          });
        };
        BodyDropPivotTarget2.prototype.getIconName = function() {
          var totalColumns = this.columnsToAggregate.length + this.columnsToGroup.length + this.columnsToPivot.length;
          if (totalColumns > 0) {
            return this.pinned ? DragAndDropService.ICON_PINNED : DragAndDropService.ICON_MOVE;
          }
          return null;
        };
        BodyDropPivotTarget2.prototype.onDragLeave = function(draggingEvent) {
          this.clearColumnsList();
        };
        BodyDropPivotTarget2.prototype.clearColumnsList = function() {
          this.columnsToAggregate.length = 0;
          this.columnsToGroup.length = 0;
          this.columnsToPivot.length = 0;
        };
        BodyDropPivotTarget2.prototype.onDragging = function(draggingEvent) {
        };
        BodyDropPivotTarget2.prototype.onDragStop = function(draggingEvent) {
          if (this.columnsToAggregate.length > 0) {
            this.columnModel.addValueColumns(this.columnsToAggregate, "toolPanelDragAndDrop");
          }
          if (this.columnsToGroup.length > 0) {
            this.columnModel.addRowGroupColumns(this.columnsToGroup, "toolPanelDragAndDrop");
          }
          if (this.columnsToPivot.length > 0) {
            this.columnModel.addPivotColumns(this.columnsToPivot, "toolPanelDragAndDrop");
          }
        };
        __decorate$T([
          Autowired("columnModel")
        ], BodyDropPivotTarget2.prototype, "columnModel", void 0);
        __decorate$T([
          Autowired("gridOptionsWrapper")
        ], BodyDropPivotTarget2.prototype, "gridOptionsWrapper", void 0);
        return BodyDropPivotTarget2;
      }()
    );
    var __extends$12 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$U = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var BodyDropTarget = (
      /** @class */
      function(_super) {
        __extends$12(BodyDropTarget2, _super);
        function BodyDropTarget2(pinned, eContainer) {
          var _this = _super.call(this) || this;
          _this.pinned = pinned;
          _this.eContainer = eContainer;
          return _this;
        }
        BodyDropTarget2.prototype.postConstruct = function() {
          var _this = this;
          this.ctrlsService.whenReady(function(p) {
            switch (_this.pinned) {
              case Constants.PINNED_LEFT:
                _this.eSecondaryContainers = [
                  [p.gridBodyCtrl.getBodyViewportElement(), p.leftRowContainerCtrl.getContainerElement()],
                  [p.bottomLeftRowContainerCtrl.getContainerElement()],
                  [p.topLeftRowContainerCtrl.getContainerElement()]
                ];
                break;
              case Constants.PINNED_RIGHT:
                _this.eSecondaryContainers = [
                  [p.gridBodyCtrl.getBodyViewportElement(), p.rightRowContainerCtrl.getContainerElement()],
                  [p.bottomRightRowContainerCtrl.getContainerElement()],
                  [p.topRightRowContainerCtrl.getContainerElement()]
                ];
                break;
              default:
                _this.eSecondaryContainers = [
                  [p.gridBodyCtrl.getBodyViewportElement(), p.centerRowContainerCtrl.getViewportElement()],
                  [p.bottomCenterRowContainerCtrl.getViewportElement()],
                  [p.topCenterRowContainerCtrl.getViewportElement()]
                ];
                break;
            }
          });
        };
        BodyDropTarget2.prototype.isInterestedIn = function(type) {
          return type === exports.DragSourceType.HeaderCell || type === exports.DragSourceType.ToolPanel && this.gridOptionsWrapper.isAllowDragFromColumnsToolPanel();
        };
        BodyDropTarget2.prototype.getSecondaryContainers = function() {
          return this.eSecondaryContainers;
        };
        BodyDropTarget2.prototype.getContainer = function() {
          return this.eContainer;
        };
        BodyDropTarget2.prototype.init = function() {
          this.moveColumnFeature = this.createManagedBean(new MoveColumnFeature(this.pinned, this.eContainer));
          this.bodyDropPivotTarget = this.createManagedBean(new BodyDropPivotTarget(this.pinned));
          this.dragAndDropService.addDropTarget(this);
        };
        BodyDropTarget2.prototype.getIconName = function() {
          return this.currentDropListener.getIconName();
        };
        BodyDropTarget2.prototype.isDropColumnInPivotMode = function(draggingEvent) {
          return this.columnModel.isPivotMode() && draggingEvent.dragSource.type === exports.DragSourceType.ToolPanel;
        };
        BodyDropTarget2.prototype.onDragEnter = function(draggingEvent) {
          this.currentDropListener = this.isDropColumnInPivotMode(draggingEvent) ? this.bodyDropPivotTarget : this.moveColumnFeature;
          this.currentDropListener.onDragEnter(draggingEvent);
        };
        BodyDropTarget2.prototype.onDragLeave = function(params) {
          this.currentDropListener.onDragLeave(params);
        };
        BodyDropTarget2.prototype.onDragging = function(params) {
          this.currentDropListener.onDragging(params);
        };
        BodyDropTarget2.prototype.onDragStop = function(params) {
          this.currentDropListener.onDragStop(params);
        };
        __decorate$U([
          Autowired("dragAndDropService")
        ], BodyDropTarget2.prototype, "dragAndDropService", void 0);
        __decorate$U([
          Autowired("columnModel")
        ], BodyDropTarget2.prototype, "columnModel", void 0);
        __decorate$U([
          Autowired("ctrlsService")
        ], BodyDropTarget2.prototype, "ctrlsService", void 0);
        __decorate$U([
          PostConstruct
        ], BodyDropTarget2.prototype, "postConstruct", null);
        __decorate$U([
          PostConstruct
        ], BodyDropTarget2.prototype, "init", null);
        return BodyDropTarget2;
      }(BeanStub)
    );
    var __extends$13 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$V = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var instanceIdSequence$3 = 0;
    var AbstractHeaderCellCtrl = (
      /** @class */
      function(_super) {
        __extends$13(AbstractHeaderCellCtrl2, _super);
        function AbstractHeaderCellCtrl2(columnGroupChild, parentRowCtrl) {
          var _this = _super.call(this) || this;
          _this.lastFocusEvent = null;
          _this.columnGroupChild = columnGroupChild;
          _this.parentRowCtrl = parentRowCtrl;
          _this.instanceId = columnGroupChild.getUniqueId() + "-" + instanceIdSequence$3++;
          return _this;
        }
        AbstractHeaderCellCtrl2.prototype.shouldStopEventPropagation = function(e) {
          var _a2 = this.focusService.getFocusedHeader(), headerRowIndex = _a2.headerRowIndex, column = _a2.column;
          return isUserSuppressingHeaderKeyboardEvent(this.gridOptionsWrapper, e, headerRowIndex, column);
        };
        AbstractHeaderCellCtrl2.prototype.setGui = function(eGui) {
          this.eGui = eGui;
          this.addDomData();
        };
        AbstractHeaderCellCtrl2.prototype.addDomData = function() {
          var _this = this;
          var key = AbstractHeaderCellCtrl2.DOM_DATA_KEY_HEADER_CTRL;
          this.gridOptionsWrapper.setDomData(this.eGui, key, this);
          this.addDestroyFunc(function() {
            return _this.gridOptionsWrapper.setDomData(_this.eGui, key, null);
          });
        };
        AbstractHeaderCellCtrl2.prototype.focus = function(event) {
          if (!this.eGui) {
            return false;
          }
          this.lastFocusEvent = event || null;
          this.eGui.focus();
          return true;
        };
        AbstractHeaderCellCtrl2.prototype.getRowIndex = function() {
          return this.parentRowCtrl.getRowIndex();
        };
        AbstractHeaderCellCtrl2.prototype.getParentRowCtrl = function() {
          return this.parentRowCtrl;
        };
        AbstractHeaderCellCtrl2.prototype.getPinned = function() {
          return this.parentRowCtrl.getPinned();
        };
        AbstractHeaderCellCtrl2.prototype.getInstanceId = function() {
          return this.instanceId;
        };
        AbstractHeaderCellCtrl2.prototype.getColumnGroupChild = function() {
          return this.columnGroupChild;
        };
        AbstractHeaderCellCtrl2.DOM_DATA_KEY_HEADER_CTRL = "headerCtrl";
        __decorate$V([
          Autowired("focusService")
        ], AbstractHeaderCellCtrl2.prototype, "focusService", void 0);
        return AbstractHeaderCellCtrl2;
      }(BeanStub)
    );
    var FloatingFilterMapper = (
      /** @class */
      function() {
        function FloatingFilterMapper2() {
        }
        FloatingFilterMapper2.getFloatingFilterType = function(filterType) {
          return this.filterToFloatingFilterMapping[filterType];
        };
        FloatingFilterMapper2.filterToFloatingFilterMapping = {
          set: "agSetColumnFloatingFilter",
          agSetColumnFilter: "agSetColumnFloatingFilter",
          multi: "agMultiColumnFloatingFilter",
          agMultiColumnFilter: "agMultiColumnFloatingFilter",
          number: "agNumberColumnFloatingFilter",
          agNumberColumnFilter: "agNumberColumnFloatingFilter",
          date: "agDateColumnFloatingFilter",
          agDateColumnFilter: "agDateColumnFloatingFilter",
          text: "agTextColumnFloatingFilter",
          agTextColumnFilter: "agTextColumnFloatingFilter"
        };
        return FloatingFilterMapper2;
      }()
    );
    var __extends$14 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$W = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var SetLeftFeature = (
      /** @class */
      function(_super) {
        __extends$14(SetLeftFeature2, _super);
        function SetLeftFeature2(columnOrGroup, eCell, beans, colsSpanning) {
          var _this = _super.call(this) || this;
          _this.columnOrGroup = columnOrGroup;
          _this.eCell = eCell;
          _this.ariaEl = _this.eCell.querySelector("[role=columnheader]") || _this.eCell;
          _this.colsSpanning = colsSpanning;
          _this.beans = beans;
          return _this;
        }
        SetLeftFeature2.prototype.setColsSpanning = function(colsSpanning) {
          this.colsSpanning = colsSpanning;
          this.onLeftChanged();
        };
        SetLeftFeature2.prototype.getColumnOrGroup = function() {
          if (this.beans.gridOptionsWrapper.isEnableRtl() && this.colsSpanning) {
            return last(this.colsSpanning);
          }
          return this.columnOrGroup;
        };
        SetLeftFeature2.prototype.postConstruct = function() {
          this.addManagedListener(this.columnOrGroup, Column.EVENT_LEFT_CHANGED, this.onLeftChanged.bind(this));
          this.setLeftFirstTime();
          this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, this.onLeftChanged.bind(this));
          this.addManagedListener(this.beans.gridOptionsWrapper, GridOptionsWrapper.PROP_DOM_LAYOUT, this.onLeftChanged.bind(this));
        };
        SetLeftFeature2.prototype.setLeftFirstTime = function() {
          var suppressMoveAnimation = this.beans.gridOptionsWrapper.isSuppressColumnMoveAnimation();
          var oldLeftExists = exists(this.columnOrGroup.getOldLeft());
          var animateColumnMove = this.beans.columnAnimationService.isActive() && oldLeftExists && !suppressMoveAnimation;
          if (animateColumnMove) {
            this.animateInLeft();
          } else {
            this.onLeftChanged();
          }
        };
        SetLeftFeature2.prototype.animateInLeft = function() {
          var _this = this;
          var colOrGroup = this.getColumnOrGroup();
          var left = colOrGroup.getLeft();
          var oldLeft = colOrGroup.getOldLeft();
          var oldActualLeft = this.modifyLeftForPrintLayout(colOrGroup, oldLeft);
          var actualLeft = this.modifyLeftForPrintLayout(colOrGroup, left);
          this.setLeft(oldActualLeft);
          this.actualLeft = actualLeft;
          this.beans.columnAnimationService.executeNextVMTurn(function() {
            if (_this.actualLeft === actualLeft) {
              _this.setLeft(actualLeft);
            }
          });
        };
        SetLeftFeature2.prototype.onLeftChanged = function() {
          var colOrGroup = this.getColumnOrGroup();
          var left = colOrGroup.getLeft();
          this.actualLeft = this.modifyLeftForPrintLayout(colOrGroup, left);
          this.setLeft(this.actualLeft);
        };
        SetLeftFeature2.prototype.modifyLeftForPrintLayout = function(colOrGroup, leftPosition) {
          var printLayout = this.beans.gridOptionsWrapper.getDomLayout() === Constants.DOM_LAYOUT_PRINT;
          if (!printLayout) {
            return leftPosition;
          }
          if (colOrGroup.getPinned() === Constants.PINNED_LEFT) {
            return leftPosition;
          }
          var leftWidth = this.beans.columnModel.getDisplayedColumnsLeftWidth();
          if (colOrGroup.getPinned() === Constants.PINNED_RIGHT) {
            var bodyWidth = this.beans.columnModel.getBodyContainerWidth();
            return leftWidth + bodyWidth + leftPosition;
          }
          return leftWidth + leftPosition;
        };
        SetLeftFeature2.prototype.setLeft = function(value) {
          if (exists(value)) {
            this.eCell.style.left = value + "px";
          }
          var indexColumn;
          if (this.columnOrGroup instanceof Column) {
            indexColumn = this.columnOrGroup;
          } else {
            var columnGroup = this.columnOrGroup;
            var children = columnGroup.getLeafColumns();
            if (!children.length) {
              return;
            }
            if (children.length > 1) {
              setAriaColSpan(this.ariaEl, children.length);
            }
            indexColumn = children[0];
          }
          var index = this.beans.columnModel.getAriaColumnIndex(indexColumn);
          setAriaColIndex(this.ariaEl, index);
        };
        __decorate$W([
          PostConstruct
        ], SetLeftFeature2.prototype, "postConstruct", null);
        return SetLeftFeature2;
      }(BeanStub)
    );
    var __extends$15 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$X = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var HoverFeature = (
      /** @class */
      function(_super) {
        __extends$15(HoverFeature2, _super);
        function HoverFeature2(columns, element) {
          var _this = _super.call(this) || this;
          _this.columns = columns;
          _this.element = element;
          return _this;
        }
        HoverFeature2.prototype.postConstruct = function() {
          if (this.gridOptionsWrapper.isColumnHoverHighlight()) {
            this.addMouseHoverListeners();
          }
        };
        HoverFeature2.prototype.addMouseHoverListeners = function() {
          this.addManagedListener(this.element, "mouseout", this.onMouseOut.bind(this));
          this.addManagedListener(this.element, "mouseover", this.onMouseOver.bind(this));
        };
        HoverFeature2.prototype.onMouseOut = function() {
          this.columnHoverService.clearMouseOver();
        };
        HoverFeature2.prototype.onMouseOver = function() {
          this.columnHoverService.setMouseOver(this.columns);
        };
        __decorate$X([
          Autowired("columnHoverService")
        ], HoverFeature2.prototype, "columnHoverService", void 0);
        __decorate$X([
          PostConstruct
        ], HoverFeature2.prototype, "postConstruct", null);
        return HoverFeature2;
      }(BeanStub)
    );
    var __extends$16 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$Y = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var HeaderFilterCellCtrl = (
      /** @class */
      function(_super) {
        __extends$16(HeaderFilterCellCtrl2, _super);
        function HeaderFilterCellCtrl2(column, parentRowCtrl) {
          var _this = _super.call(this, column, parentRowCtrl) || this;
          _this.column = column;
          return _this;
        }
        HeaderFilterCellCtrl2.prototype.setComp = function(comp, eGui, eButtonShowMainFilter, eFloatingFilterBody) {
          _super.prototype.setGui.call(this, eGui);
          this.comp = comp;
          this.eButtonShowMainFilter = eButtonShowMainFilter;
          this.eFloatingFilterBody = eFloatingFilterBody;
          var colDef = this.column.getColDef();
          this.active = (!!colDef.filter || !!colDef.filterFramework) && !!colDef.floatingFilter;
          this.setupWidth();
          this.setupLeft();
          this.setupHover();
          this.setupFocus();
          this.setupUserComp();
          this.setupSyncWithFilter();
          this.setupUi();
          this.addManagedListener(this.eButtonShowMainFilter, "click", this.showParentFilter.bind(this));
        };
        HeaderFilterCellCtrl2.prototype.setupUi = function() {
          this.comp.addOrRemoveButtonWrapperCssClass("ag-hidden", !this.active || this.suppressFilterButton);
          if (!this.active) {
            return;
          }
          this.comp.addOrRemoveBodyCssClass("ag-floating-filter-full-body", this.suppressFilterButton);
          this.comp.addOrRemoveBodyCssClass("ag-floating-filter-body", !this.suppressFilterButton);
          var eMenuIcon = createIconNoSpan("filter", this.gridOptionsWrapper, this.column);
          if (eMenuIcon) {
            this.eButtonShowMainFilter.appendChild(eMenuIcon);
          }
        };
        HeaderFilterCellCtrl2.prototype.setupFocus = function() {
          this.createManagedBean(new ManagedFocusFeature(this.eGui, {
            shouldStopEventPropagation: this.shouldStopEventPropagation.bind(this),
            onTabKeyDown: this.onTabKeyDown.bind(this),
            handleKeyDown: this.handleKeyDown.bind(this),
            onFocusIn: this.onFocusIn.bind(this)
          }));
        };
        HeaderFilterCellCtrl2.prototype.onTabKeyDown = function(e) {
          var activeEl = document.activeElement;
          var wrapperHasFocus = activeEl === this.eGui;
          if (wrapperHasFocus) {
            return;
          }
          var nextFocusableEl = this.focusService.findNextFocusableElement(this.eGui, null, e.shiftKey);
          if (nextFocusableEl) {
            e.preventDefault();
            nextFocusableEl.focus();
          }
        };
        HeaderFilterCellCtrl2.prototype.handleKeyDown = function(e) {
          var activeEl = document.activeElement;
          var wrapperHasFocus = activeEl === this.eGui;
          switch (e.keyCode) {
            case KeyCode.UP:
            case KeyCode.DOWN:
              if (!wrapperHasFocus) {
                e.preventDefault();
              }
            case KeyCode.LEFT:
            case KeyCode.RIGHT:
              if (wrapperHasFocus) {
                return;
              }
              e.stopPropagation();
            case KeyCode.ENTER:
              if (wrapperHasFocus) {
                if (this.focusService.focusInto(this.eGui)) {
                  e.preventDefault();
                }
              }
              break;
            case KeyCode.ESCAPE:
              if (!wrapperHasFocus) {
                this.eGui.focus();
              }
          }
        };
        HeaderFilterCellCtrl2.prototype.onFocusIn = function(e) {
          var isRelatedWithin = this.eGui.contains(e.relatedTarget);
          if (isRelatedWithin) {
            return;
          }
          var keyboardMode = this.focusService.isKeyboardMode();
          var notFromHeaderWrapper = !!e.relatedTarget && !containsClass(e.relatedTarget, "ag-floating-filter");
          var fromWithinHeader = !!e.relatedTarget && isElementChildOfClass(e.relatedTarget, "ag-floating-filter");
          if (keyboardMode && notFromHeaderWrapper && fromWithinHeader && e.target === this.eGui) {
            var lastFocusEvent = this.lastFocusEvent;
            var fromTab = !!(lastFocusEvent && lastFocusEvent.keyCode === KeyCode.TAB);
            if (lastFocusEvent && fromTab) {
              var currentFocusedHeader = this.beans.focusService.getFocusedHeader();
              var nextColumn = this.beans.columnModel.getDisplayedColAfter(this.column);
              var fromNextColumn = currentFocusedHeader && nextColumn === currentFocusedHeader.column;
              var shouldFocusLast = !!(keyboardMode && lastFocusEvent.shiftKey && fromNextColumn);
              this.focusService.focusInto(this.eGui, shouldFocusLast);
            }
          }
          var rowIndex = this.getRowIndex();
          this.beans.focusService.setFocusedHeader(rowIndex, this.column);
        };
        HeaderFilterCellCtrl2.prototype.setupHover = function() {
          var _this = this;
          this.createManagedBean(new HoverFeature([this.column], this.eGui));
          var listener = function() {
            if (!_this.gridOptionsWrapper.isColumnHoverHighlight()) {
              return;
            }
            var hovered = _this.columnHoverService.isHovered(_this.column);
            _this.comp.addOrRemoveCssClass("ag-column-hover", hovered);
          };
          this.addManagedListener(this.eventService, Events.EVENT_COLUMN_HOVER_CHANGED, listener);
          listener();
        };
        HeaderFilterCellCtrl2.prototype.setupLeft = function() {
          var setLeftFeature = new SetLeftFeature(this.column, this.eGui, this.beans);
          this.createManagedBean(setLeftFeature);
        };
        HeaderFilterCellCtrl2.prototype.setupUserComp = function() {
          if (!this.active) {
            return;
          }
          var colDef = this.column.getColDef();
          var filterParams = this.filterManager.createFilterParams(this.column, colDef);
          var finalFilterParams = this.userComponentFactory.mergeParamsWithApplicationProvidedParams(colDef, "filter", filterParams);
          var defaultFloatingFilterType = HeaderFilterCellCtrl2.getDefaultFloatingFilterType(colDef);
          if (defaultFloatingFilterType == null) {
            defaultFloatingFilterType = "agReadOnlyFloatingFilter";
          }
          var params = {
            api: this.gridApi,
            column: this.column,
            filterParams: finalFilterParams,
            currentParentModel: this.currentParentModel.bind(this),
            parentFilterInstance: this.parentFilterInstance.bind(this),
            showParentFilter: this.showParentFilter.bind(this),
            onFloatingFilterChanged: this.onFloatingFilterChanged.bind(this),
            suppressFilterButton: false
            // This one might be overridden from the colDef
          };
          this.suppressFilterButton = colDef.floatingFilterComponentParams ? !!colDef.floatingFilterComponentParams.suppressFilterButton : false;
          var compDetails = this.userComponentFactory.getFloatingFilterCompDetails(colDef, params, defaultFloatingFilterType);
          if (compDetails) {
            this.comp.setCompDetails(compDetails);
          }
        };
        HeaderFilterCellCtrl2.getDefaultFloatingFilterType = function(def) {
          if (def == null) {
            return null;
          }
          var defaultFloatingFilterType = null;
          if (typeof def.filter === "string") {
            defaultFloatingFilterType = FloatingFilterMapper.getFloatingFilterType(def.filter);
          } else if (def.filterFramework)
            ;
          else if (def.filter === true) {
            var setFilterModuleLoaded = ModuleRegistry.isRegistered(exports.ModuleNames.SetFilterModule);
            defaultFloatingFilterType = setFilterModuleLoaded ? "agSetColumnFloatingFilter" : "agTextColumnFloatingFilter";
          }
          return defaultFloatingFilterType;
        };
        HeaderFilterCellCtrl2.prototype.currentParentModel = function() {
          var filterComponent = this.getFilterComponent(false);
          return filterComponent ? filterComponent.resolveNow(null, function(filter2) {
            return filter2 && filter2.getModel();
          }) : null;
        };
        HeaderFilterCellCtrl2.prototype.getFilterComponent = function(createIfDoesNotExist) {
          if (createIfDoesNotExist === void 0) {
            createIfDoesNotExist = true;
          }
          return this.filterManager.getFilterComponent(this.column, "NO_UI", createIfDoesNotExist);
        };
        HeaderFilterCellCtrl2.prototype.onFloatingFilterChanged = function() {
          console.warn("AG Grid: since version 21.x, how floating filters are implemented has changed. Instead of calling params.onFloatingFilterChanged(), get a reference to the main filter via params.parentFilterInstance() and then set a value on the parent filter directly.");
        };
        HeaderFilterCellCtrl2.prototype.parentFilterInstance = function(callback) {
          var _this = this;
          var filterComponent = this.getFilterComponent();
          if (filterComponent) {
            filterComponent.then(function(instance) {
              var instanceUnwrapped = _this.frameworkComponentWrapper ? _this.frameworkComponentWrapper.unwrap(instance) : instance;
              callback(instanceUnwrapped);
            });
          }
        };
        HeaderFilterCellCtrl2.prototype.showParentFilter = function() {
          var eventSource = this.suppressFilterButton ? this.eFloatingFilterBody : this.eButtonShowMainFilter;
          this.menuFactory.showMenuAfterButtonClick(this.column, eventSource, "floatingFilter", "filterMenuTab", ["filterMenuTab"]);
        };
        HeaderFilterCellCtrl2.prototype.setupSyncWithFilter = function() {
          var _this = this;
          if (!this.active) {
            return;
          }
          var syncWithFilter = function(filterChangedEvent) {
            var compPromise = _this.comp.getFloatingFilterComp();
            if (!compPromise) {
              return;
            }
            var parentModel = _this.currentParentModel();
            compPromise.then(function(comp) {
              return comp && comp.onParentModelChanged(parentModel, filterChangedEvent);
            });
          };
          this.addManagedListener(this.column, Column.EVENT_FILTER_CHANGED, syncWithFilter);
          if (this.filterManager.isFilterActive(this.column)) {
            syncWithFilter(null);
          }
        };
        HeaderFilterCellCtrl2.prototype.setupWidth = function() {
          var _this = this;
          var listener = function() {
            var width = _this.column.getActualWidth() + "px";
            _this.comp.setWidth(width);
          };
          this.addManagedListener(this.column, Column.EVENT_WIDTH_CHANGED, listener);
          listener();
        };
        __decorate$Y([
          Autowired("userComponentFactory")
        ], HeaderFilterCellCtrl2.prototype, "userComponentFactory", void 0);
        __decorate$Y([
          Autowired("filterManager")
        ], HeaderFilterCellCtrl2.prototype, "filterManager", void 0);
        __decorate$Y([
          Autowired("columnHoverService")
        ], HeaderFilterCellCtrl2.prototype, "columnHoverService", void 0);
        __decorate$Y([
          Autowired("gridApi")
        ], HeaderFilterCellCtrl2.prototype, "gridApi", void 0);
        __decorate$Y([
          Autowired("menuFactory")
        ], HeaderFilterCellCtrl2.prototype, "menuFactory", void 0);
        __decorate$Y([
          Autowired("beans")
        ], HeaderFilterCellCtrl2.prototype, "beans", void 0);
        __decorate$Y([
          Optional("frameworkComponentWrapper")
        ], HeaderFilterCellCtrl2.prototype, "frameworkComponentWrapper", void 0);
        return HeaderFilterCellCtrl2;
      }(AbstractHeaderCellCtrl)
    );
    var CssClassApplier = (
      /** @class */
      function() {
        function CssClassApplier2() {
        }
        CssClassApplier2.getHeaderClassesFromColDef = function(abstractColDef, gridOptionsWrapper, column, columnGroup) {
          if (missing(abstractColDef)) {
            return [];
          }
          return this.getColumnClassesFromCollDef(abstractColDef.headerClass, abstractColDef, gridOptionsWrapper, column, columnGroup);
        };
        CssClassApplier2.getToolPanelClassesFromColDef = function(abstractColDef, gridOptionsWrapper, column, columnGroup) {
          if (missing(abstractColDef)) {
            return [];
          }
          return this.getColumnClassesFromCollDef(abstractColDef.toolPanelClass, abstractColDef, gridOptionsWrapper, column, columnGroup);
        };
        CssClassApplier2.getColumnClassesFromCollDef = function(classesOrFunc, abstractColDef, gridOptionsWrapper, column, columnGroup) {
          if (missing(classesOrFunc)) {
            return [];
          }
          var classToUse;
          if (typeof classesOrFunc === "function") {
            var params = {
              // bad naming, as colDef here can be a group or a column,
              // however most people won't appreciate the difference,
              // so keeping it as colDef to avoid confusion.
              colDef: abstractColDef,
              column,
              columnGroup,
              context: gridOptionsWrapper.getContext(),
              api: gridOptionsWrapper.getApi()
            };
            classToUse = classesOrFunc(params);
          } else {
            classToUse = classesOrFunc;
          }
          if (typeof classToUse === "string") {
            return [classToUse];
          } else if (Array.isArray(classToUse)) {
            return classToUse;
          } else {
            return [];
          }
        };
        return CssClassApplier2;
      }()
    );
    var __extends$17 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$Z = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var ResizeFeature = (
      /** @class */
      function(_super) {
        __extends$17(ResizeFeature2, _super);
        function ResizeFeature2(pinned, column, eResize, comp, ctrl) {
          var _this = _super.call(this) || this;
          _this.pinned = pinned;
          _this.column = column;
          _this.eResize = eResize;
          _this.comp = comp;
          _this.ctrl = ctrl;
          return _this;
        }
        ResizeFeature2.prototype.postConstruct = function() {
          var _this = this;
          var colDef = this.column.getColDef();
          var destroyResizeFuncs = [];
          var canResize;
          var canAutosize;
          var addResize = function() {
            setDisplayed(_this.eResize, canResize);
            if (!canResize) {
              return;
            }
            var finishedWithResizeFunc = _this.horizontalResizeService.addResizeBar({
              eResizeBar: _this.eResize,
              onResizeStart: _this.onResizeStart.bind(_this),
              onResizing: _this.onResizing.bind(_this, false),
              onResizeEnd: _this.onResizing.bind(_this, true)
            });
            destroyResizeFuncs.push(finishedWithResizeFunc);
            if (canAutosize) {
              var skipHeaderOnAutoSize_1 = _this.gridOptionsWrapper.isSkipHeaderOnAutoSize();
              var autoSizeColListener_1 = function() {
                _this.columnModel.autoSizeColumn(_this.column, skipHeaderOnAutoSize_1, "uiColumnResized");
              };
              _this.eResize.addEventListener("dblclick", autoSizeColListener_1);
              var touchListener_1 = new TouchListener(_this.eResize);
              touchListener_1.addEventListener(TouchListener.EVENT_DOUBLE_TAP, autoSizeColListener_1);
              _this.addDestroyFunc(function() {
                _this.eResize.removeEventListener("dblclick", autoSizeColListener_1);
                touchListener_1.removeEventListener(TouchListener.EVENT_DOUBLE_TAP, autoSizeColListener_1);
                touchListener_1.destroy();
              });
            }
          };
          var removeResize = function() {
            destroyResizeFuncs.forEach(function(f) {
              return f();
            });
            destroyResizeFuncs.length = 0;
          };
          var refresh = function() {
            var resize = _this.column.isResizable();
            var autoSize = !_this.gridOptionsWrapper.isSuppressAutoSize() && !colDef.suppressAutoSize;
            var propertyChange = resize !== canResize || autoSize !== canAutosize;
            if (propertyChange) {
              canResize = resize;
              canAutosize = autoSize;
              removeResize();
              addResize();
            }
          };
          refresh();
          this.addDestroyFunc(removeResize);
          this.ctrl.addRefreshFunction(refresh);
        };
        ResizeFeature2.prototype.onResizing = function(finished, resizeAmount) {
          var resizeAmountNormalised = this.normaliseResizeAmount(resizeAmount);
          var columnWidths = [{ key: this.column, newWidth: this.resizeStartWidth + resizeAmountNormalised }];
          this.columnModel.setColumnWidths(columnWidths, this.resizeWithShiftKey, finished, "uiColumnDragged");
          if (finished) {
            this.comp.addOrRemoveCssClass("ag-column-resizing", false);
          }
        };
        ResizeFeature2.prototype.onResizeStart = function(shiftKey) {
          this.resizeStartWidth = this.column.getActualWidth();
          this.resizeWithShiftKey = shiftKey;
          this.comp.addOrRemoveCssClass("ag-column-resizing", true);
        };
        ResizeFeature2.prototype.normaliseResizeAmount = function(dragChange) {
          var result = dragChange;
          var notPinningLeft = this.pinned !== Constants.PINNED_LEFT;
          var pinningRight = this.pinned === Constants.PINNED_RIGHT;
          if (this.gridOptionsWrapper.isEnableRtl()) {
            if (notPinningLeft) {
              result *= -1;
            }
          } else {
            if (pinningRight) {
              result *= -1;
            }
          }
          return result;
        };
        __decorate$Z([
          Autowired("horizontalResizeService")
        ], ResizeFeature2.prototype, "horizontalResizeService", void 0);
        __decorate$Z([
          Autowired("columnModel")
        ], ResizeFeature2.prototype, "columnModel", void 0);
        __decorate$Z([
          PostConstruct
        ], ResizeFeature2.prototype, "postConstruct", null);
        return ResizeFeature2;
      }(BeanStub)
    );
    var __extends$18 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var AgCheckbox = (
      /** @class */
      function(_super) {
        __extends$18(AgCheckbox2, _super);
        function AgCheckbox2(config, className, inputType) {
          if (className === void 0) {
            className = "ag-checkbox";
          }
          if (inputType === void 0) {
            inputType = "checkbox";
          }
          var _this = _super.call(this, config, className, inputType) || this;
          _this.labelAlignment = "right";
          _this.selected = false;
          _this.readOnly = false;
          _this.passive = false;
          return _this;
        }
        AgCheckbox2.prototype.addInputListeners = function() {
          this.addManagedListener(this.eInput, "click", this.onCheckboxClick.bind(this));
          this.addManagedListener(this.eLabel, "click", this.toggle.bind(this));
        };
        AgCheckbox2.prototype.getNextValue = function() {
          return this.selected === void 0 ? true : !this.selected;
        };
        AgCheckbox2.prototype.setPassive = function(passive) {
          this.passive = passive;
        };
        AgCheckbox2.prototype.isReadOnly = function() {
          return this.readOnly;
        };
        AgCheckbox2.prototype.setReadOnly = function(readOnly) {
          addOrRemoveCssClass(this.eWrapper, "ag-disabled", readOnly);
          this.eInput.disabled = readOnly;
          this.readOnly = readOnly;
        };
        AgCheckbox2.prototype.setDisabled = function(disabled) {
          addOrRemoveCssClass(this.eWrapper, "ag-disabled", disabled);
          return _super.prototype.setDisabled.call(this, disabled);
        };
        AgCheckbox2.prototype.toggle = function() {
          if (this.eInput.disabled) {
            return;
          }
          var previousValue = this.isSelected();
          var nextValue = this.getNextValue();
          if (this.passive) {
            this.dispatchChange(nextValue, previousValue);
          } else {
            this.setValue(nextValue);
          }
        };
        AgCheckbox2.prototype.getValue = function() {
          return this.isSelected();
        };
        AgCheckbox2.prototype.setValue = function(value, silent) {
          this.refreshSelectedClass(value);
          this.setSelected(value, silent);
          return this;
        };
        AgCheckbox2.prototype.setName = function(name) {
          var input = this.getInputElement();
          input.name = name;
          return this;
        };
        AgCheckbox2.prototype.isSelected = function() {
          return this.selected;
        };
        AgCheckbox2.prototype.setSelected = function(selected, silent) {
          if (this.isSelected() === selected) {
            return;
          }
          this.previousValue = this.isSelected();
          selected = this.selected = typeof selected === "boolean" ? selected : void 0;
          this.eInput.checked = selected;
          this.eInput.indeterminate = selected === void 0;
          if (!silent) {
            this.dispatchChange(this.selected, this.previousValue);
          }
        };
        AgCheckbox2.prototype.dispatchChange = function(selected, previousValue, event) {
          this.dispatchEvent({ type: AgCheckbox2.EVENT_CHANGED, selected, previousValue, event });
          var input = this.getInputElement();
          var checkboxChangedEvent = {
            type: Events.EVENT_CHECKBOX_CHANGED,
            id: input.id,
            name: input.name,
            selected,
            previousValue
          };
          this.eventService.dispatchEvent(checkboxChangedEvent);
        };
        AgCheckbox2.prototype.onCheckboxClick = function(e) {
          if (this.passive || this.eInput.disabled) {
            return;
          }
          var previousValue = this.isSelected();
          var selected = this.selected = e.target.checked;
          this.refreshSelectedClass(selected);
          this.dispatchChange(selected, previousValue, e);
        };
        AgCheckbox2.prototype.refreshSelectedClass = function(value) {
          addOrRemoveCssClass(this.eWrapper, "ag-checked", value === true);
          addOrRemoveCssClass(this.eWrapper, "ag-indeterminate", value == null);
        };
        return AgCheckbox2;
      }(AgAbstractInputField)
    );
    var __extends$19 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$_ = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var SelectAllFeature = (
      /** @class */
      function(_super) {
        __extends$19(SelectAllFeature2, _super);
        function SelectAllFeature2(column) {
          var _this = _super.call(this) || this;
          _this.cbSelectAllVisible = false;
          _this.processingEventFromCheckbox = false;
          _this.column = column;
          var colDef = column.getColDef();
          _this.filteredOnly = colDef ? !!colDef.headerCheckboxSelectionFilteredOnly : false;
          return _this;
        }
        SelectAllFeature2.prototype.onSpaceKeyPressed = function(e) {
          var checkbox = this.cbSelectAll;
          if (checkbox.isDisplayed() && !checkbox.getGui().contains(document.activeElement)) {
            e.preventDefault();
            checkbox.setValue(!checkbox.getValue());
          }
        };
        SelectAllFeature2.prototype.getCheckboxGui = function() {
          return this.cbSelectAll.getGui();
        };
        SelectAllFeature2.prototype.setComp = function(comp) {
          this.comp = comp;
          this.cbSelectAll = this.createManagedBean(new AgCheckbox());
          this.cbSelectAll.addCssClass("ag-header-select-all");
          setAriaRole(this.cbSelectAll.getGui(), "presentation");
          this.showOrHideSelectAll();
          this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, this.showOrHideSelectAll.bind(this));
          this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.showOrHideSelectAll.bind(this));
          this.addManagedListener(this.eventService, Events.EVENT_SELECTION_CHANGED, this.onSelectionChanged.bind(this));
          this.addManagedListener(this.eventService, Events.EVENT_MODEL_UPDATED, this.onModelChanged.bind(this));
          this.addManagedListener(this.cbSelectAll, AgCheckbox.EVENT_CHANGED, this.onCbSelectAll.bind(this));
          this.cbSelectAll.getInputElement().setAttribute("tabindex", "-1");
          this.refreshSelectAllLabel();
        };
        SelectAllFeature2.prototype.showOrHideSelectAll = function() {
          this.cbSelectAllVisible = this.isCheckboxSelection();
          this.cbSelectAll.setDisplayed(this.cbSelectAllVisible);
          if (this.cbSelectAllVisible) {
            this.checkRightRowModelType();
            this.updateStateOfCheckbox();
          }
          this.refreshHeaderAriaDescribedBy(this.cbSelectAllVisible);
        };
        SelectAllFeature2.prototype.refreshHeaderAriaDescribedBy = function(isSelectAllVisible) {
          var describedBy = isSelectAllVisible ? this.cbSelectAll.getInputElement().id : void 0;
          this.comp.setAriaDescribedBy(describedBy);
        };
        SelectAllFeature2.prototype.onModelChanged = function() {
          if (!this.cbSelectAllVisible) {
            return;
          }
          this.updateStateOfCheckbox();
        };
        SelectAllFeature2.prototype.onSelectionChanged = function() {
          if (!this.cbSelectAllVisible) {
            return;
          }
          this.updateStateOfCheckbox();
        };
        SelectAllFeature2.prototype.getNextCheckboxState = function(selectionCount) {
          if (selectionCount.selected === 0 && selectionCount.notSelected === 0) {
            return false;
          }
          if (selectionCount.selected > 0 && selectionCount.notSelected > 0) {
            return null;
          }
          if (selectionCount.selected > 0) {
            return true;
          }
          return false;
        };
        SelectAllFeature2.prototype.updateStateOfCheckbox = function() {
          if (this.processingEventFromCheckbox) {
            return;
          }
          this.processingEventFromCheckbox = true;
          var selectionCount = this.getSelectionCount();
          var allSelected = this.getNextCheckboxState(selectionCount);
          this.cbSelectAll.setValue(allSelected);
          this.refreshSelectAllLabel();
          this.processingEventFromCheckbox = false;
        };
        SelectAllFeature2.prototype.refreshSelectAllLabel = function() {
          var translate = this.gridOptionsWrapper.getLocaleTextFunc();
          var checked = this.cbSelectAll.getValue();
          var ariaStatus = checked ? translate("ariaChecked", "checked") : translate("ariaUnchecked", "unchecked");
          var ariaLabel = translate("ariaRowSelectAll", "Press Space to toggle all rows selection");
          this.cbSelectAll.setInputAriaLabel(ariaLabel + " (" + ariaStatus + ")");
        };
        SelectAllFeature2.prototype.getSelectionCount = function() {
          var _this = this;
          var selectedCount = 0;
          var notSelectedCount = 0;
          var callback = function(node) {
            if (_this.gridOptionsWrapper.isGroupSelectsChildren() && node.group) {
              return;
            }
            if (node.isSelected()) {
              selectedCount++;
            } else if (!node.selectable)
              ;
            else {
              notSelectedCount++;
            }
          };
          if (this.filteredOnly) {
            this.gridApi.forEachNodeAfterFilter(callback);
          } else {
            this.gridApi.forEachNode(callback);
          }
          return {
            notSelected: notSelectedCount,
            selected: selectedCount
          };
        };
        SelectAllFeature2.prototype.checkRightRowModelType = function() {
          var rowModelType = this.rowModel.getType();
          var rowModelMatches = rowModelType === Constants.ROW_MODEL_TYPE_CLIENT_SIDE;
          if (!rowModelMatches) {
            console.warn("AG Grid: selectAllCheckbox is only available if using normal row model, you are using " + rowModelType);
          }
        };
        SelectAllFeature2.prototype.onCbSelectAll = function() {
          if (this.processingEventFromCheckbox) {
            return;
          }
          if (!this.cbSelectAllVisible) {
            return;
          }
          var value = this.cbSelectAll.getValue();
          if (value) {
            this.selectionService.selectAllRowNodes(this.filteredOnly);
          } else {
            this.selectionService.deselectAllRowNodes(this.filteredOnly);
          }
        };
        SelectAllFeature2.prototype.isCheckboxSelection = function() {
          var result = this.column.getColDef().headerCheckboxSelection;
          if (typeof result === "function") {
            var func = result;
            result = func({
              column: this.column,
              colDef: this.column.getColDef(),
              columnApi: this.columnApi,
              api: this.gridApi
            });
          }
          if (result) {
            if (this.gridOptionsWrapper.isRowModelServerSide()) {
              console.warn("headerCheckboxSelection is not supported for Server Side Row Model");
              return false;
            }
            if (this.gridOptionsWrapper.isRowModelInfinite()) {
              console.warn("headerCheckboxSelection is not supported for Infinite Row Model");
              return false;
            }
            if (this.gridOptionsWrapper.isRowModelViewport()) {
              console.warn("headerCheckboxSelection is not supported for Viewport Row Model");
              return false;
            }
            return true;
          }
          return false;
        };
        __decorate$_([
          Autowired("gridApi")
        ], SelectAllFeature2.prototype, "gridApi", void 0);
        __decorate$_([
          Autowired("columnApi")
        ], SelectAllFeature2.prototype, "columnApi", void 0);
        __decorate$_([
          Autowired("rowModel")
        ], SelectAllFeature2.prototype, "rowModel", void 0);
        __decorate$_([
          Autowired("selectionService")
        ], SelectAllFeature2.prototype, "selectionService", void 0);
        return SelectAllFeature2;
      }(BeanStub)
    );
    var __extends$1a = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$$ = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var HeaderCellCtrl = (
      /** @class */
      function(_super) {
        __extends$1a(HeaderCellCtrl2, _super);
        function HeaderCellCtrl2(column, parentRowCtrl) {
          var _this = _super.call(this, column, parentRowCtrl) || this;
          _this.refreshFunctions = [];
          _this.userHeaderClasses = /* @__PURE__ */ new Set();
          _this.column = column;
          return _this;
        }
        HeaderCellCtrl2.prototype.setComp = function(comp, eGui, eResize) {
          var _this = this;
          _super.prototype.setGui.call(this, eGui);
          this.comp = comp;
          this.colDefVersion = this.columnModel.getColDefVersion();
          this.updateState();
          this.setupWidth();
          this.setupMovingCss();
          this.setupMenuClass();
          this.setupSortableClass();
          this.addColumnHoverListener();
          this.setupFilterCss();
          this.setupColId();
          this.setupClassesFromColDef();
          this.setupTooltip();
          this.addActiveHeaderMouseListeners();
          this.setupSelectAll();
          this.setupUserComp();
          this.createManagedBean(new ResizeFeature(this.getPinned(), this.column, eResize, comp, this));
          this.createManagedBean(new HoverFeature([this.column], eGui));
          this.createManagedBean(new SetLeftFeature(this.column, eGui, this.beans));
          this.createManagedBean(new ManagedFocusFeature(eGui, {
            shouldStopEventPropagation: function(e) {
              return _this.shouldStopEventPropagation(e);
            },
            onTabKeyDown: function() {
              return null;
            },
            handleKeyDown: this.handleKeyDown.bind(this),
            onFocusIn: this.onFocusIn.bind(this),
            onFocusOut: this.onFocusOut.bind(this)
          }));
          this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, this.onNewColumnsLoaded.bind(this));
          this.addManagedListener(this.eventService, Events.EVENT_COLUMN_VALUE_CHANGED, this.onColumnValueChanged.bind(this));
          this.addManagedListener(this.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.onColumnRowGroupChanged.bind(this));
          this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_CHANGED, this.onColumnPivotChanged.bind(this));
        };
        HeaderCellCtrl2.prototype.setupUserComp = function() {
          var compDetails = this.lookupUserCompDetails();
          this.setCompDetails(compDetails);
        };
        HeaderCellCtrl2.prototype.setCompDetails = function(compDetails) {
          this.userCompDetails = compDetails;
          this.comp.setUserCompDetails(compDetails);
        };
        HeaderCellCtrl2.prototype.lookupUserCompDetails = function() {
          var params = this.createParams();
          var colDef = this.column.getColDef();
          return this.userComponentFactory.getHeaderCompDetails(colDef, params);
        };
        HeaderCellCtrl2.prototype.createParams = function() {
          var _this = this;
          var colDef = this.column.getColDef();
          var params = {
            column: this.column,
            displayName: this.displayName,
            enableSorting: colDef.sortable,
            enableMenu: this.menuEnabled,
            showColumnMenu: function(source) {
              _this.gridApi.showColumnMenuAfterButtonClick(_this.column, source);
            },
            progressSort: function(multiSort) {
              _this.sortController.progressSort(_this.column, !!multiSort, "uiColumnSorted");
            },
            setSort: function(sort, multiSort) {
              _this.sortController.setSortForColumn(_this.column, sort, !!multiSort, "uiColumnSorted");
            },
            api: this.gridApi,
            columnApi: this.columnApi,
            context: this.gridOptionsWrapper.getContext(),
            eGridHeader: this.getGui()
          };
          return params;
        };
        HeaderCellCtrl2.prototype.setupSelectAll = function() {
          this.selectAllFeature = this.createManagedBean(new SelectAllFeature(this.column));
          this.selectAllFeature.setComp(this.comp);
        };
        HeaderCellCtrl2.prototype.getSelectAllGui = function() {
          return this.selectAllFeature.getCheckboxGui();
        };
        HeaderCellCtrl2.prototype.handleKeyDown = function(e) {
          if (e.keyCode === KeyCode.SPACE) {
            this.selectAllFeature.onSpaceKeyPressed(e);
          }
          if (e.keyCode === KeyCode.ENTER) {
            this.onEnterKeyPressed(e);
          }
        };
        HeaderCellCtrl2.prototype.onEnterKeyPressed = function(e) {
          var headerComp = this.comp.getUserCompInstance();
          if (!headerComp) {
            return;
          }
          if (e.ctrlKey || e.metaKey) {
            if (this.menuEnabled && headerComp.showMenu) {
              e.preventDefault();
              headerComp.showMenu();
            }
          } else if (this.sortable) {
            var multiSort = e.shiftKey;
            this.sortController.progressSort(this.column, multiSort, "uiColumnSorted");
          }
        };
        HeaderCellCtrl2.prototype.isMenuEnabled = function() {
          return this.menuEnabled;
        };
        HeaderCellCtrl2.prototype.onFocusIn = function(e) {
          if (!this.getGui().contains(e.relatedTarget)) {
            var rowIndex = this.getRowIndex();
            this.focusService.setFocusedHeader(rowIndex, this.column);
          }
          this.setActiveHeader(true);
        };
        HeaderCellCtrl2.prototype.onFocusOut = function(e) {
          if (this.getGui().contains(e.relatedTarget)) {
            return;
          }
          this.setActiveHeader(false);
        };
        HeaderCellCtrl2.prototype.setupTooltip = function() {
          var _this = this;
          var tooltipCtrl = {
            getColumn: function() {
              return _this.column;
            },
            getColDef: function() {
              return _this.column.getColDef();
            },
            getGui: function() {
              return _this.eGui;
            },
            getLocation: function() {
              return "header";
            },
            getTooltipValue: function() {
              var res = _this.column.getColDef().headerTooltip;
              return res;
            }
          };
          var tooltipFeature = this.createManagedBean(new TooltipFeature(tooltipCtrl, this.beans));
          tooltipFeature.setComp(this.comp);
          this.refreshFunctions.push(function() {
            return tooltipFeature.refreshToolTip();
          });
        };
        HeaderCellCtrl2.prototype.setupClassesFromColDef = function() {
          var _this = this;
          var refreshHeaderClasses = function() {
            var colDef = _this.column.getColDef();
            var goa = _this.gridOptionsWrapper;
            var classes = CssClassApplier.getHeaderClassesFromColDef(colDef, goa, _this.column, null);
            var oldClasses = _this.userHeaderClasses;
            _this.userHeaderClasses = new Set(classes);
            classes.forEach(function(c) {
              if (oldClasses.has(c)) {
                oldClasses.delete(c);
              } else {
                _this.comp.addOrRemoveCssClass(c, true);
              }
            });
            oldClasses.forEach(function(c) {
              return _this.comp.addOrRemoveCssClass(c, false);
            });
          };
          this.refreshFunctions.push(refreshHeaderClasses);
          refreshHeaderClasses();
        };
        HeaderCellCtrl2.prototype.getGui = function() {
          return this.eGui;
        };
        HeaderCellCtrl2.prototype.setDragSource = function(eSource) {
          var _this = this;
          this.dragSourceElement = eSource;
          this.removeDragSource();
          if (!eSource) {
            return;
          }
          if (!this.draggable) {
            return;
          }
          this.moveDragSource = {
            type: exports.DragSourceType.HeaderCell,
            eElement: eSource,
            defaultIconName: DragAndDropService.ICON_HIDE,
            getDragItem: function() {
              return _this.createDragItem();
            },
            dragItemName: this.displayName,
            onDragStarted: function() {
              return _this.column.setMoving(true, "uiColumnMoved");
            },
            onDragStopped: function() {
              return _this.column.setMoving(false, "uiColumnMoved");
            }
          };
          this.dragAndDropService.addDragSource(this.moveDragSource, true);
        };
        HeaderCellCtrl2.prototype.createDragItem = function() {
          var visibleState = {};
          visibleState[this.column.getId()] = this.column.isVisible();
          return {
            columns: [this.column],
            visibleState
          };
        };
        HeaderCellCtrl2.prototype.removeDragSource = function() {
          if (this.moveDragSource) {
            this.dragAndDropService.removeDragSource(this.moveDragSource);
            this.moveDragSource = void 0;
          }
        };
        HeaderCellCtrl2.prototype.onNewColumnsLoaded = function() {
          var colDefVersionNow = this.columnModel.getColDefVersion();
          if (colDefVersionNow != this.colDefVersion) {
            this.colDefVersion = colDefVersionNow;
            this.refresh();
          }
        };
        HeaderCellCtrl2.prototype.updateState = function() {
          var colDef = this.column.getColDef();
          this.menuEnabled = this.menuFactory.isMenuEnabled(this.column) && !colDef.suppressMenu;
          this.sortable = colDef.sortable;
          this.displayName = this.calculateDisplayName();
          this.draggable = this.workOutDraggable();
        };
        HeaderCellCtrl2.prototype.addRefreshFunction = function(func) {
          this.refreshFunctions.push(func);
        };
        HeaderCellCtrl2.prototype.refresh = function() {
          this.updateState();
          this.refreshHeaderComp();
          this.refreshFunctions.forEach(function(f) {
            return f();
          });
        };
        HeaderCellCtrl2.prototype.refreshHeaderComp = function() {
          var newCompDetails = this.lookupUserCompDetails();
          var compInstance = this.comp.getUserCompInstance();
          var attemptRefresh = compInstance != null && this.userCompDetails.componentClass == newCompDetails.componentClass;
          var headerCompRefreshed = attemptRefresh ? this.attemptHeaderCompRefresh(newCompDetails.params) : false;
          if (headerCompRefreshed) {
            this.setDragSource(this.dragSourceElement);
          } else {
            this.setCompDetails(newCompDetails);
          }
        };
        HeaderCellCtrl2.prototype.attemptHeaderCompRefresh = function(params) {
          var headerComp = this.comp.getUserCompInstance();
          if (!headerComp) {
            return false;
          }
          if (!headerComp.refresh) {
            return false;
          }
          var res = headerComp.refresh(params);
          return res;
        };
        HeaderCellCtrl2.prototype.calculateDisplayName = function() {
          return this.columnModel.getDisplayNameForColumn(this.column, "header", true);
        };
        HeaderCellCtrl2.prototype.checkDisplayName = function() {
          if (this.displayName !== this.calculateDisplayName()) {
            this.refresh();
          }
        };
        HeaderCellCtrl2.prototype.workOutDraggable = function() {
          var colDef = this.column.getColDef();
          var isSuppressMovableColumns = this.gridOptionsWrapper.isSuppressMovableColumns();
          var colCanMove = !isSuppressMovableColumns && !colDef.suppressMovable && !colDef.lockPosition;
          return !!colCanMove || !!colDef.enableRowGroup || !!colDef.enablePivot;
        };
        HeaderCellCtrl2.prototype.onColumnRowGroupChanged = function() {
          this.checkDisplayName();
        };
        HeaderCellCtrl2.prototype.onColumnPivotChanged = function() {
          this.checkDisplayName();
        };
        HeaderCellCtrl2.prototype.onColumnValueChanged = function() {
          this.checkDisplayName();
        };
        HeaderCellCtrl2.prototype.setupWidth = function() {
          var _this = this;
          var listener = function() {
            _this.comp.setWidth(_this.column.getActualWidth() + "px");
          };
          this.addManagedListener(this.column, Column.EVENT_WIDTH_CHANGED, listener);
          listener();
        };
        HeaderCellCtrl2.prototype.setupMovingCss = function() {
          var _this = this;
          var listener = function() {
            _this.comp.addOrRemoveCssClass("ag-header-cell-moving", _this.column.isMoving());
          };
          this.addManagedListener(this.column, Column.EVENT_MOVING_CHANGED, listener);
          listener();
        };
        HeaderCellCtrl2.prototype.setupMenuClass = function() {
          var _this = this;
          var listener = function() {
            _this.comp.addOrRemoveCssClass("ag-column-menu-visible", _this.column.isMenuVisible());
          };
          this.addManagedListener(this.column, Column.EVENT_MENU_VISIBLE_CHANGED, listener);
          listener();
        };
        HeaderCellCtrl2.prototype.setupSortableClass = function() {
          var _this = this;
          var updateSortableCssClass = function() {
            _this.comp.addOrRemoveCssClass("ag-header-cell-sortable", !!_this.sortable);
          };
          var updateAriaSort = function() {
            if (_this.sortable) {
              _this.comp.setAriaSort(getAriaSortState(_this.column));
            } else {
              _this.comp.setAriaSort(void 0);
            }
          };
          updateSortableCssClass();
          updateAriaSort();
          this.addRefreshFunction(updateSortableCssClass);
          this.addRefreshFunction(updateAriaSort);
          this.addManagedListener(this.column, Column.EVENT_SORT_CHANGED, updateAriaSort);
        };
        HeaderCellCtrl2.prototype.addColumnHoverListener = function() {
          var _this = this;
          var listener = function() {
            if (!_this.gridOptionsWrapper.isColumnHoverHighlight()) {
              return;
            }
            var isHovered = _this.columnHoverService.isHovered(_this.column);
            _this.comp.addOrRemoveCssClass("ag-column-hover", isHovered);
          };
          this.addManagedListener(this.eventService, Events.EVENT_COLUMN_HOVER_CHANGED, listener);
          listener();
        };
        HeaderCellCtrl2.prototype.setupFilterCss = function() {
          var _this = this;
          var listener = function() {
            _this.comp.addOrRemoveCssClass("ag-header-cell-filtered", _this.column.isFilterActive());
          };
          this.addManagedListener(this.column, Column.EVENT_FILTER_ACTIVE_CHANGED, listener);
          listener();
        };
        HeaderCellCtrl2.prototype.setupColId = function() {
          this.comp.setColId(this.column.getColId());
        };
        HeaderCellCtrl2.prototype.addActiveHeaderMouseListeners = function() {
          var _this = this;
          var listener = function(e) {
            return _this.setActiveHeader(e.type === "mouseenter");
          };
          this.addManagedListener(this.getGui(), "mouseenter", listener);
          this.addManagedListener(this.getGui(), "mouseleave", listener);
        };
        HeaderCellCtrl2.prototype.setActiveHeader = function(active) {
          this.comp.addOrRemoveCssClass("ag-header-active", active);
        };
        __decorate$$([
          Autowired("columnModel")
        ], HeaderCellCtrl2.prototype, "columnModel", void 0);
        __decorate$$([
          Autowired("columnHoverService")
        ], HeaderCellCtrl2.prototype, "columnHoverService", void 0);
        __decorate$$([
          Autowired("beans")
        ], HeaderCellCtrl2.prototype, "beans", void 0);
        __decorate$$([
          Autowired("sortController")
        ], HeaderCellCtrl2.prototype, "sortController", void 0);
        __decorate$$([
          Autowired("menuFactory")
        ], HeaderCellCtrl2.prototype, "menuFactory", void 0);
        __decorate$$([
          Autowired("dragAndDropService")
        ], HeaderCellCtrl2.prototype, "dragAndDropService", void 0);
        __decorate$$([
          Autowired("gridApi")
        ], HeaderCellCtrl2.prototype, "gridApi", void 0);
        __decorate$$([
          Autowired("columnApi")
        ], HeaderCellCtrl2.prototype, "columnApi", void 0);
        __decorate$$([
          Autowired("userComponentFactory")
        ], HeaderCellCtrl2.prototype, "userComponentFactory", void 0);
        __decorate$$([
          PreDestroy
        ], HeaderCellCtrl2.prototype, "removeDragSource", null);
        return HeaderCellCtrl2;
      }(AbstractHeaderCellCtrl)
    );
    var __extends$1b = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$10 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var GroupResizeFeature = (
      /** @class */
      function(_super) {
        __extends$1b(GroupResizeFeature2, _super);
        function GroupResizeFeature2(comp, eResize, pinned, columnGroup) {
          var _this = _super.call(this) || this;
          _this.eResize = eResize;
          _this.comp = comp;
          _this.pinned = pinned;
          _this.columnGroup = columnGroup;
          return _this;
        }
        GroupResizeFeature2.prototype.postConstruct = function() {
          var _this = this;
          if (!this.columnGroup.isResizable()) {
            this.comp.addOrRemoveResizableCssClass("ag-hidden", true);
            return;
          }
          var finishedWithResizeFunc = this.horizontalResizeService.addResizeBar({
            eResizeBar: this.eResize,
            onResizeStart: this.onResizeStart.bind(this),
            onResizing: this.onResizing.bind(this, false),
            onResizeEnd: this.onResizing.bind(this, true)
          });
          this.addDestroyFunc(finishedWithResizeFunc);
          if (!this.gridOptionsWrapper.isSuppressAutoSize()) {
            var skipHeaderOnAutoSize_1 = this.gridOptionsWrapper.isSkipHeaderOnAutoSize();
            this.eResize.addEventListener("dblclick", function(event) {
              var keys2 = [];
              _this.columnGroup.getDisplayedLeafColumns().forEach(function(column) {
                if (!column.getColDef().suppressAutoSize) {
                  keys2.push(column.getColId());
                }
              });
              if (keys2.length > 0) {
                _this.columnModel.autoSizeColumns(keys2, skipHeaderOnAutoSize_1, "uiColumnResized");
              }
            });
          }
        };
        GroupResizeFeature2.prototype.onResizeStart = function(shiftKey) {
          var _this = this;
          var leafCols = this.columnGroup.getDisplayedLeafColumns();
          this.resizeCols = leafCols.filter(function(col) {
            return col.isResizable();
          });
          this.resizeStartWidth = 0;
          this.resizeCols.forEach(function(col) {
            return _this.resizeStartWidth += col.getActualWidth();
          });
          this.resizeRatios = [];
          this.resizeCols.forEach(function(col) {
            return _this.resizeRatios.push(col.getActualWidth() / _this.resizeStartWidth);
          });
          var takeFromGroup = null;
          if (shiftKey) {
            takeFromGroup = this.columnModel.getDisplayedGroupAfter(this.columnGroup);
          }
          if (takeFromGroup) {
            var takeFromLeafCols = takeFromGroup.getDisplayedLeafColumns();
            this.resizeTakeFromCols = takeFromLeafCols.filter(function(col) {
              return col.isResizable();
            });
            this.resizeTakeFromStartWidth = 0;
            this.resizeTakeFromCols.forEach(function(col) {
              return _this.resizeTakeFromStartWidth += col.getActualWidth();
            });
            this.resizeTakeFromRatios = [];
            this.resizeTakeFromCols.forEach(function(col) {
              return _this.resizeTakeFromRatios.push(col.getActualWidth() / _this.resizeTakeFromStartWidth);
            });
          } else {
            this.resizeTakeFromCols = null;
            this.resizeTakeFromStartWidth = null;
            this.resizeTakeFromRatios = null;
          }
          this.comp.addOrRemoveCssClass("ag-column-resizing", true);
        };
        GroupResizeFeature2.prototype.onResizing = function(finished, resizeAmount) {
          var resizeSets = [];
          var resizeAmountNormalised = this.normaliseDragChange(resizeAmount);
          resizeSets.push({
            columns: this.resizeCols,
            ratios: this.resizeRatios,
            width: this.resizeStartWidth + resizeAmountNormalised
          });
          if (this.resizeTakeFromCols) {
            resizeSets.push({
              columns: this.resizeTakeFromCols,
              ratios: this.resizeTakeFromRatios,
              width: this.resizeTakeFromStartWidth - resizeAmountNormalised
            });
          }
          this.columnModel.resizeColumnSets(resizeSets, finished, "uiColumnDragged");
          if (finished) {
            this.comp.addOrRemoveCssClass("ag-column-resizing", false);
          }
        };
        GroupResizeFeature2.prototype.normaliseDragChange = function(dragChange) {
          var result = dragChange;
          if (this.gridOptionsWrapper.isEnableRtl()) {
            if (this.pinned !== Constants.PINNED_LEFT) {
              result *= -1;
            }
          } else if (this.pinned === Constants.PINNED_RIGHT) {
            result *= -1;
          }
          return result;
        };
        __decorate$10([
          Autowired("horizontalResizeService")
        ], GroupResizeFeature2.prototype, "horizontalResizeService", void 0);
        __decorate$10([
          Autowired("columnModel")
        ], GroupResizeFeature2.prototype, "columnModel", void 0);
        __decorate$10([
          PostConstruct
        ], GroupResizeFeature2.prototype, "postConstruct", null);
        return GroupResizeFeature2;
      }(BeanStub)
    );
    var __extends$1c = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$11 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var GroupWidthFeature = (
      /** @class */
      function(_super) {
        __extends$1c(GroupWidthFeature2, _super);
        function GroupWidthFeature2(comp, columnGroup) {
          var _this = _super.call(this) || this;
          _this.removeChildListenersFuncs = [];
          _this.columnGroup = columnGroup;
          _this.comp = comp;
          return _this;
        }
        GroupWidthFeature2.prototype.postConstruct = function() {
          this.addListenersToChildrenColumns();
          this.addManagedListener(this.columnGroup, ColumnGroup.EVENT_DISPLAYED_CHILDREN_CHANGED, this.onDisplayedChildrenChanged.bind(this));
          this.onWidthChanged();
          this.addDestroyFunc(this.removeListenersOnChildrenColumns.bind(this));
        };
        GroupWidthFeature2.prototype.addListenersToChildrenColumns = function() {
          var _this = this;
          this.removeListenersOnChildrenColumns();
          var widthChangedListener = this.onWidthChanged.bind(this);
          this.columnGroup.getLeafColumns().forEach(function(column) {
            column.addEventListener(Column.EVENT_WIDTH_CHANGED, widthChangedListener);
            column.addEventListener(Column.EVENT_VISIBLE_CHANGED, widthChangedListener);
            _this.removeChildListenersFuncs.push(function() {
              column.removeEventListener(Column.EVENT_WIDTH_CHANGED, widthChangedListener);
              column.removeEventListener(Column.EVENT_VISIBLE_CHANGED, widthChangedListener);
            });
          });
        };
        GroupWidthFeature2.prototype.removeListenersOnChildrenColumns = function() {
          this.removeChildListenersFuncs.forEach(function(func) {
            return func();
          });
          this.removeChildListenersFuncs = [];
        };
        GroupWidthFeature2.prototype.onDisplayedChildrenChanged = function() {
          this.addListenersToChildrenColumns();
          this.onWidthChanged();
        };
        GroupWidthFeature2.prototype.onWidthChanged = function() {
          this.comp.setWidth(this.columnGroup.getActualWidth() + "px");
        };
        __decorate$11([
          PostConstruct
        ], GroupWidthFeature2.prototype, "postConstruct", null);
        return GroupWidthFeature2;
      }(BeanStub)
    );
    var __extends$1d = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$12 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var HeaderGroupCellCtrl = (
      /** @class */
      function(_super) {
        __extends$1d(HeaderGroupCellCtrl2, _super);
        function HeaderGroupCellCtrl2(columnGroup, parentRowCtrl) {
          var _this = _super.call(this, columnGroup, parentRowCtrl) || this;
          _this.columnGroup = columnGroup;
          return _this;
        }
        HeaderGroupCellCtrl2.prototype.setComp = function(comp, eGui, eResize) {
          _super.prototype.setGui.call(this, eGui);
          this.comp = comp;
          this.displayName = this.columnModel.getDisplayNameForColumnGroup(this.columnGroup, "header");
          this.addClasses();
          this.addAttributes();
          this.setupMovingCss();
          this.setupExpandable();
          this.setupTooltip();
          this.setupUserComp();
          var pinned = this.getParentRowCtrl().getPinned();
          var leafCols = this.columnGroup.getOriginalColumnGroup().getLeafColumns();
          this.createManagedBean(new HoverFeature(leafCols, eGui));
          this.createManagedBean(new SetLeftFeature(this.columnGroup, eGui, this.beans));
          this.createManagedBean(new GroupResizeFeature(comp, eResize, pinned, this.columnGroup));
          this.createManagedBean(new GroupWidthFeature(comp, this.columnGroup));
          this.createManagedBean(new ManagedFocusFeature(eGui, {
            shouldStopEventPropagation: this.shouldStopEventPropagation.bind(this),
            onTabKeyDown: function() {
              return void 0;
            },
            handleKeyDown: this.handleKeyDown.bind(this),
            onFocusIn: this.onFocusIn.bind(this)
          }));
        };
        HeaderGroupCellCtrl2.prototype.setupUserComp = function() {
          var _this = this;
          var displayName = this.displayName;
          var params = {
            displayName: this.displayName,
            columnGroup: this.columnGroup,
            setExpanded: function(expanded) {
              _this.columnModel.setColumnGroupOpened(_this.columnGroup.getOriginalColumnGroup(), expanded, "gridInitializing");
            },
            api: this.gridApi,
            columnApi: this.columnApi,
            context: this.gridOptionsWrapper.getContext()
          };
          if (!displayName) {
            var columnGroup = this.columnGroup;
            var leafCols = columnGroup.getLeafColumns();
            while (columnGroup.getParent() && columnGroup.getParent().getLeafColumns().length === leafCols.length) {
              columnGroup = columnGroup.getParent();
            }
            var colGroupDef = columnGroup.getColGroupDef();
            if (colGroupDef) {
              displayName = colGroupDef.headerName;
            }
            if (!displayName) {
              displayName = leafCols ? this.columnModel.getDisplayNameForColumn(leafCols[0], "header", true) : "";
            }
          }
          var compDetails = this.userComponentFactory.getHeaderGroupCompDetails(params);
          this.comp.setUserCompDetails(compDetails);
        };
        HeaderGroupCellCtrl2.prototype.setupTooltip = function() {
          var _this = this;
          var colGroupDef = this.columnGroup.getColGroupDef();
          var tooltipCtrl = {
            getColumn: function() {
              return _this.columnGroup;
            },
            getGui: function() {
              return _this.eGui;
            },
            getLocation: function() {
              return "headerGroup";
            },
            getTooltipValue: function() {
              return colGroupDef && colGroupDef.headerTooltip;
            }
          };
          if (colGroupDef) {
            tooltipCtrl.getColDef = function() {
              return colGroupDef;
            };
          }
          var tooltipFeature = this.createManagedBean(new TooltipFeature(tooltipCtrl, this.beans));
          tooltipFeature.setComp(this.comp);
        };
        HeaderGroupCellCtrl2.prototype.setupExpandable = function() {
          var providedColGroup = this.columnGroup.getOriginalColumnGroup();
          this.refreshExpanded();
          this.addManagedListener(providedColGroup, ProvidedColumnGroup.EVENT_EXPANDABLE_CHANGED, this.refreshExpanded.bind(this));
          this.addManagedListener(providedColGroup, ProvidedColumnGroup.EVENT_EXPANDED_CHANGED, this.refreshExpanded.bind(this));
        };
        HeaderGroupCellCtrl2.prototype.refreshExpanded = function() {
          var column = this.columnGroup;
          this.expandable = column.isExpandable();
          var expanded = column.isExpanded();
          if (this.expandable) {
            this.comp.setAriaExpanded(expanded ? "true" : "false");
          } else {
            this.comp.setAriaExpanded(void 0);
          }
        };
        HeaderGroupCellCtrl2.prototype.addAttributes = function() {
          this.comp.setColId(this.columnGroup.getUniqueId());
        };
        HeaderGroupCellCtrl2.prototype.addClasses = function() {
          var _this = this;
          var colGroupDef = this.columnGroup.getColGroupDef();
          var classes = CssClassApplier.getHeaderClassesFromColDef(colGroupDef, this.gridOptionsWrapper, null, this.columnGroup);
          classes.push(this.columnGroup.isPadding() ? "ag-header-group-cell-no-group" : "ag-header-group-cell-with-group");
          classes.forEach(function(c) {
            return _this.comp.addOrRemoveCssClass(c, true);
          });
        };
        HeaderGroupCellCtrl2.prototype.setupMovingCss = function() {
          var _this = this;
          var providedColumnGroup = this.columnGroup.getOriginalColumnGroup();
          var leafColumns = providedColumnGroup.getLeafColumns();
          var listener = function() {
            return _this.comp.addOrRemoveCssClass("ag-header-cell-moving", _this.columnGroup.isMoving());
          };
          leafColumns.forEach(function(col) {
            _this.addManagedListener(col, Column.EVENT_MOVING_CHANGED, listener);
          });
          listener();
        };
        HeaderGroupCellCtrl2.prototype.onFocusIn = function(e) {
          if (!this.eGui.contains(e.relatedTarget)) {
            var rowIndex = this.getRowIndex();
            this.beans.focusService.setFocusedHeader(rowIndex, this.columnGroup);
          }
        };
        HeaderGroupCellCtrl2.prototype.handleKeyDown = function(e) {
          var activeEl = document.activeElement;
          var wrapperHasFocus = activeEl === this.eGui;
          if (!this.expandable || !wrapperHasFocus) {
            return;
          }
          if (e.keyCode === KeyCode.ENTER) {
            var column = this.columnGroup;
            var newExpandedValue = !column.isExpanded();
            this.columnModel.setColumnGroupOpened(column.getOriginalColumnGroup(), newExpandedValue, "uiColumnExpanded");
          }
        };
        HeaderGroupCellCtrl2.prototype.setDragSource = function(eHeaderGroup) {
          var _this = this;
          if (this.isSuppressMoving()) {
            return;
          }
          var allLeafColumns = this.columnGroup.getOriginalColumnGroup().getLeafColumns();
          var dragSource = {
            type: exports.DragSourceType.HeaderCell,
            eElement: eHeaderGroup,
            defaultIconName: DragAndDropService.ICON_HIDE,
            dragItemName: this.displayName,
            // we add in the original group leaf columns, so we move both visible and non-visible items
            getDragItem: this.getDragItemForGroup.bind(this),
            onDragStarted: function() {
              return allLeafColumns.forEach(function(col) {
                return col.setMoving(true, "uiColumnDragged");
              });
            },
            onDragStopped: function() {
              return allLeafColumns.forEach(function(col) {
                return col.setMoving(false, "uiColumnDragged");
              });
            }
          };
          this.dragAndDropService.addDragSource(dragSource, true);
          this.addDestroyFunc(function() {
            return _this.dragAndDropService.removeDragSource(dragSource);
          });
        };
        HeaderGroupCellCtrl2.prototype.getDragItemForGroup = function() {
          var allColumnsOriginalOrder = this.columnGroup.getOriginalColumnGroup().getLeafColumns();
          var visibleState = {};
          allColumnsOriginalOrder.forEach(function(column) {
            return visibleState[column.getId()] = column.isVisible();
          });
          var allColumnsCurrentOrder = [];
          this.columnModel.getAllDisplayedColumns().forEach(function(column) {
            if (allColumnsOriginalOrder.indexOf(column) >= 0) {
              allColumnsCurrentOrder.push(column);
              removeFromArray(allColumnsOriginalOrder, column);
            }
          });
          allColumnsOriginalOrder.forEach(function(column) {
            return allColumnsCurrentOrder.push(column);
          });
          return {
            columns: allColumnsCurrentOrder,
            visibleState
          };
        };
        HeaderGroupCellCtrl2.prototype.isSuppressMoving = function() {
          var childSuppressesMoving = false;
          this.columnGroup.getLeafColumns().forEach(function(column) {
            if (column.getColDef().suppressMovable || column.getColDef().lockPosition) {
              childSuppressesMoving = true;
            }
          });
          var result = childSuppressesMoving || this.gridOptionsWrapper.isSuppressMovableColumns();
          return result;
        };
        __decorate$12([
          Autowired("beans")
        ], HeaderGroupCellCtrl2.prototype, "beans", void 0);
        __decorate$12([
          Autowired("columnModel")
        ], HeaderGroupCellCtrl2.prototype, "columnModel", void 0);
        __decorate$12([
          Autowired("dragAndDropService")
        ], HeaderGroupCellCtrl2.prototype, "dragAndDropService", void 0);
        __decorate$12([
          Autowired("userComponentFactory")
        ], HeaderGroupCellCtrl2.prototype, "userComponentFactory", void 0);
        __decorate$12([
          Autowired("gridApi")
        ], HeaderGroupCellCtrl2.prototype, "gridApi", void 0);
        __decorate$12([
          Autowired("columnApi")
        ], HeaderGroupCellCtrl2.prototype, "columnApi", void 0);
        return HeaderGroupCellCtrl2;
      }(AbstractHeaderCellCtrl)
    );
    var __extends$1e = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$13 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var instanceIdSequence$4 = 0;
    var HeaderRowCtrl = (
      /** @class */
      function(_super) {
        __extends$1e(HeaderRowCtrl2, _super);
        function HeaderRowCtrl2(rowIndex, pinned, type) {
          var _this = _super.call(this) || this;
          _this.instanceId = instanceIdSequence$4++;
          _this.headerCellCtrls = {};
          _this.rowIndex = rowIndex;
          _this.pinned = pinned;
          _this.type = type;
          return _this;
        }
        HeaderRowCtrl2.prototype.getInstanceId = function() {
          return this.instanceId;
        };
        HeaderRowCtrl2.prototype.setComp = function(comp) {
          this.comp = comp;
          this.onRowHeightChanged();
          this.onVirtualColumnsChanged();
          this.setWidth();
          this.addEventListeners();
          if (isBrowserSafari()) {
            this.comp.setTransform("translateZ(0)");
          }
          comp.setAriaRowIndex(this.rowIndex + 1);
        };
        HeaderRowCtrl2.prototype.addEventListeners = function() {
          this.addManagedListener(this.eventService, Events.EVENT_COLUMN_RESIZED, this.onColumnResized.bind(this));
          this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_DOM_LAYOUT, this.onDisplayedColumnsChanged.bind(this));
          this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));
          this.addManagedListener(this.eventService, Events.EVENT_VIRTUAL_COLUMNS_CHANGED, this.onVirtualColumnsChanged.bind(this));
          this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_HEADER_HEIGHT, this.onRowHeightChanged.bind(this));
          this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_PIVOT_HEADER_HEIGHT, this.onRowHeightChanged.bind(this));
          this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_GROUP_HEADER_HEIGHT, this.onRowHeightChanged.bind(this));
          this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_PIVOT_GROUP_HEADER_HEIGHT, this.onRowHeightChanged.bind(this));
          this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_FLOATING_FILTERS_HEIGHT, this.onRowHeightChanged.bind(this));
        };
        HeaderRowCtrl2.prototype.getHtmlElementForColumnHeader = function(column) {
          if (this.type != exports.HeaderRowType.COLUMN) {
            return;
          }
          var cellCtrl = find(this.headerCellCtrls, function(cellCtrl2) {
            return cellCtrl2.getColumnGroupChild() == column;
          });
          if (!cellCtrl) {
            return;
          }
          var res = cellCtrl.getGui();
          return res;
        };
        HeaderRowCtrl2.prototype.onDisplayedColumnsChanged = function() {
          this.onVirtualColumnsChanged();
          this.setWidth();
        };
        HeaderRowCtrl2.prototype.getType = function() {
          return this.type;
        };
        HeaderRowCtrl2.prototype.onColumnResized = function() {
          this.setWidth();
        };
        HeaderRowCtrl2.prototype.setWidth = function() {
          var width = this.getWidthForRow();
          this.comp.setWidth(width + "px");
        };
        HeaderRowCtrl2.prototype.getWidthForRow = function() {
          var printLayout = this.gridOptionsWrapper.getDomLayout() === Constants.DOM_LAYOUT_PRINT;
          if (printLayout) {
            var pinned = this.pinned != null;
            if (pinned) {
              return 0;
            }
            return this.columnModel.getContainerWidth(Constants.PINNED_RIGHT) + this.columnModel.getContainerWidth(Constants.PINNED_LEFT) + this.columnModel.getContainerWidth(null);
          }
          return this.columnModel.getContainerWidth(this.pinned);
        };
        HeaderRowCtrl2.prototype.onRowHeightChanged = function() {
          var headerRowCount = this.columnModel.getHeaderRowCount();
          var sizes = [];
          var numberOfFloating = 0;
          var groupHeight;
          var headerHeight;
          if (this.columnModel.isPivotMode()) {
            groupHeight = this.gridOptionsWrapper.getPivotGroupHeaderHeight();
            headerHeight = this.gridOptionsWrapper.getPivotHeaderHeight();
          } else {
            if (this.columnModel.hasFloatingFilters()) {
              headerRowCount++;
              numberOfFloating = 1;
            }
            groupHeight = this.gridOptionsWrapper.getGroupHeaderHeight();
            headerHeight = this.gridOptionsWrapper.getHeaderHeight();
          }
          var numberOfNonGroups = 1 + numberOfFloating;
          var numberOfGroups = headerRowCount - numberOfNonGroups;
          for (var i = 0; i < numberOfGroups; i++) {
            sizes.push(groupHeight);
          }
          sizes.push(headerHeight);
          for (var i = 0; i < numberOfFloating; i++) {
            sizes.push(this.gridOptionsWrapper.getFloatingFiltersHeight());
          }
          var rowHeight = 0;
          for (var i = 0; i < this.rowIndex; i++) {
            rowHeight += sizes[i];
          }
          this.comp.setTop(rowHeight + "px");
          this.comp.setHeight(sizes[this.rowIndex] + "px");
        };
        HeaderRowCtrl2.prototype.getPinned = function() {
          return this.pinned;
        };
        HeaderRowCtrl2.prototype.getRowIndex = function() {
          return this.rowIndex;
        };
        HeaderRowCtrl2.prototype.onVirtualColumnsChanged = function() {
          var _this = this;
          var oldCtrls = this.headerCellCtrls;
          this.headerCellCtrls = {};
          var columns = this.getColumnsInViewport();
          columns.forEach(function(child) {
            if (child.isEmptyGroup()) {
              return;
            }
            var idOfChild = child.getUniqueId();
            var headerCtrl = oldCtrls[idOfChild];
            delete oldCtrls[idOfChild];
            var forOldColumn = headerCtrl && headerCtrl.getColumnGroupChild() != child;
            if (forOldColumn) {
              _this.destroyBean(headerCtrl);
              headerCtrl = void 0;
            }
            if (headerCtrl == null) {
              switch (_this.type) {
                case exports.HeaderRowType.FLOATING_FILTER:
                  headerCtrl = _this.createBean(new HeaderFilterCellCtrl(child, _this));
                  break;
                case exports.HeaderRowType.COLUMN_GROUP:
                  headerCtrl = _this.createBean(new HeaderGroupCellCtrl(child, _this));
                  break;
                default:
                  headerCtrl = _this.createBean(new HeaderCellCtrl(child, _this));
                  break;
              }
            }
            _this.headerCellCtrls[idOfChild] = headerCtrl;
          });
          var isFocusedAndDisplayed = function(ctrl) {
            var isFocused = _this.focusService.isHeaderWrapperFocused(ctrl);
            if (!isFocused) {
              return false;
            }
            var isDisplayed = _this.columnModel.isDisplayed(ctrl.getColumnGroupChild());
            return isDisplayed;
          };
          iterateObject(oldCtrls, function(id, oldCtrl) {
            var keepCtrl = isFocusedAndDisplayed(oldCtrl);
            if (keepCtrl) {
              _this.headerCellCtrls[id] = oldCtrl;
            } else {
              _this.destroyBean(oldCtrl);
            }
          });
          var ctrlsToDisplay = getAllValuesInObject(this.headerCellCtrls);
          this.comp.setHeaderCtrls(ctrlsToDisplay);
        };
        HeaderRowCtrl2.prototype.getColumnsInViewport = function() {
          var printLayout = this.gridOptionsWrapper.getDomLayout() === Constants.DOM_LAYOUT_PRINT;
          return printLayout ? this.getColumnsInViewportPrintLayout() : this.getColumnsInViewportNormalLayout();
        };
        HeaderRowCtrl2.prototype.getColumnsInViewportPrintLayout = function() {
          var _this = this;
          if (this.pinned != null) {
            return [];
          }
          var viewportColumns = [];
          var actualDepth = this.getActualDepth();
          [Constants.PINNED_LEFT, null, Constants.PINNED_RIGHT].forEach(function(pinned) {
            var items = _this.columnModel.getVirtualHeaderGroupRow(pinned, actualDepth);
            viewportColumns = viewportColumns.concat(items);
          });
          return viewportColumns;
        };
        HeaderRowCtrl2.prototype.getActualDepth = function() {
          return this.type == exports.HeaderRowType.FLOATING_FILTER ? this.rowIndex - 1 : this.rowIndex;
        };
        HeaderRowCtrl2.prototype.getColumnsInViewportNormalLayout = function() {
          return this.columnModel.getVirtualHeaderGroupRow(this.pinned, this.getActualDepth());
        };
        HeaderRowCtrl2.prototype.focusHeader = function(column, event) {
          var allCtrls = getAllValuesInObject(this.headerCellCtrls);
          var ctrl = find(allCtrls, function(ctrl2) {
            return ctrl2.getColumnGroupChild() == column;
          });
          if (!ctrl) {
            return false;
          }
          ctrl.focus(event);
          return true;
        };
        __decorate$13([
          Autowired("columnModel")
        ], HeaderRowCtrl2.prototype, "columnModel", void 0);
        __decorate$13([
          Autowired("focusService")
        ], HeaderRowCtrl2.prototype, "focusService", void 0);
        return HeaderRowCtrl2;
      }(BeanStub)
    );
    var __extends$1f = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$14 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __spreadArrays$7 = function() {
      for (var s = 0, i = 0, il = arguments.length; i < il; i++)
        s += arguments[i].length;
      for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
          r[k] = a[j];
      return r;
    };
    var HeaderRowContainerCtrl = (
      /** @class */
      function(_super) {
        __extends$1f(HeaderRowContainerCtrl2, _super);
        function HeaderRowContainerCtrl2(pinned) {
          var _this = _super.call(this) || this;
          _this.groupsRowCtrls = [];
          _this.pinned = pinned;
          return _this;
        }
        HeaderRowContainerCtrl2.prototype.setComp = function(comp, eGui) {
          this.comp = comp;
          this.setupCenterWidth();
          this.setupPinnedWidth();
          this.setupDragAndDrop(eGui);
          this.addManagedListener(this.eventService, Events.EVENT_GRID_COLUMNS_CHANGED, this.onGridColumnsChanged.bind(this));
          this.ctrlsService.registerHeaderContainer(this, this.pinned);
          if (this.columnModel.isReady()) {
            this.refresh();
          }
        };
        HeaderRowContainerCtrl2.prototype.setupDragAndDrop = function(dropContainer) {
          var bodyDropTarget = new BodyDropTarget(this.pinned, dropContainer);
          this.createManagedBean(bodyDropTarget);
        };
        HeaderRowContainerCtrl2.prototype.refresh = function(keepColumns) {
          var _this = this;
          if (keepColumns === void 0) {
            keepColumns = false;
          }
          var sequence = new NumberSequence();
          var focusedHeaderPosition = this.focusService.getFocusHeaderToUseAfterRefresh();
          var refreshColumnGroups = function() {
            var groupRowCount = _this.columnModel.getHeaderRowCount() - 1;
            _this.groupsRowCtrls = _this.destroyBeans(_this.groupsRowCtrls);
            for (var i = 0; i < groupRowCount; i++) {
              var ctrl = _this.createBean(new HeaderRowCtrl(sequence.next(), _this.pinned, exports.HeaderRowType.COLUMN_GROUP));
              _this.groupsRowCtrls.push(ctrl);
            }
          };
          var refreshColumns = function() {
            var rowIndex = sequence.next();
            var needNewInstance = _this.columnsRowCtrl == null || !keepColumns || _this.columnsRowCtrl.getRowIndex() !== rowIndex;
            if (needNewInstance) {
              _this.destroyBean(_this.columnsRowCtrl);
              _this.columnsRowCtrl = _this.createBean(new HeaderRowCtrl(rowIndex, _this.pinned, exports.HeaderRowType.COLUMN));
            }
          };
          var refreshFilters = function() {
            var includeFloatingFilter = !_this.columnModel.isPivotMode() && _this.columnModel.hasFloatingFilters();
            var destroyPreviousComp = function() {
              _this.filtersRowCtrl = _this.destroyBean(_this.filtersRowCtrl);
            };
            if (!includeFloatingFilter) {
              destroyPreviousComp();
              return;
            }
            var rowIndex = sequence.next();
            if (_this.filtersRowCtrl) {
              var rowIndexMismatch = _this.filtersRowCtrl.getRowIndex() !== rowIndex;
              if (!keepColumns || rowIndexMismatch) {
                destroyPreviousComp();
              }
            }
            if (!_this.filtersRowCtrl) {
              _this.filtersRowCtrl = _this.createBean(new HeaderRowCtrl(rowIndex, _this.pinned, exports.HeaderRowType.FLOATING_FILTER));
            }
          };
          refreshColumnGroups();
          refreshColumns();
          refreshFilters();
          var allCtrls = this.getAllCtrls();
          this.comp.setCtrls(allCtrls);
          this.restoreFocusOnHeader(focusedHeaderPosition);
        };
        HeaderRowContainerCtrl2.prototype.restoreFocusOnHeader = function(position) {
          if (position == null || position.column.getPinned() != this.pinned) {
            return;
          }
          this.focusService.focusHeaderPosition({ headerPosition: position });
        };
        HeaderRowContainerCtrl2.prototype.getAllCtrls = function() {
          var res = __spreadArrays$7(this.groupsRowCtrls, [this.columnsRowCtrl]);
          if (this.filtersRowCtrl) {
            res.push(this.filtersRowCtrl);
          }
          return res;
        };
        HeaderRowContainerCtrl2.prototype.onGridColumnsChanged = function() {
          this.refresh(true);
        };
        HeaderRowContainerCtrl2.prototype.setupCenterWidth = function() {
          var _this = this;
          if (this.pinned != null) {
            return;
          }
          this.createManagedBean(new CenterWidthFeature(function(width) {
            return _this.comp.setCenterWidth(width + "px");
          }));
        };
        HeaderRowContainerCtrl2.prototype.setHorizontalScroll = function(offset) {
          this.comp.setContainerTransform("translateX(" + offset + "px)");
        };
        HeaderRowContainerCtrl2.prototype.setupPinnedWidth = function() {
          var _this = this;
          if (this.pinned == null) {
            return;
          }
          var pinningLeft = this.pinned === Constants.PINNED_LEFT;
          var pinningRight = this.pinned === Constants.PINNED_RIGHT;
          var listener = function() {
            var width = pinningLeft ? _this.pinnedWidthService.getPinnedLeftWidth() : _this.pinnedWidthService.getPinnedRightWidth();
            if (width == null) {
              return;
            }
            var hidden = width == 0;
            var isRtl = _this.gridOptionsWrapper.isEnableRtl();
            var scrollbarWidth = _this.gridOptionsWrapper.getScrollbarWidth();
            var addPaddingForScrollbar = _this.scrollVisibleService.isVerticalScrollShowing() && (isRtl && pinningLeft || !isRtl && pinningRight);
            var widthWithPadding = addPaddingForScrollbar ? width + scrollbarWidth : width;
            _this.comp.setPinnedContainerWidth(widthWithPadding + "px");
            _this.comp.addOrRemoveCssClass("ag-hidden", hidden);
          };
          this.addManagedListener(this.eventService, Events.EVENT_LEFT_PINNED_WIDTH_CHANGED, listener);
          this.addManagedListener(this.eventService, Events.EVENT_RIGHT_PINNED_WIDTH_CHANGED, listener);
          this.addManagedListener(this.eventService, Events.EVENT_SCROLL_VISIBILITY_CHANGED, listener);
          this.addManagedListener(this.eventService, Events.EVENT_SCROLLBAR_WIDTH_CHANGED, listener);
        };
        HeaderRowContainerCtrl2.prototype.getHtmlElementForColumnHeader = function(column) {
          if (this.columnsRowCtrl) {
            return this.columnsRowCtrl.getHtmlElementForColumnHeader(column);
          }
        };
        HeaderRowContainerCtrl2.prototype.getRowType = function(rowIndex) {
          var allCtrls = this.getAllCtrls();
          var ctrl = allCtrls[rowIndex];
          return ctrl ? ctrl.getType() : void 0;
        };
        HeaderRowContainerCtrl2.prototype.focusHeader = function(rowIndex, column, event) {
          var allCtrls = this.getAllCtrls();
          var ctrl = allCtrls[rowIndex];
          if (!ctrl) {
            return false;
          }
          return ctrl.focusHeader(column, event);
        };
        HeaderRowContainerCtrl2.prototype.getRowCount = function() {
          return this.getAllCtrls().length;
        };
        __decorate$14([
          Autowired("ctrlsService")
        ], HeaderRowContainerCtrl2.prototype, "ctrlsService", void 0);
        __decorate$14([
          Autowired("scrollVisibleService")
        ], HeaderRowContainerCtrl2.prototype, "scrollVisibleService", void 0);
        __decorate$14([
          Autowired("pinnedWidthService")
        ], HeaderRowContainerCtrl2.prototype, "pinnedWidthService", void 0);
        __decorate$14([
          Autowired("columnModel")
        ], HeaderRowContainerCtrl2.prototype, "columnModel", void 0);
        __decorate$14([
          Autowired("focusService")
        ], HeaderRowContainerCtrl2.prototype, "focusService", void 0);
        return HeaderRowContainerCtrl2;
      }(BeanStub)
    );
    var __extends$1g = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$15 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var HeaderRowContainerComp = (
      /** @class */
      function(_super) {
        __extends$1g(HeaderRowContainerComp2, _super);
        function HeaderRowContainerComp2(pinned) {
          var _this = _super.call(this) || this;
          _this.headerRowComps = {};
          _this.rowCompsList = [];
          _this.pinned = pinned;
          return _this;
        }
        HeaderRowContainerComp2.prototype.init = function() {
          var _this = this;
          this.selectAndSetTemplate();
          var compProxy = {
            addOrRemoveCssClass: function(cssClassName, on) {
              return _this.addOrRemoveCssClass(cssClassName, on);
            },
            setCtrls: function(ctrls) {
              return _this.setCtrls(ctrls);
            },
            // only gets called for center section
            setCenterWidth: function(width) {
              return _this.eCenterContainer.style.width = width;
            },
            setContainerTransform: function(transform) {
              return _this.eCenterContainer.style.transform = transform;
            },
            // only gets called for pinned sections
            setPinnedContainerWidth: function(width) {
              var eGui = _this.getGui();
              eGui.style.width = width;
              eGui.style.maxWidth = width;
              eGui.style.minWidth = width;
            }
          };
          var ctrl = this.createManagedBean(new HeaderRowContainerCtrl(this.pinned));
          ctrl.setComp(compProxy, this.getGui());
        };
        HeaderRowContainerComp2.prototype.selectAndSetTemplate = function() {
          var pinnedLeft = this.pinned == Constants.PINNED_LEFT;
          var pinnedRight = this.pinned == Constants.PINNED_RIGHT;
          var template = pinnedLeft ? HeaderRowContainerComp2.PINNED_LEFT_TEMPLATE : pinnedRight ? HeaderRowContainerComp2.PINNED_RIGHT_TEMPLATE : HeaderRowContainerComp2.CENTER_TEMPLATE;
          this.setTemplate(template);
          this.eRowContainer = this.eCenterContainer ? this.eCenterContainer : this.getGui();
        };
        HeaderRowContainerComp2.prototype.destroyRowComps = function() {
          this.setCtrls([]);
        };
        HeaderRowContainerComp2.prototype.destroyRowComp = function(rowComp) {
          this.destroyBean(rowComp);
          this.eRowContainer.removeChild(rowComp.getGui());
        };
        HeaderRowContainerComp2.prototype.setCtrls = function(ctrls) {
          var _this = this;
          var oldRowComps = this.headerRowComps;
          this.headerRowComps = {};
          this.rowCompsList = [];
          var prevGui;
          var appendEnsuringDomOrder = function(rowComp) {
            var eGui = rowComp.getGui();
            var notAlreadyIn = eGui.parentElement != _this.eRowContainer;
            if (notAlreadyIn) {
              _this.eRowContainer.appendChild(eGui);
            }
            if (prevGui) {
              ensureDomOrder(_this.eRowContainer, eGui, prevGui);
            }
            prevGui = eGui;
          };
          ctrls.forEach(function(ctrl) {
            var ctrlId = ctrl.getInstanceId();
            var existingComp = oldRowComps[ctrlId];
            delete oldRowComps[ctrlId];
            var rowComp = existingComp ? existingComp : _this.createBean(new HeaderRowComp(ctrl));
            _this.headerRowComps[ctrlId] = rowComp;
            _this.rowCompsList.push(rowComp);
            appendEnsuringDomOrder(rowComp);
          });
          getAllValuesInObject(oldRowComps).forEach(function(c) {
            return _this.destroyRowComp(c);
          });
        };
        HeaderRowContainerComp2.PINNED_LEFT_TEMPLATE = '<div class="ag-pinned-left-header" role="presentation"/>';
        HeaderRowContainerComp2.PINNED_RIGHT_TEMPLATE = '<div class="ag-pinned-right-header" role="presentation"/>';
        HeaderRowContainerComp2.CENTER_TEMPLATE = '<div class="ag-header-viewport" role="presentation">\n            <div class="ag-header-container" ref="eCenterContainer" role="rowgroup"></div>\n        </div>';
        __decorate$15([
          RefSelector("eCenterContainer")
        ], HeaderRowContainerComp2.prototype, "eCenterContainer", void 0);
        __decorate$15([
          PostConstruct
        ], HeaderRowContainerComp2.prototype, "init", null);
        __decorate$15([
          PreDestroy
        ], HeaderRowContainerComp2.prototype, "destroyRowComps", null);
        return HeaderRowContainerComp2;
      }(Component)
    );
    var __extends$1h = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$16 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var GridHeaderComp = (
      /** @class */
      function(_super) {
        __extends$1h(GridHeaderComp2, _super);
        function GridHeaderComp2() {
          return _super.call(this, GridHeaderComp2.TEMPLATE) || this;
        }
        GridHeaderComp2.prototype.postConstruct = function() {
          var _this = this;
          var compProxy = {
            addOrRemoveCssClass: function(cssClassName, on) {
              return _this.addOrRemoveCssClass(cssClassName, on);
            },
            setHeightAndMinHeight: function(height) {
              _this.getGui().style.height = height;
              _this.getGui().style.minHeight = height;
            }
          };
          var ctrl = this.createManagedBean(new GridHeaderCtrl());
          ctrl.setComp(compProxy, this.getGui(), this.getFocusableElement());
          var addContainer = function(container) {
            _this.createManagedBean(container);
            _this.appendChild(container);
          };
          addContainer(new HeaderRowContainerComp(Constants.PINNED_LEFT));
          addContainer(new HeaderRowContainerComp(null));
          addContainer(new HeaderRowContainerComp(Constants.PINNED_RIGHT));
        };
        GridHeaderComp2.TEMPLATE = '<div class="ag-header" role="presentation" unselectable="on"/>';
        __decorate$16([
          PostConstruct
        ], GridHeaderComp2.prototype, "postConstruct", null);
        return GridHeaderComp2;
      }(Component)
    );
    var __extends$1i = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __assign$9 = function() {
      __assign$9 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign$9.apply(this, arguments);
    };
    var __decorate$17 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var FilterManager = (
      /** @class */
      function(_super) {
        __extends$1i(FilterManager2, _super);
        function FilterManager2() {
          var _this = _super !== null && _super.apply(this, arguments) || this;
          _this.allAdvancedFilters = /* @__PURE__ */ new Map();
          _this.activeAdvancedFilters = [];
          _this.quickFilter = null;
          _this.quickFilterParts = null;
          _this.processingFilterChange = false;
          return _this;
        }
        FilterManager_1 = FilterManager2;
        FilterManager2.prototype.init = function() {
          this.addManagedListener(this.eventService, Events.EVENT_ROW_DATA_CHANGED, this.onNewRowsLoaded.bind(this));
          this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, this.onNewColumnsLoaded.bind(this));
          this.quickFilter = this.parseQuickFilter(this.gridOptionsWrapper.getQuickFilterText());
          this.setQuickFilterParts();
          this.allowShowChangeAfterFilter = this.gridOptionsWrapper.isAllowShowChangeAfterFilter();
        };
        FilterManager2.prototype.setQuickFilterParts = function() {
          this.quickFilterParts = this.quickFilter ? this.quickFilter.split(" ") : null;
        };
        FilterManager2.prototype.setFilterModel = function(model2) {
          var _this = this;
          var allPromises = [];
          var previousModel = this.getFilterModel();
          if (model2) {
            var modelKeys_1 = convertToSet(Object.keys(model2));
            this.allAdvancedFilters.forEach(function(filterWrapper, colId) {
              var newModel = model2[colId];
              allPromises.push(_this.setModelOnFilterWrapper(filterWrapper.filterPromise, newModel));
              modelKeys_1.delete(colId);
            });
            modelKeys_1.forEach(function(colId) {
              var column = _this.columnModel.getPrimaryColumn(colId);
              if (!column) {
                console.warn("AG-Grid: setFilterModel() - no column found for colId: " + colId);
                return;
              }
              if (!column.isFilterAllowed()) {
                console.warn("AG-Grid: setFilterModel() - unable to fully apply model, filtering disabled for colId: " + colId);
                return;
              }
              var filterWrapper = _this.getOrCreateFilterWrapper(column, "NO_UI");
              allPromises.push(_this.setModelOnFilterWrapper(filterWrapper.filterPromise, model2[colId]));
            });
          } else {
            this.allAdvancedFilters.forEach(function(filterWrapper) {
              allPromises.push(_this.setModelOnFilterWrapper(filterWrapper.filterPromise, null));
            });
          }
          AgPromise.all(allPromises).then(function() {
            var currentModel = _this.getFilterModel();
            var columns = [];
            _this.allAdvancedFilters.forEach(function(filterWrapper, colId) {
              var before = previousModel ? previousModel[colId] : null;
              var after = currentModel ? currentModel[colId] : null;
              if (!_.jsonEquals(before, after)) {
                columns.push(filterWrapper.column);
              }
            });
            if (columns.length > 0) {
              _this.onFilterChanged({ columns });
            }
          });
        };
        FilterManager2.prototype.setModelOnFilterWrapper = function(filterPromise, newModel) {
          return new AgPromise(function(resolve) {
            filterPromise.then(function(filter2) {
              if (typeof filter2.setModel !== "function") {
                console.warn("Warning ag-grid - filter missing setModel method, which is needed for setFilterModel");
                resolve();
              }
              (filter2.setModel(newModel) || AgPromise.resolve()).then(function() {
                return resolve();
              });
            });
          });
        };
        FilterManager2.prototype.getFilterModel = function() {
          var result = {};
          this.allAdvancedFilters.forEach(function(filterWrapper, key) {
            var filterPromise = filterWrapper.filterPromise;
            var filter2 = filterPromise.resolveNow(null, function(promiseFilter) {
              return promiseFilter;
            });
            if (filter2 == null) {
              return null;
            }
            if (typeof filter2.getModel !== "function") {
              console.warn("Warning ag-grid - filter API missing getModel method, which is needed for getFilterModel");
              return;
            }
            var model2 = filter2.getModel();
            if (exists(model2)) {
              result[key] = model2;
            }
          });
          return result;
        };
        FilterManager2.prototype.isAdvancedFilterPresent = function() {
          return this.activeAdvancedFilters.length > 0;
        };
        FilterManager2.prototype.updateActiveFilters = function() {
          var _this = this;
          this.activeAdvancedFilters.length = 0;
          var isFilterActive = function(filter2) {
            if (!filter2) {
              return false;
            }
            if (!filter2.isFilterActive) {
              console.warn("AG Grid: Filter is missing isFilterActive() method");
              return false;
            }
            return filter2.isFilterActive();
          };
          this.allAdvancedFilters.forEach(function(filterWrapper) {
            if (filterWrapper.filterPromise.resolveNow(false, isFilterActive)) {
              var resolvedPromise = filterWrapper.filterPromise.resolveNow(null, function(filter2) {
                return filter2;
              });
              _this.activeAdvancedFilters.push(resolvedPromise);
            }
          });
        };
        FilterManager2.prototype.updateFilterFlagInColumns = function(source, additionalEventAttributes) {
          this.allAdvancedFilters.forEach(function(filterWrapper) {
            var isFilterActive = filterWrapper.filterPromise.resolveNow(false, function(filter2) {
              return filter2.isFilterActive();
            });
            filterWrapper.column.setFilterActive(isFilterActive, source, additionalEventAttributes);
          });
        };
        FilterManager2.prototype.isAnyFilterPresent = function() {
          return this.isQuickFilterPresent() || this.isAdvancedFilterPresent() || this.gridOptionsWrapper.isExternalFilterPresent();
        };
        FilterManager2.prototype.doAdvancedFiltersPass = function(node, filterToSkip) {
          var data = node.data;
          for (var i = 0; i < this.activeAdvancedFilters.length; i++) {
            var filter2 = this.activeAdvancedFilters[i];
            if (filter2 == null || filter2 === filterToSkip) {
              continue;
            }
            if (typeof filter2.doesFilterPass !== "function") {
              throw new Error("Filter is missing method doesFilterPass");
            }
            if (!filter2.doesFilterPass({ node, data })) {
              return false;
            }
          }
          return true;
        };
        FilterManager2.prototype.parseQuickFilter = function(newFilter) {
          if (!exists(newFilter)) {
            return null;
          }
          if (!this.gridOptionsWrapper.isRowModelDefault()) {
            console.warn("ag-grid: quick filtering only works with the Client-Side Row Model");
            return null;
          }
          return newFilter.toUpperCase();
        };
        FilterManager2.prototype.setQuickFilter = function(newFilter) {
          var parsedFilter = this.parseQuickFilter(newFilter);
          if (this.quickFilter !== parsedFilter) {
            this.quickFilter = parsedFilter;
            this.setQuickFilterParts();
            this.onFilterChanged();
          }
        };
        FilterManager2.prototype.onFilterChanged = function(params) {
          if (params === void 0) {
            params = {};
          }
          var filterInstance = params.filterInstance, additionalEventAttributes = params.additionalEventAttributes, columns = params.columns;
          this.updateActiveFilters();
          this.updateFilterFlagInColumns("filterChanged", additionalEventAttributes);
          this.allAdvancedFilters.forEach(function(filterWrapper) {
            if (!filterWrapper.filterPromise) {
              return;
            }
            filterWrapper.filterPromise.then(function(filter2) {
              if (filter2 && filter2 !== filterInstance && filter2.onAnyFilterChanged) {
                filter2.onAnyFilterChanged();
              }
            });
          });
          var filterChangedEvent = {
            type: Events.EVENT_FILTER_CHANGED,
            api: this.gridApi,
            columnApi: this.columnApi,
            columns: columns || []
          };
          if (additionalEventAttributes) {
            mergeDeep(filterChangedEvent, additionalEventAttributes);
          }
          this.processingFilterChange = true;
          this.eventService.dispatchEvent(filterChangedEvent);
          this.processingFilterChange = false;
        };
        FilterManager2.prototype.isSuppressFlashingCellsBecauseFiltering = function() {
          return !this.allowShowChangeAfterFilter && this.processingFilterChange;
        };
        FilterManager2.prototype.isQuickFilterPresent = function() {
          return this.quickFilter !== null;
        };
        FilterManager2.prototype.doesRowPassOtherFilters = function(filterToSkip, node) {
          return this.doesRowPassFilter({ rowNode: node, filterInstanceToSkip: filterToSkip });
        };
        FilterManager2.prototype.doesRowPassQuickFilterNoCache = function(node, filterPart) {
          var _this = this;
          var columns = this.columnModel.getAllColumnsForQuickFilter();
          return some(columns, function(column) {
            var part = _this.getQuickFilterTextForColumn(column, node);
            return exists(part) && part.indexOf(filterPart) >= 0;
          });
        };
        FilterManager2.prototype.doesRowPassQuickFilterCache = function(node, filterPart) {
          if (!node.quickFilterAggregateText) {
            this.aggregateRowForQuickFilter(node);
          }
          return node.quickFilterAggregateText.indexOf(filterPart) >= 0;
        };
        FilterManager2.prototype.doesRowPassQuickFilter = function(node) {
          var _this = this;
          var usingCache = this.gridOptionsWrapper.isCacheQuickFilter();
          return every(this.quickFilterParts, function(part) {
            return usingCache ? _this.doesRowPassQuickFilterCache(node, part) : _this.doesRowPassQuickFilterNoCache(node, part);
          });
        };
        FilterManager2.prototype.doesRowPassFilter = function(params) {
          if (this.isQuickFilterPresent() && !this.doesRowPassQuickFilter(params.rowNode)) {
            return false;
          }
          if (this.gridOptionsWrapper.isExternalFilterPresent() && !this.gridOptionsWrapper.doesExternalFilterPass(params.rowNode)) {
            return false;
          }
          if (this.isAdvancedFilterPresent() && !this.doAdvancedFiltersPass(params.rowNode, params.filterInstanceToSkip)) {
            return false;
          }
          return true;
        };
        FilterManager2.prototype.getQuickFilterTextForColumn = function(column, node) {
          var value = this.valueService.getValue(column, node, true);
          var colDef = column.getColDef();
          if (colDef.getQuickFilterText) {
            var params = {
              value,
              node,
              data: node.data,
              column,
              colDef,
              context: this.gridOptionsWrapper.getContext()
            };
            value = colDef.getQuickFilterText(params);
          }
          return exists(value) ? value.toString().toUpperCase() : null;
        };
        FilterManager2.prototype.aggregateRowForQuickFilter = function(node) {
          var _this = this;
          var stringParts = [];
          var columns = this.columnModel.getAllColumnsForQuickFilter();
          forEach(columns, function(column) {
            var part = _this.getQuickFilterTextForColumn(column, node);
            if (exists(part)) {
              stringParts.push(part);
            }
          });
          node.quickFilterAggregateText = stringParts.join(FilterManager_1.QUICK_FILTER_SEPARATOR);
        };
        FilterManager2.prototype.onNewRowsLoaded = function(source) {
          this.allAdvancedFilters.forEach(function(filterWrapper) {
            filterWrapper.filterPromise.then(function(filter2) {
              if (filter2.onNewRowsLoaded) {
                filter2.onNewRowsLoaded();
              }
            });
          });
          this.updateFilterFlagInColumns(source);
          this.updateActiveFilters();
        };
        FilterManager2.prototype.createValueGetter = function(column) {
          var _this = this;
          return function(node) {
            return _this.valueService.getValue(column, node, true);
          };
        };
        FilterManager2.prototype.getFilterComponent = function(column, source, createIfDoesNotExist) {
          if (createIfDoesNotExist === void 0) {
            createIfDoesNotExist = true;
          }
          if (createIfDoesNotExist) {
            return this.getOrCreateFilterWrapper(column, source).filterPromise;
          }
          var filterWrapper = this.cachedFilter(column);
          return filterWrapper ? filterWrapper.filterPromise : null;
        };
        FilterManager2.prototype.isFilterActive = function(column) {
          var filterWrapper = this.cachedFilter(column);
          return !!filterWrapper && filterWrapper.filterPromise.resolveNow(false, function(filter2) {
            return filter2.isFilterActive();
          });
        };
        FilterManager2.prototype.getOrCreateFilterWrapper = function(column, source) {
          var filterWrapper = this.cachedFilter(column);
          if (!filterWrapper) {
            filterWrapper = this.createFilterWrapper(column, source);
            this.allAdvancedFilters.set(column.getColId(), filterWrapper);
          } else if (source !== "NO_UI") {
            this.putIntoGui(filterWrapper, source);
          }
          return filterWrapper;
        };
        FilterManager2.prototype.cachedFilter = function(column) {
          return this.allAdvancedFilters.get(column.getColId());
        };
        FilterManager2.prototype.createFilterInstance = function(column, $scope) {
          var _this = this;
          var defaultFilter = ModuleRegistry.isRegistered(exports.ModuleNames.SetFilterModule) ? "agSetColumnFilter" : "agTextColumnFilter";
          var colDef = column.getColDef();
          var filterInstance;
          var params = __assign$9(__assign$9({}, this.createFilterParams(column, colDef, $scope)), { filterModifiedCallback: function() {
            var event = {
              type: Events.EVENT_FILTER_MODIFIED,
              api: _this.gridApi,
              columnApi: _this.columnApi,
              column,
              filterInstance
            };
            _this.eventService.dispatchEvent(event);
          }, filterChangedCallback: function(additionalEventAttributes) {
            return _this.onFilterChanged({ filterInstance, additionalEventAttributes, columns: [column] });
          }, doesRowPassOtherFilter: function(node) {
            return _this.doesRowPassOtherFilters(filterInstance, node);
          } });
          var compDetails = this.userComponentFactory.getFilterDetails(colDef, params, defaultFilter);
          if (!compDetails) {
            return null;
          }
          var componentPromise = compDetails.newAgStackInstance();
          if (componentPromise) {
            componentPromise.then(function(r) {
              return filterInstance = r;
            });
          }
          return componentPromise;
        };
        FilterManager2.prototype.createFilterParams = function(column, colDef, $scope) {
          if ($scope === void 0) {
            $scope = null;
          }
          var params = {
            api: this.gridOptionsWrapper.getApi(),
            columnApi: this.gridOptionsWrapper.getColumnApi(),
            column,
            colDef: cloneObject(colDef),
            rowModel: this.rowModel,
            filterChangedCallback: function() {
            },
            filterModifiedCallback: function() {
            },
            valueGetter: this.createValueGetter(column),
            context: this.gridOptionsWrapper.getContext(),
            doesRowPassOtherFilter: function() {
              return true;
            }
          };
          if ($scope) {
            params.$scope = $scope;
          }
          return params;
        };
        FilterManager2.prototype.createFilterWrapper = function(column, source) {
          var filterWrapper = {
            column,
            filterPromise: null,
            scope: null,
            compiledElement: null,
            guiPromise: AgPromise.resolve(null)
          };
          filterWrapper.scope = this.gridOptionsWrapper.isAngularCompileFilters() ? this.$scope.$new() : null;
          filterWrapper.filterPromise = this.createFilterInstance(column, filterWrapper.scope);
          if (filterWrapper.filterPromise) {
            this.putIntoGui(filterWrapper, source);
          }
          return filterWrapper;
        };
        FilterManager2.prototype.putIntoGui = function(filterWrapper, source) {
          var _this = this;
          var eFilterGui = document.createElement("div");
          eFilterGui.className = "ag-filter";
          filterWrapper.guiPromise = new AgPromise(function(resolve) {
            filterWrapper.filterPromise.then(function(filter2) {
              var guiFromFilter = filter2.getGui();
              if (!exists(guiFromFilter)) {
                console.warn("getGui method from filter returned " + guiFromFilter + ", it should be a DOM element or an HTML template string.");
              }
              if (typeof guiFromFilter === "string") {
                guiFromFilter = loadTemplate(guiFromFilter);
              }
              eFilterGui.appendChild(guiFromFilter);
              if (filterWrapper.scope) {
                var compiledElement = _this.$compile(eFilterGui)(filterWrapper.scope);
                filterWrapper.compiledElement = compiledElement;
                window.setTimeout(function() {
                  return filterWrapper.scope.$apply();
                }, 0);
              }
              resolve(eFilterGui);
              _this.eventService.dispatchEvent({
                type: Events.EVENT_FILTER_OPENED,
                column: filterWrapper.column,
                source,
                eGui: eFilterGui,
                api: _this.gridApi,
                columnApi: _this.columnApi
              });
            });
          });
        };
        FilterManager2.prototype.onNewColumnsLoaded = function() {
          var _this = this;
          var atLeastOneFilterGone = false;
          var columns = [];
          this.allAdvancedFilters.forEach(function(filterWrapper) {
            var oldColumn = !_this.columnModel.getPrimaryColumn(filterWrapper.column);
            if (oldColumn) {
              atLeastOneFilterGone = true;
              columns.push(filterWrapper.column);
              _this.disposeFilterWrapper(filterWrapper, "filterDestroyed");
            }
          });
          if (atLeastOneFilterGone) {
            this.onFilterChanged({ columns });
          }
        };
        FilterManager2.prototype.destroyFilter = function(column, source) {
          if (source === void 0) {
            source = "api";
          }
          var filterWrapper = this.allAdvancedFilters.get(column.getColId());
          if (filterWrapper) {
            this.disposeFilterWrapper(filterWrapper, source);
            this.onFilterChanged({ columns: [column] });
          }
        };
        FilterManager2.prototype.disposeFilterWrapper = function(filterWrapper, source) {
          var _this = this;
          filterWrapper.filterPromise.then(function(filter2) {
            (filter2.setModel(null) || AgPromise.resolve()).then(function() {
              _this.getContext().destroyBean(filter2);
              filterWrapper.column.setFilterActive(false, source);
              if (filterWrapper.scope) {
                if (filterWrapper.compiledElement) {
                  filterWrapper.compiledElement.remove();
                }
                filterWrapper.scope.$destroy();
              }
              _this.allAdvancedFilters.delete(filterWrapper.column.getColId());
            });
          });
        };
        FilterManager2.prototype.destroy = function() {
          var _this = this;
          _super.prototype.destroy.call(this);
          this.allAdvancedFilters.forEach(function(filterWrapper) {
            return _this.disposeFilterWrapper(filterWrapper, "filterDestroyed");
          });
        };
        var FilterManager_1;
        FilterManager2.QUICK_FILTER_SEPARATOR = "\n";
        __decorate$17([
          Autowired("$compile")
        ], FilterManager2.prototype, "$compile", void 0);
        __decorate$17([
          Autowired("$scope")
        ], FilterManager2.prototype, "$scope", void 0);
        __decorate$17([
          Autowired("valueService")
        ], FilterManager2.prototype, "valueService", void 0);
        __decorate$17([
          Autowired("columnModel")
        ], FilterManager2.prototype, "columnModel", void 0);
        __decorate$17([
          Autowired("rowModel")
        ], FilterManager2.prototype, "rowModel", void 0);
        __decorate$17([
          Autowired("columnApi")
        ], FilterManager2.prototype, "columnApi", void 0);
        __decorate$17([
          Autowired("gridApi")
        ], FilterManager2.prototype, "gridApi", void 0);
        __decorate$17([
          Autowired("userComponentFactory")
        ], FilterManager2.prototype, "userComponentFactory", void 0);
        __decorate$17([
          PostConstruct
        ], FilterManager2.prototype, "init", null);
        __decorate$17([
          PreDestroy
        ], FilterManager2.prototype, "destroy", null);
        FilterManager2 = FilterManager_1 = __decorate$17([
          Bean3("filterManager")
        ], FilterManager2);
        return FilterManager2;
      }(BeanStub)
    );
    var __extends$1j = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$18 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var ValueService = (
      /** @class */
      function(_super) {
        __extends$1j(ValueService2, _super);
        function ValueService2() {
          var _this = _super !== null && _super.apply(this, arguments) || this;
          _this.initialised = false;
          return _this;
        }
        ValueService2.prototype.init = function() {
          this.cellExpressions = this.gridOptionsWrapper.isEnableCellExpressions();
          this.initialised = true;
        };
        ValueService2.prototype.getValue = function(column, rowNode, forFilter, ignoreAggData) {
          if (forFilter === void 0) {
            forFilter = false;
          }
          if (ignoreAggData === void 0) {
            ignoreAggData = false;
          }
          if (!this.initialised) {
            this.init();
          }
          if (!rowNode) {
            return;
          }
          var colDef = column.getColDef();
          var field = colDef.field;
          var colId = column.getId();
          var data = rowNode.data;
          var result;
          var groupDataExists = rowNode.groupData && rowNode.groupData[colId] !== void 0;
          var aggDataExists = !ignoreAggData && rowNode.aggData && rowNode.aggData[colId] !== void 0;
          if (forFilter && colDef.filterValueGetter) {
            result = this.executeFilterValueGetter(colDef.filterValueGetter, data, column, rowNode);
          } else if (this.gridOptionsWrapper.isTreeData() && aggDataExists) {
            result = rowNode.aggData[colId];
          } else if (this.gridOptionsWrapper.isTreeData() && colDef.valueGetter) {
            result = this.executeValueGetter(colDef.valueGetter, data, column, rowNode);
          } else if (this.gridOptionsWrapper.isTreeData() && (field && data)) {
            result = getValueUsingField(data, field, column.isFieldContainsDots());
          } else if (groupDataExists) {
            result = rowNode.groupData[colId];
          } else if (aggDataExists) {
            result = rowNode.aggData[colId];
          } else if (colDef.valueGetter) {
            result = this.executeValueGetter(colDef.valueGetter, data, column, rowNode);
          } else if (field && data) {
            result = getValueUsingField(data, field, column.isFieldContainsDots());
          }
          if (this.cellExpressions && typeof result === "string" && result.indexOf("=") === 0) {
            var cellValueGetter = result.substring(1);
            result = this.executeValueGetter(cellValueGetter, data, column, rowNode);
          }
          if (result == null) {
            var openedGroup = this.getOpenedGroup(rowNode, column);
            if (openedGroup != null) {
              return openedGroup;
            }
          }
          return result;
        };
        ValueService2.prototype.getOpenedGroup = function(rowNode, column) {
          if (!this.gridOptionsWrapper.isShowOpenedGroup()) {
            return;
          }
          var colDef = column.getColDef();
          if (!colDef.showRowGroup) {
            return;
          }
          var showRowGroup = column.getColDef().showRowGroup;
          var pointer = rowNode.parent;
          while (pointer != null) {
            if (pointer.rowGroupColumn && (showRowGroup === true || showRowGroup === pointer.rowGroupColumn.getId())) {
              return pointer.key;
            }
            pointer = pointer.parent;
          }
          return void 0;
        };
        ValueService2.prototype.setValue = function(rowNode, colKey, newValue, eventSource) {
          var column = this.columnModel.getPrimaryColumn(colKey);
          if (!rowNode || !column) {
            return;
          }
          if (missing(rowNode.data)) {
            rowNode.data = {};
          }
          var _a2 = column.getColDef(), field = _a2.field, newValueHandler = _a2.newValueHandler, valueSetter = _a2.valueSetter;
          if (missing(field) && missing(newValueHandler) && missing(valueSetter)) {
            console.warn("AG Grid: you need either field or valueSetter set on colDef for editing to work");
            return;
          }
          var params = {
            node: rowNode,
            data: rowNode.data,
            oldValue: this.getValue(column, rowNode),
            newValue,
            colDef: column.getColDef(),
            column,
            api: this.gridOptionsWrapper.getApi(),
            columnApi: this.gridOptionsWrapper.getColumnApi(),
            context: this.gridOptionsWrapper.getContext()
          };
          params.newValue = newValue;
          var valueWasDifferent;
          if (newValueHandler && exists(newValueHandler)) {
            valueWasDifferent = newValueHandler(params);
          } else if (exists(valueSetter)) {
            valueWasDifferent = this.expressionService.evaluate(valueSetter, params);
          } else {
            valueWasDifferent = this.setValueUsingField(rowNode.data, field, newValue, column.isFieldContainsDots());
          }
          if (valueWasDifferent === void 0) {
            valueWasDifferent = true;
          }
          if (!valueWasDifferent) {
            return;
          }
          rowNode.resetQuickFilterAggregateText();
          this.valueCache.onDataChanged();
          params.newValue = this.getValue(column, rowNode);
          var onCellValueChanged = column.getColDef().onCellValueChanged;
          if (typeof onCellValueChanged === "function") {
            setTimeout(function() {
              return onCellValueChanged(params);
            }, 0);
          }
          var event = {
            type: Events.EVENT_CELL_VALUE_CHANGED,
            event: null,
            rowIndex: rowNode.rowIndex,
            rowPinned: rowNode.rowPinned,
            column: params.column,
            api: params.api,
            columnApi: params.columnApi,
            colDef: params.colDef,
            context: params.context,
            data: rowNode.data,
            node: rowNode,
            oldValue: params.oldValue,
            newValue: params.newValue,
            value: params.newValue,
            source: eventSource
          };
          this.eventService.dispatchEvent(event);
        };
        ValueService2.prototype.setValueUsingField = function(data, field, newValue, isFieldContainsDots) {
          if (!field) {
            return false;
          }
          var valuesAreSame = false;
          if (!isFieldContainsDots) {
            data[field] = newValue;
          } else {
            var fieldPieces = field.split(".");
            var currentObject = data;
            while (fieldPieces.length > 0 && currentObject) {
              var fieldPiece = fieldPieces.shift();
              if (fieldPieces.length === 0) {
                currentObject[fieldPiece] = newValue;
              } else {
                currentObject = currentObject[fieldPiece];
              }
            }
          }
          return !valuesAreSame;
        };
        ValueService2.prototype.executeFilterValueGetter = function(valueGetter, data, column, rowNode) {
          var params = {
            data,
            node: rowNode,
            column,
            colDef: column.getColDef(),
            api: this.gridOptionsWrapper.getApi(),
            columnApi: this.gridOptionsWrapper.getColumnApi(),
            context: this.gridOptionsWrapper.getContext(),
            getValue: this.getValueCallback.bind(this, rowNode)
          };
          return this.expressionService.evaluate(valueGetter, params);
        };
        ValueService2.prototype.executeValueGetter = function(valueGetter, data, column, rowNode) {
          var colId = column.getId();
          var valueFromCache = this.valueCache.getValue(rowNode, colId);
          if (valueFromCache !== void 0) {
            return valueFromCache;
          }
          var params = {
            data,
            node: rowNode,
            column,
            colDef: column.getColDef(),
            api: this.gridOptionsWrapper.getApi(),
            columnApi: this.gridOptionsWrapper.getColumnApi(),
            context: this.gridOptionsWrapper.getContext(),
            getValue: this.getValueCallback.bind(this, rowNode)
          };
          var result = this.expressionService.evaluate(valueGetter, params);
          this.valueCache.setValue(rowNode, colId, result);
          return result;
        };
        ValueService2.prototype.getValueCallback = function(node, field) {
          var otherColumn = this.columnModel.getPrimaryColumn(field);
          if (otherColumn) {
            return this.getValue(otherColumn, node);
          }
          return null;
        };
        ValueService2.prototype.getKeyForNode = function(col, rowNode) {
          var value = this.getValue(col, rowNode);
          var keyCreator = col.getColDef().keyCreator;
          var result = value;
          if (keyCreator) {
            var keyParams = {
              value,
              colDef: col.getColDef(),
              column: col,
              node: rowNode,
              data: rowNode.data,
              api: this.gridOptionsWrapper.getApi(),
              columnApi: this.gridOptionsWrapper.getColumnApi(),
              context: this.gridOptionsWrapper.getContext()
            };
            result = keyCreator(keyParams);
          }
          if (typeof result === "string" || result == null) {
            return result;
          }
          result = String(result);
          if (result === "[object Object]") {
            doOnce(function() {
              console.warn("AG Grid: a column you are grouping or pivoting by has objects as values. If you want to group by complex objects then either a) use a colDef.keyCreator (se AG Grid docs) or b) to toString() on the object to return a key");
            }, "getKeyForNode - warn about [object,object]");
          }
          return result;
        };
        __decorate$18([
          Autowired("expressionService")
        ], ValueService2.prototype, "expressionService", void 0);
        __decorate$18([
          Autowired("columnModel")
        ], ValueService2.prototype, "columnModel", void 0);
        __decorate$18([
          Autowired("valueCache")
        ], ValueService2.prototype, "valueCache", void 0);
        __decorate$18([
          PostConstruct
        ], ValueService2.prototype, "init", null);
        ValueService2 = __decorate$18([
          Bean3("valueService")
        ], ValueService2);
        return ValueService2;
      }(BeanStub)
    );
    var __extends$1k = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$19 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    (function(LayoutCssClasses) {
      LayoutCssClasses["AUTO_HEIGHT"] = "ag-layout-auto-height";
      LayoutCssClasses["NORMAL"] = "ag-layout-normal";
      LayoutCssClasses["PRINT"] = "ag-layout-print";
    })(exports.LayoutCssClasses || (exports.LayoutCssClasses = {}));
    var LayoutFeature = (
      /** @class */
      function(_super) {
        __extends$1k(LayoutFeature2, _super);
        function LayoutFeature2(view) {
          var _this = _super.call(this) || this;
          _this.view = view;
          return _this;
        }
        LayoutFeature2.prototype.postConstruct = function() {
          this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_DOM_LAYOUT, this.updateLayoutClasses.bind(this));
          this.updateLayoutClasses();
        };
        LayoutFeature2.prototype.updateLayoutClasses = function() {
          var domLayout = this.gridOptionsWrapper.getDomLayout();
          var params = {
            autoHeight: domLayout === Constants.DOM_LAYOUT_AUTO_HEIGHT,
            normal: domLayout === Constants.DOM_LAYOUT_NORMAL,
            print: domLayout === Constants.DOM_LAYOUT_PRINT
          };
          var cssClass = params.autoHeight ? exports.LayoutCssClasses.AUTO_HEIGHT : params.print ? exports.LayoutCssClasses.PRINT : exports.LayoutCssClasses.NORMAL;
          this.view.updateLayoutClasses(cssClass, params);
        };
        __decorate$19([
          Autowired("gridOptionsWrapper")
        ], LayoutFeature2.prototype, "gridOptionsWrapper", void 0);
        __decorate$19([
          PostConstruct
        ], LayoutFeature2.prototype, "postConstruct", null);
        return LayoutFeature2;
      }(BeanStub)
    );
    var __extends$1l = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1a = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var GridBodyScrollFeature = (
      /** @class */
      function(_super) {
        __extends$1l(GridBodyScrollFeature2, _super);
        function GridBodyScrollFeature2(eBodyViewport) {
          var _this = _super.call(this) || this;
          _this.scrollLeft = -1;
          _this.nextScrollTop = -1;
          _this.scrollTop = -1;
          _this.eBodyViewport = eBodyViewport;
          _this.resetLastHorizontalScrollElementDebounced = debounce(_this.resetLastHorizontalScrollElement.bind(_this), 500);
          return _this;
        }
        GridBodyScrollFeature2.prototype.postConstruct = function() {
          var _this = this;
          this.enableRtl = this.gridOptionsWrapper.isEnableRtl();
          this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, this.onDisplayedColumnsWidthChanged.bind(this));
          this.ctrlsService.whenReady(function(p) {
            _this.centerRowContainerCon = p.centerRowContainerCtrl;
            _this.onDisplayedColumnsWidthChanged();
            _this.addScrollListener();
          });
        };
        GridBodyScrollFeature2.prototype.addScrollListener = function() {
          var fakeHScroll = this.ctrlsService.getFakeHScrollCtrl();
          this.addManagedListener(this.centerRowContainerCon.getViewportElement(), "scroll", this.onCenterViewportScroll.bind(this));
          this.addManagedListener(fakeHScroll.getViewport(), "scroll", this.onFakeHorizontalScroll.bind(this));
          var onVerticalScroll = this.gridOptionsWrapper.isDebounceVerticalScrollbar() ? debounce(this.onVerticalScroll.bind(this), 100) : this.onVerticalScroll.bind(this);
          this.addManagedListener(this.eBodyViewport, "scroll", onVerticalScroll);
        };
        GridBodyScrollFeature2.prototype.onDisplayedColumnsWidthChanged = function() {
          if (this.enableRtl) {
            this.horizontallyScrollHeaderCenterAndFloatingCenter();
          }
        };
        GridBodyScrollFeature2.prototype.horizontallyScrollHeaderCenterAndFloatingCenter = function(scrollLeft) {
          if (scrollLeft === void 0) {
            scrollLeft = this.centerRowContainerCon.getCenterViewportScrollLeft();
          }
          var offset = this.enableRtl ? scrollLeft : -scrollLeft;
          var topCenterContainer = this.ctrlsService.getTopCenterRowContainerCtrl();
          var bottomCenterContainer = this.ctrlsService.getBottomCenterRowContainerCtrl();
          var fakeHScroll = this.ctrlsService.getFakeHScrollCtrl();
          var centerHeaderContainer = this.ctrlsService.getHeaderRowContainerCtrl();
          centerHeaderContainer.setHorizontalScroll(offset);
          bottomCenterContainer.setContainerTranslateX(offset);
          topCenterContainer.setContainerTranslateX(offset);
          var partner = this.lastHorizontalScrollElement === this.centerRowContainerCon.getViewportElement() ? fakeHScroll.getViewport() : this.centerRowContainerCon.getViewportElement();
          setScrollLeft(partner, Math.abs(scrollLeft), this.enableRtl);
        };
        GridBodyScrollFeature2.prototype.isControllingScroll = function(eDiv) {
          if (!this.lastHorizontalScrollElement) {
            this.lastHorizontalScrollElement = eDiv;
            return true;
          }
          return eDiv === this.lastHorizontalScrollElement;
        };
        GridBodyScrollFeature2.prototype.onFakeHorizontalScroll = function() {
          var fakeHScrollViewport = this.ctrlsService.getFakeHScrollCtrl().getViewport();
          if (!this.isControllingScroll(fakeHScrollViewport)) {
            return;
          }
          this.onBodyHorizontalScroll(fakeHScrollViewport);
        };
        GridBodyScrollFeature2.prototype.onCenterViewportScroll = function() {
          var centerContainerViewport = this.centerRowContainerCon.getViewportElement();
          if (!this.isControllingScroll(centerContainerViewport)) {
            return;
          }
          this.onBodyHorizontalScroll(centerContainerViewport);
        };
        GridBodyScrollFeature2.prototype.onBodyHorizontalScroll = function(eSource) {
          var centerContainerViewport = this.centerRowContainerCon.getViewportElement();
          var scrollLeft = centerContainerViewport.scrollLeft;
          if (this.shouldBlockScrollUpdate("horizontal", scrollLeft, true)) {
            return;
          }
          this.doHorizontalScroll(Math.round(getScrollLeft(eSource, this.enableRtl)));
          this.resetLastHorizontalScrollElementDebounced();
        };
        GridBodyScrollFeature2.prototype.onVerticalScroll = function() {
          var scrollTop = this.eBodyViewport.scrollTop;
          if (this.shouldBlockScrollUpdate("vertical", scrollTop, true)) {
            return;
          }
          this.animationFrameService.setScrollTop(scrollTop);
          this.nextScrollTop = scrollTop;
          if (this.gridOptionsWrapper.isSuppressAnimationFrame()) {
            this.scrollTop = this.nextScrollTop;
            this.redrawRowsAfterScroll();
          } else {
            this.animationFrameService.schedule();
          }
        };
        GridBodyScrollFeature2.prototype.resetLastHorizontalScrollElement = function() {
          this.lastHorizontalScrollElement = null;
        };
        GridBodyScrollFeature2.prototype.doHorizontalScroll = function(scrollLeft) {
          var fakeHScrollViewport = this.ctrlsService.getFakeHScrollCtrl().getViewport();
          var fakeScrollLeft = getScrollLeft(fakeHScrollViewport, this.enableRtl);
          if (this.scrollLeft === scrollLeft && scrollLeft === fakeScrollLeft) {
            return;
          }
          this.scrollLeft = scrollLeft;
          this.fireScrollEvent("horizontal");
          this.horizontallyScrollHeaderCenterAndFloatingCenter(scrollLeft);
          this.onHorizontalViewportChanged();
        };
        GridBodyScrollFeature2.prototype.fireScrollEvent = function(direction) {
          var _this = this;
          var bodyScrollEvent = {
            type: Events.EVENT_BODY_SCROLL,
            api: this.gridApi,
            columnApi: this.columnApi,
            direction,
            left: this.scrollLeft,
            top: this.scrollTop
          };
          this.eventService.dispatchEvent(bodyScrollEvent);
          window.clearTimeout(this.scrollTimer);
          this.scrollTimer = void 0;
          this.scrollTimer = window.setTimeout(function() {
            var bodyScrollEndEvent = assign({}, bodyScrollEvent, {
              type: Events.EVENT_BODY_SCROLL_END
            });
            _this.eventService.dispatchEvent(bodyScrollEndEvent);
          }, 100);
        };
        GridBodyScrollFeature2.prototype.shouldBlockScrollUpdate = function(direction, scrollTo, touchOnly) {
          if (touchOnly === void 0) {
            touchOnly = false;
          }
          if (touchOnly && !isIOSUserAgent()) {
            return false;
          }
          if (direction === "vertical") {
            var clientHeight = getInnerHeight(this.eBodyViewport);
            var scrollHeight = this.eBodyViewport.scrollHeight;
            if (scrollTo < 0 || scrollTo + clientHeight > scrollHeight) {
              return true;
            }
          }
          if (direction === "horizontal") {
            var clientWidth = this.centerRowContainerCon.getCenterWidth();
            var scrollWidth = this.centerRowContainerCon.getViewportElement().scrollWidth;
            if (this.enableRtl && isRtlNegativeScroll()) {
              if (scrollTo > 0) {
                return true;
              }
            } else if (scrollTo < 0) {
              return true;
            }
            if (Math.abs(scrollTo) + clientWidth > scrollWidth) {
              return true;
            }
          }
          return false;
        };
        GridBodyScrollFeature2.prototype.redrawRowsAfterScroll = function() {
          this.fireScrollEvent("vertical");
        };
        GridBodyScrollFeature2.prototype.onHorizontalViewportChanged = function() {
          this.centerRowContainerCon.onHorizontalViewportChanged();
        };
        GridBodyScrollFeature2.prototype.checkScrollLeft = function() {
          if (this.scrollLeft !== this.centerRowContainerCon.getCenterViewportScrollLeft()) {
            this.onBodyHorizontalScroll(this.centerRowContainerCon.getViewportElement());
          }
        };
        GridBodyScrollFeature2.prototype.executeAnimationFrameScroll = function() {
          var frameNeeded = this.scrollTop != this.nextScrollTop;
          if (frameNeeded) {
            this.scrollTop = this.nextScrollTop;
            this.redrawRowsAfterScroll();
          }
          return frameNeeded;
        };
        GridBodyScrollFeature2.prototype.setHorizontalScrollPosition = function(hScrollPosition) {
          var minScrollLeft = 0;
          var maxScrollLeft = this.centerRowContainerCon.getViewportElement().scrollWidth - this.centerRowContainerCon.getCenterWidth();
          if (this.shouldBlockScrollUpdate("horizontal", hScrollPosition)) {
            if (this.enableRtl && isRtlNegativeScroll()) {
              hScrollPosition = hScrollPosition > 0 ? 0 : maxScrollLeft;
            } else {
              hScrollPosition = Math.min(Math.max(hScrollPosition, minScrollLeft), maxScrollLeft);
            }
          }
          setScrollLeft(this.centerRowContainerCon.getViewportElement(), Math.abs(hScrollPosition), this.enableRtl);
          this.doHorizontalScroll(hScrollPosition);
        };
        GridBodyScrollFeature2.prototype.setVerticalScrollPosition = function(vScrollPosition) {
          this.eBodyViewport.scrollTop = vScrollPosition;
        };
        GridBodyScrollFeature2.prototype.getVScrollPosition = function() {
          var result = {
            top: this.eBodyViewport.scrollTop,
            bottom: this.eBodyViewport.scrollTop + this.eBodyViewport.offsetHeight
          };
          return result;
        };
        GridBodyScrollFeature2.prototype.getHScrollPosition = function() {
          return this.centerRowContainerCon.getHScrollPosition();
        };
        GridBodyScrollFeature2.prototype.isHorizontalScrollShowing = function() {
          return this.centerRowContainerCon.isHorizontalScrollShowing();
        };
        GridBodyScrollFeature2.prototype.scrollHorizontally = function(pixels) {
          var oldScrollPosition = this.centerRowContainerCon.getViewportElement().scrollLeft;
          this.setHorizontalScrollPosition(oldScrollPosition + pixels);
          return this.centerRowContainerCon.getViewportElement().scrollLeft - oldScrollPosition;
        };
        GridBodyScrollFeature2.prototype.scrollToTop = function() {
          this.eBodyViewport.scrollTop = 0;
        };
        GridBodyScrollFeature2.prototype.ensureNodeVisible = function(comparator, position) {
          if (position === void 0) {
            position = null;
          }
          var rowCount = this.rowModel.getRowCount();
          var comparatorIsAFunction = typeof comparator === "function";
          var indexToSelect = -1;
          for (var i = 0; i < rowCount; i++) {
            var node = this.rowModel.getRow(i);
            if (comparatorIsAFunction) {
              if (comparator(node)) {
                indexToSelect = i;
                break;
              }
            } else {
              if (comparator === node || comparator === node.data) {
                indexToSelect = i;
                break;
              }
            }
          }
          if (indexToSelect >= 0) {
            this.ensureIndexVisible(indexToSelect, position);
          }
        };
        GridBodyScrollFeature2.prototype.ensureIndexVisible = function(index, position) {
          if (this.gridOptionsWrapper.getDomLayout() === Constants.DOM_LAYOUT_PRINT) {
            return;
          }
          var rowCount = this.paginationProxy.getRowCount();
          if (typeof index !== "number" || index < 0 || index >= rowCount) {
            console.warn("invalid row index for ensureIndexVisible: " + index);
            return;
          }
          var isPaging = this.gridOptionsWrapper.isPagination();
          var paginationPanelEnabled = isPaging && !this.gridOptionsWrapper.isSuppressPaginationPanel();
          if (!paginationPanelEnabled) {
            this.paginationProxy.goToPageWithIndex(index);
          }
          var rowNode = this.paginationProxy.getRow(index);
          var rowGotShiftedDuringOperation;
          do {
            var startingRowTop = rowNode.rowTop;
            var startingRowHeight = rowNode.rowHeight;
            var paginationOffset = this.paginationProxy.getPixelOffset();
            var rowTopPixel = rowNode.rowTop - paginationOffset;
            var rowBottomPixel = rowTopPixel + rowNode.rowHeight;
            var scrollPosition = this.getVScrollPosition();
            var heightOffset = this.heightScaler.getDivStretchOffset();
            var vScrollTop = scrollPosition.top + heightOffset;
            var vScrollBottom = scrollPosition.bottom + heightOffset;
            var viewportHeight = vScrollBottom - vScrollTop;
            var pxTop = this.heightScaler.getScrollPositionForPixel(rowTopPixel);
            var pxBottom = this.heightScaler.getScrollPositionForPixel(rowBottomPixel - viewportHeight);
            var pxMiddle = Math.min((pxTop + pxBottom) / 2, rowTopPixel);
            var rowBelowViewport = vScrollTop > rowTopPixel;
            var rowAboveViewport = vScrollBottom < rowBottomPixel;
            var newScrollPosition = null;
            if (position === "top") {
              newScrollPosition = pxTop;
            } else if (position === "bottom") {
              newScrollPosition = pxBottom;
            } else if (position === "middle") {
              newScrollPosition = pxMiddle;
            } else if (rowBelowViewport) {
              newScrollPosition = pxTop;
            } else if (rowAboveViewport) {
              newScrollPosition = pxBottom;
            }
            if (newScrollPosition !== null) {
              this.eBodyViewport.scrollTop = newScrollPosition;
              this.rowRenderer.redrawAfterScroll();
            }
            rowGotShiftedDuringOperation = startingRowTop !== rowNode.rowTop || startingRowHeight !== rowNode.rowHeight;
          } while (rowGotShiftedDuringOperation);
          this.animationFrameService.flushAllFrames();
        };
        GridBodyScrollFeature2.prototype.ensureColumnVisible = function(key) {
          var column = this.columnModel.getGridColumn(key);
          if (!column) {
            return;
          }
          if (column.isPinned()) {
            return;
          }
          if (!this.columnModel.isColumnDisplayed(column)) {
            return;
          }
          var colLeftPixel = column.getLeft();
          var colRightPixel = colLeftPixel + column.getActualWidth();
          var viewportWidth = this.centerRowContainerCon.getCenterWidth();
          var scrollPosition = this.centerRowContainerCon.getCenterViewportScrollLeft();
          var bodyWidth = this.columnModel.getBodyContainerWidth();
          var viewportLeftPixel;
          var viewportRightPixel;
          if (this.enableRtl) {
            viewportLeftPixel = bodyWidth - scrollPosition - viewportWidth;
            viewportRightPixel = bodyWidth - scrollPosition;
          } else {
            viewportLeftPixel = scrollPosition;
            viewportRightPixel = viewportWidth + scrollPosition;
          }
          var viewportScrolledPastCol = viewportLeftPixel > colLeftPixel;
          var viewportScrolledBeforeCol = viewportRightPixel < colRightPixel;
          var colToSmallForViewport = viewportWidth < column.getActualWidth();
          var alignColToLeft = viewportScrolledPastCol || colToSmallForViewport;
          var alignColToRight = viewportScrolledBeforeCol;
          if (alignColToLeft || alignColToRight) {
            var newScrollPosition = void 0;
            if (this.enableRtl) {
              newScrollPosition = alignColToLeft ? bodyWidth - viewportWidth - colLeftPixel : bodyWidth - colRightPixel;
            } else {
              newScrollPosition = alignColToLeft ? colLeftPixel : colRightPixel - viewportWidth;
            }
            this.centerRowContainerCon.setCenterViewportScrollLeft(newScrollPosition);
          }
          this.centerRowContainerCon.onHorizontalViewportChanged();
          this.animationFrameService.flushAllFrames();
        };
        __decorate$1a([
          Autowired("ctrlsService")
        ], GridBodyScrollFeature2.prototype, "ctrlsService", void 0);
        __decorate$1a([
          Autowired("animationFrameService")
        ], GridBodyScrollFeature2.prototype, "animationFrameService", void 0);
        __decorate$1a([
          Autowired("columnApi")
        ], GridBodyScrollFeature2.prototype, "columnApi", void 0);
        __decorate$1a([
          Autowired("gridApi")
        ], GridBodyScrollFeature2.prototype, "gridApi", void 0);
        __decorate$1a([
          Autowired("paginationProxy")
        ], GridBodyScrollFeature2.prototype, "paginationProxy", void 0);
        __decorate$1a([
          Autowired("rowModel")
        ], GridBodyScrollFeature2.prototype, "rowModel", void 0);
        __decorate$1a([
          Autowired("rowContainerHeightService")
        ], GridBodyScrollFeature2.prototype, "heightScaler", void 0);
        __decorate$1a([
          Autowired("rowRenderer")
        ], GridBodyScrollFeature2.prototype, "rowRenderer", void 0);
        __decorate$1a([
          Autowired("columnModel")
        ], GridBodyScrollFeature2.prototype, "columnModel", void 0);
        __decorate$1a([
          PostConstruct
        ], GridBodyScrollFeature2.prototype, "postConstruct", null);
        return GridBodyScrollFeature2;
      }(BeanStub)
    );
    var AutoScrollService = (
      /** @class */
      function() {
        function AutoScrollService2(params) {
          this.tickingInterval = null;
          this.onScrollCallback = null;
          this.scrollContainer = params.scrollContainer;
          this.scrollHorizontally = params.scrollAxis.indexOf("x") !== -1;
          this.scrollVertically = params.scrollAxis.indexOf("y") !== -1;
          this.scrollByTick = params.scrollByTick != null ? params.scrollByTick : 20;
          if (params.onScrollCallback) {
            this.onScrollCallback = params.onScrollCallback;
          }
          if (this.scrollVertically) {
            this.getVerticalPosition = params.getVerticalPosition;
            this.setVerticalPosition = params.setVerticalPosition;
          }
          if (this.scrollHorizontally) {
            this.getHorizontalPosition = params.getHorizontalPosition;
            this.setHorizontalPosition = params.setHorizontalPosition;
          }
          this.shouldSkipVerticalScroll = params.shouldSkipVerticalScroll || function() {
            return false;
          };
          this.shouldSkipHorizontalScroll = params.shouldSkipHorizontalScroll || function() {
            return false;
          };
        }
        AutoScrollService2.prototype.check = function(mouseEvent, forceSkipVerticalScroll) {
          if (forceSkipVerticalScroll === void 0) {
            forceSkipVerticalScroll = false;
          }
          var skipVerticalScroll = forceSkipVerticalScroll || this.shouldSkipVerticalScroll();
          if (skipVerticalScroll && this.shouldSkipHorizontalScroll()) {
            return;
          }
          var rect = this.scrollContainer.getBoundingClientRect();
          var scrollTick = this.scrollByTick;
          this.tickLeft = mouseEvent.clientX < rect.left + scrollTick;
          this.tickRight = mouseEvent.clientX > rect.right - scrollTick;
          this.tickUp = mouseEvent.clientY < rect.top + scrollTick && !skipVerticalScroll;
          this.tickDown = mouseEvent.clientY > rect.bottom - scrollTick && !skipVerticalScroll;
          if (this.tickLeft || this.tickRight || this.tickUp || this.tickDown) {
            this.ensureTickingStarted();
          } else {
            this.ensureCleared();
          }
        };
        AutoScrollService2.prototype.ensureTickingStarted = function() {
          if (this.tickingInterval === null) {
            this.tickingInterval = window.setInterval(this.doTick.bind(this), 100);
            this.tickCount = 0;
          }
        };
        AutoScrollService2.prototype.doTick = function() {
          this.tickCount++;
          var tickAmount;
          tickAmount = this.tickCount > 20 ? 200 : this.tickCount > 10 ? 80 : 40;
          if (this.scrollVertically) {
            var vScrollPosition = this.getVerticalPosition();
            if (this.tickUp) {
              this.setVerticalPosition(vScrollPosition - tickAmount);
            }
            if (this.tickDown) {
              this.setVerticalPosition(vScrollPosition + tickAmount);
            }
          }
          if (this.scrollHorizontally) {
            var hScrollPosition = this.getHorizontalPosition();
            if (this.tickLeft) {
              this.setHorizontalPosition(hScrollPosition - tickAmount);
            }
            if (this.tickRight) {
              this.setHorizontalPosition(hScrollPosition + tickAmount);
            }
          }
          if (this.onScrollCallback) {
            this.onScrollCallback();
          }
        };
        AutoScrollService2.prototype.ensureCleared = function() {
          if (this.tickingInterval) {
            window.clearInterval(this.tickingInterval);
            this.tickingInterval = null;
          }
        };
        return AutoScrollService2;
      }()
    );
    var __extends$1m = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __assign$a = function() {
      __assign$a = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign$a.apply(this, arguments);
    };
    var __decorate$1b = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __spreadArrays$8 = function() {
      for (var s = 0, i = 0, il = arguments.length; i < il; i++)
        s += arguments[i].length;
      for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
          r[k] = a[j];
      return r;
    };
    var RowDragFeature = (
      /** @class */
      function(_super) {
        __extends$1m(RowDragFeature2, _super);
        function RowDragFeature2(eContainer) {
          var _this = _super.call(this) || this;
          _this.isMultiRowDrag = false;
          _this.isGridSorted = false;
          _this.isGridFiltered = false;
          _this.isRowGroupActive = false;
          _this.eContainer = eContainer;
          return _this;
        }
        RowDragFeature2.prototype.postConstruct = function() {
          var _this = this;
          if (this.gridOptionsWrapper.isRowModelDefault()) {
            this.clientSideRowModel = this.rowModel;
          }
          var refreshStatus = function() {
            _this.onSortChanged();
            _this.onFilterChanged();
            _this.onRowGroupChanged();
          };
          this.addManagedListener(this.eventService, Events.EVENT_SORT_CHANGED, this.onSortChanged.bind(this));
          this.addManagedListener(this.eventService, Events.EVENT_FILTER_CHANGED, this.onFilterChanged.bind(this));
          this.addManagedListener(this.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.onRowGroupChanged.bind(this));
          this.addManagedListener(this.eventService, Events.EVENT_MODEL_UPDATED, function() {
            refreshStatus();
          });
          refreshStatus();
          this.ctrlsService.whenReady(function() {
            var gridBodyCon = _this.ctrlsService.getGridBodyCtrl();
            _this.autoScrollService = new AutoScrollService({
              scrollContainer: gridBodyCon.getBodyViewportElement(),
              scrollAxis: "y",
              getVerticalPosition: function() {
                return gridBodyCon.getScrollFeature().getVScrollPosition().top;
              },
              setVerticalPosition: function(position) {
                return gridBodyCon.getScrollFeature().setVerticalScrollPosition(position);
              },
              onScrollCallback: function() {
                _this.onDragging(_this.lastDraggingEvent);
              }
            });
          });
        };
        RowDragFeature2.prototype.onSortChanged = function() {
          this.isGridSorted = this.sortController.isSortActive();
        };
        RowDragFeature2.prototype.onFilterChanged = function() {
          this.isGridFiltered = this.filterManager.isAnyFilterPresent();
        };
        RowDragFeature2.prototype.onRowGroupChanged = function() {
          var rowGroups = this.columnModel.getRowGroupColumns();
          this.isRowGroupActive = !missingOrEmpty(rowGroups);
        };
        RowDragFeature2.prototype.getContainer = function() {
          return this.eContainer;
        };
        RowDragFeature2.prototype.isInterestedIn = function(type) {
          return type === exports.DragSourceType.RowDrag;
        };
        RowDragFeature2.prototype.getIconName = function() {
          var managedDrag = this.gridOptionsWrapper.isRowDragManaged();
          if (managedDrag && this.shouldPreventRowMove()) {
            return DragAndDropService.ICON_NOT_ALLOWED;
          }
          return DragAndDropService.ICON_MOVE;
        };
        RowDragFeature2.prototype.shouldPreventRowMove = function() {
          return this.isGridSorted || this.isGridFiltered || this.isRowGroupActive;
        };
        RowDragFeature2.prototype.getRowNodes = function(draggingEvent) {
          if (!this.isFromThisGrid(draggingEvent)) {
            return draggingEvent.dragItem.rowNodes || [];
          }
          var isRowDragMultiRow = this.gridOptionsWrapper.isRowDragMultiRow();
          var selectedNodes = this.selectionService.getSelectedNodes();
          var currentNode = draggingEvent.dragItem.rowNode;
          if (isRowDragMultiRow && selectedNodes.indexOf(currentNode) !== -1) {
            this.isMultiRowDrag = true;
            return __spreadArrays$8(selectedNodes);
          }
          this.isMultiRowDrag = false;
          return [currentNode];
        };
        RowDragFeature2.prototype.onDragEnter = function(draggingEvent) {
          this.dispatchGridEvent(Events.EVENT_ROW_DRAG_ENTER, draggingEvent);
          this.getRowNodes(draggingEvent).forEach(function(rowNode) {
            rowNode.setDragging(true);
          });
          this.onEnterOrDragging(draggingEvent);
        };
        RowDragFeature2.prototype.onDragging = function(draggingEvent) {
          this.onEnterOrDragging(draggingEvent);
        };
        RowDragFeature2.prototype.isFromThisGrid = function(draggingEvent) {
          var dragSourceDomDataKey = draggingEvent.dragSource.dragSourceDomDataKey;
          return dragSourceDomDataKey === this.gridOptionsWrapper.getDomDataKey();
        };
        RowDragFeature2.prototype.isDropZoneWithinThisGrid = function(draggingEvent) {
          var gridBodyCon = this.ctrlsService.getGridBodyCtrl();
          var gridGui = gridBodyCon.getGui();
          var dropZoneTarget = draggingEvent.dropZoneTarget;
          return !gridGui.contains(dropZoneTarget);
        };
        RowDragFeature2.prototype.onEnterOrDragging = function(draggingEvent) {
          this.dispatchGridEvent(Events.EVENT_ROW_DRAG_MOVE, draggingEvent);
          this.lastDraggingEvent = draggingEvent;
          var pixel = this.mouseEventService.getNormalisedPosition(draggingEvent).y;
          var managedDrag = this.gridOptionsWrapper.isRowDragManaged();
          if (managedDrag) {
            this.doManagedDrag(draggingEvent, pixel);
          }
          this.autoScrollService.check(draggingEvent.event);
        };
        RowDragFeature2.prototype.doManagedDrag = function(draggingEvent, pixel) {
          var _this = this;
          var rowNodes;
          var isFromThisGrid = this.isFromThisGrid(draggingEvent);
          if (isFromThisGrid) {
            rowNodes = [draggingEvent.dragItem.rowNode];
            if (this.isMultiRowDrag) {
              rowNodes = __spreadArrays$8(this.selectionService.getSelectedNodes()).sort(function(a, b) {
                return _this.getRowIndexNumber(a) - _this.getRowIndexNumber(b);
              });
            }
            draggingEvent.dragItem.rowNodes = rowNodes;
          } else {
            rowNodes = draggingEvent.dragItem.rowNodes;
          }
          var managedDrag = this.gridOptionsWrapper.isRowDragManaged();
          if (managedDrag && this.shouldPreventRowMove()) {
            return;
          }
          if (this.gridOptionsWrapper.isSuppressMoveWhenRowDragging() || !isFromThisGrid) {
            if (!this.isDropZoneWithinThisGrid(draggingEvent)) {
              this.clientSideRowModel.highlightRowAtPixel(rowNodes[0], pixel);
            }
          } else {
            this.moveRows(rowNodes, pixel);
          }
        };
        RowDragFeature2.prototype.getRowIndexNumber = function(rowNode) {
          return parseInt(last(rowNode.getRowIndexString().split("-")), 10);
        };
        RowDragFeature2.prototype.moveRowAndClearHighlight = function(draggingEvent) {
          var _this = this;
          var lastHighlightedRowNode = this.clientSideRowModel.getLastHighlightedRowNode();
          var isBelow = lastHighlightedRowNode && lastHighlightedRowNode.highlighted === exports.RowHighlightPosition.Below;
          var pixel = this.mouseEventService.getNormalisedPosition(draggingEvent).y;
          var rowNodes = draggingEvent.dragItem.rowNodes;
          var increment = isBelow ? 1 : 0;
          if (this.isFromThisGrid(draggingEvent)) {
            rowNodes.forEach(function(rowNode) {
              if (rowNode.rowTop < pixel) {
                increment -= 1;
              }
            });
            this.moveRows(rowNodes, pixel, increment);
          } else {
            var getRowNodeId_1 = this.gridOptionsWrapper.getRowNodeIdFunc();
            var addIndex = this.clientSideRowModel.getRowIndexAtPixel(pixel) + 1;
            if (this.clientSideRowModel.getHighlightPosition(pixel) === exports.RowHighlightPosition.Above) {
              addIndex--;
            }
            this.clientSideRowModel.updateRowData({
              add: rowNodes.map(function(node) {
                return node.data;
              }).filter(function(data) {
                return !_this.clientSideRowModel.getRowNode(getRowNodeId_1 ? getRowNodeId_1(data) : data.id);
              }),
              addIndex
            });
          }
          this.clearRowHighlight();
        };
        RowDragFeature2.prototype.clearRowHighlight = function() {
          this.clientSideRowModel.highlightRowAtPixel(null);
        };
        RowDragFeature2.prototype.moveRows = function(rowNodes, pixel, increment) {
          if (increment === void 0) {
            increment = 0;
          }
          var rowWasMoved = this.clientSideRowModel.ensureRowsAtPixel(rowNodes, pixel, increment);
          if (rowWasMoved) {
            this.focusService.clearFocusedCell();
            if (this.rangeService) {
              this.rangeService.removeAllCellRanges();
            }
          }
        };
        RowDragFeature2.prototype.addRowDropZone = function(params) {
          var _this = this;
          if (!params.getContainer()) {
            doOnce(function() {
              return console.warn("AG Grid: addRowDropZone - A container target needs to be provided");
            }, "add-drop-zone-empty-target");
            return;
          }
          if (this.dragAndDropService.findExternalZone(params)) {
            console.warn("AG Grid: addRowDropZone - target already exists in the list of DropZones. Use `removeRowDropZone` before adding it again.");
            return;
          }
          var processedParams = {
            getContainer: params.getContainer
          };
          if (params.fromGrid) {
            params.fromGrid = void 0;
            processedParams = params;
          } else {
            if (params.onDragEnter) {
              processedParams.onDragEnter = function(e) {
                params.onDragEnter(_this.draggingToRowDragEvent(Events.EVENT_ROW_DRAG_ENTER, e));
              };
            }
            if (params.onDragLeave) {
              processedParams.onDragLeave = function(e) {
                params.onDragLeave(_this.draggingToRowDragEvent(Events.EVENT_ROW_DRAG_LEAVE, e));
              };
            }
            if (params.onDragging) {
              processedParams.onDragging = function(e) {
                params.onDragging(_this.draggingToRowDragEvent(Events.EVENT_ROW_DRAG_MOVE, e));
              };
            }
            if (params.onDragStop) {
              processedParams.onDragStop = function(e) {
                params.onDragStop(_this.draggingToRowDragEvent(Events.EVENT_ROW_DRAG_END, e));
              };
            }
          }
          this.dragAndDropService.addDropTarget(__assign$a({ isInterestedIn: function(type) {
            return type === exports.DragSourceType.RowDrag;
          }, getIconName: function() {
            return DragAndDropService.ICON_MOVE;
          }, external: true }, processedParams));
        };
        RowDragFeature2.prototype.getRowDropZone = function(events) {
          var _this = this;
          var getContainer = this.getContainer.bind(this);
          var onDragEnter = this.onDragEnter.bind(this);
          var onDragLeave = this.onDragLeave.bind(this);
          var onDragging = this.onDragging.bind(this);
          var onDragStop = this.onDragStop.bind(this);
          if (!events) {
            return {
              getContainer,
              onDragEnter,
              onDragLeave,
              onDragging,
              onDragStop,
              /* @private */
              fromGrid: true
            };
          }
          return {
            getContainer,
            onDragEnter: events.onDragEnter ? function(e) {
              onDragEnter(e);
              events.onDragEnter(_this.draggingToRowDragEvent(Events.EVENT_ROW_DRAG_ENTER, e));
            } : onDragEnter,
            onDragLeave: events.onDragLeave ? function(e) {
              onDragLeave(e);
              events.onDragLeave(_this.draggingToRowDragEvent(Events.EVENT_ROW_DRAG_LEAVE, e));
            } : onDragLeave,
            onDragging: events.onDragging ? function(e) {
              onDragging(e);
              events.onDragging(_this.draggingToRowDragEvent(Events.EVENT_ROW_DRAG_MOVE, e));
            } : onDragging,
            onDragStop: events.onDragStop ? function(e) {
              onDragStop(e);
              events.onDragStop(_this.draggingToRowDragEvent(Events.EVENT_ROW_DRAG_END, e));
            } : onDragStop,
            fromGrid: true
            /* @private */
          };
        };
        RowDragFeature2.prototype.draggingToRowDragEvent = function(type, draggingEvent) {
          var yNormalised = this.mouseEventService.getNormalisedPosition(draggingEvent).y;
          var mouseIsPastLastRow = yNormalised > this.paginationProxy.getCurrentPageHeight();
          var overIndex = -1;
          var overNode;
          if (!mouseIsPastLastRow) {
            overIndex = this.rowModel.getRowIndexAtPixel(yNormalised);
            overNode = this.rowModel.getRow(overIndex);
          }
          var vDirectionString;
          switch (draggingEvent.vDirection) {
            case exports.VerticalDirection.Down:
              vDirectionString = "down";
              break;
            case exports.VerticalDirection.Up:
              vDirectionString = "up";
              break;
            default:
              vDirectionString = null;
              break;
          }
          var event = {
            type,
            api: this.gridOptionsWrapper.getApi(),
            columnApi: this.gridOptionsWrapper.getColumnApi(),
            event: draggingEvent.event,
            node: draggingEvent.dragItem.rowNode,
            nodes: draggingEvent.dragItem.rowNodes,
            overIndex,
            overNode,
            y: yNormalised,
            vDirection: vDirectionString
          };
          return event;
        };
        RowDragFeature2.prototype.dispatchGridEvent = function(type, draggingEvent) {
          var event = this.draggingToRowDragEvent(type, draggingEvent);
          this.eventService.dispatchEvent(event);
        };
        RowDragFeature2.prototype.onDragLeave = function(draggingEvent) {
          this.dispatchGridEvent(Events.EVENT_ROW_DRAG_LEAVE, draggingEvent);
          this.stopDragging(draggingEvent);
          if (this.gridOptionsWrapper.isRowDragManaged()) {
            this.clearRowHighlight();
          }
          if (this.isFromThisGrid(draggingEvent)) {
            this.isMultiRowDrag = false;
          }
        };
        RowDragFeature2.prototype.onDragStop = function(draggingEvent) {
          this.dispatchGridEvent(Events.EVENT_ROW_DRAG_END, draggingEvent);
          this.stopDragging(draggingEvent);
          if (this.gridOptionsWrapper.isRowDragManaged() && (this.gridOptionsWrapper.isSuppressMoveWhenRowDragging() || !this.isFromThisGrid(draggingEvent)) && !this.isDropZoneWithinThisGrid(draggingEvent)) {
            this.moveRowAndClearHighlight(draggingEvent);
          }
        };
        RowDragFeature2.prototype.stopDragging = function(draggingEvent) {
          this.autoScrollService.ensureCleared();
          this.getRowNodes(draggingEvent).forEach(function(rowNode) {
            rowNode.setDragging(false);
          });
        };
        __decorate$1b([
          Autowired("dragAndDropService")
        ], RowDragFeature2.prototype, "dragAndDropService", void 0);
        __decorate$1b([
          Autowired("rowModel")
        ], RowDragFeature2.prototype, "rowModel", void 0);
        __decorate$1b([
          Autowired("paginationProxy")
        ], RowDragFeature2.prototype, "paginationProxy", void 0);
        __decorate$1b([
          Autowired("columnModel")
        ], RowDragFeature2.prototype, "columnModel", void 0);
        __decorate$1b([
          Autowired("focusService")
        ], RowDragFeature2.prototype, "focusService", void 0);
        __decorate$1b([
          Autowired("sortController")
        ], RowDragFeature2.prototype, "sortController", void 0);
        __decorate$1b([
          Autowired("filterManager")
        ], RowDragFeature2.prototype, "filterManager", void 0);
        __decorate$1b([
          Autowired("selectionService")
        ], RowDragFeature2.prototype, "selectionService", void 0);
        __decorate$1b([
          Autowired("mouseEventService")
        ], RowDragFeature2.prototype, "mouseEventService", void 0);
        __decorate$1b([
          Autowired("ctrlsService")
        ], RowDragFeature2.prototype, "ctrlsService", void 0);
        __decorate$1b([
          Optional("rangeService")
        ], RowDragFeature2.prototype, "rangeService", void 0);
        __decorate$1b([
          PostConstruct
        ], RowDragFeature2.prototype, "postConstruct", null);
        return RowDragFeature2;
      }(BeanStub)
    );
    var __extends$1n = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1c = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    (function(RowAnimationCssClasses) {
      RowAnimationCssClasses["ANIMATION_ON"] = "ag-row-animation";
      RowAnimationCssClasses["ANIMATION_OFF"] = "ag-row-no-animation";
    })(exports.RowAnimationCssClasses || (exports.RowAnimationCssClasses = {}));
    var CSS_CLASS_CELL_SELECTABLE = "ag-selectable";
    var CSS_CLASS_FORCE_VERTICAL_SCROLL = "ag-force-vertical-scroll";
    var CSS_CLASS_COLUMN_MOVING = "ag-column-moving";
    var GridBodyCtrl = (
      /** @class */
      function(_super) {
        __extends$1n(GridBodyCtrl2, _super);
        function GridBodyCtrl2() {
          var _this = _super !== null && _super.apply(this, arguments) || this;
          _this.angularApplyTriggered = false;
          return _this;
        }
        GridBodyCtrl2.prototype.getScrollFeature = function() {
          return this.bodyScrollFeature;
        };
        GridBodyCtrl2.prototype.getBodyViewportElement = function() {
          return this.eBodyViewport;
        };
        GridBodyCtrl2.prototype.setComp = function(comp, eGridBody, eBodyViewport, eTop, eBottom) {
          this.comp = comp;
          this.eGridBody = eGridBody;
          this.eBodyViewport = eBodyViewport;
          this.eTop = eTop;
          this.eBottom = eBottom;
          this.setCellTextSelection(this.gridOptionsWrapper.isEnableCellTextSelect());
          this.createManagedBean(new LayoutFeature(this.comp));
          this.bodyScrollFeature = this.createManagedBean(new GridBodyScrollFeature(this.eBodyViewport));
          this.addRowDragListener();
          this.setupRowAnimationCssClass();
          this.ctrlsService.registerGridBodyCtrl(this);
          this.addEventListeners();
          this.addFocusListeners([eTop, eBodyViewport, eBottom]);
          this.onGridColumnsChanged();
          this.addBodyViewportListener();
          this.setFloatingHeights();
          this.disableBrowserDragging();
          this.addStopEditingWhenGridLosesFocus();
          if (this.$scope) {
            this.addAngularApplyCheck();
          }
        };
        GridBodyCtrl2.prototype.getComp = function() {
          return this.comp;
        };
        GridBodyCtrl2.prototype.addEventListeners = function() {
          this.addManagedListener(this.eventService, Events.EVENT_GRID_COLUMNS_CHANGED, this.onGridColumnsChanged.bind(this));
          this.addManagedListener(this.eventService, Events.EVENT_SCROLL_VISIBILITY_CHANGED, this.onScrollVisibilityChanged.bind(this));
          this.addManagedListener(this.eventService, Events.EVENT_PINNED_ROW_DATA_CHANGED, this.setFloatingHeights.bind(this));
        };
        GridBodyCtrl2.prototype.addFocusListeners = function(elements) {
          var _this = this;
          elements.forEach(function(element) {
            _this.addManagedListener(element, "focusin", function() {
              addCssClass(element, "ag-has-focus");
            });
            _this.addManagedListener(element, "focusout", function(e) {
              if (!element.contains(e.relatedTarget)) {
                removeCssClass(element, "ag-has-focus");
              }
            });
          });
        };
        GridBodyCtrl2.prototype.setColumnMovingCss = function(moving) {
          this.comp.setColumnMovingCss(moving ? CSS_CLASS_COLUMN_MOVING : null, moving);
        };
        GridBodyCtrl2.prototype.setCellTextSelection = function(selectable) {
          if (selectable === void 0) {
            selectable = false;
          }
          var cssClass = selectable ? CSS_CLASS_CELL_SELECTABLE : null;
          this.comp.setCellSelectableCss(cssClass, selectable);
        };
        GridBodyCtrl2.prototype.onScrollVisibilityChanged = function() {
          var visible = this.scrollVisibleService.isVerticalScrollShowing();
          this.setVerticalScrollPaddingVisible(visible);
        };
        GridBodyCtrl2.prototype.onGridColumnsChanged = function() {
          var columns = this.columnModel.getAllGridColumns();
          this.comp.setColumnCount(columns ? columns.length : 0);
        };
        GridBodyCtrl2.prototype.disableBrowserDragging = function() {
          this.addManagedListener(this.eGridBody, "dragstart", function(event) {
            if (event.target instanceof HTMLImageElement) {
              event.preventDefault();
              return false;
            }
          });
        };
        GridBodyCtrl2.prototype.addStopEditingWhenGridLosesFocus = function() {
          var _this = this;
          if (!this.gridOptionsWrapper.isStopEditingWhenCellsLoseFocus()) {
            return;
          }
          var focusOutListener = function(event) {
            var elementWithFocus = event.relatedTarget;
            if (getTabIndex(elementWithFocus) === null) {
              _this.rowRenderer.stopEditing();
              return;
            }
            var clickInsideGrid = (
              // see if click came from inside the viewports
              viewports.some(function(viewport) {
                return viewport.contains(elementWithFocus);
              }) && _this.mouseEventService.isElementInThisGrid(elementWithFocus)
            );
            if (!clickInsideGrid) {
              var popupService = _this.popupService;
              clickInsideGrid = popupService.getActivePopups().some(function(popup) {
                return popup.contains(elementWithFocus);
              }) || popupService.isElementWithinCustomPopup(elementWithFocus);
            }
            if (!clickInsideGrid) {
              _this.rowRenderer.stopEditing();
            }
          };
          var viewports = [this.eBodyViewport, this.eBottom, this.eTop];
          viewports.forEach(function(viewport) {
            return _this.addManagedListener(viewport, "focusout", focusOutListener);
          });
        };
        GridBodyCtrl2.prototype.updateRowCount = function() {
          var headerCount = this.headerNavigationService.getHeaderRowCount();
          var modelType = this.paginationProxy.getType();
          var rowCount = -1;
          if (modelType === Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {
            rowCount = 0;
            this.paginationProxy.forEachNode(function(node) {
              if (!node.group) {
                rowCount++;
              }
            });
          }
          var total = rowCount === -1 ? -1 : headerCount + rowCount;
          this.comp.setRowCount(total);
        };
        GridBodyCtrl2.prototype.registerBodyViewportResizeListener = function(listener) {
          this.comp.registerBodyViewportResizeListener(listener);
        };
        GridBodyCtrl2.prototype.setVerticalScrollPaddingVisible = function(visible) {
          var overflowY = visible ? "scroll" : "hidden";
          this.comp.setPinnedTopBottomOverflowY(overflowY);
        };
        GridBodyCtrl2.prototype.isVerticalScrollShowing = function() {
          var show = this.gridOptionsWrapper.isAlwaysShowVerticalScroll();
          var cssClass = show ? CSS_CLASS_FORCE_VERTICAL_SCROLL : null;
          this.comp.setAlwaysVerticalScrollClass(cssClass, show);
          return show || isVerticalScrollShowing(this.eBodyViewport);
        };
        GridBodyCtrl2.prototype.setupRowAnimationCssClass = function() {
          var _this = this;
          var listener = function() {
            var animateRows = _this.gridOptionsWrapper.isAnimateRows() && !_this.rowContainerHeightService.isStretching();
            var animateRowsCssClass = animateRows ? exports.RowAnimationCssClasses.ANIMATION_ON : exports.RowAnimationCssClasses.ANIMATION_OFF;
            _this.comp.setRowAnimationCssOnBodyViewport(animateRowsCssClass, animateRows);
          };
          listener();
          this.addManagedListener(this.eventService, Events.EVENT_HEIGHT_SCALE_CHANGED, listener);
        };
        GridBodyCtrl2.prototype.getGridBodyElement = function() {
          return this.eGridBody;
        };
        GridBodyCtrl2.prototype.addBodyViewportListener = function() {
          var _this = this;
          var listener = function(mouseEvent) {
            if (_this.gridOptionsWrapper.isPreventDefaultOnContextMenu()) {
              mouseEvent.preventDefault();
            }
            var target = getTarget(mouseEvent);
            if (target === _this.eBodyViewport || target === _this.ctrlsService.getCenterRowContainerCtrl().getViewportElement()) {
              if (_this.contextMenuFactory) {
                _this.contextMenuFactory.onContextMenu(mouseEvent, null, null, null, null, _this.eGridBody);
              }
            }
          };
          this.addManagedListener(this.eBodyViewport, "contextmenu", listener);
          this.addManagedListener(this.eBodyViewport, "wheel", this.onWheel.bind(this));
        };
        GridBodyCtrl2.prototype.onWheel = function(e) {
          if (!this.gridOptionsWrapper.isSuppressScrollWhenPopupsAreOpen()) {
            return;
          }
          if (this.popupService.hasAnchoredPopup()) {
            e.preventDefault();
          }
        };
        GridBodyCtrl2.prototype.getGui = function() {
          return this.eGridBody;
        };
        GridBodyCtrl2.prototype.scrollVertically = function(pixels) {
          var oldScrollPosition = this.eBodyViewport.scrollTop;
          this.bodyScrollFeature.setVerticalScrollPosition(oldScrollPosition + pixels);
          return this.eBodyViewport.scrollTop - oldScrollPosition;
        };
        GridBodyCtrl2.prototype.addRowDragListener = function() {
          this.rowDragFeature = this.createManagedBean(new RowDragFeature(this.eBodyViewport));
          this.dragAndDropService.addDropTarget(this.rowDragFeature);
        };
        GridBodyCtrl2.prototype.getRowDragFeature = function() {
          return this.rowDragFeature;
        };
        GridBodyCtrl2.prototype.setFloatingHeights = function() {
          var pinnedRowModel = this.pinnedRowModel;
          var floatingTopHeight = pinnedRowModel.getPinnedTopTotalHeight();
          if (floatingTopHeight) {
            floatingTopHeight += 1;
          }
          var floatingBottomHeight = pinnedRowModel.getPinnedBottomTotalHeight();
          if (floatingBottomHeight) {
            floatingBottomHeight += 1;
          }
          this.comp.setTopHeight(floatingTopHeight);
          this.comp.setBottomHeight(floatingBottomHeight);
          this.comp.setTopDisplay(floatingTopHeight ? "inherit" : "none");
          this.comp.setBottomDisplay(floatingBottomHeight ? "inherit" : "none");
        };
        GridBodyCtrl2.prototype.sizeColumnsToFit = function(nextTimeout) {
          var _this = this;
          var removeScrollWidth = this.isVerticalScrollShowing() && !isBrowserIE();
          var scrollWidthToRemove = removeScrollWidth ? this.gridOptionsWrapper.getScrollbarWidth() : 0;
          var bodyViewportWidth = getInnerWidth(this.eBodyViewport);
          var availableWidth = bodyViewportWidth - scrollWidthToRemove;
          if (availableWidth > 0) {
            this.columnModel.sizeColumnsToFit(availableWidth, "sizeColumnsToFit");
            return;
          }
          if (nextTimeout === void 0) {
            window.setTimeout(function() {
              _this.sizeColumnsToFit(100);
            }, 0);
          } else if (nextTimeout === 100) {
            window.setTimeout(function() {
              _this.sizeColumnsToFit(500);
            }, 100);
          } else if (nextTimeout === 500) {
            window.setTimeout(function() {
              _this.sizeColumnsToFit(-1);
            }, 500);
          } else {
            console.warn("AG Grid: tried to call sizeColumnsToFit() but the grid is coming back with zero width, maybe the grid is not visible yet on the screen?");
          }
        };
        GridBodyCtrl2.prototype.addScrollEventListener = function(listener) {
          this.eBodyViewport.addEventListener("scroll", listener);
        };
        GridBodyCtrl2.prototype.removeScrollEventListener = function(listener) {
          this.eBodyViewport.removeEventListener("scroll", listener);
        };
        GridBodyCtrl2.prototype.requestAngularApply = function() {
          var _this = this;
          if (this.angularApplyTriggered) {
            return;
          }
          this.angularApplyTriggered = true;
          window.setTimeout(function() {
            _this.angularApplyTriggered = false;
            _this.$scope.$apply();
          }, 0);
        };
        GridBodyCtrl2.prototype.addAngularApplyCheck = function() {
          var _this = this;
          this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, function() {
            return _this.requestAngularApply();
          });
          this.addManagedListener(this.eventService, Events.EVENT_VIRTUAL_COLUMNS_CHANGED, function() {
            return _this.requestAngularApply();
          });
        };
        __decorate$1c([
          Autowired("rowContainerHeightService")
        ], GridBodyCtrl2.prototype, "rowContainerHeightService", void 0);
        __decorate$1c([
          Autowired("ctrlsService")
        ], GridBodyCtrl2.prototype, "ctrlsService", void 0);
        __decorate$1c([
          Autowired("columnModel")
        ], GridBodyCtrl2.prototype, "columnModel", void 0);
        __decorate$1c([
          Autowired("scrollVisibleService")
        ], GridBodyCtrl2.prototype, "scrollVisibleService", void 0);
        __decorate$1c([
          Optional("contextMenuFactory")
        ], GridBodyCtrl2.prototype, "contextMenuFactory", void 0);
        __decorate$1c([
          Autowired("headerNavigationService")
        ], GridBodyCtrl2.prototype, "headerNavigationService", void 0);
        __decorate$1c([
          Autowired("paginationProxy")
        ], GridBodyCtrl2.prototype, "paginationProxy", void 0);
        __decorate$1c([
          Autowired("dragAndDropService")
        ], GridBodyCtrl2.prototype, "dragAndDropService", void 0);
        __decorate$1c([
          Autowired("pinnedRowModel")
        ], GridBodyCtrl2.prototype, "pinnedRowModel", void 0);
        __decorate$1c([
          Autowired("rowRenderer")
        ], GridBodyCtrl2.prototype, "rowRenderer", void 0);
        __decorate$1c([
          Autowired("popupService")
        ], GridBodyCtrl2.prototype, "popupService", void 0);
        __decorate$1c([
          Autowired("mouseEventService")
        ], GridBodyCtrl2.prototype, "mouseEventService", void 0);
        __decorate$1c([
          Autowired("$scope")
        ], GridBodyCtrl2.prototype, "$scope", void 0);
        return GridBodyCtrl2;
      }(BeanStub)
    );
    var __extends$1o = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1d = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var RowContainerEventsFeature = (
      /** @class */
      function(_super) {
        __extends$1o(RowContainerEventsFeature2, _super);
        function RowContainerEventsFeature2(element) {
          var _this = _super.call(this) || this;
          _this.element = element;
          return _this;
        }
        RowContainerEventsFeature2.prototype.postConstruct = function() {
          this.addMouseListeners();
          this.mockContextMenuForIPad();
          this.addKeyboardEvents();
        };
        RowContainerEventsFeature2.prototype.addKeyboardEvents = function() {
          var _this = this;
          var eventNames = ["keydown", "keypress"];
          eventNames.forEach(function(eventName) {
            var listener = _this.processKeyboardEvent.bind(_this, eventName);
            _this.addManagedListener(_this.element, eventName, listener);
          });
        };
        RowContainerEventsFeature2.prototype.addMouseListeners = function() {
          var _this = this;
          var mouseDownEvent = isEventSupported("touchstart") ? "touchstart" : "mousedown";
          var eventNames = ["dblclick", "contextmenu", "mouseover", "mouseout", "click", mouseDownEvent];
          eventNames.forEach(function(eventName) {
            var listener = _this.processMouseEvent.bind(_this, eventName);
            _this.addManagedListener(_this.element, eventName, listener);
          });
        };
        RowContainerEventsFeature2.prototype.processMouseEvent = function(eventName, mouseEvent) {
          if (!this.mouseEventService.isEventFromThisGrid(mouseEvent) || isStopPropagationForAgGrid(mouseEvent)) {
            return;
          }
          var rowComp = this.getRowForEvent(mouseEvent);
          var cellCtrl = this.mouseEventService.getRenderedCellForEvent(mouseEvent);
          if (eventName === "contextmenu") {
            this.handleContextMenuMouseEvent(mouseEvent, null, rowComp, cellCtrl);
          } else {
            if (cellCtrl) {
              cellCtrl.onMouseEvent(eventName, mouseEvent);
            }
            if (rowComp) {
              rowComp.onMouseEvent(eventName, mouseEvent);
            }
          }
        };
        RowContainerEventsFeature2.prototype.mockContextMenuForIPad = function() {
          var _this = this;
          if (!isIOSUserAgent()) {
            return;
          }
          var touchListener = new TouchListener(this.element);
          var longTapListener = function(event) {
            var rowComp = _this.getRowForEvent(event.touchEvent);
            var cellComp = _this.mouseEventService.getRenderedCellForEvent(event.touchEvent);
            _this.handleContextMenuMouseEvent(null, event.touchEvent, rowComp, cellComp);
          };
          this.addManagedListener(touchListener, TouchListener.EVENT_LONG_TAP, longTapListener);
          this.addDestroyFunc(function() {
            return touchListener.destroy();
          });
        };
        RowContainerEventsFeature2.prototype.getRowForEvent = function(event) {
          var sourceElement = getTarget(event);
          while (sourceElement) {
            var rowCon = this.gridOptionsWrapper.getDomData(sourceElement, RowCtrl.DOM_DATA_KEY_ROW_CTRL);
            if (rowCon) {
              return rowCon;
            }
            sourceElement = sourceElement.parentElement;
          }
          return null;
        };
        RowContainerEventsFeature2.prototype.handleContextMenuMouseEvent = function(mouseEvent, touchEvent, rowComp, cellCtrl) {
          var rowNode = rowComp ? rowComp.getRowNode() : null;
          var column = cellCtrl ? cellCtrl.getColumn() : null;
          var value = null;
          if (column) {
            var event_1 = mouseEvent ? mouseEvent : touchEvent;
            cellCtrl.dispatchCellContextMenuEvent(event_1);
            value = this.valueService.getValue(column, rowNode);
          }
          var gridBodyCon = this.ctrlsService.getGridBodyCtrl();
          var anchorToElement = cellCtrl ? cellCtrl.getGui() : gridBodyCon.getGridBodyElement();
          if (this.contextMenuFactory) {
            this.contextMenuFactory.onContextMenu(mouseEvent, touchEvent, rowNode, column, value, anchorToElement);
          }
        };
        RowContainerEventsFeature2.prototype.processKeyboardEvent = function(eventName, keyboardEvent) {
          var cellComp = getCtrlForEvent(this.gridOptionsWrapper, keyboardEvent, CellCtrl.DOM_DATA_KEY_CELL_CTRL);
          var rowComp = getCtrlForEvent(this.gridOptionsWrapper, keyboardEvent, RowCtrl.DOM_DATA_KEY_ROW_CTRL);
          if (keyboardEvent.defaultPrevented) {
            return;
          }
          if (cellComp) {
            this.processCellKeyboardEvent(cellComp, eventName, keyboardEvent);
          } else if (rowComp && rowComp.isFullWidth()) {
            this.processFullWidthRowKeyboardEvent(rowComp, eventName, keyboardEvent);
          }
        };
        RowContainerEventsFeature2.prototype.processCellKeyboardEvent = function(cellCtrl, eventName, keyboardEvent) {
          var rowNode = cellCtrl.getRowNode();
          var column = cellCtrl.getColumn();
          var editing = cellCtrl.isEditing();
          var gridProcessingAllowed = !isUserSuppressingKeyboardEvent(this.gridOptionsWrapper, keyboardEvent, rowNode, column, editing);
          if (gridProcessingAllowed) {
            switch (eventName) {
              case "keydown":
                var wasScrollKey = !editing && this.navigationService.handlePageScrollingKey(keyboardEvent);
                if (!wasScrollKey) {
                  cellCtrl.onKeyDown(keyboardEvent);
                }
                this.doGridOperations(keyboardEvent, cellCtrl.isEditing());
                break;
              case "keypress":
                cellCtrl.onKeyPress(keyboardEvent);
                break;
            }
          }
          if (eventName === "keydown") {
            var cellKeyDownEvent = cellCtrl.createEvent(keyboardEvent, Events.EVENT_CELL_KEY_DOWN);
            this.eventService.dispatchEvent(cellKeyDownEvent);
          }
          if (eventName === "keypress") {
            var cellKeyPressEvent = cellCtrl.createEvent(keyboardEvent, Events.EVENT_CELL_KEY_PRESS);
            this.eventService.dispatchEvent(cellKeyPressEvent);
          }
        };
        RowContainerEventsFeature2.prototype.processFullWidthRowKeyboardEvent = function(rowComp, eventName, keyboardEvent) {
          var rowNode = rowComp.getRowNode();
          var focusedCell = this.focusService.getFocusedCell();
          var column = focusedCell && focusedCell.column;
          var gridProcessingAllowed = !isUserSuppressingKeyboardEvent(this.gridOptionsWrapper, keyboardEvent, rowNode, column, false);
          if (gridProcessingAllowed) {
            var key = keyboardEvent.keyCode;
            if (eventName === "keydown") {
              switch (key) {
                case KeyCode.UP:
                case KeyCode.DOWN:
                  rowComp.onKeyboardNavigate(keyboardEvent);
                  break;
                case KeyCode.TAB:
                  rowComp.onTabKeyDown(keyboardEvent);
              }
            }
          }
          if (eventName === "keydown") {
            var cellKeyDownEvent = rowComp.createRowEvent(Events.EVENT_CELL_KEY_DOWN, keyboardEvent);
            this.eventService.dispatchEvent(cellKeyDownEvent);
          }
          if (eventName === "keypress") {
            var cellKeyPressEvent = rowComp.createRowEvent(Events.EVENT_CELL_KEY_PRESS, keyboardEvent);
            this.eventService.dispatchEvent(cellKeyPressEvent);
          }
        };
        RowContainerEventsFeature2.prototype.doGridOperations = function(keyboardEvent, editing) {
          if (!keyboardEvent.ctrlKey && !keyboardEvent.metaKey) {
            return;
          }
          if (editing) {
            return;
          }
          if (!this.mouseEventService.isEventFromThisGrid(keyboardEvent)) {
            return;
          }
          switch (keyboardEvent.which) {
            case KeyCode.A:
              return this.onCtrlAndA(keyboardEvent);
            case KeyCode.C:
              return this.onCtrlAndC(keyboardEvent);
            case KeyCode.V:
              return this.onCtrlAndV();
            case KeyCode.D:
              return this.onCtrlAndD(keyboardEvent);
            case KeyCode.Z:
              return keyboardEvent.shiftKey ? this.undoRedoService.redo() : this.undoRedoService.undo();
            case KeyCode.Y:
              return this.undoRedoService.redo();
          }
        };
        RowContainerEventsFeature2.prototype.onCtrlAndA = function(event) {
          var _a2 = this, pinnedRowModel = _a2.pinnedRowModel, paginationProxy = _a2.paginationProxy, rangeService = _a2.rangeService;
          var PINNED_BOTTOM = Constants.PINNED_BOTTOM, PINNED_TOP = Constants.PINNED_TOP;
          if (rangeService && paginationProxy.isRowsToRender()) {
            var _b = [
              pinnedRowModel.isEmpty(PINNED_TOP),
              pinnedRowModel.isEmpty(PINNED_BOTTOM)
            ], isEmptyPinnedTop = _b[0], isEmptyPinnedBottom = _b[1];
            var floatingStart = isEmptyPinnedTop ? null : PINNED_TOP;
            var floatingEnd = void 0;
            var rowEnd = void 0;
            if (isEmptyPinnedBottom) {
              floatingEnd = null;
              rowEnd = this.paginationProxy.getRowCount() - 1;
            } else {
              floatingEnd = PINNED_BOTTOM;
              rowEnd = pinnedRowModel.getPinnedBottomRowData().length - 1;
            }
            var allDisplayedColumns = this.columnModel.getAllDisplayedColumns();
            if (missingOrEmpty(allDisplayedColumns)) {
              return;
            }
            rangeService.setCellRange({
              rowStartIndex: 0,
              rowStartPinned: floatingStart,
              rowEndIndex: rowEnd,
              rowEndPinned: floatingEnd,
              columnStart: allDisplayedColumns[0],
              columnEnd: last(allDisplayedColumns)
            });
          }
          event.preventDefault();
        };
        RowContainerEventsFeature2.prototype.onCtrlAndC = function(event) {
          if (!this.clipboardService || this.gridOptionsWrapper.isEnableCellTextSelection()) {
            return;
          }
          this.clipboardService.copyToClipboard();
          event.preventDefault();
        };
        RowContainerEventsFeature2.prototype.onCtrlAndV = function() {
          if (ModuleRegistry.isRegistered(exports.ModuleNames.ClipboardModule) && !this.gridOptionsWrapper.isSuppressClipboardPaste()) {
            this.clipboardService.pasteFromClipboard();
          }
        };
        RowContainerEventsFeature2.prototype.onCtrlAndD = function(event) {
          if (ModuleRegistry.isRegistered(exports.ModuleNames.ClipboardModule) && !this.gridOptionsWrapper.isSuppressClipboardPaste()) {
            this.clipboardService.copyRangeDown();
          }
          event.preventDefault();
        };
        __decorate$1d([
          Autowired("mouseEventService")
        ], RowContainerEventsFeature2.prototype, "mouseEventService", void 0);
        __decorate$1d([
          Autowired("valueService")
        ], RowContainerEventsFeature2.prototype, "valueService", void 0);
        __decorate$1d([
          Optional("contextMenuFactory")
        ], RowContainerEventsFeature2.prototype, "contextMenuFactory", void 0);
        __decorate$1d([
          Autowired("ctrlsService")
        ], RowContainerEventsFeature2.prototype, "ctrlsService", void 0);
        __decorate$1d([
          Autowired("navigationService")
        ], RowContainerEventsFeature2.prototype, "navigationService", void 0);
        __decorate$1d([
          Autowired("focusService")
        ], RowContainerEventsFeature2.prototype, "focusService", void 0);
        __decorate$1d([
          Autowired("undoRedoService")
        ], RowContainerEventsFeature2.prototype, "undoRedoService", void 0);
        __decorate$1d([
          Autowired("columnModel")
        ], RowContainerEventsFeature2.prototype, "columnModel", void 0);
        __decorate$1d([
          Autowired("paginationProxy")
        ], RowContainerEventsFeature2.prototype, "paginationProxy", void 0);
        __decorate$1d([
          Autowired("pinnedRowModel")
        ], RowContainerEventsFeature2.prototype, "pinnedRowModel", void 0);
        __decorate$1d([
          Optional("rangeService")
        ], RowContainerEventsFeature2.prototype, "rangeService", void 0);
        __decorate$1d([
          Optional("clipboardService")
        ], RowContainerEventsFeature2.prototype, "clipboardService", void 0);
        __decorate$1d([
          PostConstruct
        ], RowContainerEventsFeature2.prototype, "postConstruct", null);
        return RowContainerEventsFeature2;
      }(BeanStub)
    );
    var __extends$1p = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1e = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var ViewportSizeFeature = (
      /** @class */
      function(_super) {
        __extends$1p(ViewportSizeFeature2, _super);
        function ViewportSizeFeature2(centerContainer) {
          var _this = _super.call(this) || this;
          _this.centerContainerCon = centerContainer;
          return _this;
        }
        ViewportSizeFeature2.prototype.postConstruct = function() {
          var _this = this;
          this.ctrlsService.whenReady(function() {
            _this.gridBodyCon = _this.ctrlsService.getGridBodyCtrl();
            _this.listenForResize();
          });
          this.addManagedListener(this.eventService, Events.EVENT_SCROLLBAR_WIDTH_CHANGED, this.onScrollbarWidthChanged.bind(this));
        };
        ViewportSizeFeature2.prototype.listenForResize = function() {
          var listener = this.onCenterViewportResized.bind(this);
          this.centerContainerCon.registerViewportResizeListener(listener);
          this.gridBodyCon.registerBodyViewportResizeListener(listener);
        };
        ViewportSizeFeature2.prototype.onScrollbarWidthChanged = function() {
          this.checkViewportAndScrolls();
        };
        ViewportSizeFeature2.prototype.onCenterViewportResized = function() {
          if (this.centerContainerCon.isViewportVisible()) {
            this.checkViewportAndScrolls();
            var newWidth = this.centerContainerCon.getCenterWidth();
            if (newWidth !== this.centerWidth) {
              this.centerWidth = newWidth;
              this.columnModel.refreshFlexedColumns({ viewportWidth: this.centerWidth, updateBodyWidths: true, fireResizedEvent: true });
            }
          } else {
            this.bodyHeight = 0;
          }
        };
        ViewportSizeFeature2.prototype.checkViewportAndScrolls = function() {
          this.updateScrollVisibleService();
          this.checkBodyHeight();
          this.onHorizontalViewportChanged();
          this.gridBodyCon.getScrollFeature().checkScrollLeft();
        };
        ViewportSizeFeature2.prototype.getBodyHeight = function() {
          return this.bodyHeight;
        };
        ViewportSizeFeature2.prototype.checkBodyHeight = function() {
          var eBodyViewport = this.gridBodyCon.getBodyViewportElement();
          var bodyHeight = getInnerHeight(eBodyViewport);
          if (this.bodyHeight !== bodyHeight) {
            this.bodyHeight = bodyHeight;
            var event_1 = {
              type: Events.EVENT_BODY_HEIGHT_CHANGED,
              api: this.gridApi,
              columnApi: this.columnApi
            };
            this.eventService.dispatchEvent(event_1);
          }
        };
        ViewportSizeFeature2.prototype.updateScrollVisibleService = function() {
          this.updateScrollVisibleServiceImpl();
          setTimeout(this.updateScrollVisibleServiceImpl.bind(this), 500);
        };
        ViewportSizeFeature2.prototype.updateScrollVisibleServiceImpl = function() {
          var params = {
            horizontalScrollShowing: this.isHorizontalScrollShowing(),
            verticalScrollShowing: this.gridBodyCon.isVerticalScrollShowing()
          };
          this.scrollVisibleService.setScrollsVisible(params);
          this.gridBodyCon.setVerticalScrollPaddingVisible(params.verticalScrollShowing);
        };
        ViewportSizeFeature2.prototype.isHorizontalScrollShowing = function() {
          var isAlwaysShowHorizontalScroll = this.gridOptionsWrapper.isAlwaysShowHorizontalScroll();
          return isAlwaysShowHorizontalScroll || this.centerContainerCon.isViewportHScrollShowing();
        };
        ViewportSizeFeature2.prototype.onHorizontalViewportChanged = function() {
          var scrollWidth = this.centerContainerCon.getCenterWidth();
          var scrollPosition = this.centerContainerCon.getViewportScrollLeft();
          this.columnModel.setViewportPosition(scrollWidth, scrollPosition);
        };
        __decorate$1e([
          Autowired("ctrlsService")
        ], ViewportSizeFeature2.prototype, "ctrlsService", void 0);
        __decorate$1e([
          Autowired("columnModel")
        ], ViewportSizeFeature2.prototype, "columnModel", void 0);
        __decorate$1e([
          Autowired("scrollVisibleService")
        ], ViewportSizeFeature2.prototype, "scrollVisibleService", void 0);
        __decorate$1e([
          Autowired("columnApi")
        ], ViewportSizeFeature2.prototype, "columnApi", void 0);
        __decorate$1e([
          Autowired("gridApi")
        ], ViewportSizeFeature2.prototype, "gridApi", void 0);
        __decorate$1e([
          PostConstruct
        ], ViewportSizeFeature2.prototype, "postConstruct", null);
        return ViewportSizeFeature2;
      }(BeanStub)
    );
    var __extends$1q = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1f = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var SetPinnedLeftWidthFeature = (
      /** @class */
      function(_super) {
        __extends$1q(SetPinnedLeftWidthFeature2, _super);
        function SetPinnedLeftWidthFeature2(element) {
          var _this = _super.call(this) || this;
          _this.element = element;
          return _this;
        }
        SetPinnedLeftWidthFeature2.prototype.postConstruct = function() {
          this.addManagedListener(this.eventService, Events.EVENT_LEFT_PINNED_WIDTH_CHANGED, this.onPinnedLeftWidthChanged.bind(this));
        };
        SetPinnedLeftWidthFeature2.prototype.onPinnedLeftWidthChanged = function() {
          var leftWidth = this.pinnedWidthService.getPinnedLeftWidth();
          var displayed = leftWidth > 0;
          setDisplayed(this.element, displayed);
          if (displayed) {
            setFixedWidth(this.element, leftWidth);
          }
        };
        __decorate$1f([
          Autowired("pinnedWidthService")
        ], SetPinnedLeftWidthFeature2.prototype, "pinnedWidthService", void 0);
        __decorate$1f([
          PostConstruct
        ], SetPinnedLeftWidthFeature2.prototype, "postConstruct", null);
        return SetPinnedLeftWidthFeature2;
      }(BeanStub)
    );
    var __extends$1r = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1g = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var SetPinnedRightWidthFeature = (
      /** @class */
      function(_super) {
        __extends$1r(SetPinnedRightWidthFeature2, _super);
        function SetPinnedRightWidthFeature2(element) {
          var _this = _super.call(this) || this;
          _this.element = element;
          return _this;
        }
        SetPinnedRightWidthFeature2.prototype.postConstruct = function() {
          this.addManagedListener(this.eventService, Events.EVENT_RIGHT_PINNED_WIDTH_CHANGED, this.onPinnedRightWidthChanged.bind(this));
        };
        SetPinnedRightWidthFeature2.prototype.onPinnedRightWidthChanged = function() {
          var rightWidth = this.pinnedWidthService.getPinnedRightWidth();
          var displayed = rightWidth > 0;
          setDisplayed(this.element, displayed);
          if (displayed) {
            setFixedWidth(this.element, rightWidth);
          }
        };
        __decorate$1g([
          Autowired("pinnedWidthService")
        ], SetPinnedRightWidthFeature2.prototype, "pinnedWidthService", void 0);
        __decorate$1g([
          PostConstruct
        ], SetPinnedRightWidthFeature2.prototype, "postConstruct", null);
        return SetPinnedRightWidthFeature2;
      }(BeanStub)
    );
    var __extends$1s = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1h = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var SetHeightFeature = (
      /** @class */
      function(_super) {
        __extends$1s(SetHeightFeature2, _super);
        function SetHeightFeature2(eContainer, eWrapper) {
          var _this = _super.call(this) || this;
          _this.eContainer = eContainer;
          _this.eWrapper = eWrapper;
          return _this;
        }
        SetHeightFeature2.prototype.postConstruct = function() {
          this.addManagedListener(this.eventService, Events.EVENT_ROW_CONTAINER_HEIGHT_CHANGED, this.onHeightChanged.bind(this));
        };
        SetHeightFeature2.prototype.onHeightChanged = function() {
          var height = this.maxDivHeightScaler.getUiContainerHeight();
          var heightString = height != null ? height + "px" : "";
          this.eContainer.style.height = heightString;
          if (this.eWrapper) {
            this.eWrapper.style.height = heightString;
          }
        };
        __decorate$1h([
          Autowired("rowContainerHeightService")
        ], SetHeightFeature2.prototype, "maxDivHeightScaler", void 0);
        __decorate$1h([
          PostConstruct
        ], SetHeightFeature2.prototype, "postConstruct", null);
        return SetHeightFeature2;
      }(BeanStub)
    );
    var __extends$1t = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1i = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var DragListenerFeature = (
      /** @class */
      function(_super) {
        __extends$1t(DragListenerFeature2, _super);
        function DragListenerFeature2(eContainer) {
          var _this = _super.call(this) || this;
          _this.eContainer = eContainer;
          return _this;
        }
        DragListenerFeature2.prototype.postConstruct = function() {
          var _this = this;
          if (!this.gridOptionsWrapper.isEnableRangeSelection() || // no range selection if no property
          missing(this.rangeService)) {
            return;
          }
          var params = {
            eElement: this.eContainer,
            onDragStart: this.rangeService.onDragStart.bind(this.rangeService),
            onDragStop: this.rangeService.onDragStop.bind(this.rangeService),
            onDragging: this.rangeService.onDragging.bind(this.rangeService)
          };
          this.dragService.addDragSource(params);
          this.addDestroyFunc(function() {
            return _this.dragService.removeDragSource(params);
          });
        };
        __decorate$1i([
          Optional("rangeService")
        ], DragListenerFeature2.prototype, "rangeService", void 0);
        __decorate$1i([
          Autowired("dragService")
        ], DragListenerFeature2.prototype, "dragService", void 0);
        __decorate$1i([
          PostConstruct
        ], DragListenerFeature2.prototype, "postConstruct", null);
        return DragListenerFeature2;
      }(BeanStub)
    );
    var __extends$1u = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1j = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __spreadArrays$9 = function() {
      for (var s = 0, i = 0, il = arguments.length; i < il; i++)
        s += arguments[i].length;
      for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
          r[k] = a[j];
      return r;
    };
    (function(RowContainerName) {
      RowContainerName["LEFT"] = "left";
      RowContainerName["RIGHT"] = "right";
      RowContainerName["CENTER"] = "center";
      RowContainerName["FULL_WIDTH"] = "fullWidth";
      RowContainerName["TOP_LEFT"] = "topLeft";
      RowContainerName["TOP_RIGHT"] = "topRight";
      RowContainerName["TOP_CENTER"] = "topCenter";
      RowContainerName["TOP_FULL_WITH"] = "topFullWidth";
      RowContainerName["BOTTOM_LEFT"] = "bottomLeft";
      RowContainerName["BOTTOM_RIGHT"] = "bottomRight";
      RowContainerName["BOTTOM_CENTER"] = "bottomCenter";
      RowContainerName["BOTTOM_FULL_WITH"] = "bottomFullWidth";
    })(exports.RowContainerName || (exports.RowContainerName = {}));
    var ContainerCssClasses = convertToMap([
      [exports.RowContainerName.CENTER, "ag-center-cols-container"],
      [exports.RowContainerName.LEFT, "ag-pinned-left-cols-container"],
      [exports.RowContainerName.RIGHT, "ag-pinned-right-cols-container"],
      [exports.RowContainerName.FULL_WIDTH, "ag-full-width-container"],
      [exports.RowContainerName.TOP_CENTER, "ag-floating-top-container"],
      [exports.RowContainerName.TOP_LEFT, "ag-pinned-left-floating-top"],
      [exports.RowContainerName.TOP_RIGHT, "ag-pinned-right-floating-top"],
      [exports.RowContainerName.TOP_FULL_WITH, "ag-floating-top-full-width-container"],
      [exports.RowContainerName.BOTTOM_CENTER, "ag-floating-bottom-container"],
      [exports.RowContainerName.BOTTOM_LEFT, "ag-pinned-left-floating-bottom"],
      [exports.RowContainerName.BOTTOM_RIGHT, "ag-pinned-right-floating-bottom"],
      [exports.RowContainerName.BOTTOM_FULL_WITH, "ag-floating-bottom-full-width-container"]
    ]);
    var ViewportCssClasses = convertToMap([
      [exports.RowContainerName.CENTER, "ag-center-cols-viewport"],
      [exports.RowContainerName.TOP_CENTER, "ag-floating-top-viewport"],
      [exports.RowContainerName.BOTTOM_CENTER, "ag-floating-bottom-viewport"]
    ]);
    var WrapperCssClasses = convertToMap([
      [exports.RowContainerName.CENTER, "ag-center-cols-clipper"]
    ]);
    var RowContainerCtrl = (
      /** @class */
      function(_super) {
        __extends$1u(RowContainerCtrl2, _super);
        function RowContainerCtrl2(name) {
          var _this = _super.call(this) || this;
          _this.name = name;
          return _this;
        }
        RowContainerCtrl2.getRowContainerCssClasses = function(name) {
          var containerClass = ContainerCssClasses.get(name);
          var viewportClass = ViewportCssClasses.get(name);
          var wrapperClass = WrapperCssClasses.get(name);
          return { container: containerClass, viewport: viewportClass, wrapper: wrapperClass };
        };
        RowContainerCtrl2.getPinned = function(name) {
          switch (name) {
            case exports.RowContainerName.BOTTOM_LEFT:
            case exports.RowContainerName.TOP_LEFT:
            case exports.RowContainerName.LEFT:
              return Constants.PINNED_LEFT;
            case exports.RowContainerName.BOTTOM_RIGHT:
            case exports.RowContainerName.TOP_RIGHT:
            case exports.RowContainerName.RIGHT:
              return Constants.PINNED_RIGHT;
            default:
              return null;
          }
        };
        RowContainerCtrl2.prototype.postConstruct = function() {
          var _this = this;
          this.enableRtl = this.gridOptionsWrapper.isEnableRtl();
          this.embedFullWidthRows = this.gridOptionsWrapper.isEmbedFullWidthRows();
          this.addManagedListener(this.eventService, Events.EVENT_SCROLL_VISIBILITY_CHANGED, this.onScrollVisibilityChanged.bind(this));
          this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));
          this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, this.onDisplayedColumnsWidthChanged.bind(this));
          this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_ROWS_CHANGED, this.onDisplayedRowsChanged.bind(this));
          this.forContainers([exports.RowContainerName.CENTER], function() {
            return _this.viewportSizeFeature = _this.createManagedBean(new ViewportSizeFeature(_this));
          });
          this.registerWithCtrlsService();
        };
        RowContainerCtrl2.prototype.registerWithCtrlsService = function() {
          switch (this.name) {
            case exports.RowContainerName.CENTER:
              this.ctrlsService.registerCenterRowContainerCtrl(this);
              break;
            case exports.RowContainerName.LEFT:
              this.ctrlsService.registerLeftRowContainerCtrl(this);
              break;
            case exports.RowContainerName.RIGHT:
              this.ctrlsService.registerRightRowContainerCtrl(this);
              break;
            case exports.RowContainerName.TOP_CENTER:
              this.ctrlsService.registerTopCenterRowContainerCtrl(this);
              break;
            case exports.RowContainerName.TOP_LEFT:
              this.ctrlsService.registerTopLeftRowContainerCon(this);
              break;
            case exports.RowContainerName.TOP_RIGHT:
              this.ctrlsService.registerTopRightRowContainerCtrl(this);
              break;
            case exports.RowContainerName.BOTTOM_CENTER:
              this.ctrlsService.registerBottomCenterRowContainerCtrl(this);
              break;
            case exports.RowContainerName.BOTTOM_LEFT:
              this.ctrlsService.registerBottomLeftRowContainerCtrl(this);
              break;
            case exports.RowContainerName.BOTTOM_RIGHT:
              this.ctrlsService.registerBottomRightRowContainerCtrl(this);
              break;
          }
        };
        RowContainerCtrl2.prototype.forContainers = function(names, callback) {
          if (names.indexOf(this.name) >= 0) {
            callback();
          }
        };
        RowContainerCtrl2.prototype.getContainerElement = function() {
          return this.eContainer;
        };
        RowContainerCtrl2.prototype.getViewportSizeFeature = function() {
          return this.viewportSizeFeature;
        };
        RowContainerCtrl2.prototype.setComp = function(view, eContainer, eViewport, eWrapper) {
          var _this = this;
          this.comp = view;
          this.eContainer = eContainer;
          this.eViewport = eViewport;
          this.eWrapper = eWrapper;
          this.createManagedBean(new RowContainerEventsFeature(this.eContainer));
          this.addPreventScrollWhileDragging();
          this.listenOnDomOrder();
          this.stopHScrollOnPinnedRows();
          var allTopNoFW = [exports.RowContainerName.TOP_CENTER, exports.RowContainerName.TOP_LEFT, exports.RowContainerName.TOP_RIGHT];
          var allBottomNoFW = [exports.RowContainerName.BOTTOM_CENTER, exports.RowContainerName.BOTTOM_LEFT, exports.RowContainerName.BOTTOM_RIGHT];
          var allMiddleNoFW = [exports.RowContainerName.CENTER, exports.RowContainerName.LEFT, exports.RowContainerName.RIGHT];
          var allNoFW = __spreadArrays$9(allTopNoFW, allBottomNoFW, allMiddleNoFW);
          var allMiddle = [exports.RowContainerName.CENTER, exports.RowContainerName.LEFT, exports.RowContainerName.RIGHT, exports.RowContainerName.FULL_WIDTH];
          var allCenter = [exports.RowContainerName.CENTER, exports.RowContainerName.TOP_CENTER, exports.RowContainerName.BOTTOM_CENTER];
          var allLeft = [exports.RowContainerName.LEFT, exports.RowContainerName.BOTTOM_LEFT, exports.RowContainerName.TOP_LEFT];
          var allRight = [exports.RowContainerName.RIGHT, exports.RowContainerName.BOTTOM_RIGHT, exports.RowContainerName.TOP_RIGHT];
          this.forContainers(allLeft, function() {
            return _this.createManagedBean(new SetPinnedLeftWidthFeature(_this.eContainer));
          });
          this.forContainers(allRight, function() {
            return _this.createManagedBean(new SetPinnedRightWidthFeature(_this.eContainer));
          });
          this.forContainers(allMiddle, function() {
            return _this.createManagedBean(new SetHeightFeature(_this.eContainer, _this.eWrapper));
          });
          this.forContainers(allNoFW, function() {
            return _this.createManagedBean(new DragListenerFeature(_this.eContainer));
          });
          this.forContainers(allCenter, function() {
            return _this.createManagedBean(new CenterWidthFeature(function(width) {
              return _this.comp.setContainerWidth(width + "px");
            }));
          });
        };
        RowContainerCtrl2.prototype.listenOnDomOrder = function() {
          var _this = this;
          var listener = function() {
            return _this.comp.setDomOrder(_this.gridOptionsWrapper.isEnsureDomOrder());
          };
          this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_DOM_LAYOUT, listener);
          listener();
        };
        RowContainerCtrl2.prototype.stopHScrollOnPinnedRows = function() {
          var _this = this;
          this.forContainers([exports.RowContainerName.TOP_CENTER, exports.RowContainerName.BOTTOM_CENTER], function() {
            var resetScrollLeft = function() {
              return _this.eViewport.scrollLeft = 0;
            };
            _this.addManagedListener(_this.eViewport, "scroll", resetScrollLeft);
          });
        };
        RowContainerCtrl2.prototype.onDisplayedColumnsChanged = function() {
          var _this = this;
          this.forContainers([exports.RowContainerName.CENTER], function() {
            return _this.onHorizontalViewportChanged();
          });
        };
        RowContainerCtrl2.prototype.onDisplayedColumnsWidthChanged = function() {
          var _this = this;
          this.forContainers([exports.RowContainerName.CENTER], function() {
            return _this.onHorizontalViewportChanged();
          });
        };
        RowContainerCtrl2.prototype.onScrollVisibilityChanged = function() {
          if (this.name !== exports.RowContainerName.CENTER) {
            return;
          }
          var visible = this.scrollVisibleService.isHorizontalScrollShowing();
          var scrollbarWidth = visible ? this.gridOptionsWrapper.getScrollbarWidth() || 0 : 0;
          var height = scrollbarWidth == 0 ? "100%" : "calc(100% + " + scrollbarWidth + "px)";
          this.comp.setViewportHeight(height);
        };
        RowContainerCtrl2.prototype.addPreventScrollWhileDragging = function() {
          var _this = this;
          var preventScroll = function(e) {
            if (_this.dragService.isDragging()) {
              if (e.cancelable) {
                e.preventDefault();
              }
            }
          };
          this.eContainer.addEventListener("touchmove", preventScroll, { passive: false });
          this.addDestroyFunc(function() {
            return _this.eContainer.removeEventListener("touchmove", preventScroll);
          });
        };
        RowContainerCtrl2.prototype.onHorizontalViewportChanged = function() {
          var scrollWidth = this.getCenterWidth();
          var scrollPosition = this.getCenterViewportScrollLeft();
          this.columnModel.setViewportPosition(scrollWidth, scrollPosition);
        };
        RowContainerCtrl2.prototype.getCenterWidth = function() {
          return getInnerWidth(this.eViewport);
        };
        RowContainerCtrl2.prototype.getCenterViewportScrollLeft = function() {
          return getScrollLeft(this.eViewport, this.enableRtl);
        };
        RowContainerCtrl2.prototype.registerViewportResizeListener = function(listener) {
          var unsubscribeFromResize = this.resizeObserverService.observeResize(this.eViewport, listener);
          this.addDestroyFunc(function() {
            return unsubscribeFromResize();
          });
        };
        RowContainerCtrl2.prototype.isViewportVisible = function() {
          return isVisible(this.eViewport);
        };
        RowContainerCtrl2.prototype.isViewportHScrollShowing = function() {
          return isHorizontalScrollShowing(this.eViewport);
        };
        RowContainerCtrl2.prototype.getViewportScrollLeft = function() {
          return getScrollLeft(this.eViewport, this.enableRtl);
        };
        RowContainerCtrl2.prototype.isHorizontalScrollShowing = function() {
          var isAlwaysShowHorizontalScroll = this.gridOptionsWrapper.isAlwaysShowHorizontalScroll();
          return isAlwaysShowHorizontalScroll || isHorizontalScrollShowing(this.eViewport);
        };
        RowContainerCtrl2.prototype.getViewportElement = function() {
          return this.eViewport;
        };
        RowContainerCtrl2.prototype.setContainerTranslateX = function(amount) {
          this.eContainer.style.transform = "translateX(" + amount + "px)";
        };
        RowContainerCtrl2.prototype.getHScrollPosition = function() {
          var res = {
            left: this.eViewport.scrollLeft,
            right: this.eViewport.scrollLeft + this.eViewport.offsetWidth
          };
          return res;
        };
        RowContainerCtrl2.prototype.setCenterViewportScrollLeft = function(value) {
          setScrollLeft(this.eViewport, value, this.enableRtl);
        };
        RowContainerCtrl2.prototype.onDisplayedRowsChanged = function() {
          var _this = this;
          var fullWithContainer = this.name === exports.RowContainerName.TOP_FULL_WITH || this.name === exports.RowContainerName.BOTTOM_FULL_WITH || this.name === exports.RowContainerName.FULL_WIDTH;
          var doesRowMatch = function(rowCtrl) {
            var fullWidthRow = rowCtrl.isFullWidth();
            var printLayout = _this.gridOptionsWrapper.getDomLayout() === Constants.DOM_LAYOUT_PRINT;
            var embedFW = _this.embedFullWidthRows || printLayout;
            var match = fullWithContainer ? !embedFW && fullWidthRow : embedFW || !fullWidthRow;
            return match;
          };
          var allRowsRegardlessOfFullWidth = this.getRowCtrls();
          var rowsThisContainer = allRowsRegardlessOfFullWidth.filter(doesRowMatch);
          this.comp.setRowCtrls(rowsThisContainer);
        };
        RowContainerCtrl2.prototype.getRowCtrls = function() {
          switch (this.name) {
            case exports.RowContainerName.TOP_CENTER:
            case exports.RowContainerName.TOP_LEFT:
            case exports.RowContainerName.TOP_RIGHT:
            case exports.RowContainerName.TOP_FULL_WITH:
              return this.rowRenderer.getTopRowCtrls();
            case exports.RowContainerName.BOTTOM_CENTER:
            case exports.RowContainerName.BOTTOM_LEFT:
            case exports.RowContainerName.BOTTOM_RIGHT:
            case exports.RowContainerName.BOTTOM_FULL_WITH:
              return this.rowRenderer.getBottomRowCtrls();
            default:
              return this.rowRenderer.getRowCtrls();
          }
        };
        __decorate$1j([
          Autowired("scrollVisibleService")
        ], RowContainerCtrl2.prototype, "scrollVisibleService", void 0);
        __decorate$1j([
          Autowired("dragService")
        ], RowContainerCtrl2.prototype, "dragService", void 0);
        __decorate$1j([
          Autowired("ctrlsService")
        ], RowContainerCtrl2.prototype, "ctrlsService", void 0);
        __decorate$1j([
          Autowired("columnModel")
        ], RowContainerCtrl2.prototype, "columnModel", void 0);
        __decorate$1j([
          Autowired("resizeObserverService")
        ], RowContainerCtrl2.prototype, "resizeObserverService", void 0);
        __decorate$1j([
          Autowired("rowRenderer")
        ], RowContainerCtrl2.prototype, "rowRenderer", void 0);
        __decorate$1j([
          PostConstruct
        ], RowContainerCtrl2.prototype, "postConstruct", null);
        return RowContainerCtrl2;
      }(BeanStub)
    );
    var __extends$1v = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1k = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var GRID_BODY_TEMPLATE = (
      /* html */
      '<div class="ag-root ag-unselectable" role="grid" unselectable="on">\n        <ag-header-root ref="gridHeader" unselectable="on"></ag-header-root>\n        <div class="ag-floating-top" ref="eTop" role="presentation" unselectable="on">\n            <ag-row-container ref="topLeftContainer" name="' + exports.RowContainerName.TOP_LEFT + '"></ag-row-container>\n            <ag-row-container ref="topCenterContainer" name="' + exports.RowContainerName.TOP_CENTER + '"></ag-row-container>\n            <ag-row-container ref="topRightContainer" name="' + exports.RowContainerName.TOP_RIGHT + '"></ag-row-container>\n            <ag-row-container ref="topFullWidthContainer" name="' + exports.RowContainerName.TOP_FULL_WITH + '"></ag-row-container>\n        </div>\n        <div class="ag-body-viewport" ref="eBodyViewport" role="presentation">\n            <ag-row-container ref="leftContainer" name="' + exports.RowContainerName.LEFT + '"></ag-row-container>\n            <ag-row-container ref="centerContainer" name="' + exports.RowContainerName.CENTER + '"></ag-row-container>\n            <ag-row-container ref="rightContainer" name="' + exports.RowContainerName.RIGHT + '"></ag-row-container>\n            <ag-row-container ref="fullWidthContainer" name="' + exports.RowContainerName.FULL_WIDTH + '"></ag-row-container>\n        </div>\n        <div class="ag-floating-bottom" ref="eBottom" role="presentation" unselectable="on">\n            <ag-row-container ref="bottomLeftContainer" name="' + exports.RowContainerName.BOTTOM_LEFT + '"></ag-row-container>\n            <ag-row-container ref="bottomCenterContainer" name="' + exports.RowContainerName.BOTTOM_CENTER + '"></ag-row-container>\n            <ag-row-container ref="bottomRightContainer" name="' + exports.RowContainerName.BOTTOM_RIGHT + '"></ag-row-container>\n            <ag-row-container ref="bottomFullWidthContainer" name="' + exports.RowContainerName.BOTTOM_FULL_WITH + '"></ag-row-container>\n        </div>\n        <ag-fake-horizontal-scroll></ag-fake-horizontal-scroll>\n        <ag-overlay-wrapper></ag-overlay-wrapper>\n    </div>'
    );
    var GridBodyComp = (
      /** @class */
      function(_super) {
        __extends$1v(GridBodyComp2, _super);
        function GridBodyComp2() {
          return _super.call(this, GRID_BODY_TEMPLATE) || this;
        }
        GridBodyComp2.prototype.init = function() {
          var _this = this;
          var setHeight = function(height, element) {
            var heightString = height + "px";
            element.style.minHeight = heightString;
            element.style.height = heightString;
          };
          var compProxy = {
            setRowAnimationCssOnBodyViewport: function(cssClass, animate) {
              return _this.setRowAnimationCssOnBodyViewport(cssClass, animate);
            },
            setColumnCount: function(count) {
              return setAriaColCount(_this.getGui(), count);
            },
            setRowCount: function(count) {
              return setAriaRowCount(_this.getGui(), count);
            },
            setTopHeight: function(height) {
              return setHeight(height, _this.eTop);
            },
            setBottomHeight: function(height) {
              return setHeight(height, _this.eBottom);
            },
            setTopDisplay: function(display) {
              return _this.eTop.style.display = display;
            },
            setBottomDisplay: function(display) {
              return _this.eBottom.style.display = display;
            },
            setColumnMovingCss: function(cssClass, flag) {
              return _this.addOrRemoveCssClass(CSS_CLASS_COLUMN_MOVING, flag);
            },
            updateLayoutClasses: function(cssClass, params) {
              addOrRemoveCssClass(_this.eBodyViewport, exports.LayoutCssClasses.AUTO_HEIGHT, params.autoHeight);
              addOrRemoveCssClass(_this.eBodyViewport, exports.LayoutCssClasses.NORMAL, params.normal);
              addOrRemoveCssClass(_this.eBodyViewport, exports.LayoutCssClasses.PRINT, params.print);
              _this.addOrRemoveCssClass(exports.LayoutCssClasses.AUTO_HEIGHT, params.autoHeight);
              _this.addOrRemoveCssClass(exports.LayoutCssClasses.NORMAL, params.normal);
              _this.addOrRemoveCssClass(exports.LayoutCssClasses.PRINT, params.print);
            },
            setAlwaysVerticalScrollClass: function(cssClass, on) {
              return addOrRemoveCssClass(_this.eBodyViewport, CSS_CLASS_FORCE_VERTICAL_SCROLL, on);
            },
            registerBodyViewportResizeListener: function(listener) {
              var unsubscribeFromResize = _this.resizeObserverService.observeResize(_this.eBodyViewport, listener);
              _this.addDestroyFunc(function() {
                return unsubscribeFromResize();
              });
            },
            setPinnedTopBottomOverflowY: function(overflow) {
              return _this.eTop.style.overflowY = _this.eBottom.style.overflowY = overflow;
            },
            setCellSelectableCss: function(cssClass, selectable) {
              [_this.eTop, _this.eBodyViewport, _this.eBottom].forEach(function(ct) {
                return addOrRemoveCssClass(ct, CSS_CLASS_CELL_SELECTABLE, selectable);
              });
            }
          };
          this.ctrl = this.createManagedBean(new GridBodyCtrl());
          this.ctrl.setComp(compProxy, this.getGui(), this.eBodyViewport, this.eTop, this.eBottom);
          if (this.rangeService || this.gridOptionsWrapper.isRowSelectionMulti()) {
            setAriaMultiSelectable(this.getGui(), true);
          }
        };
        GridBodyComp2.prototype.setRowAnimationCssOnBodyViewport = function(cssClass, animateRows) {
          addOrRemoveCssClass(this.eBodyViewport, exports.RowAnimationCssClasses.ANIMATION_ON, animateRows);
          addOrRemoveCssClass(this.eBodyViewport, exports.RowAnimationCssClasses.ANIMATION_OFF, !animateRows);
        };
        GridBodyComp2.prototype.getFloatingTopBottom = function() {
          return [this.eTop, this.eBottom];
        };
        __decorate$1k([
          Autowired("resizeObserverService")
        ], GridBodyComp2.prototype, "resizeObserverService", void 0);
        __decorate$1k([
          Optional("rangeService")
        ], GridBodyComp2.prototype, "rangeService", void 0);
        __decorate$1k([
          RefSelector("eBodyViewport")
        ], GridBodyComp2.prototype, "eBodyViewport", void 0);
        __decorate$1k([
          RefSelector("eTop")
        ], GridBodyComp2.prototype, "eTop", void 0);
        __decorate$1k([
          RefSelector("eBottom")
        ], GridBodyComp2.prototype, "eBottom", void 0);
        __decorate$1k([
          RefSelector("gridHeader")
        ], GridBodyComp2.prototype, "headerRootComp", void 0);
        __decorate$1k([
          PostConstruct
        ], GridBodyComp2.prototype, "init", null);
        return GridBodyComp2;
      }(Component)
    );
    (function(ExcelFactoryMode) {
      ExcelFactoryMode[ExcelFactoryMode["SINGLE_SHEET"] = 0] = "SINGLE_SHEET";
      ExcelFactoryMode[ExcelFactoryMode["MULTI_SHEET"] = 1] = "MULTI_SHEET";
    })(exports.ExcelFactoryMode || (exports.ExcelFactoryMode = {}));
    (function(ClientSideRowModelSteps) {
      ClientSideRowModelSteps["EVERYTHING"] = "group";
      ClientSideRowModelSteps["FILTER"] = "filter";
      ClientSideRowModelSteps["SORT"] = "sort";
      ClientSideRowModelSteps["MAP"] = "map";
      ClientSideRowModelSteps["AGGREGATE"] = "aggregate";
      ClientSideRowModelSteps["PIVOT"] = "pivot";
      ClientSideRowModelSteps["NOTHING"] = "nothing";
    })(exports.ClientSideRowModelSteps || (exports.ClientSideRowModelSteps = {}));
    var __decorate$1l = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var GridApi = (
      /** @class */
      function() {
        function GridApi2() {
          this.detailGridInfoMap = {};
          this.destroyCalled = false;
        }
        GridApi2.prototype.registerOverlayWrapperComp = function(overlayWrapperComp) {
          this.overlayWrapperComp = overlayWrapperComp;
        };
        GridApi2.prototype.registerSideBarComp = function(sideBarComp) {
          this.sideBarComp = sideBarComp;
        };
        GridApi2.prototype.init = function() {
          var _this = this;
          switch (this.rowModel.getType()) {
            case Constants.ROW_MODEL_TYPE_CLIENT_SIDE:
              this.clientSideRowModel = this.rowModel;
              break;
            case Constants.ROW_MODEL_TYPE_INFINITE:
              this.infiniteRowModel = this.rowModel;
              break;
            case Constants.ROW_MODEL_TYPE_SERVER_SIDE:
              this.serverSideRowModel = this.rowModel;
              break;
          }
          this.ctrlsService.whenReady(function() {
            _this.gridBodyCon = _this.ctrlsService.getGridBodyCtrl();
          });
        };
        GridApi2.prototype.__getAlignedGridService = function() {
          return this.alignedGridsService;
        };
        GridApi2.prototype.addDetailGridInfo = function(id, gridInfo) {
          this.detailGridInfoMap[id] = gridInfo;
        };
        GridApi2.prototype.removeDetailGridInfo = function(id) {
          this.detailGridInfoMap[id] = void 0;
        };
        GridApi2.prototype.getDetailGridInfo = function(id) {
          return this.detailGridInfoMap[id];
        };
        GridApi2.prototype.forEachDetailGridInfo = function(callback) {
          var index = 0;
          iterateObject(this.detailGridInfoMap, function(id, gridInfo) {
            if (exists(gridInfo)) {
              callback(gridInfo, index);
              index++;
            }
          });
        };
        GridApi2.prototype.getDataAsCsv = function(params) {
          if (ModuleRegistry.assertRegistered(exports.ModuleNames.CsvExportModule, "api.getDataAsCsv")) {
            return this.csvCreator.getDataAsCsv(params);
          }
        };
        GridApi2.prototype.exportDataAsCsv = function(params) {
          if (ModuleRegistry.assertRegistered(exports.ModuleNames.CsvExportModule, "api.exportDataAsCSv")) {
            this.csvCreator.exportDataAsCsv(params);
          }
        };
        GridApi2.prototype.getDataAsExcel = function(params) {
          if (ModuleRegistry.assertRegistered(exports.ModuleNames.ExcelExportModule, "api.getDataAsExcel")) {
            var exportMode = params && params.exportMode || "xlsx";
            if (this.excelCreator.getFactoryMode(exportMode) === exports.ExcelFactoryMode.MULTI_SHEET) {
              console.warn("AG Grid: The Excel Exporter is currently on Multi Sheet mode. End that operation by calling `api.getMultipleSheetAsExcel()` or `api.exportMultipleSheetsAsExcel()`");
              return;
            }
            return this.excelCreator.getDataAsExcel(params);
          }
        };
        GridApi2.prototype.exportDataAsExcel = function(params) {
          if (ModuleRegistry.assertRegistered(exports.ModuleNames.ExcelExportModule, "api.exportDataAsExcel")) {
            var exportMode = params && params.exportMode || "xlsx";
            if (this.excelCreator.getFactoryMode(exportMode) === exports.ExcelFactoryMode.MULTI_SHEET) {
              console.warn("AG Grid: The Excel Exporter is currently on Multi Sheet mode. End that operation by calling `api.getMultipleSheetAsExcel()` or `api.exportMultipleSheetsAsExcel()`");
              return;
            }
            this.excelCreator.exportDataAsExcel(params);
          }
        };
        GridApi2.prototype.getSheetDataForExcel = function(params) {
          if (ModuleRegistry.assertRegistered(exports.ModuleNames.ExcelExportModule, "api.getSheetDataForExcel")) {
            var exportMode = params && params.exportMode || "xlsx";
            this.excelCreator.setFactoryMode(exports.ExcelFactoryMode.MULTI_SHEET, exportMode);
            return this.excelCreator.getSheetDataForExcel(params);
          }
        };
        GridApi2.prototype.getMultipleSheetsAsExcel = function(params) {
          if (ModuleRegistry.assertRegistered(exports.ModuleNames.ExcelExportModule, "api.getMultipleSheetsAsExcel")) {
            return this.excelCreator.getMultipleSheetsAsExcel(params);
          }
        };
        GridApi2.prototype.exportMultipleSheetsAsExcel = function(params) {
          if (ModuleRegistry.assertRegistered(exports.ModuleNames.ExcelExportModule, "api.exportMultipleSheetsAsExcel")) {
            return this.excelCreator.exportMultipleSheetsAsExcel(params);
          }
        };
        GridApi2.prototype.setEnterpriseDatasource = function(datasource) {
          console.warn("ag-grid: since version 18.x, api.setEnterpriseDatasource() should be replaced with api.setServerSideDatasource()");
          this.setServerSideDatasource(datasource);
        };
        GridApi2.prototype.setGridAriaProperty = function(property, value) {
          if (!property) {
            return;
          }
          var eGrid = this.ctrlsService.getGridBodyCtrl().getGui();
          var ariaProperty = "aria-" + property;
          if (value === null) {
            eGrid.removeAttribute(ariaProperty);
          } else {
            eGrid.setAttribute(ariaProperty, value);
          }
        };
        GridApi2.prototype.setServerSideDatasource = function(datasource) {
          if (this.serverSideRowModel) {
            this.serverSideRowModel.setDatasource(datasource);
          } else {
            console.warn("AG Grid: you can only use an enterprise datasource when gridOptions.rowModelType is '" + Constants.ROW_MODEL_TYPE_SERVER_SIDE + "'");
          }
        };
        GridApi2.prototype.setDatasource = function(datasource) {
          if (this.gridOptionsWrapper.isRowModelInfinite()) {
            this.rowModel.setDatasource(datasource);
          } else {
            console.warn("AG Grid: you can only use a datasource when gridOptions.rowModelType is '" + Constants.ROW_MODEL_TYPE_INFINITE + "'");
          }
        };
        GridApi2.prototype.setViewportDatasource = function(viewportDatasource) {
          if (this.gridOptionsWrapper.isRowModelViewport()) {
            this.rowModel.setViewportDatasource(viewportDatasource);
          } else {
            console.warn("AG Grid: you can only use a viewport datasource when gridOptions.rowModelType is '" + Constants.ROW_MODEL_TYPE_VIEWPORT + "'");
          }
        };
        GridApi2.prototype.setRowData = function(rowData) {
          if (this.gridOptionsWrapper.isRowModelDefault()) {
            if (this.gridOptionsWrapper.isImmutableData()) {
              var transactionAndMap = this.immutableService.createTransactionForRowData(rowData);
              if (!transactionAndMap) {
                return;
              }
              var transaction = transactionAndMap[0], orderIdMap = transactionAndMap[1];
              var nodeTransaction = this.clientSideRowModel.updateRowData(transaction, orderIdMap);
              if (nodeTransaction) {
                this.rowRenderer.refreshFullWidthRows(nodeTransaction.update);
              }
            } else {
              this.selectionService.reset();
              this.clientSideRowModel.setRowData(rowData);
            }
          } else {
            console.warn("cannot call setRowData unless using normal row model");
          }
        };
        GridApi2.prototype.setFloatingTopRowData = function(rows) {
          console.warn("AG Grid: since v12, api.setFloatingTopRowData() is now api.setPinnedTopRowData()");
          this.setPinnedTopRowData(rows);
        };
        GridApi2.prototype.setFloatingBottomRowData = function(rows) {
          console.warn("AG Grid: since v12, api.setFloatingBottomRowData() is now api.setPinnedBottomRowData()");
          this.setPinnedBottomRowData(rows);
        };
        GridApi2.prototype.getFloatingTopRowCount = function() {
          console.warn("AG Grid: since v12, api.getFloatingTopRowCount() is now api.getPinnedTopRowCount()");
          return this.getPinnedTopRowCount();
        };
        GridApi2.prototype.getFloatingBottomRowCount = function() {
          console.warn("AG Grid: since v12, api.getFloatingBottomRowCount() is now api.getPinnedBottomRowCount()");
          return this.getPinnedBottomRowCount();
        };
        GridApi2.prototype.getFloatingTopRow = function(index) {
          console.warn("AG Grid: since v12, api.getFloatingTopRow() is now api.getPinnedTopRow()");
          return this.getPinnedTopRow(index);
        };
        GridApi2.prototype.getFloatingBottomRow = function(index) {
          console.warn("AG Grid: since v12, api.getFloatingBottomRow() is now api.getPinnedBottomRow()");
          return this.getPinnedBottomRow(index);
        };
        GridApi2.prototype.setPinnedTopRowData = function(rows) {
          this.pinnedRowModel.setPinnedTopRowData(rows);
        };
        GridApi2.prototype.setPinnedBottomRowData = function(rows) {
          this.pinnedRowModel.setPinnedBottomRowData(rows);
        };
        GridApi2.prototype.getPinnedTopRowCount = function() {
          return this.pinnedRowModel.getPinnedTopRowCount();
        };
        GridApi2.prototype.getPinnedBottomRowCount = function() {
          return this.pinnedRowModel.getPinnedBottomRowCount();
        };
        GridApi2.prototype.getPinnedTopRow = function(index) {
          return this.pinnedRowModel.getPinnedTopRow(index);
        };
        GridApi2.prototype.getPinnedBottomRow = function(index) {
          return this.pinnedRowModel.getPinnedBottomRow(index);
        };
        GridApi2.prototype.setColumnDefs = function(colDefs, source) {
          if (source === void 0) {
            source = "api";
          }
          this.columnModel.setColumnDefs(colDefs, source);
        };
        GridApi2.prototype.setAutoGroupColumnDef = function(colDef, source) {
          this.gridOptionsWrapper.setProperty("autoGroupColumnDef", colDef, true);
        };
        GridApi2.prototype.expireValueCache = function() {
          this.valueCache.expire();
        };
        GridApi2.prototype.getVerticalPixelRange = function() {
          return this.gridBodyCon.getScrollFeature().getVScrollPosition();
        };
        GridApi2.prototype.getHorizontalPixelRange = function() {
          return this.gridBodyCon.getScrollFeature().getHScrollPosition();
        };
        GridApi2.prototype.setAlwaysShowHorizontalScroll = function(show) {
          this.gridOptionsWrapper.setProperty("alwaysShowHorizontalScroll", show);
        };
        GridApi2.prototype.setAlwaysShowVerticalScroll = function(show) {
          this.gridOptionsWrapper.setProperty("alwaysShowVerticalScroll", show);
        };
        GridApi2.prototype.refreshToolPanel = function() {
          if (!this.sideBarComp) {
            return;
          }
          this.sideBarComp.refresh();
        };
        GridApi2.prototype.refreshCells = function(params) {
          if (params === void 0) {
            params = {};
          }
          if (Array.isArray(params)) {
            console.warn("since AG Grid v11.1, refreshCells() now takes parameters, please see the documentation.");
            return;
          }
          this.rowRenderer.refreshCells(params);
        };
        GridApi2.prototype.flashCells = function(params) {
          if (params === void 0) {
            params = {};
          }
          this.rowRenderer.flashCells(params);
        };
        GridApi2.prototype.redrawRows = function(params) {
          if (params === void 0) {
            params = {};
          }
          var rowNodes = params ? params.rowNodes : void 0;
          this.rowRenderer.redrawRows(rowNodes);
        };
        GridApi2.prototype.refreshView = function() {
          console.warn("AG Grid: since v11.1, refreshView() is deprecated, please call refreshCells() or redrawRows() instead");
          this.redrawRows();
        };
        GridApi2.prototype.refreshRows = function(rowNodes) {
          console.warn("since AG Grid v11.1, refreshRows() is deprecated, please use refreshCells({rowNodes: rows}) or redrawRows({rowNodes: rows}) instead");
          this.refreshCells({ rowNodes });
        };
        GridApi2.prototype.rowDataChanged = function(rows) {
          console.warn("AG Grid: rowDataChanged is deprecated, either call refreshView() to refresh everything, or call rowNode.setRowData(newData) to set value on a particular node");
          this.redrawRows();
        };
        GridApi2.prototype.softRefreshView = function() {
          console.error("AG Grid: since v16, softRefreshView() is no longer supported. Please check the documentation on how to refresh.");
        };
        GridApi2.prototype.refreshGroupRows = function() {
          console.warn("AG Grid: since v11.1, refreshGroupRows() is no longer supported, call refreshCells() instead. Because refreshCells() now does dirty checking, it will only refresh cells that have changed, so it should not be necessary to only refresh the group rows.");
          this.refreshCells();
        };
        GridApi2.prototype.setFunctionsReadOnly = function(readOnly) {
          this.gridOptionsWrapper.setProperty("functionsReadOnly", readOnly);
        };
        GridApi2.prototype.refreshHeader = function() {
          this.ctrlsService.getHeaderRowContainerCtrls().forEach(function(c) {
            return c.refresh();
          });
        };
        GridApi2.prototype.isAnyFilterPresent = function() {
          return this.filterManager.isAnyFilterPresent();
        };
        GridApi2.prototype.isAdvancedFilterPresent = function() {
          console.warn("AG Grid: isAdvancedFilterPresent() is deprecated, please use isColumnFilterPresent()");
          return this.isColumnFilterPresent();
        };
        GridApi2.prototype.isColumnFilterPresent = function() {
          return this.filterManager.isAdvancedFilterPresent();
        };
        GridApi2.prototype.isQuickFilterPresent = function() {
          return this.filterManager.isQuickFilterPresent();
        };
        GridApi2.prototype.getModel = function() {
          return this.rowModel;
        };
        GridApi2.prototype.setRowNodeExpanded = function(rowNode, expanded) {
          if (rowNode) {
            rowNode.setExpanded(expanded);
          }
        };
        GridApi2.prototype.onGroupExpandedOrCollapsed = function(deprecated_refreshFromIndex) {
          if (missing(this.clientSideRowModel)) {
            console.warn("AG Grid: cannot call onGroupExpandedOrCollapsed unless using normal row model");
          }
          if (exists(deprecated_refreshFromIndex)) {
            console.warn("AG Grid: api.onGroupExpandedOrCollapsed - refreshFromIndex parameter is no longer used, the grid will refresh all rows");
          }
          this.clientSideRowModel.refreshModel({ step: exports.ClientSideRowModelSteps.MAP });
        };
        GridApi2.prototype.refreshInMemoryRowModel = function(step) {
          console.warn("ag-grid: since version 18.x, api.refreshInMemoryRowModel() should be replaced with api.refreshClientSideRowModel()");
          this.refreshClientSideRowModel(step);
        };
        GridApi2.prototype.refreshClientSideRowModel = function(step) {
          if (missing(this.clientSideRowModel)) {
            console.warn("cannot call refreshClientSideRowModel unless using normal row model");
          }
          var paramsStep = exports.ClientSideRowModelSteps.EVERYTHING;
          var stepsMapped = {
            group: exports.ClientSideRowModelSteps.EVERYTHING,
            filter: exports.ClientSideRowModelSteps.FILTER,
            map: exports.ClientSideRowModelSteps.MAP,
            aggregate: exports.ClientSideRowModelSteps.AGGREGATE,
            sort: exports.ClientSideRowModelSteps.SORT,
            pivot: exports.ClientSideRowModelSteps.PIVOT
          };
          if (exists(step)) {
            paramsStep = stepsMapped[step];
          }
          if (missing(paramsStep)) {
            console.error("AG Grid: invalid step " + step + ", available steps are " + Object.keys(stepsMapped).join(", "));
            return;
          }
          var modelParams = {
            step: paramsStep,
            keepRenderedRows: true,
            animate: true,
            keepEditingRows: true
          };
          this.clientSideRowModel.refreshModel(modelParams);
        };
        GridApi2.prototype.isAnimationFrameQueueEmpty = function() {
          return this.animationFrameService.isQueueEmpty();
        };
        GridApi2.prototype.flushAllAnimationFrames = function() {
          this.animationFrameService.flushAllFrames();
        };
        GridApi2.prototype.getRowNode = function(id) {
          return this.rowModel.getRowNode(id);
        };
        GridApi2.prototype.getSizesForCurrentTheme = function() {
          return {
            rowHeight: this.gridOptionsWrapper.getRowHeightAsNumber(),
            headerHeight: this.gridOptionsWrapper.getHeaderHeight()
          };
        };
        GridApi2.prototype.expandAll = function() {
          if (this.clientSideRowModel) {
            this.clientSideRowModel.expandOrCollapseAll(true);
          } else if (this.serverSideRowModel) {
            this.serverSideRowModel.expandAll(true);
          } else {
            console.warn("AG Grid: expandAll only works with Client Side Row Model and Server Side Row Model");
          }
        };
        GridApi2.prototype.collapseAll = function() {
          if (this.clientSideRowModel) {
            this.clientSideRowModel.expandOrCollapseAll(false);
          } else if (this.serverSideRowModel) {
            this.serverSideRowModel.expandAll(false);
          } else {
            console.warn("AG Grid: collapseAll only works with Client Side Row Model and Server Side Row Model");
          }
        };
        GridApi2.prototype.getToolPanelInstance = function(id) {
          if (!this.sideBarComp) {
            console.warn("AG Grid: toolPanel is only available in AG Grid Enterprise");
            return;
          }
          var comp = this.sideBarComp.getToolPanelInstance(id);
          var unwrapped = this.frameworkComponentWrapper ? this.frameworkComponentWrapper.unwrap(comp) : comp;
          return unwrapped;
        };
        GridApi2.prototype.addVirtualRowListener = function(eventName, rowIndex, callback) {
          if (typeof eventName !== "string") {
            console.warn("AG Grid: addVirtualRowListener is deprecated, please use addRenderedRowListener.");
          }
          this.addRenderedRowListener(eventName, rowIndex, callback);
        };
        GridApi2.prototype.addRenderedRowListener = function(eventName, rowIndex, callback) {
          if (eventName === "virtualRowSelected") {
            console.warn("AG Grid: event virtualRowSelected is deprecated, to register for individual row\n                selection events, add a listener directly to the row node.");
          }
          this.rowRenderer.addRenderedRowListener(eventName, rowIndex, callback);
        };
        GridApi2.prototype.setQuickFilter = function(newFilter) {
          this.filterManager.setQuickFilter(newFilter);
        };
        GridApi2.prototype.selectIndex = function(index, tryMulti, suppressEvents) {
          console.warn("AG Grid: do not use api for selection, call node.setSelected(value) instead");
          if (suppressEvents) {
            console.warn("AG Grid: suppressEvents is no longer supported, stop listening for the event if you no longer want it");
          }
          this.selectionService.selectIndex(index, tryMulti);
        };
        GridApi2.prototype.deselectIndex = function(index, suppressEvents) {
          if (suppressEvents === void 0) {
            suppressEvents = false;
          }
          console.warn("AG Grid: do not use api for selection, call node.setSelected(value) instead");
          if (suppressEvents) {
            console.warn("AG Grid: suppressEvents is no longer supported, stop listening for the event if you no longer want it");
          }
          this.selectionService.deselectIndex(index);
        };
        GridApi2.prototype.selectNode = function(node, tryMulti, suppressEvents) {
          if (tryMulti === void 0) {
            tryMulti = false;
          }
          if (suppressEvents === void 0) {
            suppressEvents = false;
          }
          console.warn("AG Grid: API for selection is deprecated, call node.setSelected(value) instead");
          if (suppressEvents) {
            console.warn("AG Grid: suppressEvents is no longer supported, stop listening for the event if you no longer want it");
          }
          node.setSelectedParams({ newValue: true, clearSelection: !tryMulti });
        };
        GridApi2.prototype.deselectNode = function(node, suppressEvents) {
          if (suppressEvents === void 0) {
            suppressEvents = false;
          }
          console.warn("AG Grid: API for selection is deprecated, call node.setSelected(value) instead");
          if (suppressEvents) {
            console.warn("AG Grid: suppressEvents is no longer supported, stop listening for the event if you no longer want it");
          }
          node.setSelectedParams({ newValue: false });
        };
        GridApi2.prototype.selectAll = function() {
          this.selectionService.selectAllRowNodes();
        };
        GridApi2.prototype.deselectAll = function() {
          this.selectionService.deselectAllRowNodes();
        };
        GridApi2.prototype.selectAllFiltered = function() {
          this.selectionService.selectAllRowNodes(true);
        };
        GridApi2.prototype.deselectAllFiltered = function() {
          this.selectionService.deselectAllRowNodes(true);
        };
        GridApi2.prototype.recomputeAggregates = function() {
          if (missing(this.clientSideRowModel)) {
            console.warn("cannot call recomputeAggregates unless using normal row model");
          }
          console.warn("recomputeAggregates is deprecated, please call api.refreshClientSideRowModel('aggregate') instead");
          this.clientSideRowModel.refreshModel({ step: exports.ClientSideRowModelSteps.AGGREGATE });
        };
        GridApi2.prototype.sizeColumnsToFit = function() {
          this.gridBodyCon.sizeColumnsToFit();
        };
        GridApi2.prototype.showLoadingOverlay = function() {
          this.overlayWrapperComp.showLoadingOverlay();
        };
        GridApi2.prototype.showNoRowsOverlay = function() {
          this.overlayWrapperComp.showNoRowsOverlay();
        };
        GridApi2.prototype.hideOverlay = function() {
          this.overlayWrapperComp.hideOverlay();
        };
        GridApi2.prototype.isNodeSelected = function(node) {
          console.warn("AG Grid: no need to call api.isNodeSelected(), just call node.isSelected() instead");
          return node.isSelected();
        };
        GridApi2.prototype.getSelectedNodesById = function() {
          console.error("AG Grid: since version 3.4, getSelectedNodesById no longer exists, use getSelectedNodes() instead");
          return null;
        };
        GridApi2.prototype.getSelectedNodes = function() {
          return this.selectionService.getSelectedNodes();
        };
        GridApi2.prototype.getSelectedRows = function() {
          return this.selectionService.getSelectedRows();
        };
        GridApi2.prototype.getBestCostNodeSelection = function() {
          return this.selectionService.getBestCostNodeSelection();
        };
        GridApi2.prototype.getRenderedNodes = function() {
          return this.rowRenderer.getRenderedNodes();
        };
        GridApi2.prototype.ensureColIndexVisible = function(index) {
          console.warn("AG Grid: ensureColIndexVisible(index) no longer supported, use ensureColumnVisible(colKey) instead.");
        };
        GridApi2.prototype.ensureColumnVisible = function(key) {
          this.gridBodyCon.getScrollFeature().ensureColumnVisible(key);
        };
        GridApi2.prototype.ensureIndexVisible = function(index, position) {
          this.gridBodyCon.getScrollFeature().ensureIndexVisible(index, position);
        };
        GridApi2.prototype.ensureNodeVisible = function(comparator, position) {
          if (position === void 0) {
            position = null;
          }
          this.gridBodyCon.getScrollFeature().ensureNodeVisible(comparator, position);
        };
        GridApi2.prototype.forEachLeafNode = function(callback) {
          if (missing(this.clientSideRowModel)) {
            console.warn("cannot call forEachNode unless using normal row model");
          }
          this.clientSideRowModel.forEachLeafNode(callback);
        };
        GridApi2.prototype.forEachNode = function(callback) {
          this.rowModel.forEachNode(callback);
        };
        GridApi2.prototype.forEachNodeAfterFilter = function(callback) {
          if (missing(this.clientSideRowModel)) {
            console.warn("cannot call forEachNodeAfterFilter unless using normal row model");
          }
          this.clientSideRowModel.forEachNodeAfterFilter(callback);
        };
        GridApi2.prototype.forEachNodeAfterFilterAndSort = function(callback) {
          if (missing(this.clientSideRowModel)) {
            console.warn("cannot call forEachNodeAfterFilterAndSort unless using normal row model");
          }
          this.clientSideRowModel.forEachNodeAfterFilterAndSort(callback);
        };
        GridApi2.prototype.getFilterApiForColDef = function(colDef) {
          console.warn("ag-grid API method getFilterApiForColDef deprecated, use getFilterInstance instead");
          return this.getFilterInstance(colDef);
        };
        GridApi2.prototype.getFilterInstance = function(key, callback) {
          var _this = this;
          var column = this.columnModel.getPrimaryColumn(key);
          if (!column) {
            return void 0;
          }
          var filterPromise = this.filterManager.getFilterComponent(column, "NO_UI");
          var currentValue = filterPromise && filterPromise.resolveNow(null, function(filterComp) {
            return filterComp;
          });
          var currentValueUnwrapped = this.frameworkComponentWrapper ? this.frameworkComponentWrapper.unwrap(currentValue) : currentValue;
          if (callback) {
            if (currentValueUnwrapped) {
              setTimeout(callback, 0, currentValueUnwrapped);
            } else if (filterPromise) {
              filterPromise.then(function(comp) {
                var unwrapped = _this.frameworkComponentWrapper ? _this.frameworkComponentWrapper.unwrap(comp) : comp;
                callback(unwrapped);
              });
            }
          }
          return currentValueUnwrapped;
        };
        GridApi2.prototype.getFilterApi = function(key) {
          console.warn("AG Grid: getFilterApi is deprecated, use getFilterInstance instead");
          return this.getFilterInstance(key);
        };
        GridApi2.prototype.destroyFilter = function(key) {
          var column = this.columnModel.getPrimaryColumn(key);
          if (column) {
            return this.filterManager.destroyFilter(column, "filterDestroyed");
          }
        };
        GridApi2.prototype.getStatusPanel = function(key) {
          if (!this.statusBarService) {
            return;
          }
          var comp = this.statusBarService.getStatusPanel(key);
          var unwrapped = this.frameworkComponentWrapper ? this.frameworkComponentWrapper.unwrap(comp) : comp;
          return unwrapped;
        };
        GridApi2.prototype.getColumnDef = function(key) {
          var column = this.columnModel.getPrimaryColumn(key);
          if (column) {
            return column.getColDef();
          }
          return null;
        };
        GridApi2.prototype.getColumnDefs = function() {
          return this.columnModel.getColumnDefs();
        };
        GridApi2.prototype.onFilterChanged = function() {
          this.filterManager.onFilterChanged();
        };
        GridApi2.prototype.onSortChanged = function() {
          this.sortController.onSortChanged();
        };
        GridApi2.prototype.setSortModel = function(sortModel, source) {
          console.warn("AG Grid: as of version 24.0.0, setSortModel() is deprecated, sort information is now part of Column State. Please use columnApi.applyColumnState() instead.");
          var columnState = [];
          if (sortModel) {
            sortModel.forEach(function(item, index) {
              columnState.push({
                colId: item.colId,
                sort: item.sort,
                sortIndex: index
              });
            });
          }
          this.columnModel.applyColumnState({ state: columnState, defaultState: { sort: null } });
        };
        GridApi2.prototype.getSortModel = function() {
          console.warn("AG Grid: as of version 24.0.0, getSortModel() is deprecated, sort information is now part of Column State. Please use columnApi.getColumnState() instead.");
          var columnState = this.columnModel.getColumnState();
          var filteredStates = columnState.filter(function(item) {
            return item.sort != null;
          });
          var indexes = {};
          filteredStates.forEach(function(state) {
            var id = state.colId;
            var sortIndex = state.sortIndex;
            indexes[id] = sortIndex;
          });
          var res = filteredStates.map(function(s) {
            return { colId: s.colId, sort: s.sort };
          });
          res.sort(function(a, b) {
            return indexes[a.colId] - indexes[b.colId];
          });
          return res;
        };
        GridApi2.prototype.setFilterModel = function(model2) {
          this.filterManager.setFilterModel(model2);
        };
        GridApi2.prototype.getFilterModel = function() {
          return this.filterManager.getFilterModel();
        };
        GridApi2.prototype.getFocusedCell = function() {
          return this.focusService.getFocusedCell();
        };
        GridApi2.prototype.clearFocusedCell = function() {
          return this.focusService.clearFocusedCell();
        };
        GridApi2.prototype.setFocusedCell = function(rowIndex, colKey, floating) {
          this.focusService.setFocusedCell(rowIndex, colKey, floating, true);
        };
        GridApi2.prototype.setSuppressRowDrag = function(value) {
          this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_SUPPRESS_ROW_DRAG, value);
        };
        GridApi2.prototype.setSuppressMoveWhenRowDragging = function(value) {
          this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_SUPPRESS_MOVE_WHEN_ROW_DRAG, value);
        };
        GridApi2.prototype.setSuppressRowClickSelection = function(value) {
          this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_SUPPRESS_ROW_CLICK_SELECTION, value);
        };
        GridApi2.prototype.addRowDropZone = function(params) {
          this.gridBodyCon.getRowDragFeature().addRowDropZone(params);
        };
        GridApi2.prototype.removeRowDropZone = function(params) {
          var activeDropTarget = this.dragAndDropService.findExternalZone(params);
          if (activeDropTarget) {
            this.dragAndDropService.removeDropTarget(activeDropTarget);
          }
        };
        GridApi2.prototype.getRowDropZoneParams = function(events) {
          return this.gridBodyCon.getRowDragFeature().getRowDropZone(events);
        };
        GridApi2.prototype.setHeaderHeight = function(headerHeight) {
          this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_HEADER_HEIGHT, headerHeight);
        };
        GridApi2.prototype.setDomLayout = function(domLayout) {
          this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_DOM_LAYOUT, domLayout);
        };
        GridApi2.prototype.setEnableCellTextSelection = function(selectable) {
          this.gridBodyCon.setCellTextSelection(selectable);
        };
        GridApi2.prototype.setFillHandleDirection = function(direction) {
          this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_FILL_HANDLE_DIRECTION, direction);
        };
        GridApi2.prototype.setGroupHeaderHeight = function(headerHeight) {
          this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GROUP_HEADER_HEIGHT, headerHeight);
        };
        GridApi2.prototype.setFloatingFiltersHeight = function(headerHeight) {
          this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_FLOATING_FILTERS_HEIGHT, headerHeight);
        };
        GridApi2.prototype.setPivotGroupHeaderHeight = function(headerHeight) {
          this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_PIVOT_GROUP_HEADER_HEIGHT, headerHeight);
        };
        GridApi2.prototype.setIsExternalFilterPresent = function(isExternalFilterPresentFunc) {
          this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_IS_EXTERNAL_FILTER_PRESENT, isExternalFilterPresentFunc);
        };
        GridApi2.prototype.setDoesExternalFilterPass = function(doesExternalFilterPassFunc) {
          this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_DOES_EXTERNAL_FILTER_PASS, doesExternalFilterPassFunc);
        };
        GridApi2.prototype.setNavigateToNextCell = function(navigateToNextCellFunc) {
          this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_NAVIGATE_TO_NEXT_CELL, navigateToNextCellFunc);
        };
        GridApi2.prototype.setTabToNextCell = function(tabToNextCellFunc) {
          this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_TAB_TO_NEXT_CELL, tabToNextCellFunc);
        };
        GridApi2.prototype.setTabToNextHeader = function(tabToNextHeaderFunc) {
          this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_TAB_TO_NEXT_HEADER, tabToNextHeaderFunc);
        };
        GridApi2.prototype.setNavigateToNextHeader = function(navigateToNextHeaderFunc) {
          this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_NAVIGATE_TO_NEXT_HEADER, navigateToNextHeaderFunc);
        };
        GridApi2.prototype.setGroupRowAggNodes = function(groupRowAggNodesFunc) {
          this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GROUP_ROW_AGG_NODES, groupRowAggNodesFunc);
        };
        GridApi2.prototype.setGetBusinessKeyForNode = function(getBusinessKeyForNodeFunc) {
          this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GET_BUSINESS_KEY_FOR_NODE, getBusinessKeyForNodeFunc);
        };
        GridApi2.prototype.setGetChildCount = function(getChildCountFunc) {
          this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GET_CHILD_COUNT, getChildCountFunc);
        };
        GridApi2.prototype.setProcessRowPostCreate = function(processRowPostCreateFunc) {
          this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_PROCESS_ROW_POST_CREATE, processRowPostCreateFunc);
        };
        GridApi2.prototype.setGetRowNodeId = function(getRowNodeIdFunc) {
          this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GET_ROW_NODE_ID, getRowNodeIdFunc);
        };
        GridApi2.prototype.setGetRowClass = function(rowClassFunc) {
          this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GET_ROW_CLASS, rowClassFunc);
        };
        GridApi2.prototype.setIsFullWidthCell = function(isFullWidthCellFunc) {
          this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_IS_FULL_WIDTH_CELL, isFullWidthCellFunc);
        };
        GridApi2.prototype.setIsRowSelectable = function(isRowSelectableFunc) {
          this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_IS_ROW_SELECTABLE, isRowSelectableFunc);
        };
        GridApi2.prototype.setIsRowMaster = function(isRowMasterFunc) {
          this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_IS_ROW_MASTER, isRowMasterFunc);
        };
        GridApi2.prototype.setPostSort = function(postSortFunc) {
          this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_POST_SORT, postSortFunc);
        };
        GridApi2.prototype.setGetDocument = function(getDocumentFunc) {
          this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GET_DOCUMENT, getDocumentFunc);
        };
        GridApi2.prototype.setGetContextMenuItems = function(getContextMenuItemsFunc) {
          this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GET_CONTEXT_MENU_ITEMS, getContextMenuItemsFunc);
        };
        GridApi2.prototype.setGetMainMenuItems = function(getMainMenuItemsFunc) {
          this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GET_MAIN_MENU_ITEMS, getMainMenuItemsFunc);
        };
        GridApi2.prototype.setProcessCellForClipboard = function(processCellForClipboardFunc) {
          this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_PROCESS_CELL_FOR_CLIPBOARD, processCellForClipboardFunc);
        };
        GridApi2.prototype.setSendToClipboard = function(sendToClipboardFunc) {
          this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_SEND_TO_CLIPBOARD, sendToClipboardFunc);
        };
        GridApi2.prototype.setProcessCellFromClipboard = function(processCellFromClipboardFunc) {
          this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_PROCESS_CELL_FROM_CLIPBOARD, processCellFromClipboardFunc);
        };
        GridApi2.prototype.setProcessSecondaryColDef = function(processSecondaryColDefFunc) {
          this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_PROCESS_TO_SECONDARY_COLDEF, processSecondaryColDefFunc);
        };
        GridApi2.prototype.setProcessSecondaryColGroupDef = function(processSecondaryColGroupDefFunc) {
          this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_PROCESS_SECONDARY_COL_GROUP_DEF, processSecondaryColGroupDefFunc);
        };
        GridApi2.prototype.setPostProcessPopup = function(postProcessPopupFunc) {
          this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_POST_PROCESS_POPUP, postProcessPopupFunc);
        };
        GridApi2.prototype.setDefaultGroupOrderComparator = function(defaultGroupOrderComparatorFunc) {
          this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_DEFAULT_GROUP_ORDER_COMPARATOR, defaultGroupOrderComparatorFunc);
        };
        GridApi2.prototype.setGetChartToolbarItems = function(getChartToolbarItemsFunc) {
          this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GET_CHART_TOOLBAR_ITEMS, getChartToolbarItemsFunc);
        };
        GridApi2.prototype.setPaginationNumberFormatter = function(paginationNumberFormatterFunc) {
          this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_PAGINATION_NUMBER_FORMATTER, paginationNumberFormatterFunc);
        };
        GridApi2.prototype.setGetServerSideStoreParams = function(getServerSideStoreParamsFunc) {
          this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GET_SERVER_SIDE_STORE_PARAMS, getServerSideStoreParamsFunc);
        };
        GridApi2.prototype.setIsServerSideGroupOpenByDefault = function(isServerSideGroupOpenByDefaultFunc) {
          this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_IS_SERVER_SIDE_GROUPS_OPEN_BY_DEFAULT, isServerSideGroupOpenByDefaultFunc);
        };
        GridApi2.prototype.setIsApplyServerSideTransaction = function(isApplyServerSideTransactionFunc) {
          this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_IS_APPLY_SERVER_SIDE_TRANSACTION, isApplyServerSideTransactionFunc);
        };
        GridApi2.prototype.setIsServerSideGroup = function(isServerSideGroupFunc) {
          this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_IS_SERVER_SIDE_GROUP, isServerSideGroupFunc);
        };
        GridApi2.prototype.setGetServerSideGroupKey = function(getServerSideGroupKeyFunc) {
          this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GET_SERVER_SIDE_GROUP_KEY, getServerSideGroupKeyFunc);
        };
        GridApi2.prototype.setGetRowStyle = function(rowStyleFunc) {
          this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GET_ROW_STYLE, rowStyleFunc);
        };
        GridApi2.prototype.setGetRowHeight = function(rowHeightFunc) {
          this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GET_ROW_HEIGHT, rowHeightFunc);
        };
        GridApi2.prototype.setPivotHeaderHeight = function(headerHeight) {
          this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_PIVOT_HEADER_HEIGHT, headerHeight);
        };
        GridApi2.prototype.isSideBarVisible = function() {
          return this.sideBarComp ? this.sideBarComp.isDisplayed() : false;
        };
        GridApi2.prototype.setSideBarVisible = function(show) {
          if (!this.sideBarComp) {
            if (show) {
              console.warn("AG Grid: sideBar is not loaded");
            }
            return;
          }
          this.sideBarComp.setDisplayed(show);
        };
        GridApi2.prototype.setSideBarPosition = function(position) {
          if (!this.sideBarComp) {
            console.warn("AG Grid: sideBar is not loaded");
            return;
          }
          this.sideBarComp.setSideBarPosition(position);
        };
        GridApi2.prototype.openToolPanel = function(key) {
          if (!this.sideBarComp) {
            console.warn("AG Grid: toolPanel is only available in AG Grid Enterprise");
            return;
          }
          this.sideBarComp.openToolPanel(key);
        };
        GridApi2.prototype.closeToolPanel = function() {
          if (!this.sideBarComp) {
            console.warn("AG Grid: toolPanel is only available in AG Grid Enterprise");
            return;
          }
          this.sideBarComp.close();
        };
        GridApi2.prototype.getOpenedToolPanel = function() {
          return this.sideBarComp ? this.sideBarComp.openedItem() : null;
        };
        GridApi2.prototype.getSideBar = function() {
          return this.gridOptionsWrapper.getSideBar();
        };
        GridApi2.prototype.setSideBar = function(def) {
          this.gridOptionsWrapper.setProperty("sideBar", SideBarDefParser.parse(def));
        };
        GridApi2.prototype.setSuppressClipboardPaste = function(value) {
          this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_SUPPRESS_CLIPBOARD_PASTE, value);
        };
        GridApi2.prototype.isToolPanelShowing = function() {
          return this.sideBarComp.isToolPanelShowing();
        };
        GridApi2.prototype.doLayout = function() {
          var message2 = "AG Grid - since version 25.1, doLayout was taken out, as it's not needed. The grid responds to grid size changes automatically";
          doOnce(function() {
            return console.warn(message2);
          }, "doLayoutDeprecated");
        };
        GridApi2.prototype.resetRowHeights = function() {
          if (exists(this.clientSideRowModel)) {
            this.clientSideRowModel.resetRowHeights();
          }
        };
        GridApi2.prototype.setGroupRemoveSingleChildren = function(value) {
          this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GROUP_REMOVE_SINGLE_CHILDREN, value);
        };
        GridApi2.prototype.setGroupRemoveLowestSingleChildren = function(value) {
          this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_GROUP_REMOVE_LOWEST_SINGLE_CHILDREN, value);
        };
        GridApi2.prototype.onRowHeightChanged = function() {
          if (this.clientSideRowModel) {
            this.clientSideRowModel.onRowHeightChanged();
          } else if (this.serverSideRowModel) {
            this.serverSideRowModel.onRowHeightChanged();
          }
        };
        GridApi2.prototype.getValue = function(colKey, rowNode) {
          var column = this.columnModel.getPrimaryColumn(colKey);
          if (missing(column)) {
            column = this.columnModel.getGridColumn(colKey);
          }
          if (missing(column)) {
            return null;
          }
          return this.valueService.getValue(column, rowNode);
        };
        GridApi2.prototype.addEventListener = function(eventType, listener) {
          var async = this.gridOptionsWrapper.useAsyncEvents();
          this.eventService.addEventListener(eventType, listener, async);
        };
        GridApi2.prototype.addGlobalListener = function(listener) {
          var async = this.gridOptionsWrapper.useAsyncEvents();
          this.eventService.addGlobalListener(listener, async);
        };
        GridApi2.prototype.removeEventListener = function(eventType, listener) {
          var async = this.gridOptionsWrapper.useAsyncEvents();
          this.eventService.removeEventListener(eventType, listener, async);
        };
        GridApi2.prototype.removeGlobalListener = function(listener) {
          var async = this.gridOptionsWrapper.useAsyncEvents();
          this.eventService.removeGlobalListener(listener, async);
        };
        GridApi2.prototype.dispatchEvent = function(event) {
          this.eventService.dispatchEvent(event);
        };
        GridApi2.prototype.destroy = function() {
          if (this.destroyCalled) {
            return;
          }
          this.destroyCalled = true;
          var gridCtrl = this.ctrlsService.getGridCtrl();
          gridCtrl && gridCtrl.destroyGridUi();
          this.context.destroy();
        };
        GridApi2.prototype.cleanDownReferencesToAvoidMemoryLeakInCaseApplicationIsKeepingReferenceToDestroyedGrid = function() {
          setTimeout(removeAllReferences.bind(window, this, "Grid API"), 100);
        };
        GridApi2.prototype.warnIfDestroyed = function(methodName) {
          if (this.destroyCalled) {
            console.warn("AG Grid: Grid API method " + methodName + " was called on a grid that was destroyed.");
          }
          return this.destroyCalled;
        };
        GridApi2.prototype.resetQuickFilter = function() {
          if (this.warnIfDestroyed("resetQuickFilter")) {
            return;
          }
          this.rowModel.forEachNode(function(node) {
            return node.quickFilterAggregateText = null;
          });
        };
        GridApi2.prototype.getRangeSelections = function() {
          console.warn("AG Grid: in v20.1.x, api.getRangeSelections() is gone, please use getCellRanges() instead.\n        We had to change how cell selections works a small bit to allow charting to integrate. The return type of\n        getCellRanges() is a bit different, please check the AG Grid documentation.");
          return null;
        };
        GridApi2.prototype.getCellRanges = function() {
          if (this.rangeService) {
            return this.rangeService.getCellRanges();
          }
          console.warn("AG Grid: cell range selection is only available in AG Grid Enterprise");
          return null;
        };
        GridApi2.prototype.camelCaseToHumanReadable = function(camelCase) {
          return camelCaseToHumanText(camelCase);
        };
        GridApi2.prototype.addRangeSelection = function(deprecatedNoLongerUsed) {
          console.warn("AG Grid: As of version 21.x, range selection changed slightly to allow charting integration. Please call api.addCellRange() instead of api.addRangeSelection()");
        };
        GridApi2.prototype.addCellRange = function(params) {
          if (!this.rangeService) {
            console.warn("AG Grid: cell range selection is only available in AG Grid Enterprise");
          }
          this.rangeService.addCellRange(params);
        };
        GridApi2.prototype.clearRangeSelection = function() {
          if (!this.rangeService) {
            console.warn("AG Grid: cell range selection is only available in AG Grid Enterprise");
          }
          this.rangeService.removeAllCellRanges();
        };
        GridApi2.prototype.undoCellEditing = function() {
          this.undoRedoService.undo();
        };
        GridApi2.prototype.redoCellEditing = function() {
          this.undoRedoService.redo();
        };
        GridApi2.prototype.getCurrentUndoSize = function() {
          return this.undoRedoService.getCurrentUndoStackSize();
        };
        GridApi2.prototype.getCurrentRedoSize = function() {
          return this.undoRedoService.getCurrentRedoStackSize();
        };
        GridApi2.prototype.getChartModels = function() {
          if (ModuleRegistry.assertRegistered(exports.ModuleNames.RangeSelectionModule, "api.getChartModels") && ModuleRegistry.assertRegistered(exports.ModuleNames.GridChartsModule, "api.getChartModels")) {
            return this.chartService.getChartModels();
          }
        };
        GridApi2.prototype.getChartRef = function(chartId) {
          if (ModuleRegistry.assertRegistered(exports.ModuleNames.RangeSelectionModule, "api.getChartRef") && ModuleRegistry.assertRegistered(exports.ModuleNames.GridChartsModule, "api.getChartRef")) {
            return this.chartService.getChartRef(chartId);
          }
        };
        GridApi2.prototype.getChartImageDataURL = function(params) {
          if (ModuleRegistry.assertRegistered(exports.ModuleNames.RangeSelectionModule, "api.getChartImageDataURL") && ModuleRegistry.assertRegistered(exports.ModuleNames.GridChartsModule, "api.getChartImageDataURL")) {
            return this.chartService.getChartImageDataURL(params);
          }
        };
        GridApi2.prototype.createRangeChart = function(params) {
          if (ModuleRegistry.assertRegistered(exports.ModuleNames.RangeSelectionModule, "api.createRangeChart") && ModuleRegistry.assertRegistered(exports.ModuleNames.GridChartsModule, "api.createRangeChart")) {
            return this.chartService.createRangeChart(params);
          }
        };
        GridApi2.prototype.createCrossFilterChart = function(params) {
          if (ModuleRegistry.assertRegistered(exports.ModuleNames.RangeSelectionModule, "api.createCrossFilterChart") && ModuleRegistry.assertRegistered(exports.ModuleNames.GridChartsModule, "api.createCrossFilterChart")) {
            return this.chartService.createCrossFilterChart(params);
          }
        };
        GridApi2.prototype.restoreChart = function(chartModel, chartContainer) {
          if (ModuleRegistry.assertRegistered(exports.ModuleNames.RangeSelectionModule, "api.restoreChart") && ModuleRegistry.assertRegistered(exports.ModuleNames.GridChartsModule, "api.restoreChart")) {
            return this.chartService.restoreChart(chartModel, chartContainer);
          }
        };
        GridApi2.prototype.createPivotChart = function(params) {
          if (ModuleRegistry.assertRegistered(exports.ModuleNames.RangeSelectionModule, "api.createPivotChart") && ModuleRegistry.assertRegistered(exports.ModuleNames.GridChartsModule, "api.createPivotChart")) {
            return this.chartService.createPivotChart(params);
          }
        };
        GridApi2.prototype.copySelectedRowsToClipboard = function(includeHeader, columnKeys) {
          if (!this.clipboardService) {
            console.warn("AG Grid: clipboard is only available in AG Grid Enterprise");
          }
          this.clipboardService.copySelectedRowsToClipboard(includeHeader, columnKeys);
        };
        GridApi2.prototype.copySelectedRangeToClipboard = function(includeHeader) {
          if (!this.clipboardService) {
            console.warn("AG Grid: clipboard is only available in AG Grid Enterprise");
          }
          this.clipboardService.copySelectedRangeToClipboard(includeHeader);
        };
        GridApi2.prototype.copySelectedRangeDown = function() {
          if (!this.clipboardService) {
            console.warn("AG Grid: clipboard is only available in AG Grid Enterprise");
          }
          this.clipboardService.copyRangeDown();
        };
        GridApi2.prototype.showColumnMenuAfterButtonClick = function(colKey, buttonElement) {
          var column = this.columnModel.getGridColumn(colKey);
          this.menuFactory.showMenuAfterButtonClick(column, buttonElement, "columnMenu");
        };
        GridApi2.prototype.showColumnMenuAfterMouseClick = function(colKey, mouseEvent) {
          var column = this.columnModel.getGridColumn(colKey);
          if (!column) {
            column = this.columnModel.getPrimaryColumn(colKey);
          }
          if (!column) {
            console.error("AG Grid: column '" + colKey + "' not found");
            return;
          }
          this.menuFactory.showMenuAfterMouseEvent(column, mouseEvent);
        };
        GridApi2.prototype.hidePopupMenu = function() {
          if (this.contextMenuFactory) {
            this.contextMenuFactory.hideActiveMenu();
          }
          this.menuFactory.hideActiveMenu();
        };
        GridApi2.prototype.setPopupParent = function(ePopupParent) {
          this.gridOptionsWrapper.setProperty(GridOptionsWrapper.PROP_POPUP_PARENT, ePopupParent);
        };
        GridApi2.prototype.tabToNextCell = function() {
          return this.navigationService.tabToNextCell(false);
        };
        GridApi2.prototype.tabToPreviousCell = function() {
          return this.navigationService.tabToNextCell(true);
        };
        GridApi2.prototype.getCellRendererInstances = function(params) {
          if (params === void 0) {
            params = {};
          }
          return this.rowRenderer.getCellRendererInstances(params);
        };
        GridApi2.prototype.getCellEditorInstances = function(params) {
          if (params === void 0) {
            params = {};
          }
          return this.rowRenderer.getCellEditorInstances(params);
        };
        GridApi2.prototype.getEditingCells = function() {
          return this.rowRenderer.getEditingCells();
        };
        GridApi2.prototype.stopEditing = function(cancel) {
          if (cancel === void 0) {
            cancel = false;
          }
          this.rowRenderer.stopEditing(cancel);
        };
        GridApi2.prototype.startEditingCell = function(params) {
          var column = this.columnModel.getGridColumn(params.colKey);
          if (!column) {
            console.warn("AG Grid: no column found for " + params.colKey);
            return;
          }
          var cellPosition = {
            rowIndex: params.rowIndex,
            rowPinned: params.rowPinned || null,
            column
          };
          var notPinned = params.rowPinned == null;
          if (notPinned) {
            this.gridBodyCon.getScrollFeature().ensureIndexVisible(params.rowIndex);
          }
          var cell = this.navigationService.getCellByPosition(cellPosition);
          if (!cell) {
            return;
          }
          cell.startRowOrCellEdit(params.keyPress, params.charPress);
        };
        GridApi2.prototype.addAggFunc = function(key, aggFunc) {
          if (this.aggFuncService) {
            this.aggFuncService.addAggFunc(key, aggFunc);
          }
        };
        GridApi2.prototype.addAggFuncs = function(aggFuncs) {
          if (this.aggFuncService) {
            this.aggFuncService.addAggFuncs(aggFuncs);
          }
        };
        GridApi2.prototype.clearAggFuncs = function() {
          if (this.aggFuncService) {
            this.aggFuncService.clear();
          }
        };
        GridApi2.prototype.applyServerSideTransaction = function(transaction) {
          if (!this.serverSideTransactionManager) {
            console.warn("AG Grid: Cannot apply Server Side Transaction if not using the Server Side Row Model.");
            return;
          }
          return this.serverSideTransactionManager.applyTransaction(transaction);
        };
        GridApi2.prototype.applyServerSideTransactionAsync = function(transaction, callback) {
          if (!this.serverSideTransactionManager) {
            console.warn("AG Grid: Cannot apply Server Side Transaction if not using the Server Side Row Model.");
            return;
          }
          return this.serverSideTransactionManager.applyTransactionAsync(transaction, callback);
        };
        GridApi2.prototype.retryServerSideLoads = function() {
          if (!this.serverSideRowModel) {
            console.warn("AG Grid: API retryServerSideLoads() can only be used when using Server-Side Row Model.");
            return;
          }
          this.serverSideRowModel.retryLoads();
        };
        GridApi2.prototype.flushServerSideAsyncTransactions = function() {
          if (!this.serverSideTransactionManager) {
            console.warn("AG Grid: Cannot flush Server Side Transaction if not using the Server Side Row Model.");
            return;
          }
          return this.serverSideTransactionManager.flushAsyncTransactions();
        };
        GridApi2.prototype.applyTransaction = function(rowDataTransaction) {
          if (!this.clientSideRowModel) {
            console.error("AG Grid: updateRowData() only works with ClientSideRowModel. Working with InfiniteRowModel was deprecated in v23.1 and removed in v24.1");
            return;
          }
          var res = this.clientSideRowModel.updateRowData(rowDataTransaction);
          this.rowRenderer.refreshFullWidthRows(res.update);
          if (!this.gridOptionsWrapper.isSuppressChangeDetection()) {
            this.rowRenderer.refreshCells();
          }
          return res;
        };
        GridApi2.prototype.updateRowData = function(rowDataTransaction) {
          var message2 = "AG Grid: as of v23.1, grid API updateRowData(transaction) is now called applyTransaction(transaction). updateRowData is deprecated and will be removed in a future major release.";
          doOnce(function() {
            return console.warn(message2);
          }, "updateRowData deprecated");
          return this.applyTransaction(rowDataTransaction);
        };
        GridApi2.prototype.applyTransactionAsync = function(rowDataTransaction, callback) {
          if (!this.clientSideRowModel) {
            console.error("AG Grid: api.applyTransactionAsync() only works with ClientSideRowModel.");
            return;
          }
          this.clientSideRowModel.batchUpdateRowData(rowDataTransaction, callback);
        };
        GridApi2.prototype.flushAsyncTransactions = function() {
          if (!this.clientSideRowModel) {
            console.error("AG Grid: api.applyTransactionAsync() only works with ClientSideRowModel.");
            return;
          }
          this.clientSideRowModel.flushAsyncTransactions();
        };
        GridApi2.prototype.batchUpdateRowData = function(rowDataTransaction, callback) {
          var message2 = "AG Grid: as of v23.1, grid API batchUpdateRowData(transaction, callback) is now called applyTransactionAsync(transaction, callback). batchUpdateRowData is deprecated and will be removed in a future major release.";
          doOnce(function() {
            return console.warn(message2);
          }, "batchUpdateRowData deprecated");
          this.applyTransactionAsync(rowDataTransaction, callback);
        };
        GridApi2.prototype.insertItemsAtIndex = function(index, items, skipRefresh) {
          console.warn("AG Grid: insertItemsAtIndex() is deprecated, use updateRowData(transaction) instead.");
          this.updateRowData({ add: items, addIndex: index, update: null, remove: null });
        };
        GridApi2.prototype.removeItems = function(rowNodes, skipRefresh) {
          console.warn("AG Grid: removeItems() is deprecated, use updateRowData(transaction) instead.");
          var dataToRemove = rowNodes.map(function(rowNode) {
            return rowNode.data;
          });
          this.updateRowData({ add: null, addIndex: null, update: null, remove: dataToRemove });
        };
        GridApi2.prototype.addItems = function(items, skipRefresh) {
          console.warn("AG Grid: addItems() is deprecated, use updateRowData(transaction) instead.");
          this.updateRowData({ add: items, addIndex: null, update: null, remove: null });
        };
        GridApi2.prototype.refreshVirtualPageCache = function() {
          console.warn("AG Grid: refreshVirtualPageCache() is now called refreshInfiniteCache(), please call refreshInfiniteCache() instead");
          this.refreshInfiniteCache();
        };
        GridApi2.prototype.refreshInfinitePageCache = function() {
          console.warn("AG Grid: refreshInfinitePageCache() is now called refreshInfiniteCache(), please call refreshInfiniteCache() instead");
          this.refreshInfiniteCache();
        };
        GridApi2.prototype.refreshInfiniteCache = function() {
          if (this.infiniteRowModel) {
            this.infiniteRowModel.refreshCache();
          } else {
            console.warn("AG Grid: api.refreshInfiniteCache is only available when rowModelType='infinite'.");
          }
        };
        GridApi2.prototype.purgeVirtualPageCache = function() {
          console.warn("AG Grid: purgeVirtualPageCache() is now called purgeInfiniteCache(), please call purgeInfiniteCache() instead");
          this.purgeInfinitePageCache();
        };
        GridApi2.prototype.purgeInfinitePageCache = function() {
          console.warn("AG Grid: purgeInfinitePageCache() is now called purgeInfiniteCache(), please call purgeInfiniteCache() instead");
          this.purgeInfiniteCache();
        };
        GridApi2.prototype.purgeInfiniteCache = function() {
          if (this.infiniteRowModel) {
            this.infiniteRowModel.purgeCache();
          } else {
            console.warn("AG Grid: api.purgeInfiniteCache is only available when rowModelType='infinite'.");
          }
        };
        GridApi2.prototype.purgeEnterpriseCache = function(route) {
          console.warn("ag-grid: since version 18.x, api.purgeEnterpriseCache() should be replaced with api.purgeServerSideCache()");
          this.purgeServerSideCache(route);
        };
        GridApi2.prototype.purgeServerSideCache = function(route) {
          if (route === void 0) {
            route = [];
          }
          if (this.serverSideRowModel) {
            console.warn("AG Grid: since v25.0, api.purgeServerSideCache is deprecated. Please use api.refreshServerSideStore({purge: true}) instead.");
            this.refreshServerSideStore({
              route,
              purge: true
            });
          } else {
            console.warn("AG Grid: api.purgeServerSideCache is only available when rowModelType='serverSide'.");
          }
        };
        GridApi2.prototype.refreshServerSideStore = function(params) {
          if (this.serverSideRowModel) {
            this.serverSideRowModel.refreshStore(params);
          } else {
            console.warn("AG Grid: api.refreshServerSideStore is only available when rowModelType='serverSide'.");
          }
        };
        GridApi2.prototype.getServerSideStoreState = function() {
          if (this.serverSideRowModel) {
            return this.serverSideRowModel.getStoreState();
          } else {
            console.warn("AG Grid: api.getServerSideStoreState is only available when rowModelType='serverSide'.");
            return [];
          }
        };
        GridApi2.prototype.getVirtualRowCount = function() {
          console.warn("AG Grid: getVirtualRowCount() is now called getInfiniteRowCount(), please call getInfiniteRowCount() instead");
          return this.getInfiniteRowCount();
        };
        GridApi2.prototype.getInfiniteRowCount = function() {
          if (this.infiniteRowModel) {
            return this.infiniteRowModel.getRowCount();
          } else {
            console.warn("AG Grid: api.getVirtualRowCount is only available when rowModelType='virtual'.");
          }
        };
        GridApi2.prototype.isMaxRowFound = function() {
          console.warn("AG Grid: api.isLastRowIndexKnown is deprecated, please use api.isLastRowIndexKnown()");
          return this.isLastRowIndexKnown();
        };
        GridApi2.prototype.isLastRowIndexKnown = function() {
          if (this.infiniteRowModel) {
            return this.infiniteRowModel.isLastRowIndexKnown();
          } else {
            console.warn("AG Grid: api.isMaxRowFound is only available when rowModelType='virtual'.");
          }
        };
        GridApi2.prototype.setVirtualRowCount = function(rowCount, maxRowFound) {
          console.warn("AG Grid: setVirtualRowCount() is now called setInfiniteRowCount(), please call setInfiniteRowCount() instead");
          this.setRowCount(rowCount, maxRowFound);
        };
        GridApi2.prototype.setInfiniteRowCount = function(rowCount, maxRowFound) {
          console.warn("AG Grid: setInfiniteRowCount() is now called setRowCount(), please call setRowCount() instead");
          this.setRowCount(rowCount, maxRowFound);
        };
        GridApi2.prototype.setRowCount = function(rowCount, maxRowFound) {
          if (this.infiniteRowModel) {
            this.infiniteRowModel.setRowCount(rowCount, maxRowFound);
          } else {
            console.warn("AG Grid: api.setRowCount is only available for Infinite Row Model.");
          }
        };
        GridApi2.prototype.getVirtualPageState = function() {
          console.warn("AG Grid: getVirtualPageState() is now called getCacheBlockState(), please call getCacheBlockState() instead");
          return this.getCacheBlockState();
        };
        GridApi2.prototype.getInfinitePageState = function() {
          console.warn("AG Grid: getInfinitePageState() is now called getCacheBlockState(), please call getCacheBlockState() instead");
          return this.getCacheBlockState();
        };
        GridApi2.prototype.getCacheBlockState = function() {
          return this.rowNodeBlockLoader.getBlockState();
        };
        GridApi2.prototype.checkGridSize = function() {
          console.warn("in AG Grid v25.2.0, checkGridSize() was removed, as it was legacy and didn't do anything uesful.");
        };
        GridApi2.prototype.getFirstRenderedRow = function() {
          console.warn("in AG Grid v12, getFirstRenderedRow() was renamed to getFirstDisplayedRow()");
          return this.getFirstDisplayedRow();
        };
        GridApi2.prototype.getFirstDisplayedRow = function() {
          return this.rowRenderer.getFirstVirtualRenderedRow();
        };
        GridApi2.prototype.getLastRenderedRow = function() {
          console.warn("in AG Grid v12, getLastRenderedRow() was renamed to getLastDisplayedRow()");
          return this.getLastDisplayedRow();
        };
        GridApi2.prototype.getLastDisplayedRow = function() {
          return this.rowRenderer.getLastVirtualRenderedRow();
        };
        GridApi2.prototype.getDisplayedRowAtIndex = function(index) {
          return this.rowModel.getRow(index);
        };
        GridApi2.prototype.getDisplayedRowCount = function() {
          return this.rowModel.getRowCount();
        };
        GridApi2.prototype.paginationIsLastPageFound = function() {
          return this.paginationProxy.isLastPageFound();
        };
        GridApi2.prototype.paginationGetPageSize = function() {
          return this.paginationProxy.getPageSize();
        };
        GridApi2.prototype.paginationSetPageSize = function(size) {
          this.gridOptionsWrapper.setProperty("paginationPageSize", size);
        };
        GridApi2.prototype.paginationGetCurrentPage = function() {
          return this.paginationProxy.getCurrentPage();
        };
        GridApi2.prototype.paginationGetTotalPages = function() {
          return this.paginationProxy.getTotalPages();
        };
        GridApi2.prototype.paginationGetRowCount = function() {
          return this.paginationProxy.getMasterRowCount();
        };
        GridApi2.prototype.paginationGoToNextPage = function() {
          this.paginationProxy.goToNextPage();
        };
        GridApi2.prototype.paginationGoToPreviousPage = function() {
          this.paginationProxy.goToPreviousPage();
        };
        GridApi2.prototype.paginationGoToFirstPage = function() {
          this.paginationProxy.goToFirstPage();
        };
        GridApi2.prototype.paginationGoToLastPage = function() {
          this.paginationProxy.goToLastPage();
        };
        GridApi2.prototype.paginationGoToPage = function(page) {
          this.paginationProxy.goToPage(page);
        };
        __decorate$1l([
          Optional("immutableService")
        ], GridApi2.prototype, "immutableService", void 0);
        __decorate$1l([
          Optional("csvCreator")
        ], GridApi2.prototype, "csvCreator", void 0);
        __decorate$1l([
          Optional("excelCreator")
        ], GridApi2.prototype, "excelCreator", void 0);
        __decorate$1l([
          Autowired("rowRenderer")
        ], GridApi2.prototype, "rowRenderer", void 0);
        __decorate$1l([
          Autowired("navigationService")
        ], GridApi2.prototype, "navigationService", void 0);
        __decorate$1l([
          Autowired("filterManager")
        ], GridApi2.prototype, "filterManager", void 0);
        __decorate$1l([
          Autowired("columnModel")
        ], GridApi2.prototype, "columnModel", void 0);
        __decorate$1l([
          Autowired("selectionService")
        ], GridApi2.prototype, "selectionService", void 0);
        __decorate$1l([
          Autowired("gridOptionsWrapper")
        ], GridApi2.prototype, "gridOptionsWrapper", void 0);
        __decorate$1l([
          Autowired("valueService")
        ], GridApi2.prototype, "valueService", void 0);
        __decorate$1l([
          Autowired("alignedGridsService")
        ], GridApi2.prototype, "alignedGridsService", void 0);
        __decorate$1l([
          Autowired("eventService")
        ], GridApi2.prototype, "eventService", void 0);
        __decorate$1l([
          Autowired("pinnedRowModel")
        ], GridApi2.prototype, "pinnedRowModel", void 0);
        __decorate$1l([
          Autowired("context")
        ], GridApi2.prototype, "context", void 0);
        __decorate$1l([
          Autowired("rowModel")
        ], GridApi2.prototype, "rowModel", void 0);
        __decorate$1l([
          Autowired("sortController")
        ], GridApi2.prototype, "sortController", void 0);
        __decorate$1l([
          Autowired("paginationProxy")
        ], GridApi2.prototype, "paginationProxy", void 0);
        __decorate$1l([
          Autowired("focusService")
        ], GridApi2.prototype, "focusService", void 0);
        __decorate$1l([
          Autowired("dragAndDropService")
        ], GridApi2.prototype, "dragAndDropService", void 0);
        __decorate$1l([
          Optional("rangeService")
        ], GridApi2.prototype, "rangeService", void 0);
        __decorate$1l([
          Optional("clipboardService")
        ], GridApi2.prototype, "clipboardService", void 0);
        __decorate$1l([
          Optional("aggFuncService")
        ], GridApi2.prototype, "aggFuncService", void 0);
        __decorate$1l([
          Autowired("menuFactory")
        ], GridApi2.prototype, "menuFactory", void 0);
        __decorate$1l([
          Optional("contextMenuFactory")
        ], GridApi2.prototype, "contextMenuFactory", void 0);
        __decorate$1l([
          Autowired("valueCache")
        ], GridApi2.prototype, "valueCache", void 0);
        __decorate$1l([
          Autowired("animationFrameService")
        ], GridApi2.prototype, "animationFrameService", void 0);
        __decorate$1l([
          Optional("statusBarService")
        ], GridApi2.prototype, "statusBarService", void 0);
        __decorate$1l([
          Optional("chartService")
        ], GridApi2.prototype, "chartService", void 0);
        __decorate$1l([
          Optional("undoRedoService")
        ], GridApi2.prototype, "undoRedoService", void 0);
        __decorate$1l([
          Optional("rowNodeBlockLoader")
        ], GridApi2.prototype, "rowNodeBlockLoader", void 0);
        __decorate$1l([
          Optional("ssrmTransactionManager")
        ], GridApi2.prototype, "serverSideTransactionManager", void 0);
        __decorate$1l([
          Autowired("ctrlsService")
        ], GridApi2.prototype, "ctrlsService", void 0);
        __decorate$1l([
          Optional("frameworkComponentWrapper")
        ], GridApi2.prototype, "frameworkComponentWrapper", void 0);
        __decorate$1l([
          PostConstruct
        ], GridApi2.prototype, "init", null);
        __decorate$1l([
          PreDestroy
        ], GridApi2.prototype, "cleanDownReferencesToAvoidMemoryLeakInCaseApplicationIsKeepingReferenceToDestroyedGrid", null);
        GridApi2 = __decorate$1l([
          Bean3("gridApi")
        ], GridApi2);
        return GridApi2;
      }()
    );
    var __extends$1w = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1m = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __param$5 = function(paramIndex, decorator) {
      return function(target, key) {
        decorator(target, key, paramIndex);
      };
    };
    var ExpressionService = (
      /** @class */
      function(_super) {
        __extends$1w(ExpressionService2, _super);
        function ExpressionService2() {
          var _this = _super !== null && _super.apply(this, arguments) || this;
          _this.expressionToFunctionCache = {};
          return _this;
        }
        ExpressionService2.prototype.setBeans = function(loggerFactory) {
          this.logger = loggerFactory.create("ExpressionService");
        };
        ExpressionService2.prototype.evaluate = function(expressionOrFunc, params) {
          if (typeof expressionOrFunc === "function") {
            var func = expressionOrFunc;
            return func(params);
          } else if (typeof expressionOrFunc === "string") {
            var expression = expressionOrFunc;
            return this.evaluateExpression(expression, params);
          } else {
            console.error("AG Grid: value should be either a string or a function", expressionOrFunc);
          }
        };
        ExpressionService2.prototype.evaluateExpression = function(expression, params) {
          try {
            var javaScriptFunction = this.createExpressionFunction(expression);
            var result = javaScriptFunction(params.value, params.context, params.oldValue, params.newValue, params.value, params.node, params.data, params.colDef, params.rowIndex, params.api, params.columnApi, params.getValue, params.column, params.columnGroup);
            return result;
          } catch (e) {
            console.log("Processing of the expression failed");
            console.log("Expression = " + expression);
            console.log("Params =", params);
            console.log("Exception = " + e);
            return null;
          }
        };
        ExpressionService2.prototype.createExpressionFunction = function(expression) {
          if (this.expressionToFunctionCache[expression]) {
            return this.expressionToFunctionCache[expression];
          }
          var functionBody = this.createFunctionBody(expression);
          var theFunction = new Function("x, ctx, oldValue, newValue, value, node, data, colDef, rowIndex, api, columnApi, getValue, column, columnGroup", functionBody);
          this.expressionToFunctionCache[expression] = theFunction;
          return theFunction;
        };
        ExpressionService2.prototype.createFunctionBody = function(expression) {
          if (expression.indexOf("return") >= 0) {
            return expression;
          } else {
            return "return " + expression + ";";
          }
        };
        __decorate$1m([
          __param$5(0, Qualifier("loggerFactory"))
        ], ExpressionService2.prototype, "setBeans", null);
        ExpressionService2 = __decorate$1m([
          Bean3("expressionService")
        ], ExpressionService2);
        return ExpressionService2;
      }(BeanStub)
    );
    var __extends$1x = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1n = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var TemplateService = (
      /** @class */
      function(_super) {
        __extends$1x(TemplateService2, _super);
        function TemplateService2() {
          var _this = _super !== null && _super.apply(this, arguments) || this;
          _this.templateCache = {};
          _this.waitingCallbacks = {};
          return _this;
        }
        TemplateService2.prototype.getTemplate = function(url, callback) {
          var templateFromCache = this.templateCache[url];
          if (templateFromCache) {
            return templateFromCache;
          }
          var callbackList = this.waitingCallbacks[url];
          var that = this;
          if (!callbackList) {
            callbackList = [];
            this.waitingCallbacks[url] = callbackList;
            var client = new XMLHttpRequest();
            client.onload = function() {
              that.handleHttpResult(this, url);
            };
            client.open("GET", url);
            client.send();
          }
          if (callback) {
            callbackList.push(callback);
          }
          return null;
        };
        TemplateService2.prototype.handleHttpResult = function(httpResult, url) {
          if (httpResult.status !== 200 || httpResult.response === null) {
            console.warn("Unable to get template error " + httpResult.status + " - " + url);
            return;
          }
          this.templateCache[url] = httpResult.response || httpResult.responseText;
          var callbacks = this.waitingCallbacks[url];
          for (var i = 0; i < callbacks.length; i++) {
            var callback = callbacks[i];
            callback();
          }
          if (this.$scope) {
            var that_1 = this;
            window.setTimeout(function() {
              that_1.$scope.$apply();
            }, 0);
          }
        };
        __decorate$1n([
          Autowired("$scope")
        ], TemplateService2.prototype, "$scope", void 0);
        TemplateService2 = __decorate$1n([
          Bean3("templateService")
        ], TemplateService2);
        return TemplateService2;
      }(BeanStub)
    );
    var __extends$1y = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1o = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __spreadArrays$a = function() {
      for (var s = 0, i = 0, il = arguments.length; i < il; i++)
        s += arguments[i].length;
      for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
          r[k] = a[j];
      return r;
    };
    var FocusService = (
      /** @class */
      function(_super) {
        __extends$1y(FocusService2, _super);
        function FocusService2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        FocusService_1 = FocusService2;
        FocusService2.addKeyboardModeEvents = function(doc, controller) {
          var docControllers = FocusService_1.instancesMonitored.get(doc);
          if (docControllers && docControllers.length > 0) {
            if (docControllers.indexOf(controller) === -1) {
              docControllers.push(controller);
            }
          } else {
            FocusService_1.instancesMonitored.set(doc, [controller]);
            doc.addEventListener("keydown", FocusService_1.toggleKeyboardMode);
            doc.addEventListener("mousedown", FocusService_1.toggleKeyboardMode);
          }
        };
        FocusService2.removeKeyboardModeEvents = function(doc, controller) {
          var docControllers = FocusService_1.instancesMonitored.get(doc);
          var newControllers = [];
          if (docControllers && docControllers.length) {
            newControllers = __spreadArrays$a(docControllers).filter(function(currentGridCore) {
              return currentGridCore !== controller;
            });
            FocusService_1.instancesMonitored.set(doc, newControllers);
          }
          if (newControllers.length === 0) {
            doc.removeEventListener("keydown", FocusService_1.toggleKeyboardMode);
            doc.removeEventListener("mousedown", FocusService_1.toggleKeyboardMode);
          }
        };
        FocusService2.toggleKeyboardMode = function(event) {
          var isKeyboardActive = FocusService_1.keyboardModeActive;
          var isKeyboardEvent = event.type === "keydown";
          if (isKeyboardEvent) {
            if (event.ctrlKey || event.metaKey || event.altKey) {
              return;
            }
          }
          if (isKeyboardActive && isKeyboardEvent || !isKeyboardActive && !isKeyboardEvent) {
            return;
          }
          FocusService_1.keyboardModeActive = isKeyboardEvent;
          var doc = event.target.ownerDocument;
          if (!doc) {
            return;
          }
          var controllersForDoc = FocusService_1.instancesMonitored.get(doc);
          if (controllersForDoc) {
            controllersForDoc.forEach(function(controller) {
              controller.dispatchEvent({ type: isKeyboardEvent ? Events.EVENT_KEYBOARD_FOCUS : Events.EVENT_MOUSE_FOCUS });
            });
          }
        };
        FocusService2.prototype.init = function() {
          var _this = this;
          var clearFocusedCellListener = this.clearFocusedCell.bind(this);
          this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, clearFocusedCellListener);
          this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, this.onColumnEverythingChanged.bind(this));
          this.addManagedListener(this.eventService, Events.EVENT_COLUMN_GROUP_OPENED, clearFocusedCellListener);
          this.addManagedListener(this.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, clearFocusedCellListener);
          this.ctrlsService.whenReady(function(p) {
            _this.gridCtrl = p.gridCtrl;
            var doc = _this.gridOptionsWrapper.getDocument();
            FocusService_1.addKeyboardModeEvents(doc, _this.gridCtrl);
            _this.addDestroyFunc(function() {
              return _this.unregisterGridCompController(_this.gridCtrl);
            });
          });
        };
        FocusService2.prototype.unregisterGridCompController = function(gridCompController) {
          var doc = this.gridOptionsWrapper.getDocument();
          FocusService_1.removeKeyboardModeEvents(doc, gridCompController);
        };
        FocusService2.prototype.onColumnEverythingChanged = function() {
          if (!this.focusedCellPosition) {
            return;
          }
          var col = this.focusedCellPosition.column;
          var colFromColumnModel = this.columnModel.getGridColumn(col.getId());
          if (col !== colFromColumnModel) {
            this.clearFocusedCell();
          }
        };
        FocusService2.prototype.isKeyboardMode = function() {
          return FocusService_1.keyboardModeActive;
        };
        FocusService2.prototype.getFocusCellToUseAfterRefresh = function() {
          if (this.gridOptionsWrapper.isSuppressFocusAfterRefresh() || !this.focusedCellPosition) {
            return null;
          }
          if (this.isDomDataMissingInHierarchy(document.activeElement, RowCtrl.DOM_DATA_KEY_ROW_CTRL)) {
            return null;
          }
          return this.focusedCellPosition;
        };
        FocusService2.prototype.getFocusHeaderToUseAfterRefresh = function() {
          if (this.gridOptionsWrapper.isSuppressFocusAfterRefresh() || !this.focusedHeaderPosition) {
            return null;
          }
          if (this.isDomDataMissingInHierarchy(document.activeElement, AbstractHeaderCellCtrl.DOM_DATA_KEY_HEADER_CTRL)) {
            return null;
          }
          return this.focusedHeaderPosition;
        };
        FocusService2.prototype.isDomDataMissingInHierarchy = function(eBrowserCell, key) {
          var ePointer = eBrowserCell;
          while (ePointer) {
            var data = this.gridOptionsWrapper.getDomData(ePointer, key);
            if (data) {
              return false;
            }
            ePointer = ePointer.parentNode;
          }
          return true;
        };
        FocusService2.prototype.clearFocusedCell = function() {
          this.focusedCellPosition = null;
          this.onCellFocused(false);
        };
        FocusService2.prototype.getFocusedCell = function() {
          return this.focusedCellPosition;
        };
        FocusService2.prototype.setFocusedCell = function(rowIndex, colKey, floating, forceBrowserFocus) {
          if (forceBrowserFocus === void 0) {
            forceBrowserFocus = false;
          }
          var gridColumn = this.columnModel.getGridColumn(colKey);
          if (!gridColumn) {
            this.focusedCellPosition = null;
            return;
          }
          this.focusedCellPosition = gridColumn ? { rowIndex, rowPinned: makeNull(floating), column: gridColumn } : null;
          this.onCellFocused(forceBrowserFocus);
        };
        FocusService2.prototype.isCellFocused = function(cellPosition) {
          if (this.focusedCellPosition == null) {
            return false;
          }
          return this.focusedCellPosition.column === cellPosition.column && this.isRowFocused(cellPosition.rowIndex, cellPosition.rowPinned);
        };
        FocusService2.prototype.isRowNodeFocused = function(rowNode) {
          return this.isRowFocused(rowNode.rowIndex, rowNode.rowPinned);
        };
        FocusService2.prototype.isHeaderWrapperFocused = function(headerCtrl) {
          if (this.focusedHeaderPosition == null) {
            return false;
          }
          var column = headerCtrl.getColumnGroupChild();
          var headerRowIndex = headerCtrl.getRowIndex();
          var pinned = headerCtrl.getPinned();
          var _a2 = this.focusedHeaderPosition, focusedColumn = _a2.column, focusedHeaderRowIndex = _a2.headerRowIndex;
          return column === focusedColumn && headerRowIndex === focusedHeaderRowIndex && pinned == focusedColumn.getPinned();
        };
        FocusService2.prototype.clearFocusedHeader = function() {
          this.focusedHeaderPosition = null;
        };
        FocusService2.prototype.getFocusedHeader = function() {
          return this.focusedHeaderPosition;
        };
        FocusService2.prototype.setFocusedHeader = function(headerRowIndex, column) {
          this.focusedHeaderPosition = { headerRowIndex, column };
        };
        FocusService2.prototype.focusHeaderPosition = function(params) {
          var direction = params.direction, fromTab = params.fromTab, allowUserOverride = params.allowUserOverride, event = params.event;
          var headerPosition = params.headerPosition;
          if (allowUserOverride) {
            var gridOptionsWrapper = this.gridOptionsWrapper;
            var currentPosition = this.getFocusedHeader();
            var headerRowCount = this.headerNavigationService.getHeaderRowCount();
            if (fromTab) {
              var userFunc = gridOptionsWrapper.getTabToNextHeaderFunc();
              if (userFunc) {
                var params_1 = {
                  backwards: direction === "Before",
                  previousHeaderPosition: currentPosition,
                  nextHeaderPosition: headerPosition,
                  headerRowCount,
                  api: gridOptionsWrapper.getApi(),
                  columnApi: gridOptionsWrapper.getColumnApi()
                };
                headerPosition = userFunc(params_1);
              }
            } else {
              var userFunc = gridOptionsWrapper.getNavigateToNextHeaderFunc();
              if (userFunc && event) {
                var params_2 = {
                  key: event.key,
                  previousHeaderPosition: currentPosition,
                  nextHeaderPosition: headerPosition,
                  headerRowCount,
                  event,
                  api: gridOptionsWrapper.getApi(),
                  columnApi: gridOptionsWrapper.getColumnApi()
                };
                headerPosition = userFunc(params_2);
              }
            }
          }
          if (!headerPosition) {
            return false;
          }
          if (headerPosition.headerRowIndex === -1) {
            return this.focusGridView(headerPosition.column);
          }
          this.headerNavigationService.scrollToColumn(headerPosition.column, direction);
          var headerRowContainerCtrl = this.ctrlsService.getHeaderRowContainerCtrl(headerPosition.column.getPinned());
          var focusSuccess = headerRowContainerCtrl.focusHeader(headerPosition.headerRowIndex, headerPosition.column, event);
          return focusSuccess;
        };
        FocusService2.prototype.isAnyCellFocused = function() {
          return !!this.focusedCellPosition;
        };
        FocusService2.prototype.isRowFocused = function(rowIndex, floating) {
          if (this.focusedCellPosition == null) {
            return false;
          }
          return this.focusedCellPosition.rowIndex === rowIndex && this.focusedCellPosition.rowPinned === makeNull(floating);
        };
        FocusService2.prototype.findFocusableElements = function(rootNode, exclude, onlyUnmanaged) {
          if (onlyUnmanaged === void 0) {
            onlyUnmanaged = false;
          }
          var focusableString = Constants.FOCUSABLE_SELECTOR;
          var excludeString = Constants.FOCUSABLE_EXCLUDE;
          if (exclude) {
            excludeString += ", " + exclude;
          }
          if (onlyUnmanaged) {
            excludeString += ', [tabindex="-1"]';
          }
          var nodes = Array.prototype.slice.apply(rootNode.querySelectorAll(focusableString));
          var excludeNodes = Array.prototype.slice.apply(rootNode.querySelectorAll(excludeString));
          if (!excludeNodes.length) {
            return nodes;
          }
          var diff = function(a, b) {
            return a.filter(function(element) {
              return b.indexOf(element) === -1;
            });
          };
          return diff(nodes, excludeNodes);
        };
        FocusService2.prototype.focusInto = function(rootNode, up, onlyUnmanaged) {
          if (up === void 0) {
            up = false;
          }
          if (onlyUnmanaged === void 0) {
            onlyUnmanaged = false;
          }
          var focusableElements = this.findFocusableElements(rootNode, null, onlyUnmanaged);
          var toFocus = up ? last(focusableElements) : focusableElements[0];
          if (toFocus) {
            toFocus.focus();
            return true;
          }
          return false;
        };
        FocusService2.prototype.findNextFocusableElement = function(rootNode, onlyManaged, backwards) {
          var focusable = this.findFocusableElements(rootNode, onlyManaged ? ':not([tabindex="-1"])' : null);
          var currentIndex;
          if (onlyManaged) {
            currentIndex = findIndex(focusable, function(el) {
              return el.contains(document.activeElement);
            });
          } else {
            currentIndex = focusable.indexOf(document.activeElement);
          }
          var nextIndex = currentIndex + (backwards ? -1 : 1);
          if (nextIndex < 0 || nextIndex >= focusable.length) {
            return null;
          }
          return focusable[nextIndex];
        };
        FocusService2.prototype.isFocusUnderManagedComponent = function(rootNode) {
          var managedContainers = rootNode.querySelectorAll("." + ManagedFocusFeature.FOCUS_MANAGED_CLASS);
          if (!managedContainers.length) {
            return false;
          }
          for (var i = 0; i < managedContainers.length; i++) {
            if (managedContainers[i].contains(document.activeElement)) {
              return true;
            }
          }
          return false;
        };
        FocusService2.prototype.findTabbableParent = function(node, limit) {
          if (limit === void 0) {
            limit = 5;
          }
          var counter = 0;
          while (node && getTabIndex(node) === null && ++counter <= limit) {
            node = node.parentElement;
          }
          if (getTabIndex(node) === null) {
            return null;
          }
          return node;
        };
        FocusService2.prototype.onCellFocused = function(forceBrowserFocus) {
          var event = {
            type: Events.EVENT_CELL_FOCUSED,
            forceBrowserFocus,
            rowIndex: null,
            column: null,
            floating: null,
            api: this.gridApi,
            columnApi: this.columnApi,
            rowPinned: null,
            isFullWidthCell: false
          };
          if (this.focusedCellPosition) {
            var rowIndex = event.rowIndex = this.focusedCellPosition.rowIndex;
            var rowPinned = event.rowPinned = this.focusedCellPosition.rowPinned;
            event.column = this.focusedCellPosition.column;
            var rowCtrl = this.rowRenderer.getRowByPosition({ rowIndex, rowPinned });
            if (rowCtrl) {
              event.isFullWidthCell = rowCtrl.isFullWidth();
            }
          }
          this.eventService.dispatchEvent(event);
        };
        FocusService2.prototype.focusGridView = function(column, backwards) {
          var nextRow = backwards ? this.rowPositionUtils.getLastRow() : this.rowPositionUtils.getFirstRow();
          if (!nextRow) {
            return false;
          }
          var rowIndex = nextRow.rowIndex, rowPinned = nextRow.rowPinned;
          var focusedHeader = this.getFocusedHeader();
          if (!column && focusedHeader) {
            column = focusedHeader.column;
          }
          if (rowIndex == null || !column) {
            return false;
          }
          this.navigationService.ensureCellVisible({ rowIndex, column, rowPinned });
          this.setFocusedCell(rowIndex, column, makeNull(rowPinned), true);
          if (this.rangeService) {
            var cellPosition = { rowIndex, rowPinned, column };
            this.rangeService.setRangeToCell(cellPosition);
          }
          return true;
        };
        FocusService2.prototype.focusNextGridCoreContainer = function(backwards) {
          if (this.gridCtrl.focusNextInnerContainer(backwards)) {
            return true;
          }
          if (!backwards) {
            this.gridCtrl.forceFocusOutOfContainer();
          }
          return false;
        };
        var FocusService_1;
        FocusService2.AG_KEYBOARD_FOCUS = "ag-keyboard-focus";
        FocusService2.keyboardModeActive = false;
        FocusService2.instancesMonitored = /* @__PURE__ */ new Map();
        __decorate$1o([
          Autowired("columnModel")
        ], FocusService2.prototype, "columnModel", void 0);
        __decorate$1o([
          Autowired("headerNavigationService")
        ], FocusService2.prototype, "headerNavigationService", void 0);
        __decorate$1o([
          Autowired("columnApi")
        ], FocusService2.prototype, "columnApi", void 0);
        __decorate$1o([
          Autowired("gridApi")
        ], FocusService2.prototype, "gridApi", void 0);
        __decorate$1o([
          Autowired("rowRenderer")
        ], FocusService2.prototype, "rowRenderer", void 0);
        __decorate$1o([
          Autowired("rowPositionUtils")
        ], FocusService2.prototype, "rowPositionUtils", void 0);
        __decorate$1o([
          Optional("rangeService")
        ], FocusService2.prototype, "rangeService", void 0);
        __decorate$1o([
          Autowired("navigationService")
        ], FocusService2.prototype, "navigationService", void 0);
        __decorate$1o([
          Autowired("ctrlsService")
        ], FocusService2.prototype, "ctrlsService", void 0);
        __decorate$1o([
          PostConstruct
        ], FocusService2.prototype, "init", null);
        FocusService2 = FocusService_1 = __decorate$1o([
          Bean3("focusService")
        ], FocusService2);
        return FocusService2;
      }(BeanStub)
    );
    var __extends$1z = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1p = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var DIRECTION;
    (function(DIRECTION2) {
      DIRECTION2[DIRECTION2["vertical"] = 0] = "vertical";
      DIRECTION2[DIRECTION2["horizontal"] = 1] = "horizontal";
    })(DIRECTION || (DIRECTION = {}));
    var instanceIdSeq = 0;
    var PopupService = (
      /** @class */
      function(_super) {
        __extends$1z(PopupService2, _super);
        function PopupService2() {
          var _this = _super !== null && _super.apply(this, arguments) || this;
          _this.popupList = [];
          return _this;
        }
        PopupService2.prototype.postConstruct = function() {
          var _this = this;
          this.ctrlsService.whenReady(function(p) {
            _this.gridCtrl = p.gridCtrl;
            _this.addManagedListener(_this.gridCtrl, Events.EVENT_KEYBOARD_FOCUS, function() {
              forEach(_this.popupList, function(popup) {
                return addCssClass(popup.element, FocusService.AG_KEYBOARD_FOCUS);
              });
            });
            _this.addManagedListener(_this.gridCtrl, Events.EVENT_MOUSE_FOCUS, function() {
              forEach(_this.popupList, function(popup) {
                return removeCssClass(popup.element, FocusService.AG_KEYBOARD_FOCUS);
              });
            });
          });
        };
        PopupService2.prototype.getPopupParent = function() {
          var ePopupParent = this.gridOptionsWrapper.getPopupParent();
          if (ePopupParent) {
            return ePopupParent;
          }
          return this.gridCtrl.getGui();
        };
        PopupService2.prototype.positionPopupForMenu = function(params) {
          var sourceRect = params.eventSource.getBoundingClientRect();
          var parentRect = this.getParentRect();
          var y = this.keepXYWithinBounds(params.ePopup, sourceRect.top - parentRect.top, DIRECTION.vertical);
          var minWidth = params.ePopup.clientWidth > 0 ? params.ePopup.clientWidth : 200;
          params.ePopup.style.minWidth = minWidth + "px";
          var widthOfParent = parentRect.right - parentRect.left;
          var maxX = widthOfParent - minWidth;
          var x;
          if (this.gridOptionsWrapper.isEnableRtl()) {
            x = xLeftPosition();
            if (x < 0) {
              x = xRightPosition();
            }
            if (x > maxX) {
              x = 0;
            }
          } else {
            x = xRightPosition();
            if (x > maxX) {
              x = xLeftPosition();
            }
            if (x < 0) {
              x = 0;
            }
          }
          params.ePopup.style.left = x + "px";
          params.ePopup.style.top = y + "px";
          function xRightPosition() {
            return sourceRect.right - parentRect.left - 2;
          }
          function xLeftPosition() {
            return sourceRect.left - parentRect.left - minWidth;
          }
        };
        PopupService2.prototype.positionPopupUnderMouseEvent = function(params) {
          var ePopup = params.ePopup, nudgeX = params.nudgeX, nudgeY = params.nudgeY;
          var _a2 = this.calculatePointerAlign(params.mouseEvent), x = _a2.x, y = _a2.y;
          this.positionPopup({
            ePopup,
            x,
            y,
            nudgeX,
            nudgeY,
            keepWithinBounds: true
          });
          this.callPostProcessPopup(params.type, params.ePopup, null, params.mouseEvent, params.column, params.rowNode);
        };
        PopupService2.prototype.calculatePointerAlign = function(e) {
          var parentRect = this.getParentRect();
          return {
            x: e.clientX - parentRect.left,
            y: e.clientY - parentRect.top
          };
        };
        PopupService2.prototype.positionPopupUnderComponent = function(params) {
          var sourceRect = params.eventSource.getBoundingClientRect();
          var alignSide = params.alignSide || "left";
          var parentRect = this.getParentRect();
          var x = sourceRect.left - parentRect.left;
          if (alignSide === "right") {
            x -= params.ePopup.offsetWidth - sourceRect.width;
          }
          this.positionPopup({
            ePopup: params.ePopup,
            nudgeX: params.nudgeX,
            nudgeY: params.nudgeY,
            x,
            y: sourceRect.top - parentRect.top + sourceRect.height,
            keepWithinBounds: params.keepWithinBounds
          });
          this.callPostProcessPopup(params.type, params.ePopup, params.eventSource, null, params.column, params.rowNode);
        };
        PopupService2.prototype.positionPopupOverComponent = function(params) {
          var sourceRect = params.eventSource.getBoundingClientRect();
          var parentRect = this.getParentRect();
          this.positionPopup({
            ePopup: params.ePopup,
            nudgeX: params.nudgeX,
            nudgeY: params.nudgeY,
            x: sourceRect.left - parentRect.left,
            y: sourceRect.top - parentRect.top,
            keepWithinBounds: params.keepWithinBounds
          });
          this.callPostProcessPopup(params.type, params.ePopup, params.eventSource, null, params.column, params.rowNode);
        };
        PopupService2.prototype.callPostProcessPopup = function(type, ePopup, eventSource, mouseEvent, column, rowNode) {
          var callback = this.gridOptionsWrapper.getPostProcessPopupFunc();
          if (callback) {
            var params = {
              column,
              rowNode,
              ePopup,
              type,
              eventSource,
              mouseEvent
            };
            callback(params);
          }
        };
        PopupService2.prototype.positionPopup = function(params) {
          var ePopup = params.ePopup, keepWithinBounds = params.keepWithinBounds, nudgeX = params.nudgeX, nudgeY = params.nudgeY;
          var x = params.x, y = params.y;
          if (nudgeX) {
            x += nudgeX;
          }
          if (nudgeY) {
            y += nudgeY;
          }
          if (keepWithinBounds) {
            x = this.keepXYWithinBounds(ePopup, x, DIRECTION.horizontal);
            y = this.keepXYWithinBounds(ePopup, y, DIRECTION.vertical);
          }
          ePopup.style.left = x + "px";
          ePopup.style.top = y + "px";
        };
        PopupService2.prototype.getActivePopups = function() {
          return this.popupList.map(function(popup) {
            return popup.element;
          });
        };
        PopupService2.prototype.getPopupList = function() {
          return this.popupList;
        };
        PopupService2.prototype.getParentRect = function() {
          var eDocument = this.gridOptionsWrapper.getDocument();
          var popupParent = this.getPopupParent();
          if (popupParent === eDocument.body) {
            popupParent = eDocument.documentElement;
          }
          var style = getComputedStyle(popupParent);
          var bounds = popupParent.getBoundingClientRect();
          return {
            top: bounds.top + parseFloat(style.borderTopWidth) || 0,
            left: bounds.left + parseFloat(style.borderLeftWidth) || 0,
            right: bounds.right + parseFloat(style.borderRightWidth) || 0,
            bottom: bounds.bottom + parseFloat(style.borderBottomWidth) || 0
          };
        };
        PopupService2.prototype.keepXYWithinBounds = function(ePopup, position, direction) {
          var isVertical = direction === DIRECTION.vertical;
          var sizeProperty = isVertical ? "clientHeight" : "clientWidth";
          var anchorProperty = isVertical ? "top" : "left";
          var offsetProperty = isVertical ? "offsetHeight" : "offsetWidth";
          var scrollPositionProperty = isVertical ? "scrollTop" : "scrollLeft";
          var eDocument = this.gridOptionsWrapper.getDocument();
          var docElement = eDocument.documentElement;
          var popupParent = this.getPopupParent();
          var parentRect = popupParent.getBoundingClientRect();
          var documentRect = eDocument.documentElement.getBoundingClientRect();
          var isBody = popupParent === eDocument.body;
          var offsetSize = ePopup[offsetProperty];
          var getSize = isVertical ? getAbsoluteHeight : getAbsoluteWidth;
          var sizeOfParent = isBody ? getSize(docElement) + docElement[scrollPositionProperty] : popupParent[sizeProperty];
          if (isBody) {
            sizeOfParent -= Math.abs(documentRect[anchorProperty] - parentRect[anchorProperty]);
          }
          var max = sizeOfParent - offsetSize;
          return Math.min(Math.max(position, 0), Math.abs(max));
        };
        PopupService2.prototype.keepPopupPositionedRelativeTo = function(params) {
          var _this = this;
          var eParent = this.getPopupParent();
          var parentRect = eParent.getBoundingClientRect();
          var sourceRect = params.element.getBoundingClientRect();
          var initialDiffTop = parentRect.top - sourceRect.top;
          var initialDiffLeft = parentRect.left - sourceRect.left;
          var lastDiffTop = initialDiffTop;
          var lastDiffLeft = initialDiffLeft;
          var topPx = params.ePopup.style.top;
          var top = parseInt(topPx.substring(0, topPx.length - 1), 10);
          var leftPx = params.ePopup.style.left;
          var left = parseInt(leftPx.substring(0, leftPx.length - 1), 10);
          return new AgPromise(function(resolve) {
            _this.getFrameworkOverrides().setInterval(function() {
              var pRect = eParent.getBoundingClientRect();
              var sRect = params.element.getBoundingClientRect();
              var elementNotInDom = sRect.top == 0 && sRect.left == 0 && sRect.height == 0 && sRect.width == 0;
              if (elementNotInDom) {
                params.hidePopup();
                return;
              }
              var currentDiffTop = pRect.top - sRect.top;
              if (currentDiffTop != lastDiffTop) {
                var newTop = _this.keepXYWithinBounds(params.ePopup, top + initialDiffTop - currentDiffTop, DIRECTION.vertical);
                params.ePopup.style.top = newTop + "px";
              }
              lastDiffTop = currentDiffTop;
              var currentDiffLeft = pRect.left - sRect.left;
              if (currentDiffLeft != lastDiffLeft) {
                var newLeft = _this.keepXYWithinBounds(params.ePopup, left + initialDiffLeft - currentDiffLeft, DIRECTION.horizontal);
                params.ePopup.style.left = newLeft + "px";
              }
              lastDiffLeft = currentDiffLeft;
            }, 200).then(function(intervalId) {
              var result = function() {
                if (intervalId != null) {
                  window.clearInterval(intervalId);
                }
              };
              resolve(result);
            });
          });
        };
        PopupService2.prototype.addPopup = function(params) {
          var _this = this;
          var modal = params.modal, eChild = params.eChild, closeOnEsc = params.closeOnEsc, closedCallback = params.closedCallback, click = params.click, alwaysOnTop = params.alwaysOnTop, afterGuiAttached = params.afterGuiAttached, positionCallback = params.positionCallback, anchorToElement = params.anchorToElement, ariaLabel = params.ariaLabel;
          var eDocument = this.gridOptionsWrapper.getDocument();
          var destroyPositionTracker = new AgPromise(function(resolve) {
            return resolve(function() {
            });
          });
          if (!eDocument) {
            console.warn("ag-grid: could not find the document, document is empty");
            return { hideFunc: function() {
            }, stopAnchoringPromise: destroyPositionTracker };
          }
          var pos = findIndex(this.popupList, function(popup2) {
            return popup2.element === eChild;
          });
          if (pos !== -1) {
            var popup = this.popupList[pos];
            return { hideFunc: popup.hideFunc, stopAnchoringPromise: popup.stopAnchoringPromise };
          }
          var ePopupParent = this.getPopupParent();
          if (eChild.style.top == null) {
            eChild.style.top = "0px";
          }
          if (eChild.style.left == null) {
            eChild.style.left = "0px";
          }
          var eWrapper = document.createElement("div");
          var theme = this.environment.getTheme().theme;
          if (theme) {
            addCssClass(eWrapper, theme);
          }
          addCssClass(eWrapper, "ag-popup");
          addCssClass(eChild, this.gridOptionsWrapper.isEnableRtl() ? "ag-rtl" : "ag-ltr");
          addCssClass(eChild, "ag-popup-child");
          setAriaRole(eChild, "dialog");
          setAriaLabel(eChild, ariaLabel);
          if (this.focusService.isKeyboardMode()) {
            addCssClass(eChild, FocusService.AG_KEYBOARD_FOCUS);
          }
          eWrapper.appendChild(eChild);
          ePopupParent.appendChild(eWrapper);
          if (alwaysOnTop) {
            this.setAlwaysOnTop(eWrapper, true);
          } else {
            this.bringPopupToFront(eWrapper);
          }
          var popupHidden = false;
          var hidePopupOnKeyboardEvent = function(event) {
            if (!eWrapper.contains(document.activeElement)) {
              return;
            }
            var key = event.which || event.keyCode;
            if (key === KeyCode.ESCAPE) {
              hidePopup({ keyboardEvent: event });
            }
          };
          var hidePopupOnMouseEvent = function(event) {
            return hidePopup({ mouseEvent: event });
          };
          var hidePopupOnTouchEvent = function(event) {
            return hidePopup({ touchEvent: event });
          };
          var hidePopup = function(popupParams) {
            if (popupParams === void 0) {
              popupParams = {};
            }
            var mouseEvent = popupParams.mouseEvent, touchEvent = popupParams.touchEvent, keyboardEvent = popupParams.keyboardEvent;
            if (
              // we don't hide popup if the event was on the child, or any
              // children of this child
              _this.isEventFromCurrentPopup({ mouseEvent, touchEvent }, eChild) || // if the event to close is actually the open event, then ignore it
              _this.isEventSameChainAsOriginalEvent({ originalMouseEvent: click, mouseEvent, touchEvent }) || // this method should only be called once. the client can have different
              // paths, each one wanting to close, so this method may be called multiple times.
              popupHidden
            ) {
              return;
            }
            popupHidden = true;
            ePopupParent.removeChild(eWrapper);
            eDocument.removeEventListener("keydown", hidePopupOnKeyboardEvent);
            eDocument.removeEventListener("mousedown", hidePopupOnMouseEvent);
            eDocument.removeEventListener("touchstart", hidePopupOnTouchEvent);
            eDocument.removeEventListener("contextmenu", hidePopupOnMouseEvent);
            _this.eventService.removeEventListener(Events.EVENT_DRAG_STARTED, hidePopupOnMouseEvent);
            if (closedCallback) {
              closedCallback(mouseEvent || touchEvent || keyboardEvent);
            }
            _this.popupList = _this.popupList.filter(function(popup2) {
              return popup2.element !== eChild;
            });
            if (destroyPositionTracker) {
              destroyPositionTracker.then(function(destroyFunc) {
                return destroyFunc && destroyFunc();
              });
            }
          };
          if (afterGuiAttached) {
            afterGuiAttached({ hidePopup });
          }
          window.setTimeout(function() {
            if (closeOnEsc) {
              eDocument.addEventListener("keydown", hidePopupOnKeyboardEvent);
            }
            if (modal) {
              eDocument.addEventListener("mousedown", hidePopupOnMouseEvent);
              _this.eventService.addEventListener(Events.EVENT_DRAG_STARTED, hidePopupOnMouseEvent);
              eDocument.addEventListener("touchstart", hidePopupOnTouchEvent);
              eDocument.addEventListener("contextmenu", hidePopupOnMouseEvent);
            }
          }, 0);
          if (positionCallback) {
            positionCallback();
          }
          if (anchorToElement) {
            destroyPositionTracker = this.keepPopupPositionedRelativeTo({
              element: anchorToElement,
              ePopup: eChild,
              hidePopup
            });
          }
          this.popupList.push({
            element: eChild,
            wrapper: eWrapper,
            hideFunc: hidePopup,
            stopAnchoringPromise: destroyPositionTracker,
            instanceId: instanceIdSeq++,
            isAnchored: !!anchorToElement
          });
          return {
            hideFunc: hidePopup,
            stopAnchoringPromise: destroyPositionTracker
          };
        };
        PopupService2.prototype.hasAnchoredPopup = function() {
          return some(this.popupList, function(popup) {
            return popup.isAnchored;
          });
        };
        PopupService2.prototype.isEventFromCurrentPopup = function(params, target) {
          var mouseEvent = params.mouseEvent, touchEvent = params.touchEvent;
          var event = mouseEvent ? mouseEvent : touchEvent;
          if (!event) {
            return false;
          }
          var indexOfThisChild = findIndex(this.popupList, function(popup2) {
            return popup2.element === target;
          });
          if (indexOfThisChild === -1) {
            return false;
          }
          for (var i = indexOfThisChild; i < this.popupList.length; i++) {
            var popup = this.popupList[i];
            if (isElementInEventPath(popup.element, event)) {
              return true;
            }
          }
          return this.isElementWithinCustomPopup(event.target);
        };
        PopupService2.prototype.isElementWithinCustomPopup = function(el) {
          while (el && el !== document.body) {
            if (el.classList.contains("ag-custom-component-popup") || el.parentElement === null) {
              return true;
            }
            el = el.parentElement;
          }
          return false;
        };
        PopupService2.prototype.isEventSameChainAsOriginalEvent = function(params) {
          var originalMouseEvent = params.originalMouseEvent, mouseEvent = params.mouseEvent, touchEvent = params.touchEvent;
          var mouseEventOrTouch = null;
          if (mouseEvent) {
            mouseEventOrTouch = mouseEvent;
          } else if (touchEvent) {
            mouseEventOrTouch = touchEvent.touches[0];
          }
          if (mouseEventOrTouch && originalMouseEvent) {
            var screenX_1 = mouseEvent ? mouseEvent.screenX : 0;
            var screenY_1 = mouseEvent ? mouseEvent.screenY : 0;
            var xMatch = Math.abs(originalMouseEvent.screenX - screenX_1) < 5;
            var yMatch = Math.abs(originalMouseEvent.screenY - screenY_1) < 5;
            if (xMatch && yMatch) {
              return true;
            }
          }
          return false;
        };
        PopupService2.prototype.getWrapper = function(ePopup) {
          while (!containsClass(ePopup, "ag-popup") && ePopup.parentElement) {
            ePopup = ePopup.parentElement;
          }
          return containsClass(ePopup, "ag-popup") ? ePopup : null;
        };
        PopupService2.prototype.setAlwaysOnTop = function(ePopup, alwaysOnTop) {
          var eWrapper = this.getWrapper(ePopup);
          if (!eWrapper) {
            return;
          }
          addOrRemoveCssClass(eWrapper, "ag-always-on-top", !!alwaysOnTop);
          if (alwaysOnTop) {
            this.bringPopupToFront(eWrapper);
          }
        };
        PopupService2.prototype.bringPopupToFront = function(ePopup) {
          var parent = this.getPopupParent();
          var popupList = Array.prototype.slice.call(parent.querySelectorAll(".ag-popup"));
          var popupLen = popupList.length;
          var alwaysOnTopList = Array.prototype.slice.call(parent.querySelectorAll(".ag-popup.ag-always-on-top"));
          var onTopLength = alwaysOnTopList.length;
          var eWrapper = this.getWrapper(ePopup);
          if (!eWrapper || popupLen <= 1 || !parent.contains(ePopup)) {
            return;
          }
          var pos = popupList.indexOf(eWrapper);
          if (onTopLength) {
            var isPopupAlwaysOnTop = containsClass(eWrapper, "ag-always-on-top");
            if (isPopupAlwaysOnTop) {
              if (pos !== popupLen - 1) {
                last(alwaysOnTopList).insertAdjacentElement("afterend", eWrapper);
              }
            } else if (pos !== popupLen - onTopLength - 1) {
              alwaysOnTopList[0].insertAdjacentElement("beforebegin", eWrapper);
            }
          } else if (pos !== popupLen - 1) {
            last(popupList).insertAdjacentElement("afterend", eWrapper);
          }
          var params = {
            type: "popupToFront",
            api: this.gridOptionsWrapper.getApi(),
            columnApi: this.gridOptionsWrapper.getColumnApi(),
            eWrapper
          };
          this.eventService.dispatchEvent(params);
        };
        __decorate$1p([
          Autowired("environment")
        ], PopupService2.prototype, "environment", void 0);
        __decorate$1p([
          Autowired("focusService")
        ], PopupService2.prototype, "focusService", void 0);
        __decorate$1p([
          Autowired("ctrlsService")
        ], PopupService2.prototype, "ctrlsService", void 0);
        __decorate$1p([
          PostConstruct
        ], PopupService2.prototype, "postConstruct", null);
        PopupService2 = __decorate$1p([
          Bean3("popupService")
        ], PopupService2);
        return PopupService2;
      }(BeanStub)
    );
    var __extends$1A = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1q = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __param$6 = function(paramIndex, decorator) {
      return function(target, key) {
        decorator(target, key, paramIndex);
      };
    };
    var LoggerFactory = (
      /** @class */
      function(_super) {
        __extends$1A(LoggerFactory2, _super);
        function LoggerFactory2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        LoggerFactory2.prototype.setBeans = function(gridOptionsWrapper) {
          this.logging = gridOptionsWrapper.isDebug();
        };
        LoggerFactory2.prototype.create = function(name) {
          return new Logger(name, this.isLogging.bind(this));
        };
        LoggerFactory2.prototype.isLogging = function() {
          return this.logging;
        };
        __decorate$1q([
          __param$6(0, Qualifier("gridOptionsWrapper"))
        ], LoggerFactory2.prototype, "setBeans", null);
        LoggerFactory2 = __decorate$1q([
          Bean3("loggerFactory")
        ], LoggerFactory2);
        return LoggerFactory2;
      }(BeanStub)
    );
    var Logger = (
      /** @class */
      function() {
        function Logger2(name, isLoggingFunc) {
          this.name = name;
          this.isLoggingFunc = isLoggingFunc;
        }
        Logger2.prototype.isLogging = function() {
          return this.isLoggingFunc();
        };
        Logger2.prototype.log = function(message2) {
          if (this.isLoggingFunc()) {
            console.log("AG Grid." + this.name + ": " + message2);
          }
        };
        return Logger2;
      }()
    );
    var __extends$1B = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1r = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var AutoWidthCalculator = (
      /** @class */
      function(_super) {
        __extends$1B(AutoWidthCalculator2, _super);
        function AutoWidthCalculator2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        AutoWidthCalculator2.prototype.postConstruct = function() {
          var _this = this;
          this.ctrlsService.whenReady(function(p) {
            _this.centerRowContainerCon = p.centerRowContainerCtrl;
          });
        };
        AutoWidthCalculator2.prototype.getPreferredWidthForColumn = function(column, skipHeader) {
          var eHeaderCell = this.getHeaderCellForColumn(column);
          if (!eHeaderCell) {
            return -1;
          }
          var eDummyContainer = document.createElement("span");
          eDummyContainer.style.position = "fixed";
          var eBodyContainer = this.centerRowContainerCon.getContainerElement();
          eBodyContainer.appendChild(eDummyContainer);
          this.putRowCellsIntoDummyContainer(column, eDummyContainer);
          if (!skipHeader) {
            this.cloneItemIntoDummy(eHeaderCell, eDummyContainer);
          }
          var dummyContainerWidth = eDummyContainer.offsetWidth;
          eBodyContainer.removeChild(eDummyContainer);
          var autoSizePadding = this.gridOptionsWrapper.getAutoSizePadding();
          return dummyContainerWidth + autoSizePadding;
        };
        AutoWidthCalculator2.prototype.getHeaderCellForColumn = function(column) {
          var element = null;
          this.ctrlsService.getHeaderRowContainerCtrls().forEach(function(container) {
            var res = container.getHtmlElementForColumnHeader(column);
            if (res != null) {
              element = res;
            }
          });
          return element;
        };
        AutoWidthCalculator2.prototype.putRowCellsIntoDummyContainer = function(column, eDummyContainer) {
          var _this = this;
          var eCellElements = this.rowRenderer.getAllCellsForColumn(column);
          eCellElements.forEach(function(eCell) {
            return _this.cloneItemIntoDummy(eCell, eDummyContainer);
          });
        };
        AutoWidthCalculator2.prototype.cloneItemIntoDummy = function(eCell, eDummyContainer) {
          var eCellClone = eCell.cloneNode(true);
          eCellClone.style.width = "";
          eCellClone.style.position = "static";
          eCellClone.style.left = "";
          var eCloneParent = document.createElement("div");
          if (containsClass(eCellClone, "ag-header-cell")) {
            addCssClass(eCloneParent, "ag-header");
            addCssClass(eCloneParent, "ag-header-row");
            eCloneParent.style.position = "static";
          } else {
            addCssClass(eCloneParent, "ag-row");
          }
          var pointer = eCell.parentElement;
          while (pointer) {
            if (pointer.classList.contains("ag-header-row") || pointer.classList.contains("ag-row")) {
              for (var i = 0; i < pointer.classList.length; i++) {
                var item = pointer.classList[i];
                if (item != "ag-row-position-absolute") {
                  addCssClass(eCloneParent, item);
                }
              }
              break;
            }
            pointer = pointer.parentElement;
          }
          eCloneParent.style.display = "table-row";
          eCloneParent.appendChild(eCellClone);
          eDummyContainer.appendChild(eCloneParent);
        };
        __decorate$1r([
          Autowired("rowRenderer")
        ], AutoWidthCalculator2.prototype, "rowRenderer", void 0);
        __decorate$1r([
          Autowired("ctrlsService")
        ], AutoWidthCalculator2.prototype, "ctrlsService", void 0);
        __decorate$1r([
          Autowired("rowCssClassCalculator")
        ], AutoWidthCalculator2.prototype, "rowCssClassCalculator", void 0);
        __decorate$1r([
          PostConstruct
        ], AutoWidthCalculator2.prototype, "postConstruct", null);
        AutoWidthCalculator2 = __decorate$1r([
          Bean3("autoWidthCalculator")
        ], AutoWidthCalculator2);
        return AutoWidthCalculator2;
      }(BeanStub)
    );
    var __extends$1C = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1s = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var HorizontalResizeService = (
      /** @class */
      function(_super) {
        __extends$1C(HorizontalResizeService2, _super);
        function HorizontalResizeService2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        HorizontalResizeService2.prototype.addResizeBar = function(params) {
          var _this = this;
          var dragSource = {
            dragStartPixels: params.dragStartPixels || 0,
            eElement: params.eResizeBar,
            onDragStart: this.onDragStart.bind(this, params),
            onDragStop: this.onDragStop.bind(this, params),
            onDragging: this.onDragging.bind(this, params)
          };
          this.dragService.addDragSource(dragSource, true);
          var finishedWithResizeFunc = function() {
            return _this.dragService.removeDragSource(dragSource);
          };
          return finishedWithResizeFunc;
        };
        HorizontalResizeService2.prototype.onDragStart = function(params, mouseEvent) {
          this.dragStartX = mouseEvent.clientX;
          this.setResizeIcons();
          var shiftKey = mouseEvent instanceof MouseEvent && mouseEvent.shiftKey === true;
          params.onResizeStart(shiftKey);
        };
        HorizontalResizeService2.prototype.setResizeIcons = function() {
          var ctrl = this.ctrlsService.getGridCtrl();
          ctrl.setResizeCursor(true);
          ctrl.disableUserSelect(true);
        };
        HorizontalResizeService2.prototype.onDragStop = function(params, mouseEvent) {
          params.onResizeEnd(this.resizeAmount);
          this.resetIcons();
        };
        HorizontalResizeService2.prototype.resetIcons = function() {
          var ctrl = this.ctrlsService.getGridCtrl();
          ctrl.setResizeCursor(false);
          ctrl.disableUserSelect(false);
        };
        HorizontalResizeService2.prototype.onDragging = function(params, mouseEvent) {
          this.resizeAmount = mouseEvent.clientX - this.dragStartX;
          params.onResizing(this.resizeAmount);
        };
        __decorate$1s([
          Autowired("dragService")
        ], HorizontalResizeService2.prototype, "dragService", void 0);
        __decorate$1s([
          Autowired("ctrlsService")
        ], HorizontalResizeService2.prototype, "ctrlsService", void 0);
        HorizontalResizeService2 = __decorate$1s([
          Bean3("horizontalResizeService")
        ], HorizontalResizeService2);
        return HorizontalResizeService2;
      }(BeanStub)
    );
    var __extends$1D = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1t = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var GridCtrl = (
      /** @class */
      function(_super) {
        __extends$1D(GridCtrl2, _super);
        function GridCtrl2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        GridCtrl2.prototype.postConstruct = function() {
          this.ctrlsService.registerGridCtrl(this);
        };
        GridCtrl2.prototype.setComp = function(view, eGridDiv, eGui) {
          var _this = this;
          this.view = view;
          this.eGridHostDiv = eGridDiv;
          this.eGui = eGui;
          this.mouseEventService.stampTopLevelGridCompWithGridInstance(eGridDiv);
          this.createManagedBean(new LayoutFeature(this.view));
          this.addRtlSupport();
          this.addManagedListener(this, Events.EVENT_KEYBOARD_FOCUS, function() {
            _this.view.addOrRemoveKeyboardFocusClass(true);
          });
          this.addManagedListener(this, Events.EVENT_MOUSE_FOCUS, function() {
            _this.view.addOrRemoveKeyboardFocusClass(false);
          });
          var unsubscribeFromResize = this.resizeObserverService.observeResize(this.eGridHostDiv, this.onGridSizeChanged.bind(this));
          this.addDestroyFunc(function() {
            return unsubscribeFromResize();
          });
        };
        GridCtrl2.prototype.showDropZones = function() {
          return ModuleRegistry.isRegistered(exports.ModuleNames.RowGroupingModule);
        };
        GridCtrl2.prototype.showSideBar = function() {
          return ModuleRegistry.isRegistered(exports.ModuleNames.SideBarModule);
        };
        GridCtrl2.prototype.showStatusBar = function() {
          return ModuleRegistry.isRegistered(exports.ModuleNames.StatusBarModule);
        };
        GridCtrl2.prototype.showWatermark = function() {
          return ModuleRegistry.isRegistered(exports.ModuleNames.EnterpriseCoreModule);
        };
        GridCtrl2.prototype.onGridSizeChanged = function() {
          var event = {
            type: Events.EVENT_GRID_SIZE_CHANGED,
            api: this.gridApi,
            columnApi: this.columnApi,
            clientWidth: this.eGridHostDiv.clientWidth,
            clientHeight: this.eGridHostDiv.clientHeight
          };
          this.eventService.dispatchEvent(event);
        };
        GridCtrl2.prototype.addRtlSupport = function() {
          var cssClass = this.gridOptionsWrapper.isEnableRtl() ? "ag-rtl" : "ag-ltr";
          this.view.setRtlClass(cssClass);
        };
        GridCtrl2.prototype.destroyGridUi = function() {
          this.view.destroyGridUi();
        };
        GridCtrl2.prototype.getGui = function() {
          return this.eGui;
        };
        GridCtrl2.prototype.setResizeCursor = function(on) {
          this.view.setCursor(on ? "ew-resize" : null);
        };
        GridCtrl2.prototype.disableUserSelect = function(on) {
          this.view.setUserSelect(on ? "none" : null);
        };
        GridCtrl2.prototype.focusNextInnerContainer = function(backwards) {
          var focusableContainers = this.view.getFocusableContainers();
          var idxWithFocus = findIndex(focusableContainers, function(container) {
            return container.contains(document.activeElement);
          });
          var nextIdx = idxWithFocus + (backwards ? -1 : 1);
          if (nextIdx < 0 || nextIdx >= focusableContainers.length) {
            return false;
          }
          if (nextIdx === 0) {
            return this.focusGridHeader();
          }
          return this.focusService.focusInto(focusableContainers[nextIdx]);
        };
        GridCtrl2.prototype.focusInnerElement = function(fromBottom) {
          var focusableContainers = this.view.getFocusableContainers();
          if (fromBottom) {
            if (focusableContainers.length > 1) {
              return this.focusService.focusInto(last(focusableContainers), true);
            }
            var lastColumn = last(this.columnModel.getAllDisplayedColumns());
            if (this.focusService.focusGridView(lastColumn, true)) {
              return true;
            }
          }
          return this.focusGridHeader();
        };
        GridCtrl2.prototype.focusGridHeader = function() {
          var firstColumn = this.columnModel.getAllDisplayedColumns()[0];
          if (!firstColumn) {
            return false;
          }
          if (firstColumn.getParent()) {
            firstColumn = this.columnModel.getColumnGroupAtLevel(firstColumn, 0);
          }
          this.focusService.focusHeaderPosition({
            headerPosition: { headerRowIndex: 0, column: firstColumn }
          });
          return true;
        };
        GridCtrl2.prototype.forceFocusOutOfContainer = function(up) {
          if (up === void 0) {
            up = false;
          }
          this.view.forceFocusOutOfContainer(up);
        };
        __decorate$1t([
          Autowired("columnApi")
        ], GridCtrl2.prototype, "columnApi", void 0);
        __decorate$1t([
          Autowired("gridApi")
        ], GridCtrl2.prototype, "gridApi", void 0);
        __decorate$1t([
          Autowired("focusService")
        ], GridCtrl2.prototype, "focusService", void 0);
        __decorate$1t([
          Autowired("resizeObserverService")
        ], GridCtrl2.prototype, "resizeObserverService", void 0);
        __decorate$1t([
          Autowired("columnModel")
        ], GridCtrl2.prototype, "columnModel", void 0);
        __decorate$1t([
          Autowired("ctrlsService")
        ], GridCtrl2.prototype, "ctrlsService", void 0);
        __decorate$1t([
          Autowired("mouseEventService")
        ], GridCtrl2.prototype, "mouseEventService", void 0);
        __decorate$1t([
          PostConstruct
        ], GridCtrl2.prototype, "postConstruct", null);
        return GridCtrl2;
      }(BeanStub)
    );
    var __extends$1E = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1u = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var TabGuardCtrl = (
      /** @class */
      function(_super) {
        __extends$1E(TabGuardCtrl2, _super);
        function TabGuardCtrl2(params) {
          var _this = _super.call(this) || this;
          _this.skipTabGuardFocus = false;
          var comp = params.comp, eTopGuard = params.eTopGuard, eBottomGuard = params.eBottomGuard, focusInnerElement = params.focusInnerElement, onFocusIn = params.onFocusIn, onFocusOut = params.onFocusOut, shouldStopEventPropagation = params.shouldStopEventPropagation, onTabKeyDown = params.onTabKeyDown, handleKeyDown = params.handleKeyDown, eFocusableElement = params.eFocusableElement;
          _this.comp = comp;
          _this.eTopGuard = eTopGuard;
          _this.eBottomGuard = eBottomGuard;
          _this.providedFocusInnerElement = focusInnerElement;
          _this.eFocusableElement = eFocusableElement;
          _this.providedFocusIn = onFocusIn;
          _this.providedFocusOut = onFocusOut;
          _this.providedShouldStopEventPropagation = shouldStopEventPropagation;
          _this.providedOnTabKeyDown = onTabKeyDown;
          _this.providedHandleKeyDown = handleKeyDown;
          return _this;
        }
        TabGuardCtrl2.prototype.postConstruct = function() {
          var _this = this;
          this.createManagedBean(new ManagedFocusFeature(this.eFocusableElement, {
            shouldStopEventPropagation: function() {
              return _this.shouldStopEventPropagation();
            },
            onTabKeyDown: function(e) {
              return _this.onTabKeyDown(e);
            },
            handleKeyDown: function(e) {
              return _this.handleKeyDown(e);
            },
            onFocusIn: function(e) {
              return _this.onFocusIn(e);
            },
            onFocusOut: function(e) {
              return _this.onFocusOut(e);
            }
          }));
          this.activateTabGuards();
          [this.eTopGuard, this.eBottomGuard].forEach(function(guard) {
            return _this.addManagedListener(guard, "focus", _this.onFocus.bind(_this));
          });
        };
        TabGuardCtrl2.prototype.handleKeyDown = function(e) {
          if (this.providedHandleKeyDown) {
            this.providedHandleKeyDown(e);
          }
        };
        TabGuardCtrl2.prototype.tabGuardsAreActive = function() {
          return !!this.eTopGuard && this.eTopGuard.hasAttribute("tabIndex");
        };
        TabGuardCtrl2.prototype.shouldStopEventPropagation = function() {
          if (this.providedShouldStopEventPropagation) {
            return this.providedShouldStopEventPropagation();
          }
          return false;
        };
        TabGuardCtrl2.prototype.activateTabGuards = function() {
          this.comp.setTabIndex(this.getGridTabIndex());
        };
        TabGuardCtrl2.prototype.deactivateTabGuards = function() {
          this.comp.setTabIndex();
        };
        TabGuardCtrl2.prototype.onFocus = function(e) {
          if (this.skipTabGuardFocus) {
            this.skipTabGuardFocus = false;
            return;
          }
          var fromBottom = e.target === this.eBottomGuard;
          if (this.providedFocusInnerElement) {
            this.providedFocusInnerElement(fromBottom);
          } else {
            this.focusInnerElement(fromBottom);
          }
        };
        TabGuardCtrl2.prototype.onFocusIn = function(e) {
          if (this.providedFocusIn && this.providedFocusIn(e)) {
            return;
          }
          this.deactivateTabGuards();
        };
        TabGuardCtrl2.prototype.onFocusOut = function(e) {
          if (this.providedFocusOut && this.providedFocusOut(e)) {
            return;
          }
          if (!this.eFocusableElement.contains(e.relatedTarget)) {
            this.activateTabGuards();
          }
        };
        TabGuardCtrl2.prototype.onTabKeyDown = function(e) {
          var _this = this;
          if (this.providedOnTabKeyDown) {
            this.providedOnTabKeyDown(e);
            return;
          }
          if (e.defaultPrevented) {
            return;
          }
          var tabGuardsAreActive = this.tabGuardsAreActive();
          if (tabGuardsAreActive) {
            this.deactivateTabGuards();
          }
          var nextRoot = this.getNextFocusableElement(e.shiftKey);
          if (tabGuardsAreActive) {
            setTimeout(function() {
              return _this.activateTabGuards();
            }, 0);
          }
          if (!nextRoot) {
            return;
          }
          nextRoot.focus();
          e.preventDefault();
        };
        TabGuardCtrl2.prototype.getGridTabIndex = function() {
          return this.gridOptionsWrapper.getGridTabIndex();
        };
        TabGuardCtrl2.prototype.focusInnerElement = function(fromBottom) {
          if (fromBottom === void 0) {
            fromBottom = false;
          }
          var focusable = this.focusService.findFocusableElements(this.eFocusableElement);
          if (this.tabGuardsAreActive()) {
            focusable.splice(0, 1);
            focusable.splice(focusable.length - 1, 1);
          }
          if (!focusable.length) {
            return;
          }
          focusable[fromBottom ? focusable.length - 1 : 0].focus();
        };
        TabGuardCtrl2.prototype.getNextFocusableElement = function(backwards) {
          return this.focusService.findNextFocusableElement(this.eFocusableElement, false, backwards);
        };
        TabGuardCtrl2.prototype.forceFocusOutOfContainer = function(up) {
          if (up === void 0) {
            up = false;
          }
          var tabGuardToFocus = up ? this.eTopGuard : this.eBottomGuard;
          this.activateTabGuards();
          this.skipTabGuardFocus = true;
          tabGuardToFocus.focus();
        };
        __decorate$1u([
          Autowired("focusService")
        ], TabGuardCtrl2.prototype, "focusService", void 0);
        __decorate$1u([
          PostConstruct
        ], TabGuardCtrl2.prototype, "postConstruct", null);
        return TabGuardCtrl2;
      }(BeanStub)
    );
    var __extends$1F = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var TabGuardComp = (
      /** @class */
      function(_super) {
        __extends$1F(TabGuardComp2, _super);
        function TabGuardComp2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        TabGuardComp2.prototype.initialiseTabGuard = function(params) {
          this.eTopGuard = this.createTabGuard("top");
          this.eBottomGuard = this.createTabGuard("bottom");
          this.eFocusableElement = this.getFocusableElement();
          var tabGuards = [this.eTopGuard, this.eBottomGuard];
          var compProxy = {
            setTabIndex: function(tabIndex) {
              tabGuards.forEach(function(tabGuard) {
                return tabIndex != null ? tabGuard.setAttribute("tabIndex", tabIndex) : tabGuard.removeAttribute("tabIndex");
              });
            }
          };
          this.addTabGuards(this.eTopGuard, this.eBottomGuard);
          this.tabGuardCtrl = this.createManagedBean(new TabGuardCtrl({
            comp: compProxy,
            eTopGuard: this.eTopGuard,
            eBottomGuard: this.eBottomGuard,
            eFocusableElement: this.eFocusableElement,
            onFocusIn: params.onFocusIn,
            onFocusOut: params.onFocusOut,
            focusInnerElement: params.focusInnerElement,
            handleKeyDown: params.handleKeyDown,
            onTabKeyDown: params.onTabKeyDown,
            shouldStopEventPropagation: params.shouldStopEventPropagation
          }));
        };
        TabGuardComp2.prototype.createTabGuard = function(side) {
          var tabGuard = document.createElement("div");
          tabGuard.classList.add("ag-tab-guard");
          tabGuard.classList.add("ag-tab-guard-" + side);
          setAriaRole(tabGuard, "presentation");
          return tabGuard;
        };
        TabGuardComp2.prototype.addTabGuards = function(topTabGuard, bottomTabGuard) {
          this.eFocusableElement.insertAdjacentElement("afterbegin", topTabGuard);
          this.eFocusableElement.insertAdjacentElement("beforeend", bottomTabGuard);
        };
        TabGuardComp2.prototype.removeAllChildrenExceptTabGuards = function() {
          var tabGuards = [this.eTopGuard, this.eBottomGuard];
          clearElement(this.getFocusableElement());
          this.addTabGuards.apply(this, tabGuards);
        };
        TabGuardComp2.prototype.forceFocusOutOfContainer = function(up) {
          if (up === void 0) {
            up = false;
          }
          this.tabGuardCtrl.forceFocusOutOfContainer(up);
        };
        TabGuardComp2.prototype.appendChild = function(newChild, container) {
          if (!isNodeOrElement(newChild)) {
            newChild = newChild.getGui();
          }
          var bottomTabGuard = this.eBottomGuard;
          if (bottomTabGuard) {
            bottomTabGuard.insertAdjacentElement("beforebegin", newChild);
          } else {
            _super.prototype.appendChild.call(this, newChild, container);
          }
        };
        return TabGuardComp2;
      }(Component)
    );
    var __extends$1G = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1v = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var GridComp = (
      /** @class */
      function(_super) {
        __extends$1G(GridComp2, _super);
        function GridComp2(eGridDiv) {
          var _this = _super.call(this, void 0) || this;
          _this.eGridDiv = eGridDiv;
          return _this;
        }
        GridComp2.prototype.postConstruct = function() {
          var _this = this;
          this.logger = this.loggerFactory.create("GridComp");
          var compProxy = {
            destroyGridUi: function() {
              return _this.destroyBean(_this);
            },
            setRtlClass: function(cssClass) {
              return addCssClass(_this.getGui(), cssClass);
            },
            addOrRemoveKeyboardFocusClass: function(addOrRemove) {
              return _this.addOrRemoveCssClass(FocusService.AG_KEYBOARD_FOCUS, addOrRemove);
            },
            forceFocusOutOfContainer: this.forceFocusOutOfContainer.bind(this),
            updateLayoutClasses: this.updateLayoutClasses.bind(this),
            getFocusableContainers: this.getFocusableContainers.bind(this),
            setUserSelect: function(value) {
              _this.getGui().style.userSelect = value != null ? value : "";
              _this.getGui().style.webkitUserSelect = value != null ? value : "";
            },
            setCursor: function(value) {
              _this.getGui().style.cursor = value != null ? value : "";
            }
          };
          this.ctrl = this.createManagedBean(new GridCtrl());
          var template = this.createTemplate();
          this.setTemplate(template);
          this.ctrl.setComp(compProxy, this.eGridDiv, this.getGui());
          this.insertGridIntoDom();
          this.initialiseTabGuard({
            // we want to override the default behaviour to do nothing for onTabKeyDown
            onTabKeyDown: function() {
              return void 0;
            },
            focusInnerElement: function(fromBottom) {
              return _this.ctrl.focusInnerElement(fromBottom);
            }
          });
        };
        GridComp2.prototype.insertGridIntoDom = function() {
          var _this = this;
          var eGui = this.getGui();
          this.eGridDiv.appendChild(eGui);
          this.addDestroyFunc(function() {
            _this.eGridDiv.removeChild(eGui);
            _this.logger.log("Grid removed from DOM");
          });
        };
        GridComp2.prototype.updateLayoutClasses = function(cssClass, params) {
          addOrRemoveCssClass(this.eRootWrapperBody, exports.LayoutCssClasses.AUTO_HEIGHT, params.autoHeight);
          addOrRemoveCssClass(this.eRootWrapperBody, exports.LayoutCssClasses.NORMAL, params.normal);
          addOrRemoveCssClass(this.eRootWrapperBody, exports.LayoutCssClasses.PRINT, params.print);
          this.addOrRemoveCssClass(exports.LayoutCssClasses.AUTO_HEIGHT, params.autoHeight);
          this.addOrRemoveCssClass(exports.LayoutCssClasses.NORMAL, params.normal);
          this.addOrRemoveCssClass(exports.LayoutCssClasses.PRINT, params.print);
        };
        GridComp2.prototype.createTemplate = function() {
          var dropZones = this.ctrl.showDropZones() ? "<ag-grid-header-drop-zones></ag-grid-header-drop-zones>" : "";
          var sideBar = this.ctrl.showSideBar() ? '<ag-side-bar ref="sideBar"></ag-side-bar>' : "";
          var statusBar = this.ctrl.showStatusBar() ? '<ag-status-bar ref="statusBar"></ag-status-bar>' : "";
          var watermark = this.ctrl.showWatermark() ? "<ag-watermark></ag-watermark>" : "";
          var template = (
            /* html */
            '<div class="ag-root-wrapper">\n                ' + dropZones + '\n                <div class="ag-root-wrapper-body" ref="rootWrapperBody">\n                    <ag-grid-body ref="gridBody"></ag-grid-body>\n                    ' + sideBar + "\n                </div>\n                " + statusBar + "\n                <ag-pagination></ag-pagination>\n                " + watermark + "\n            </div>"
          );
          return template;
        };
        GridComp2.prototype.getFocusableElement = function() {
          return this.eRootWrapperBody;
        };
        GridComp2.prototype.getFocusableContainers = function() {
          var focusableContainers = [
            this.gridBodyComp.getGui()
          ];
          if (this.sideBarComp) {
            focusableContainers.push(this.sideBarComp.getGui());
          }
          return focusableContainers.filter(function(el) {
            return isVisible(el);
          });
        };
        __decorate$1v([
          Autowired("loggerFactory")
        ], GridComp2.prototype, "loggerFactory", void 0);
        __decorate$1v([
          RefSelector("gridBody")
        ], GridComp2.prototype, "gridBodyComp", void 0);
        __decorate$1v([
          RefSelector("sideBar")
        ], GridComp2.prototype, "sideBarComp", void 0);
        __decorate$1v([
          RefSelector("rootWrapperBody")
        ], GridComp2.prototype, "eRootWrapperBody", void 0);
        __decorate$1v([
          PostConstruct
        ], GridComp2.prototype, "postConstruct", null);
        return GridComp2;
      }(TabGuardComp)
    );
    var __extends$1H = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1w = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var DragService = (
      /** @class */
      function(_super) {
        __extends$1H(DragService2, _super);
        function DragService2() {
          var _this = _super !== null && _super.apply(this, arguments) || this;
          _this.dragEndFunctions = [];
          _this.dragSources = [];
          return _this;
        }
        DragService2.prototype.init = function() {
          this.logger = this.loggerFactory.create("DragService");
        };
        DragService2.prototype.removeAllListeners = function() {
          this.dragSources.forEach(this.removeListener.bind(this));
          this.dragSources.length = 0;
        };
        DragService2.prototype.removeListener = function(dragSourceAndListener) {
          var element = dragSourceAndListener.dragSource.eElement;
          var mouseDownListener = dragSourceAndListener.mouseDownListener;
          element.removeEventListener("mousedown", mouseDownListener);
          if (dragSourceAndListener.touchEnabled) {
            var touchStartListener = dragSourceAndListener.touchStartListener;
            element.removeEventListener("touchstart", touchStartListener, { passive: true });
          }
        };
        DragService2.prototype.removeDragSource = function(params) {
          var dragSourceAndListener = find(this.dragSources, function(item) {
            return item.dragSource === params;
          });
          if (!dragSourceAndListener) {
            return;
          }
          this.removeListener(dragSourceAndListener);
          removeFromArray(this.dragSources, dragSourceAndListener);
        };
        DragService2.prototype.isDragging = function() {
          return this.dragging;
        };
        DragService2.prototype.addDragSource = function(params, includeTouch) {
          var _this = this;
          if (includeTouch === void 0) {
            includeTouch = false;
          }
          var mouseListener = this.onMouseDown.bind(this, params);
          params.eElement.addEventListener("mousedown", mouseListener);
          var touchListener = null;
          var suppressTouch = this.gridOptionsWrapper.isSuppressTouch();
          if (includeTouch && !suppressTouch) {
            touchListener = function(touchEvent) {
              touchEvent.preventDefault();
              _this.onTouchStart(params, touchEvent);
            };
            params.eElement.addEventListener("touchstart", touchListener, { passive: true });
          }
          this.dragSources.push({
            dragSource: params,
            mouseDownListener: mouseListener,
            touchStartListener: touchListener,
            touchEnabled: includeTouch
          });
        };
        DragService2.prototype.onTouchStart = function(params, touchEvent) {
          var _this = this;
          this.currentDragParams = params;
          this.dragging = false;
          var touch = touchEvent.touches[0];
          this.touchLastTime = touch;
          this.touchStart = touch;
          var touchMoveEvent = function(e) {
            return _this.onTouchMove(e, params.eElement);
          };
          var touchEndEvent = function(e) {
            return _this.onTouchUp(e, params.eElement);
          };
          var documentTouchMove = function(e) {
            if (e.cancelable) {
              e.preventDefault();
            }
          };
          var target = params.eElement;
          var events = [
            // Prevents the page document from moving while we are dragging items around.
            // preventDefault needs to be called in the touchmove listener and never inside the
            // touchstart, because using touchstart causes the click event to be cancelled on touch devices.
            { target: document, type: "touchmove", listener: documentTouchMove, options: { passive: false } },
            { target, type: "touchmove", listener: touchMoveEvent, options: { passive: true } },
            { target, type: "touchend", listener: touchEndEvent, options: { passive: true } },
            { target, type: "touchcancel", listener: touchEndEvent, options: { passive: true } }
          ];
          this.addTemporaryEvents(events);
          if (params.dragStartPixels === 0) {
            this.onCommonMove(touch, this.touchStart, params.eElement);
          }
        };
        DragService2.prototype.onMouseDown = function(params, mouseEvent) {
          var _this = this;
          var e = mouseEvent;
          if (params.skipMouseEvent && params.skipMouseEvent(mouseEvent)) {
            return;
          }
          if (e._alreadyProcessedByDragService) {
            return;
          }
          e._alreadyProcessedByDragService = true;
          if (mouseEvent.button !== 0) {
            return;
          }
          this.currentDragParams = params;
          this.dragging = false;
          this.mouseStartEvent = mouseEvent;
          var eDocument = this.gridOptionsWrapper.getDocument();
          var mouseMoveEvent = function(event) {
            return _this.onMouseMove(event, params.eElement);
          };
          var mouseUpEvent = function(event) {
            return _this.onMouseUp(event, params.eElement);
          };
          var contextEvent = function(event) {
            return event.preventDefault();
          };
          var target = eDocument;
          var events = [
            { target, type: "mousemove", listener: mouseMoveEvent },
            { target, type: "mouseup", listener: mouseUpEvent },
            { target, type: "contextmenu", listener: contextEvent }
          ];
          this.addTemporaryEvents(events);
          if (params.dragStartPixels === 0) {
            this.onMouseMove(mouseEvent, params.eElement);
          }
        };
        DragService2.prototype.addTemporaryEvents = function(events) {
          events.forEach(function(currentEvent) {
            var target = currentEvent.target, type = currentEvent.type, listener = currentEvent.listener, options = currentEvent.options;
            target.addEventListener(type, listener, options);
          });
          this.dragEndFunctions.push(function() {
            events.forEach(function(currentEvent) {
              var target = currentEvent.target, type = currentEvent.type, listener = currentEvent.listener, options = currentEvent.options;
              target.removeEventListener(type, listener, options);
            });
          });
        };
        DragService2.prototype.isEventNearStartEvent = function(currentEvent, startEvent) {
          var dragStartPixels = this.currentDragParams.dragStartPixels;
          var requiredPixelDiff = exists(dragStartPixels) ? dragStartPixels : 4;
          return areEventsNear(currentEvent, startEvent, requiredPixelDiff);
        };
        DragService2.prototype.getFirstActiveTouch = function(touchList) {
          for (var i = 0; i < touchList.length; i++) {
            if (touchList[i].identifier === this.touchStart.identifier) {
              return touchList[i];
            }
          }
          return null;
        };
        DragService2.prototype.onCommonMove = function(currentEvent, startEvent, el) {
          if (!this.dragging) {
            if (!this.dragging && this.isEventNearStartEvent(currentEvent, startEvent)) {
              return;
            }
            this.dragging = true;
            var event_1 = {
              type: Events.EVENT_DRAG_STARTED,
              api: this.gridApi,
              columnApi: this.columnApi,
              target: el
            };
            this.eventService.dispatchEvent(event_1);
            this.currentDragParams.onDragStart(startEvent);
            this.currentDragParams.onDragging(startEvent);
          }
          this.currentDragParams.onDragging(currentEvent);
        };
        DragService2.prototype.onTouchMove = function(touchEvent, el) {
          var touch = this.getFirstActiveTouch(touchEvent.touches);
          if (!touch) {
            return;
          }
          this.onCommonMove(touch, this.touchStart, el);
        };
        DragService2.prototype.onMouseMove = function(mouseEvent, el) {
          this.onCommonMove(mouseEvent, this.mouseStartEvent, el);
        };
        DragService2.prototype.onTouchUp = function(touchEvent, el) {
          var touch = this.getFirstActiveTouch(touchEvent.changedTouches);
          if (!touch) {
            touch = this.touchLastTime;
          }
          this.onUpCommon(touch, el);
        };
        DragService2.prototype.onMouseUp = function(mouseEvent, el) {
          this.onUpCommon(mouseEvent, el);
        };
        DragService2.prototype.onUpCommon = function(eventOrTouch, el) {
          if (this.dragging) {
            this.dragging = false;
            this.currentDragParams.onDragStop(eventOrTouch);
            var event_2 = {
              type: Events.EVENT_DRAG_STOPPED,
              api: this.gridApi,
              columnApi: this.columnApi,
              target: el
            };
            this.eventService.dispatchEvent(event_2);
          }
          this.mouseStartEvent = null;
          this.touchStart = null;
          this.touchLastTime = null;
          this.currentDragParams = null;
          this.dragEndFunctions.forEach(function(func) {
            return func();
          });
          this.dragEndFunctions.length = 0;
        };
        __decorate$1w([
          Autowired("loggerFactory")
        ], DragService2.prototype, "loggerFactory", void 0);
        __decorate$1w([
          Autowired("columnApi")
        ], DragService2.prototype, "columnApi", void 0);
        __decorate$1w([
          Autowired("gridApi")
        ], DragService2.prototype, "gridApi", void 0);
        __decorate$1w([
          PostConstruct
        ], DragService2.prototype, "init", null);
        __decorate$1w([
          PreDestroy
        ], DragService2.prototype, "removeAllListeners", null);
        DragService2 = __decorate$1w([
          Bean3("dragService")
        ], DragService2);
        return DragService2;
      }(BeanStub)
    );
    var __extends$1I = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1x = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var SortController = (
      /** @class */
      function(_super) {
        __extends$1I(SortController2, _super);
        function SortController2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        SortController_1 = SortController2;
        SortController2.prototype.progressSort = function(column, multiSort, source) {
          if (source === void 0) {
            source = "api";
          }
          var nextDirection = this.getNextSortDirection(column);
          this.setSortForColumn(column, nextDirection, multiSort, source);
        };
        SortController2.prototype.setSortForColumn = function(column, sort, multiSort, source) {
          if (source === void 0) {
            source = "api";
          }
          if (sort !== Constants.SORT_ASC && sort !== Constants.SORT_DESC) {
            sort = null;
          }
          column.setSort(sort, source);
          var doingMultiSort = multiSort && !this.gridOptionsWrapper.isSuppressMultiSort();
          if (!doingMultiSort) {
            this.clearSortBarThisColumn(column, source);
          }
          this.updateSortIndex(column);
          this.dispatchSortChangedEvents();
        };
        SortController2.prototype.updateSortIndex = function(lastColToChange) {
          var allSortedCols = this.getColumnsWithSortingOrdered();
          var sortIndex = 0;
          allSortedCols.forEach(function(col) {
            if (col !== lastColToChange) {
              col.setSortIndex(sortIndex);
              sortIndex++;
            }
          });
          if (lastColToChange.getSort()) {
            lastColToChange.setSortIndex(sortIndex);
          }
          var allCols = this.columnModel.getPrimaryAndSecondaryAndAutoColumns();
          allCols.filter(function(col) {
            return col.getSort() == null;
          }).forEach(function(col) {
            return col.setSortIndex();
          });
        };
        SortController2.prototype.onSortChanged = function() {
          this.dispatchSortChangedEvents();
        };
        SortController2.prototype.isSortActive = function() {
          var allCols = this.columnModel.getPrimaryAndSecondaryAndAutoColumns();
          var sortedCols = allCols.filter(function(column) {
            return !!column.getSort();
          });
          return sortedCols && sortedCols.length > 0;
        };
        SortController2.prototype.dispatchSortChangedEvents = function() {
          var event = {
            type: Events.EVENT_SORT_CHANGED,
            api: this.gridApi,
            columnApi: this.columnApi
          };
          this.eventService.dispatchEvent(event);
        };
        SortController2.prototype.clearSortBarThisColumn = function(columnToSkip, source) {
          this.columnModel.getPrimaryAndSecondaryAndAutoColumns().forEach(function(columnToClear) {
            if (columnToClear !== columnToSkip) {
              columnToClear.setSort(void 0, source);
            }
          });
        };
        SortController2.prototype.getNextSortDirection = function(column) {
          var sortingOrder;
          if (column.getColDef().sortingOrder) {
            sortingOrder = column.getColDef().sortingOrder;
          } else if (this.gridOptionsWrapper.getSortingOrder()) {
            sortingOrder = this.gridOptionsWrapper.getSortingOrder();
          } else {
            sortingOrder = SortController_1.DEFAULT_SORTING_ORDER;
          }
          if (!Array.isArray(sortingOrder) || sortingOrder.length <= 0) {
            console.warn("ag-grid: sortingOrder must be an array with at least one element, currently it's " + sortingOrder);
            return null;
          }
          var currentIndex = sortingOrder.indexOf(column.getSort());
          var notInArray = currentIndex < 0;
          var lastItemInArray = currentIndex == sortingOrder.length - 1;
          var result;
          if (notInArray || lastItemInArray) {
            result = sortingOrder[0];
          } else {
            result = sortingOrder[currentIndex + 1];
          }
          if (SortController_1.DEFAULT_SORTING_ORDER.indexOf(result) < 0) {
            console.warn("ag-grid: invalid sort type " + result);
            return null;
          }
          return result;
        };
        SortController2.prototype.getColumnsWithSortingOrdered = function() {
          var allColumnsIncludingAuto = this.columnModel.getPrimaryAndSecondaryAndAutoColumns();
          var columnsWithSorting = allColumnsIncludingAuto.filter(function(column) {
            return !!column.getSort();
          });
          var allColsIndexes = {};
          allColumnsIncludingAuto.forEach(function(col, index) {
            return allColsIndexes[col.getId()] = index;
          });
          columnsWithSorting.sort(function(a, b) {
            var iA = a.getSortIndex();
            var iB = b.getSortIndex();
            if (iA != null && iB != null) {
              return iA - iB;
            } else if (iA == null && iB == null) {
              var posA = allColsIndexes[a.getId()];
              var posB = allColsIndexes[b.getId()];
              return posA > posB ? 1 : -1;
            } else if (iB == null) {
              return -1;
            } else {
              return 1;
            }
          });
          return columnsWithSorting;
        };
        SortController2.prototype.getSortModel = function() {
          return this.getColumnsWithSortingOrdered().map(function(column) {
            return {
              sort: column.getSort(),
              colId: column.getId()
            };
          });
        };
        SortController2.prototype.getSortOptions = function() {
          return this.getColumnsWithSortingOrdered().map(function(column) {
            return {
              sort: column.getSort(),
              column
            };
          });
        };
        var SortController_1;
        SortController2.DEFAULT_SORTING_ORDER = [Constants.SORT_ASC, Constants.SORT_DESC, null];
        __decorate$1x([
          Autowired("columnModel")
        ], SortController2.prototype, "columnModel", void 0);
        __decorate$1x([
          Autowired("columnApi")
        ], SortController2.prototype, "columnApi", void 0);
        __decorate$1x([
          Autowired("gridApi")
        ], SortController2.prototype, "gridApi", void 0);
        SortController2 = SortController_1 = __decorate$1x([
          Bean3("sortController")
        ], SortController2);
        return SortController2;
      }(BeanStub)
    );
    var __extends$1J = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1y = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var MouseEventService = (
      /** @class */
      function(_super) {
        __extends$1J(MouseEventService2, _super);
        function MouseEventService2() {
          var _this = _super !== null && _super.apply(this, arguments) || this;
          _this.gridInstanceId = MouseEventService_1.gridInstanceSequence.next();
          return _this;
        }
        MouseEventService_1 = MouseEventService2;
        MouseEventService2.prototype.stampTopLevelGridCompWithGridInstance = function(eGridDiv) {
          eGridDiv[MouseEventService_1.GRID_DOM_KEY] = this.gridInstanceId;
        };
        MouseEventService2.prototype.getRenderedCellForEvent = function(event) {
          return getCtrlForEvent(this.gridOptionsWrapper, event, CellCtrl.DOM_DATA_KEY_CELL_CTRL);
        };
        MouseEventService2.prototype.isEventFromThisGrid = function(event) {
          var res = this.isElementInThisGrid(event.target);
          return res;
        };
        MouseEventService2.prototype.isElementInThisGrid = function(element) {
          var pointer = element;
          while (pointer) {
            var instanceId = pointer[MouseEventService_1.GRID_DOM_KEY];
            if (exists(instanceId)) {
              var eventFromThisGrid = instanceId === this.gridInstanceId;
              return eventFromThisGrid;
            }
            pointer = pointer.parentElement;
          }
          return false;
        };
        MouseEventService2.prototype.getCellPositionForEvent = function(event) {
          var cellComp = this.getRenderedCellForEvent(event);
          return cellComp ? cellComp.getCellPosition() : null;
        };
        MouseEventService2.prototype.getNormalisedPosition = function(event) {
          var gridPanelHasScrolls = this.gridOptionsWrapper.getDomLayout() === Constants.DOM_LAYOUT_NORMAL;
          var e = event;
          var x;
          var y;
          if (e.clientX != null || e.clientY != null) {
            x = e.clientX;
            y = e.clientY;
          } else {
            x = e.x;
            y = e.y;
          }
          if (gridPanelHasScrolls) {
            var gridBodyCon = this.ctrlsService.getGridBodyCtrl();
            var vRange = gridBodyCon.getScrollFeature().getVScrollPosition();
            var hRange = gridBodyCon.getScrollFeature().getHScrollPosition();
            x += hRange.left;
            y += vRange.top;
          }
          return { x, y };
        };
        var MouseEventService_1;
        MouseEventService2.gridInstanceSequence = new NumberSequence();
        MouseEventService2.GRID_DOM_KEY = "__ag_grid_instance";
        __decorate$1y([
          Autowired("ctrlsService")
        ], MouseEventService2.prototype, "ctrlsService", void 0);
        MouseEventService2 = MouseEventService_1 = __decorate$1y([
          Bean3("mouseEventService")
        ], MouseEventService2);
        return MouseEventService2;
      }(BeanStub)
    );
    var __extends$1K = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1z = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var CellNavigationService = (
      /** @class */
      function(_super) {
        __extends$1K(CellNavigationService2, _super);
        function CellNavigationService2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        CellNavigationService2.prototype.getNextCellToFocus = function(key, lastCellToFocus) {
          var pointer = lastCellToFocus;
          var finished = false;
          while (!finished) {
            switch (key) {
              case KeyCode.UP:
                pointer = this.getCellAbove(pointer);
                break;
              case KeyCode.DOWN:
                pointer = this.getCellBelow(pointer);
                break;
              case KeyCode.RIGHT:
                if (this.gridOptionsWrapper.isEnableRtl()) {
                  pointer = this.getCellToLeft(pointer);
                } else {
                  pointer = this.getCellToRight(pointer);
                }
                break;
              case KeyCode.LEFT:
                if (this.gridOptionsWrapper.isEnableRtl()) {
                  pointer = this.getCellToRight(pointer);
                } else {
                  pointer = this.getCellToLeft(pointer);
                }
                break;
              default:
                pointer = null;
                console.warn("AG Grid: unknown key for navigation " + key);
                break;
            }
            if (pointer) {
              finished = this.isCellGoodToFocusOn(pointer);
            } else {
              finished = true;
            }
          }
          return pointer;
        };
        CellNavigationService2.prototype.isCellGoodToFocusOn = function(gridCell) {
          var column = gridCell.column;
          var rowNode;
          switch (gridCell.rowPinned) {
            case Constants.PINNED_TOP:
              rowNode = this.pinnedRowModel.getPinnedTopRow(gridCell.rowIndex);
              break;
            case Constants.PINNED_BOTTOM:
              rowNode = this.pinnedRowModel.getPinnedBottomRow(gridCell.rowIndex);
              break;
            default:
              rowNode = this.rowModel.getRow(gridCell.rowIndex);
              break;
          }
          if (!rowNode) {
            return false;
          }
          var suppressNavigable = column.isSuppressNavigable(rowNode);
          return !suppressNavigable;
        };
        CellNavigationService2.prototype.getCellToLeft = function(lastCell) {
          if (!lastCell) {
            return null;
          }
          var colToLeft = this.columnModel.getDisplayedColBefore(lastCell.column);
          if (!colToLeft) {
            return null;
          }
          return {
            rowIndex: lastCell.rowIndex,
            column: colToLeft,
            rowPinned: lastCell.rowPinned
          };
        };
        CellNavigationService2.prototype.getCellToRight = function(lastCell) {
          if (!lastCell) {
            return null;
          }
          var colToRight = this.columnModel.getDisplayedColAfter(lastCell.column);
          if (!colToRight) {
            return null;
          }
          return {
            rowIndex: lastCell.rowIndex,
            column: colToRight,
            rowPinned: lastCell.rowPinned
          };
        };
        CellNavigationService2.prototype.getRowBelow = function(rowPosition) {
          var index = rowPosition.rowIndex;
          var pinned = rowPosition.rowPinned;
          if (this.isLastRowInContainer(rowPosition)) {
            switch (pinned) {
              case Constants.PINNED_BOTTOM:
                return null;
              case Constants.PINNED_TOP:
                if (this.rowModel.isRowsToRender()) {
                  return { rowIndex: this.paginationProxy.getPageFirstRow(), rowPinned: null };
                }
                if (this.pinnedRowModel.isRowsToRender(Constants.PINNED_BOTTOM)) {
                  return { rowIndex: 0, rowPinned: Constants.PINNED_BOTTOM };
                }
                return null;
              default:
                if (this.pinnedRowModel.isRowsToRender(Constants.PINNED_BOTTOM)) {
                  return { rowIndex: 0, rowPinned: Constants.PINNED_BOTTOM };
                }
                return null;
            }
          }
          return { rowIndex: index + 1, rowPinned: pinned };
        };
        CellNavigationService2.prototype.getCellBelow = function(lastCell) {
          if (!lastCell) {
            return null;
          }
          var rowBelow = this.getRowBelow(lastCell);
          if (rowBelow) {
            return {
              rowIndex: rowBelow.rowIndex,
              column: lastCell.column,
              rowPinned: rowBelow.rowPinned
            };
          }
          return null;
        };
        CellNavigationService2.prototype.isLastRowInContainer = function(rowPosition) {
          var pinned = rowPosition.rowPinned;
          var index = rowPosition.rowIndex;
          if (pinned === Constants.PINNED_TOP) {
            var lastTopIndex = this.pinnedRowModel.getPinnedTopRowData().length - 1;
            return lastTopIndex <= index;
          }
          if (pinned === Constants.PINNED_BOTTOM) {
            var lastBottomIndex = this.pinnedRowModel.getPinnedBottomRowData().length - 1;
            return lastBottomIndex <= index;
          }
          var lastBodyIndex = this.paginationProxy.getPageLastRow();
          return lastBodyIndex <= index;
        };
        CellNavigationService2.prototype.getRowAbove = function(rowPosition) {
          var index = rowPosition.rowIndex;
          var pinned = rowPosition.rowPinned;
          var isFirstRow = pinned ? index === 0 : index === this.paginationProxy.getPageFirstRow();
          if (isFirstRow) {
            if (pinned === Constants.PINNED_TOP) {
              return null;
            }
            if (!pinned) {
              if (this.pinnedRowModel.isRowsToRender(Constants.PINNED_TOP)) {
                return this.getLastFloatingTopRow();
              }
              return null;
            }
            if (this.rowModel.isRowsToRender()) {
              return this.getLastBodyCell();
            }
            if (this.pinnedRowModel.isRowsToRender(Constants.PINNED_TOP)) {
              return this.getLastFloatingTopRow();
            }
            return null;
          }
          return { rowIndex: index - 1, rowPinned: pinned };
        };
        CellNavigationService2.prototype.getCellAbove = function(lastCell) {
          if (!lastCell) {
            return null;
          }
          var rowAbove = this.getRowAbove({ rowIndex: lastCell.rowIndex, rowPinned: lastCell.rowPinned });
          if (rowAbove) {
            return {
              rowIndex: rowAbove.rowIndex,
              column: lastCell.column,
              rowPinned: rowAbove.rowPinned
            };
          }
          return null;
        };
        CellNavigationService2.prototype.getLastBodyCell = function() {
          var lastBodyRow = this.paginationProxy.getPageLastRow();
          return { rowIndex: lastBodyRow, rowPinned: null };
        };
        CellNavigationService2.prototype.getLastFloatingTopRow = function() {
          var lastFloatingRow = this.pinnedRowModel.getPinnedTopRowData().length - 1;
          return { rowIndex: lastFloatingRow, rowPinned: Constants.PINNED_TOP };
        };
        CellNavigationService2.prototype.getNextTabbedCell = function(gridCell, backwards) {
          if (backwards) {
            return this.getNextTabbedCellBackwards(gridCell);
          }
          return this.getNextTabbedCellForwards(gridCell);
        };
        CellNavigationService2.prototype.getNextTabbedCellForwards = function(gridCell) {
          var displayedColumns = this.columnModel.getAllDisplayedColumns();
          var newRowIndex = gridCell.rowIndex;
          var newFloating = gridCell.rowPinned;
          var newColumn = this.columnModel.getDisplayedColAfter(gridCell.column);
          if (!newColumn) {
            newColumn = displayedColumns[0];
            var rowBelow = this.getRowBelow(gridCell);
            if (missing(rowBelow)) {
              return null;
            }
            if (!rowBelow.rowPinned && !this.paginationProxy.isRowInPage(rowBelow)) {
              return null;
            }
            newRowIndex = rowBelow ? rowBelow.rowIndex : null;
            newFloating = rowBelow ? rowBelow.rowPinned : null;
          }
          return { rowIndex: newRowIndex, column: newColumn, rowPinned: newFloating };
        };
        CellNavigationService2.prototype.getNextTabbedCellBackwards = function(gridCell) {
          var displayedColumns = this.columnModel.getAllDisplayedColumns();
          var newRowIndex = gridCell.rowIndex;
          var newFloating = gridCell.rowPinned;
          var newColumn = this.columnModel.getDisplayedColBefore(gridCell.column);
          if (!newColumn) {
            newColumn = last(displayedColumns);
            var rowAbove = this.getRowAbove({ rowIndex: gridCell.rowIndex, rowPinned: gridCell.rowPinned });
            if (missing(rowAbove)) {
              return null;
            }
            if (!rowAbove.rowPinned && !this.paginationProxy.isRowInPage(rowAbove)) {
              return null;
            }
            newRowIndex = rowAbove ? rowAbove.rowIndex : null;
            newFloating = rowAbove ? rowAbove.rowPinned : null;
          }
          return { rowIndex: newRowIndex, column: newColumn, rowPinned: newFloating };
        };
        __decorate$1z([
          Autowired("columnModel")
        ], CellNavigationService2.prototype, "columnModel", void 0);
        __decorate$1z([
          Autowired("rowModel")
        ], CellNavigationService2.prototype, "rowModel", void 0);
        __decorate$1z([
          Autowired("pinnedRowModel")
        ], CellNavigationService2.prototype, "pinnedRowModel", void 0);
        __decorate$1z([
          Autowired("paginationProxy")
        ], CellNavigationService2.prototype, "paginationProxy", void 0);
        CellNavigationService2 = __decorate$1z([
          Bean3("cellNavigationService")
        ], CellNavigationService2);
        return CellNavigationService2;
      }(BeanStub)
    );
    var __extends$1L = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1A = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var ValueFormatterService = (
      /** @class */
      function(_super) {
        __extends$1L(ValueFormatterService2, _super);
        function ValueFormatterService2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        ValueFormatterService2.prototype.formatValue = function(column, node, $scope, value, suppliedFormatter, useFormatterFromColumn) {
          if (useFormatterFromColumn === void 0) {
            useFormatterFromColumn = true;
          }
          var result = null;
          var formatter;
          var colDef = column.getColDef();
          if (suppliedFormatter) {
            formatter = suppliedFormatter;
          } else if (useFormatterFromColumn) {
            formatter = node && node.rowPinned && colDef.pinnedRowValueFormatter ? colDef.pinnedRowValueFormatter : colDef.valueFormatter;
          }
          if (formatter) {
            var params = {
              value,
              node,
              data: node ? node.data : null,
              colDef,
              column,
              api: this.gridOptionsWrapper.getApi(),
              columnApi: this.gridOptionsWrapper.getColumnApi(),
              context: this.gridOptionsWrapper.getContext()
            };
            params.$scope = $scope;
            result = this.expressionService.evaluate(formatter, params);
          } else if (colDef.refData) {
            return colDef.refData[value] || "";
          }
          if (result == null && Array.isArray(value)) {
            result = value.join(", ");
          }
          return result;
        };
        __decorate$1A([
          Autowired("expressionService")
        ], ValueFormatterService2.prototype, "expressionService", void 0);
        ValueFormatterService2 = __decorate$1A([
          Bean3("valueFormatterService")
        ], ValueFormatterService2);
        return ValueFormatterService2;
      }(BeanStub)
    );
    var __extends$1M = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var AgRadioButton = (
      /** @class */
      function(_super) {
        __extends$1M(AgRadioButton2, _super);
        function AgRadioButton2(config) {
          return _super.call(this, config, "ag-radio-button", "radio") || this;
        }
        AgRadioButton2.prototype.isSelected = function() {
          return this.eInput.checked;
        };
        AgRadioButton2.prototype.toggle = function() {
          if (this.eInput.disabled) {
            return;
          }
          if (!this.isSelected()) {
            this.setValue(true);
          }
        };
        AgRadioButton2.prototype.addInputListeners = function() {
          _super.prototype.addInputListeners.call(this);
          this.addManagedListener(this.eventService, Events.EVENT_CHECKBOX_CHANGED, this.onChange.bind(this));
        };
        AgRadioButton2.prototype.onChange = function(event) {
          if (event.selected && event.name && this.eInput.name && this.eInput.name === event.name && event.id && this.eInput.id !== event.id) {
            this.setValue(false, true);
          }
        };
        return AgRadioButton2;
      }(AgCheckbox)
    );
    var OUTSIDE_ANGULAR_EVENTS = ["mouseover", "mouseout", "mouseenter", "mouseleave"];
    var VanillaFrameworkOverrides = (
      /** @class */
      function() {
        function VanillaFrameworkOverrides2() {
          this.isOutsideAngular = function(eventType) {
            return includes(OUTSIDE_ANGULAR_EVENTS, eventType);
          };
        }
        VanillaFrameworkOverrides2.prototype.setTimeout = function(action, timeout) {
          window.setTimeout(action, timeout);
        };
        VanillaFrameworkOverrides2.prototype.setInterval = function(action, timeout) {
          return new AgPromise(function(resolve) {
            resolve(window.setInterval(action, timeout));
          });
        };
        VanillaFrameworkOverrides2.prototype.addEventListener = function(element, type, listener, useCapture) {
          element.addEventListener(type, listener, useCapture);
        };
        VanillaFrameworkOverrides2.prototype.dispatchEvent = function(eventType, listener, global2) {
          listener();
        };
        VanillaFrameworkOverrides2.prototype.frameworkComponent = function(name) {
          return null;
        };
        return VanillaFrameworkOverrides2;
      }()
    );
    var __extends$1N = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1B = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var ScrollVisibleService = (
      /** @class */
      function(_super) {
        __extends$1N(ScrollVisibleService2, _super);
        function ScrollVisibleService2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        ScrollVisibleService2.prototype.postConstruct = function() {
          this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));
          this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, this.onDisplayedColumnsWidthChanged.bind(this));
        };
        ScrollVisibleService2.prototype.onDisplayedColumnsChanged = function() {
          this.update();
        };
        ScrollVisibleService2.prototype.onDisplayedColumnsWidthChanged = function() {
          this.update();
        };
        ScrollVisibleService2.prototype.update = function() {
          this.updateImpl();
          setTimeout(this.updateImpl.bind(this), 500);
        };
        ScrollVisibleService2.prototype.updateImpl = function() {
          var centerRowCtrl = this.ctrlsService.getCenterRowContainerCtrl();
          if (!centerRowCtrl) {
            return;
          }
          var params = {
            horizontalScrollShowing: centerRowCtrl.isHorizontalScrollShowing(),
            verticalScrollShowing: this.isVerticalScrollShowing()
          };
          this.setScrollsVisible(params);
        };
        ScrollVisibleService2.prototype.setScrollsVisible = function(params) {
          var atLeastOneDifferent = this.horizontalScrollShowing !== params.horizontalScrollShowing || this.verticalScrollShowing !== params.verticalScrollShowing;
          if (atLeastOneDifferent) {
            this.horizontalScrollShowing = params.horizontalScrollShowing;
            this.verticalScrollShowing = params.verticalScrollShowing;
            var event_1 = {
              type: Events.EVENT_SCROLL_VISIBILITY_CHANGED,
              api: this.gridApi,
              columnApi: this.columnApi
            };
            this.eventService.dispatchEvent(event_1);
          }
        };
        ScrollVisibleService2.prototype.isHorizontalScrollShowing = function() {
          return this.horizontalScrollShowing;
        };
        ScrollVisibleService2.prototype.isVerticalScrollShowing = function() {
          return this.verticalScrollShowing;
        };
        __decorate$1B([
          Autowired("columnApi")
        ], ScrollVisibleService2.prototype, "columnApi", void 0);
        __decorate$1B([
          Autowired("gridApi")
        ], ScrollVisibleService2.prototype, "gridApi", void 0);
        __decorate$1B([
          Autowired("ctrlsService")
        ], ScrollVisibleService2.prototype, "ctrlsService", void 0);
        __decorate$1B([
          PostConstruct
        ], ScrollVisibleService2.prototype, "postConstruct", null);
        ScrollVisibleService2 = __decorate$1B([
          Bean3("scrollVisibleService")
        ], ScrollVisibleService2);
        return ScrollVisibleService2;
      }(BeanStub)
    );
    var __extends$1O = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1C = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var StylingService = (
      /** @class */
      function(_super) {
        __extends$1O(StylingService2, _super);
        function StylingService2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        StylingService2.prototype.processAllCellClasses = function(colDef, params, onApplicableClass, onNotApplicableClass) {
          this.processClassRules(colDef.cellClassRules, params, onApplicableClass, onNotApplicableClass);
          this.processStaticCellClasses(colDef, params, onApplicableClass);
        };
        StylingService2.prototype.processClassRules = function(classRules, params, onApplicableClass, onNotApplicableClass) {
          if (classRules == null) {
            return;
          }
          var classNames = Object.keys(classRules);
          var classesToApply = {};
          var classesToRemove = {};
          var _loop_1 = function(i2) {
            var className = classNames[i2];
            var rule = classRules[className];
            var resultOfRule;
            if (typeof rule === "string") {
              resultOfRule = this_1.expressionService.evaluate(rule, params);
            } else if (typeof rule === "function") {
              resultOfRule = rule(params);
            }
            className.split(" ").forEach(function(singleClass) {
              if (singleClass == null || singleClass.trim() == "") {
                return;
              }
              resultOfRule ? classesToApply[singleClass] = true : classesToRemove[singleClass] = true;
            });
            if (onNotApplicableClass) {
              Object.keys(classesToRemove).forEach(onNotApplicableClass);
            }
            Object.keys(classesToApply).forEach(onApplicableClass);
          };
          var this_1 = this;
          for (var i = 0; i < classNames.length; i++) {
            _loop_1(i);
          }
        };
        StylingService2.prototype.getStaticCellClasses = function(colDef, params) {
          var cellClass = colDef.cellClass;
          if (!cellClass) {
            return [];
          }
          var classOrClasses;
          if (typeof cellClass === "function") {
            var cellClassFunc = colDef.cellClass;
            classOrClasses = cellClassFunc(params);
          } else {
            classOrClasses = cellClass;
          }
          if (typeof classOrClasses === "string") {
            classOrClasses = [classOrClasses];
          }
          return classOrClasses;
        };
        StylingService2.prototype.processStaticCellClasses = function(colDef, params, onApplicableClass) {
          var classOrClasses = this.getStaticCellClasses(colDef, params);
          classOrClasses.forEach(function(cssClassItem) {
            onApplicableClass(cssClassItem);
          });
        };
        __decorate$1C([
          Autowired("expressionService")
        ], StylingService2.prototype, "expressionService", void 0);
        StylingService2 = __decorate$1C([
          Bean3("stylingService")
        ], StylingService2);
        return StylingService2;
      }(BeanStub)
    );
    var __extends$1P = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1D = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var ColumnHoverService = (
      /** @class */
      function(_super) {
        __extends$1P(ColumnHoverService2, _super);
        function ColumnHoverService2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        ColumnHoverService2.prototype.setMouseOver = function(columns) {
          this.selectedColumns = columns;
          var event = {
            type: Events.EVENT_COLUMN_HOVER_CHANGED,
            api: this.gridApi,
            columnApi: this.columnApi
          };
          this.eventService.dispatchEvent(event);
        };
        ColumnHoverService2.prototype.clearMouseOver = function() {
          this.selectedColumns = null;
          var event = {
            type: Events.EVENT_COLUMN_HOVER_CHANGED,
            api: this.gridApi,
            columnApi: this.columnApi
          };
          this.eventService.dispatchEvent(event);
        };
        ColumnHoverService2.prototype.isHovered = function(column) {
          return !!this.selectedColumns && this.selectedColumns.indexOf(column) >= 0;
        };
        __decorate$1D([
          Autowired("columnApi")
        ], ColumnHoverService2.prototype, "columnApi", void 0);
        __decorate$1D([
          Autowired("gridApi")
        ], ColumnHoverService2.prototype, "gridApi", void 0);
        ColumnHoverService2 = __decorate$1D([
          Bean3("columnHoverService")
        ], ColumnHoverService2);
        return ColumnHoverService2;
      }(BeanStub)
    );
    var __extends$1Q = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1E = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var ColumnAnimationService = (
      /** @class */
      function(_super) {
        __extends$1Q(ColumnAnimationService2, _super);
        function ColumnAnimationService2() {
          var _this = _super !== null && _super.apply(this, arguments) || this;
          _this.executeNextFuncs = [];
          _this.executeLaterFuncs = [];
          _this.active = false;
          _this.animationThreadCount = 0;
          return _this;
        }
        ColumnAnimationService2.prototype.postConstruct = function() {
          var _this = this;
          this.ctrlsService.whenReady(function(p) {
            return _this.gridBodyCtrl = p.gridBodyCtrl;
          });
        };
        ColumnAnimationService2.prototype.isActive = function() {
          return this.active;
        };
        ColumnAnimationService2.prototype.start = function() {
          if (this.active) {
            return;
          }
          if (this.gridOptionsWrapper.isSuppressColumnMoveAnimation()) {
            return;
          }
          if (this.gridOptionsWrapper.isEnableRtl()) {
            return;
          }
          this.ensureAnimationCssClassPresent();
          this.active = true;
        };
        ColumnAnimationService2.prototype.finish = function() {
          if (!this.active) {
            return;
          }
          this.flush();
          this.active = false;
        };
        ColumnAnimationService2.prototype.executeNextVMTurn = function(func) {
          if (this.active) {
            this.executeNextFuncs.push(func);
          } else {
            func();
          }
        };
        ColumnAnimationService2.prototype.executeLaterVMTurn = function(func) {
          if (this.active) {
            this.executeLaterFuncs.push(func);
          } else {
            func();
          }
        };
        ColumnAnimationService2.prototype.ensureAnimationCssClassPresent = function() {
          var _this = this;
          this.animationThreadCount++;
          var animationThreadCountCopy = this.animationThreadCount;
          this.gridBodyCtrl.setColumnMovingCss(true);
          this.executeLaterFuncs.push(function() {
            if (_this.animationThreadCount === animationThreadCountCopy) {
              _this.gridBodyCtrl.setColumnMovingCss(false);
            }
          });
        };
        ColumnAnimationService2.prototype.flush = function() {
          var nowFuncs = this.executeNextFuncs;
          this.executeNextFuncs = [];
          var waitFuncs = this.executeLaterFuncs;
          this.executeLaterFuncs = [];
          if (nowFuncs.length === 0 && waitFuncs.length === 0) {
            return;
          }
          window.setTimeout(function() {
            return nowFuncs.forEach(function(func) {
              return func();
            });
          }, 0);
          window.setTimeout(function() {
            return waitFuncs.forEach(function(func) {
              return func();
            });
          }, 300);
        };
        __decorate$1E([
          Autowired("ctrlsService")
        ], ColumnAnimationService2.prototype, "ctrlsService", void 0);
        __decorate$1E([
          PostConstruct
        ], ColumnAnimationService2.prototype, "postConstruct", null);
        ColumnAnimationService2 = __decorate$1E([
          Bean3("columnAnimationService")
        ], ColumnAnimationService2);
        return ColumnAnimationService2;
      }(BeanStub)
    );
    var __extends$1R = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1F = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var AutoGroupColService = (
      /** @class */
      function(_super) {
        __extends$1R(AutoGroupColService2, _super);
        function AutoGroupColService2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        AutoGroupColService_1 = AutoGroupColService2;
        AutoGroupColService2.prototype.createAutoGroupColumns = function(rowGroupColumns) {
          var _this = this;
          var groupAutoColumns = [];
          var doingTreeData = this.gridOptionsWrapper.isTreeData();
          var doingMultiAutoColumn = this.gridOptionsWrapper.isGroupMultiAutoColumn();
          if (doingTreeData && doingMultiAutoColumn) {
            console.warn("AG Grid: you cannot mix groupMultiAutoColumn with treeData, only one column can be used to display groups when doing tree data");
            doingMultiAutoColumn = false;
          }
          if (doingMultiAutoColumn) {
            rowGroupColumns.forEach(function(rowGroupCol, index) {
              groupAutoColumns.push(_this.createOneAutoGroupColumn(rowGroupCol, index));
            });
          } else {
            groupAutoColumns.push(this.createOneAutoGroupColumn());
          }
          return groupAutoColumns;
        };
        AutoGroupColService2.prototype.createOneAutoGroupColumn = function(rowGroupCol, index) {
          var defaultAutoColDef = this.generateDefaultColDef(rowGroupCol);
          var colId;
          if (rowGroupCol) {
            colId = Constants.GROUP_AUTO_COLUMN_ID + "-" + rowGroupCol.getId();
          } else {
            colId = AutoGroupColService_1.GROUP_AUTO_COLUMN_BUNDLE_ID;
          }
          var userAutoColDef = this.gridOptionsWrapper.getAutoGroupColumnDef();
          mergeDeep(defaultAutoColDef, userAutoColDef);
          defaultAutoColDef = this.columnFactory.mergeColDefs(defaultAutoColDef);
          defaultAutoColDef.colId = colId;
          if (!this.gridOptionsWrapper.isTreeData()) {
            var noFieldOrValueGetter = missing(defaultAutoColDef.field) && missing(defaultAutoColDef.valueGetter) && missing(defaultAutoColDef.filterValueGetter);
            if (noFieldOrValueGetter) {
              defaultAutoColDef.filter = false;
            }
          }
          if (index && index > 0) {
            defaultAutoColDef.headerCheckboxSelection = false;
          }
          var newCol = new Column(defaultAutoColDef, null, colId, true);
          this.context.createBean(newCol);
          return newCol;
        };
        AutoGroupColService2.prototype.generateDefaultColDef = function(rowGroupCol) {
          var userDef = this.gridOptionsWrapper.getAutoGroupColumnDef();
          var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
          var res = {
            headerName: localeTextFunc("group", "Group")
          };
          var userHasProvidedGroupCellRenderer = userDef && (userDef.cellRenderer || userDef.cellRendererFramework || userDef.cellRendererSelector);
          if (!userHasProvidedGroupCellRenderer) {
            res.cellRenderer = "agGroupCellRenderer";
          }
          if (rowGroupCol) {
            var colDef = rowGroupCol.getColDef();
            assign(res, {
              // cellRendererParams.groupKey: colDefToCopy.field;
              headerName: this.columnModel.getDisplayNameForColumn(rowGroupCol, "header"),
              headerValueGetter: colDef.headerValueGetter
            });
            if (colDef.cellRenderer) {
              assign(res, {
                cellRendererParams: {
                  innerRenderer: colDef.cellRenderer,
                  innerRendererParams: colDef.cellRendererParams
                }
              });
            }
            res.showRowGroup = rowGroupCol.getColId();
          } else {
            res.showRowGroup = true;
          }
          return res;
        };
        var AutoGroupColService_1;
        AutoGroupColService2.GROUP_AUTO_COLUMN_BUNDLE_ID = Constants.GROUP_AUTO_COLUMN_ID;
        __decorate$1F([
          Autowired("columnModel")
        ], AutoGroupColService2.prototype, "columnModel", void 0);
        __decorate$1F([
          Autowired("columnFactory")
        ], AutoGroupColService2.prototype, "columnFactory", void 0);
        AutoGroupColService2 = AutoGroupColService_1 = __decorate$1F([
          Bean3("autoGroupColService")
        ], AutoGroupColService2);
        return AutoGroupColService2;
      }(BeanStub)
    );
    var __extends$1S = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1G = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var PaginationProxy = (
      /** @class */
      function(_super) {
        __extends$1S(PaginationProxy2, _super);
        function PaginationProxy2() {
          var _this = _super !== null && _super.apply(this, arguments) || this;
          _this.currentPage = 0;
          _this.topDisplayedRowIndex = 0;
          _this.bottomDisplayedRowIndex = 0;
          _this.pixelOffset = 0;
          _this.masterRowCount = 0;
          return _this;
        }
        PaginationProxy2.prototype.postConstruct = function() {
          this.active = this.gridOptionsWrapper.isPagination();
          this.paginateChildRows = this.gridOptionsWrapper.isPaginateChildRows();
          this.addManagedListener(this.eventService, Events.EVENT_MODEL_UPDATED, this.onModelUpdated.bind(this));
          this.addManagedListener(this.gridOptionsWrapper, "paginationPageSize", this.onPaginationPageSizeChanged.bind(this));
          this.onModelUpdated();
        };
        PaginationProxy2.prototype.ensureRowHeightsValid = function(startPixel, endPixel, startLimitIndex, endLimitIndex) {
          var res = this.rowModel.ensureRowHeightsValid(startPixel, endPixel, this.getPageFirstRow(), this.getPageLastRow());
          if (res) {
            this.calculatePages();
          }
          return res;
        };
        PaginationProxy2.prototype.onModelUpdated = function(modelUpdatedEvent) {
          this.calculatePages();
          var paginationChangedEvent = {
            type: Events.EVENT_PAGINATION_CHANGED,
            animate: modelUpdatedEvent ? modelUpdatedEvent.animate : false,
            newData: modelUpdatedEvent ? modelUpdatedEvent.newData : false,
            newPage: modelUpdatedEvent ? modelUpdatedEvent.newPage : false,
            keepRenderedRows: modelUpdatedEvent ? modelUpdatedEvent.keepRenderedRows : false,
            api: this.gridApi,
            columnApi: this.columnApi
          };
          this.eventService.dispatchEvent(paginationChangedEvent);
        };
        PaginationProxy2.prototype.onPaginationPageSizeChanged = function() {
          this.calculatePages();
          var paginationChangedEvent = {
            type: Events.EVENT_PAGINATION_CHANGED,
            animate: false,
            newData: false,
            newPage: false,
            // important to keep rendered rows, otherwise every time grid is resized,
            // we would destroy all the rows.
            keepRenderedRows: true,
            api: this.gridApi,
            columnApi: this.columnApi
          };
          this.eventService.dispatchEvent(paginationChangedEvent);
        };
        PaginationProxy2.prototype.goToPage = function(page) {
          if (!this.active || this.currentPage === page) {
            return;
          }
          this.currentPage = page;
          var event = {
            type: Events.EVENT_MODEL_UPDATED,
            animate: false,
            keepRenderedRows: false,
            newData: false,
            newPage: true,
            api: this.gridApi,
            columnApi: this.columnApi
          };
          this.onModelUpdated(event);
        };
        PaginationProxy2.prototype.getPixelOffset = function() {
          return this.pixelOffset;
        };
        PaginationProxy2.prototype.getRow = function(index) {
          return this.rowModel.getRow(index);
        };
        PaginationProxy2.prototype.getRowNode = function(id) {
          return this.rowModel.getRowNode(id);
        };
        PaginationProxy2.prototype.getRowIndexAtPixel = function(pixel) {
          return this.rowModel.getRowIndexAtPixel(pixel);
        };
        PaginationProxy2.prototype.getCurrentPageHeight = function() {
          if (missing(this.topRowBounds) || missing(this.bottomRowBounds)) {
            return 0;
          }
          return Math.max(this.bottomRowBounds.rowTop + this.bottomRowBounds.rowHeight - this.topRowBounds.rowTop, 0);
        };
        PaginationProxy2.prototype.getCurrentPagePixelRange = function() {
          var pageFirstPixel = this.topRowBounds ? this.topRowBounds.rowTop : 0;
          var pageLastPixel = this.bottomRowBounds ? this.bottomRowBounds.rowTop + this.bottomRowBounds.rowHeight : 0;
          return { pageFirstPixel, pageLastPixel };
        };
        PaginationProxy2.prototype.isRowPresent = function(rowNode) {
          if (!this.rowModel.isRowPresent(rowNode)) {
            return false;
          }
          var nodeIsInPage = rowNode.rowIndex >= this.topDisplayedRowIndex && rowNode.rowIndex <= this.bottomDisplayedRowIndex;
          return nodeIsInPage;
        };
        PaginationProxy2.prototype.isEmpty = function() {
          return this.rowModel.isEmpty();
        };
        PaginationProxy2.prototype.isRowsToRender = function() {
          return this.rowModel.isRowsToRender();
        };
        PaginationProxy2.prototype.getNodesInRangeForSelection = function(firstInRange, lastInRange) {
          return this.rowModel.getNodesInRangeForSelection(firstInRange, lastInRange);
        };
        PaginationProxy2.prototype.forEachNode = function(callback) {
          return this.rowModel.forEachNode(callback);
        };
        PaginationProxy2.prototype.getType = function() {
          return this.rowModel.getType();
        };
        PaginationProxy2.prototype.getRowBounds = function(index) {
          var res = this.rowModel.getRowBounds(index);
          res.rowIndex = index;
          return res;
        };
        PaginationProxy2.prototype.getPageFirstRow = function() {
          return this.topRowBounds ? this.topRowBounds.rowIndex : -1;
        };
        PaginationProxy2.prototype.getPageLastRow = function() {
          return this.bottomRowBounds ? this.bottomRowBounds.rowIndex : -1;
        };
        PaginationProxy2.prototype.getRowCount = function() {
          return this.rowModel.getRowCount();
        };
        PaginationProxy2.prototype.getPageForIndex = function(index) {
          return Math.floor(index / this.pageSize);
        };
        PaginationProxy2.prototype.goToPageWithIndex = function(index) {
          if (!this.active) {
            return;
          }
          var pageNumber = this.getPageForIndex(index);
          this.goToPage(pageNumber);
        };
        PaginationProxy2.prototype.isRowInPage = function(row) {
          if (!this.active) {
            return true;
          }
          var rowPage = this.getPageForIndex(row.rowIndex);
          return rowPage === this.currentPage;
        };
        PaginationProxy2.prototype.isLastPageFound = function() {
          return this.rowModel.isLastRowIndexKnown();
        };
        PaginationProxy2.prototype.getCurrentPage = function() {
          return this.currentPage;
        };
        PaginationProxy2.prototype.goToNextPage = function() {
          this.goToPage(this.currentPage + 1);
        };
        PaginationProxy2.prototype.goToPreviousPage = function() {
          this.goToPage(this.currentPage - 1);
        };
        PaginationProxy2.prototype.goToFirstPage = function() {
          this.goToPage(0);
        };
        PaginationProxy2.prototype.goToLastPage = function() {
          var rowCount = this.rowModel.getRowCount();
          var lastPage = Math.floor(rowCount / this.pageSize);
          this.goToPage(lastPage);
        };
        PaginationProxy2.prototype.getPageSize = function() {
          return this.pageSize;
        };
        PaginationProxy2.prototype.getTotalPages = function() {
          return this.totalPages;
        };
        PaginationProxy2.prototype.setPageSize = function() {
          this.pageSize = this.gridOptionsWrapper.getPaginationPageSize();
          if (this.pageSize == null || this.pageSize < 1) {
            this.pageSize = 100;
          }
        };
        PaginationProxy2.prototype.calculatePages = function() {
          if (this.active) {
            this.setPageSize();
            if (this.paginateChildRows) {
              this.calculatePagesAllRows();
            } else {
              this.calculatePagesMasterRowsOnly();
            }
          } else {
            this.calculatedPagesNotActive();
          }
          this.topRowBounds = this.rowModel.getRowBounds(this.topDisplayedRowIndex);
          if (this.topRowBounds) {
            this.topRowBounds.rowIndex = this.topDisplayedRowIndex;
          }
          this.bottomRowBounds = this.rowModel.getRowBounds(this.bottomDisplayedRowIndex);
          if (this.bottomRowBounds) {
            this.bottomRowBounds.rowIndex = this.bottomDisplayedRowIndex;
          }
          this.setPixelOffset(exists(this.topRowBounds) ? this.topRowBounds.rowTop : 0);
        };
        PaginationProxy2.prototype.setPixelOffset = function(value) {
          if (this.pixelOffset === value) {
            return;
          }
          this.pixelOffset = value;
          this.eventService.dispatchEvent({ type: Events.EVENT_PAGINATION_PIXEL_OFFSET_CHANGED });
        };
        PaginationProxy2.prototype.setZeroRows = function() {
          this.masterRowCount = 0;
          this.topDisplayedRowIndex = 0;
          this.bottomDisplayedRowIndex = -1;
          this.currentPage = 0;
          this.totalPages = 0;
        };
        PaginationProxy2.prototype.calculatePagesMasterRowsOnly = function() {
          this.masterRowCount = this.rowModel.getTopLevelRowCount();
          if (this.masterRowCount <= 0) {
            this.setZeroRows();
            return;
          }
          var masterLastRowIndex = this.masterRowCount - 1;
          this.totalPages = Math.floor(masterLastRowIndex / this.pageSize) + 1;
          if (this.currentPage >= this.totalPages) {
            this.currentPage = this.totalPages - 1;
          }
          if (!isNumeric(this.currentPage) || this.currentPage < 0) {
            this.currentPage = 0;
          }
          var masterPageStartIndex = this.pageSize * this.currentPage;
          var masterPageEndIndex = this.pageSize * (this.currentPage + 1) - 1;
          if (masterPageEndIndex > masterLastRowIndex) {
            masterPageEndIndex = masterLastRowIndex;
          }
          this.topDisplayedRowIndex = this.rowModel.getTopLevelRowDisplayedIndex(masterPageStartIndex);
          if (masterPageEndIndex === masterLastRowIndex) {
            this.bottomDisplayedRowIndex = this.rowModel.getRowCount() - 1;
          } else {
            var firstIndexNotToShow = this.rowModel.getTopLevelRowDisplayedIndex(masterPageEndIndex + 1);
            this.bottomDisplayedRowIndex = firstIndexNotToShow - 1;
          }
        };
        PaginationProxy2.prototype.getMasterRowCount = function() {
          return this.masterRowCount;
        };
        PaginationProxy2.prototype.calculatePagesAllRows = function() {
          this.masterRowCount = this.rowModel.getRowCount();
          if (this.masterRowCount === 0) {
            this.setZeroRows();
            return;
          }
          var maxRowIndex = this.masterRowCount - 1;
          this.totalPages = Math.floor(maxRowIndex / this.pageSize) + 1;
          if (this.currentPage >= this.totalPages) {
            this.currentPage = this.totalPages - 1;
          }
          if (!isNumeric(this.currentPage) || this.currentPage < 0) {
            this.currentPage = 0;
          }
          this.topDisplayedRowIndex = this.pageSize * this.currentPage;
          this.bottomDisplayedRowIndex = this.pageSize * (this.currentPage + 1) - 1;
          if (this.bottomDisplayedRowIndex > maxRowIndex) {
            this.bottomDisplayedRowIndex = maxRowIndex;
          }
        };
        PaginationProxy2.prototype.calculatedPagesNotActive = function() {
          this.pageSize = this.rowModel.getRowCount();
          this.totalPages = 1;
          this.currentPage = 0;
          this.topDisplayedRowIndex = 0;
          this.bottomDisplayedRowIndex = this.rowModel.getRowCount() - 1;
        };
        __decorate$1G([
          Autowired("rowModel")
        ], PaginationProxy2.prototype, "rowModel", void 0);
        __decorate$1G([
          Autowired("columnApi")
        ], PaginationProxy2.prototype, "columnApi", void 0);
        __decorate$1G([
          Autowired("gridApi")
        ], PaginationProxy2.prototype, "gridApi", void 0);
        __decorate$1G([
          PostConstruct
        ], PaginationProxy2.prototype, "postConstruct", null);
        PaginationProxy2 = __decorate$1G([
          Bean3("paginationProxy")
        ], PaginationProxy2);
        return PaginationProxy2;
      }(BeanStub)
    );
    var __extends$1T = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1H = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var PaginationAutoPageSizeService = (
      /** @class */
      function(_super) {
        __extends$1T(PaginationAutoPageSizeService2, _super);
        function PaginationAutoPageSizeService2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        PaginationAutoPageSizeService2.prototype.postConstruct = function() {
          var _this = this;
          this.ctrlsService.whenReady(function(p) {
            _this.centerRowContainerCon = p.centerRowContainerCtrl;
            _this.addManagedListener(_this.eventService, Events.EVENT_BODY_HEIGHT_CHANGED, _this.onBodyHeightChanged.bind(_this));
            _this.addManagedListener(_this.eventService, Events.EVENT_SCROLL_VISIBILITY_CHANGED, _this.onScrollVisibilityChanged.bind(_this));
            _this.checkPageSize();
          });
        };
        PaginationAutoPageSizeService2.prototype.notActive = function() {
          return !this.gridOptionsWrapper.isPaginationAutoPageSize();
        };
        PaginationAutoPageSizeService2.prototype.onScrollVisibilityChanged = function() {
          this.checkPageSize();
        };
        PaginationAutoPageSizeService2.prototype.onBodyHeightChanged = function() {
          this.checkPageSize();
        };
        PaginationAutoPageSizeService2.prototype.checkPageSize = function() {
          if (this.notActive()) {
            return;
          }
          var rowHeight = this.gridOptionsWrapper.getRowHeightAsNumber();
          var bodyHeight = this.centerRowContainerCon.getViewportSizeFeature().getBodyHeight();
          if (bodyHeight > 0) {
            var newPageSize = Math.floor(bodyHeight / rowHeight);
            this.gridOptionsWrapper.setProperty("paginationPageSize", newPageSize);
          }
        };
        __decorate$1H([
          Autowired("ctrlsService")
        ], PaginationAutoPageSizeService2.prototype, "ctrlsService", void 0);
        __decorate$1H([
          PostConstruct
        ], PaginationAutoPageSizeService2.prototype, "postConstruct", null);
        PaginationAutoPageSizeService2 = __decorate$1H([
          Bean3("paginationAutoPageSizeService")
        ], PaginationAutoPageSizeService2);
        return PaginationAutoPageSizeService2;
      }(BeanStub)
    );
    var __extends$1U = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1I = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var ValueCache = (
      /** @class */
      function(_super) {
        __extends$1U(ValueCache2, _super);
        function ValueCache2() {
          var _this = _super !== null && _super.apply(this, arguments) || this;
          _this.cacheVersion = 0;
          return _this;
        }
        ValueCache2.prototype.init = function() {
          this.active = this.gridOptionsWrapper.isValueCache();
          this.neverExpires = this.gridOptionsWrapper.isValueCacheNeverExpires();
        };
        ValueCache2.prototype.onDataChanged = function() {
          if (this.neverExpires) {
            return;
          }
          this.expire();
        };
        ValueCache2.prototype.expire = function() {
          this.cacheVersion++;
        };
        ValueCache2.prototype.setValue = function(rowNode, colId, value) {
          if (this.active) {
            if (rowNode.__cacheVersion !== this.cacheVersion) {
              rowNode.__cacheVersion = this.cacheVersion;
              rowNode.__cacheData = {};
            }
            rowNode.__cacheData[colId] = value;
          }
        };
        ValueCache2.prototype.getValue = function(rowNode, colId) {
          if (!this.active || rowNode.__cacheVersion !== this.cacheVersion) {
            return void 0;
          }
          return rowNode.__cacheData[colId];
        };
        __decorate$1I([
          PostConstruct
        ], ValueCache2.prototype, "init", null);
        ValueCache2 = __decorate$1I([
          Bean3("valueCache")
        ], ValueCache2);
        return ValueCache2;
      }(BeanStub)
    );
    var __extends$1V = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1J = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var ChangeDetectionService = (
      /** @class */
      function(_super) {
        __extends$1V(ChangeDetectionService2, _super);
        function ChangeDetectionService2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        ChangeDetectionService2.prototype.init = function() {
          if (this.rowModel.getType() === Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {
            this.clientSideRowModel = this.rowModel;
          }
          this.addManagedListener(this.eventService, Events.EVENT_CELL_VALUE_CHANGED, this.onCellValueChanged.bind(this));
        };
        ChangeDetectionService2.prototype.onCellValueChanged = function(event) {
          if (event.source === Constants.SOURCE_PASTE) {
            return;
          }
          this.doChangeDetection(event.node, event.column);
        };
        ChangeDetectionService2.prototype.doChangeDetection = function(rowNode, column) {
          if (this.gridOptionsWrapper.isSuppressChangeDetection()) {
            return;
          }
          if (this.clientSideRowModel && !rowNode.isRowPinned()) {
            var onlyChangedColumns = this.gridOptionsWrapper.isAggregateOnlyChangedColumns();
            var changedPath = new ChangedPath(onlyChangedColumns, this.clientSideRowModel.getRootNode());
            changedPath.addParentNode(rowNode.parent, [column]);
            this.clientSideRowModel.doAggregate(changedPath);
          }
          this.rowRenderer.refreshCells();
        };
        __decorate$1J([
          Autowired("rowModel")
        ], ChangeDetectionService2.prototype, "rowModel", void 0);
        __decorate$1J([
          Autowired("rowRenderer")
        ], ChangeDetectionService2.prototype, "rowRenderer", void 0);
        __decorate$1J([
          PostConstruct
        ], ChangeDetectionService2.prototype, "init", null);
        ChangeDetectionService2 = __decorate$1J([
          Bean3("changeDetectionService")
        ], ChangeDetectionService2);
        return ChangeDetectionService2;
      }(BeanStub)
    );
    var __extends$1W = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1K = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __param$7 = function(paramIndex, decorator) {
      return function(target, key) {
        decorator(target, key, paramIndex);
      };
    };
    var AlignedGridsService = (
      /** @class */
      function(_super) {
        __extends$1W(AlignedGridsService2, _super);
        function AlignedGridsService2() {
          var _this = _super !== null && _super.apply(this, arguments) || this;
          _this.consuming = false;
          return _this;
        }
        AlignedGridsService2.prototype.setBeans = function(loggerFactory) {
          this.logger = loggerFactory.create("AlignedGridsService");
        };
        AlignedGridsService2.prototype.init = function() {
          this.addManagedListener(this.eventService, Events.EVENT_COLUMN_MOVED, this.fireColumnEvent.bind(this));
          this.addManagedListener(this.eventService, Events.EVENT_COLUMN_VISIBLE, this.fireColumnEvent.bind(this));
          this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PINNED, this.fireColumnEvent.bind(this));
          this.addManagedListener(this.eventService, Events.EVENT_COLUMN_GROUP_OPENED, this.fireColumnEvent.bind(this));
          this.addManagedListener(this.eventService, Events.EVENT_COLUMN_RESIZED, this.fireColumnEvent.bind(this));
          this.addManagedListener(this.eventService, Events.EVENT_BODY_SCROLL, this.fireScrollEvent.bind(this));
        };
        AlignedGridsService2.prototype.fireEvent = function(callback) {
          if (this.consuming) {
            return;
          }
          var otherGrids = this.gridOptionsWrapper.getAlignedGrids();
          if (otherGrids) {
            otherGrids.forEach(function(otherGridOptions) {
              if (otherGridOptions.api) {
                var alignedGridService = otherGridOptions.api.__getAlignedGridService();
                callback(alignedGridService);
              }
            });
          }
        };
        AlignedGridsService2.prototype.onEvent = function(callback) {
          this.consuming = true;
          callback();
          this.consuming = false;
        };
        AlignedGridsService2.prototype.fireColumnEvent = function(event) {
          this.fireEvent(function(alignedGridsService) {
            alignedGridsService.onColumnEvent(event);
          });
        };
        AlignedGridsService2.prototype.fireScrollEvent = function(event) {
          if (event.direction !== "horizontal") {
            return;
          }
          this.fireEvent(function(alignedGridsService) {
            alignedGridsService.onScrollEvent(event);
          });
        };
        AlignedGridsService2.prototype.onScrollEvent = function(event) {
          var _this = this;
          this.onEvent(function() {
            var gridBodyCon = _this.ctrlsService.getGridBodyCtrl();
            gridBodyCon.getScrollFeature().setHorizontalScrollPosition(event.left);
          });
        };
        AlignedGridsService2.prototype.getMasterColumns = function(event) {
          var result = [];
          if (event.columns) {
            event.columns.forEach(function(column) {
              result.push(column);
            });
          } else if (event.column) {
            result.push(event.column);
          }
          return result;
        };
        AlignedGridsService2.prototype.getColumnIds = function(event) {
          var result = [];
          if (event.columns) {
            event.columns.forEach(function(column) {
              result.push(column.getColId());
            });
          } else if (event.column) {
            result.push(event.column.getColId());
          }
          return result;
        };
        AlignedGridsService2.prototype.onColumnEvent = function(event) {
          var _this = this;
          this.onEvent(function() {
            switch (event.type) {
              case Events.EVENT_COLUMN_MOVED:
              case Events.EVENT_COLUMN_VISIBLE:
              case Events.EVENT_COLUMN_PINNED:
              case Events.EVENT_COLUMN_RESIZED:
                var colEvent = event;
                _this.processColumnEvent(colEvent);
                break;
              case Events.EVENT_COLUMN_GROUP_OPENED:
                var groupOpenedEvent = event;
                _this.processGroupOpenedEvent(groupOpenedEvent);
                break;
              case Events.EVENT_COLUMN_PIVOT_CHANGED:
                console.warn("AG Grid: pivoting is not supported with aligned grids. You can only use one of these features at a time in a grid.");
                break;
            }
          });
        };
        AlignedGridsService2.prototype.processGroupOpenedEvent = function(groupOpenedEvent) {
          var masterColumnGroup = groupOpenedEvent.columnGroup;
          var otherColumnGroup = null;
          if (masterColumnGroup) {
            var groupId = masterColumnGroup.getGroupId();
            otherColumnGroup = this.columnModel.getOriginalColumnGroup(groupId);
          }
          if (masterColumnGroup && !otherColumnGroup) {
            return;
          }
          this.logger.log("onColumnEvent-> processing " + groupOpenedEvent + " expanded = " + masterColumnGroup.isExpanded());
          this.columnModel.setColumnGroupOpened(otherColumnGroup, masterColumnGroup.isExpanded(), "alignedGridChanged");
        };
        AlignedGridsService2.prototype.processColumnEvent = function(colEvent) {
          var _this = this;
          var masterColumn = colEvent.column;
          var otherColumn = null;
          if (masterColumn) {
            otherColumn = this.columnModel.getPrimaryColumn(masterColumn.getColId());
          }
          if (masterColumn && !otherColumn) {
            return;
          }
          var masterColumns = this.getMasterColumns(colEvent);
          switch (colEvent.type) {
            case Events.EVENT_COLUMN_MOVED:
              {
                var movedEvent = colEvent;
                var srcColState = colEvent.columnApi.getColumnState();
                var destColState = srcColState.map(function(s) {
                  return { colId: s.colId };
                });
                this.columnModel.applyColumnState({ state: destColState, applyOrder: true }, "alignedGridChanged");
                this.logger.log("onColumnEvent-> processing " + colEvent.type + " toIndex = " + movedEvent.toIndex);
              }
              break;
            case Events.EVENT_COLUMN_VISIBLE:
              {
                var visibleEvent = colEvent;
                var srcColState = colEvent.columnApi.getColumnState();
                var destColState = srcColState.map(function(s) {
                  return { colId: s.colId, hide: s.hide };
                });
                this.columnModel.applyColumnState({ state: destColState }, "alignedGridChanged");
                this.logger.log("onColumnEvent-> processing " + colEvent.type + " visible = " + visibleEvent.visible);
              }
              break;
            case Events.EVENT_COLUMN_PINNED:
              {
                var pinnedEvent = colEvent;
                var srcColState = colEvent.columnApi.getColumnState();
                var destColState = srcColState.map(function(s) {
                  return { colId: s.colId, pinned: s.pinned };
                });
                this.columnModel.applyColumnState({ state: destColState }, "alignedGridChanged");
                this.logger.log("onColumnEvent-> processing " + colEvent.type + " pinned = " + pinnedEvent.pinned);
              }
              break;
            case Events.EVENT_COLUMN_RESIZED:
              var resizedEvent_1 = colEvent;
              masterColumns.forEach(function(column) {
                _this.logger.log("onColumnEvent-> processing " + colEvent.type + " actualWidth = " + column.getActualWidth());
                var columnWidths = [{ key: column.getColId(), newWidth: column.getActualWidth() }];
                _this.columnModel.setColumnWidths(columnWidths, false, resizedEvent_1.finished, "alignedGridChanged");
              });
              break;
          }
          var gridBodyCon = this.ctrlsService.getGridBodyCtrl();
          var isVerticalScrollShowing2 = gridBodyCon.isVerticalScrollShowing();
          var alignedGrids = this.gridOptionsWrapper.getAlignedGrids();
          if (alignedGrids) {
            alignedGrids.forEach(function(grid) {
              if (grid.api) {
                grid.api.setAlwaysShowVerticalScroll(isVerticalScrollShowing2);
              }
            });
          }
        };
        __decorate$1K([
          Autowired("columnModel")
        ], AlignedGridsService2.prototype, "columnModel", void 0);
        __decorate$1K([
          Autowired("ctrlsService")
        ], AlignedGridsService2.prototype, "ctrlsService", void 0);
        __decorate$1K([
          __param$7(0, Qualifier("loggerFactory"))
        ], AlignedGridsService2.prototype, "setBeans", null);
        __decorate$1K([
          PostConstruct
        ], AlignedGridsService2.prototype, "init", null);
        AlignedGridsService2 = __decorate$1K([
          Bean3("alignedGridsService")
        ], AlignedGridsService2);
        return AlignedGridsService2;
      }(BeanStub)
    );
    var __extends$1X = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1L = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var AgComponentUtils = (
      /** @class */
      function(_super) {
        __extends$1X(AgComponentUtils2, _super);
        function AgComponentUtils2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        AgComponentUtils2.prototype.adaptFunction = function(propertyName, jsCompFunc) {
          var metadata = this.componentMetadataProvider.retrieve(propertyName);
          if (metadata && metadata.functionAdapter) {
            return metadata.functionAdapter(jsCompFunc);
          }
          return null;
        };
        AgComponentUtils2.prototype.adaptCellRendererFunction = function(callback) {
          var Adapter = (
            /** @class */
            function() {
              function Adapter2() {
              }
              Adapter2.prototype.refresh = function(params) {
                return false;
              };
              Adapter2.prototype.getGui = function() {
                var callbackResult = callback(this.params);
                var type = typeof callbackResult;
                if (type === "string" || type === "number" || type === "boolean") {
                  return loadTemplate("<span>" + callbackResult + "</span>");
                }
                if (callbackResult == null) {
                  return loadTemplate("<span></span>");
                }
                return callbackResult;
              };
              Adapter2.prototype.init = function(params) {
                this.params = params;
              };
              return Adapter2;
            }()
          );
          return Adapter;
        };
        AgComponentUtils2.prototype.doesImplementIComponent = function(candidate) {
          if (!candidate) {
            return false;
          }
          return candidate.prototype && "getGui" in candidate.prototype;
        };
        __decorate$1L([
          Autowired("componentMetadataProvider")
        ], AgComponentUtils2.prototype, "componentMetadataProvider", void 0);
        AgComponentUtils2 = __decorate$1L([
          Bean3("agComponentUtils")
        ], AgComponentUtils2);
        return AgComponentUtils2;
      }(BeanStub)
    );
    var __extends$1Y = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1M = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var ComponentMetadataProvider = (
      /** @class */
      function(_super) {
        __extends$1Y(ComponentMetadataProvider2, _super);
        function ComponentMetadataProvider2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        ComponentMetadataProvider2.prototype.postConstruct = function() {
          this.componentMetaData = {
            dateComponent: {
              mandatoryMethodList: ["getDate", "setDate"],
              optionalMethodList: ["afterGuiAttached", "setInputPlaceholder", "setInputAriaLabel"]
            },
            detailCellRenderer: {
              mandatoryMethodList: [],
              optionalMethodList: ["refresh"],
              functionAdapter: this.agComponentUtils.adaptCellRendererFunction.bind(this.agComponentUtils)
            },
            headerComponent: {
              mandatoryMethodList: [],
              optionalMethodList: ["refresh"]
            },
            headerGroupComponent: {
              mandatoryMethodList: [],
              optionalMethodList: []
            },
            loadingCellRenderer: {
              mandatoryMethodList: [],
              optionalMethodList: []
            },
            loadingOverlayComponent: {
              mandatoryMethodList: [],
              optionalMethodList: []
            },
            noRowsOverlayComponent: {
              mandatoryMethodList: [],
              optionalMethodList: []
            },
            floatingFilterComponent: {
              mandatoryMethodList: ["onParentModelChanged"],
              optionalMethodList: ["afterGuiAttached"]
            },
            floatingFilterWrapperComponent: {
              mandatoryMethodList: [],
              optionalMethodList: []
            },
            cellRenderer: {
              mandatoryMethodList: [],
              optionalMethodList: ["refresh", "afterGuiAttached"],
              functionAdapter: this.agComponentUtils.adaptCellRendererFunction.bind(this.agComponentUtils)
            },
            cellEditor: {
              mandatoryMethodList: ["getValue"],
              optionalMethodList: ["isPopup", "isCancelBeforeStart", "isCancelAfterEnd", "getPopupPosition", "focusIn", "focusOut", "afterGuiAttached"]
            },
            innerRenderer: {
              mandatoryMethodList: [],
              optionalMethodList: ["afterGuiAttached"],
              functionAdapter: this.agComponentUtils.adaptCellRendererFunction.bind(this.agComponentUtils)
            },
            fullWidthCellRenderer: {
              mandatoryMethodList: [],
              optionalMethodList: ["refresh", "afterGuiAttached"],
              functionAdapter: this.agComponentUtils.adaptCellRendererFunction.bind(this.agComponentUtils)
            },
            pinnedRowCellRenderer: {
              mandatoryMethodList: [],
              optionalMethodList: ["refresh", "afterGuiAttached"],
              functionAdapter: this.agComponentUtils.adaptCellRendererFunction.bind(this.agComponentUtils)
            },
            groupRowRenderer: {
              mandatoryMethodList: [],
              optionalMethodList: ["afterGuiAttached"],
              functionAdapter: this.agComponentUtils.adaptCellRendererFunction.bind(this.agComponentUtils)
            },
            filter: {
              mandatoryMethodList: ["isFilterActive", "doesFilterPass", "getModel", "setModel"],
              optionalMethodList: ["afterGuiAttached", "onNewRowsLoaded", "getModelAsString", "onFloatingFilterChanged"]
            },
            filterComponent: {
              mandatoryMethodList: ["isFilterActive", "doesFilterPass", "getModel", "setModel"],
              optionalMethodList: ["afterGuiAttached", "onNewRowsLoaded", "getModelAsString", "onFloatingFilterChanged"]
            },
            statusPanel: {
              mandatoryMethodList: [],
              optionalMethodList: ["afterGuiAttached"]
            },
            toolPanel: {
              mandatoryMethodList: [],
              optionalMethodList: ["refresh", "afterGuiAttached"]
            },
            tooltipComponent: {
              mandatoryMethodList: [],
              optionalMethodList: []
            }
          };
        };
        ComponentMetadataProvider2.prototype.retrieve = function(name) {
          return this.componentMetaData[name];
        };
        __decorate$1M([
          Autowired("agComponentUtils")
        ], ComponentMetadataProvider2.prototype, "agComponentUtils", void 0);
        __decorate$1M([
          PostConstruct
        ], ComponentMetadataProvider2.prototype, "postConstruct", null);
        ComponentMetadataProvider2 = __decorate$1M([
          Bean3("componentMetadataProvider")
        ], ComponentMetadataProvider2);
        return ComponentMetadataProvider2;
      }(BeanStub)
    );
    var __extends$1Z = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1N = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var MAT_GRID_SIZE = 8;
    var BASE_GRID_SIZE = 4;
    var BALHAM_GRID_SIZE = 4;
    var ALPINE_GRID_SIZE = 6;
    var HARD_CODED_SIZES = {
      // this item is required for custom themes
      "ag-theme-custom": {
        headerHeight: 25,
        headerCellMinWidth: 24,
        listItemHeight: BASE_GRID_SIZE * 5,
        rowHeight: 25,
        chartMenuPanelWidth: 220
      },
      "ag-theme-material": {
        headerHeight: MAT_GRID_SIZE * 7,
        headerCellMinWidth: 48,
        listItemHeight: MAT_GRID_SIZE * 4,
        rowHeight: MAT_GRID_SIZE * 6,
        chartMenuPanelWidth: 240
      },
      "ag-theme-balham": {
        headerHeight: BALHAM_GRID_SIZE * 8,
        headerCellMinWidth: 24,
        listItemHeight: BALHAM_GRID_SIZE * 6,
        rowHeight: BALHAM_GRID_SIZE * 7,
        chartMenuPanelWidth: 220
      },
      "ag-theme-alpine": {
        headerHeight: ALPINE_GRID_SIZE * 8,
        headerCellMinWidth: 36,
        listItemHeight: ALPINE_GRID_SIZE * 4,
        rowHeight: ALPINE_GRID_SIZE * 7,
        chartMenuPanelWidth: 240
      }
    };
    var SASS_PROPERTY_BUILDER = {
      headerHeight: ["ag-header-row"],
      headerCellMinWidth: ["ag-header-cell"],
      listItemHeight: ["ag-virtual-list-item"],
      rowHeight: ["ag-row"],
      chartMenuPanelWidth: ["ag-chart-docked-container"]
    };
    var CALCULATED_SIZES = {};
    var Environment = (
      /** @class */
      function(_super) {
        __extends$1Z(Environment2, _super);
        function Environment2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        Environment2.prototype.getSassVariable = function(theme, key) {
          var useTheme = "ag-theme-" + (theme.match("material") ? "material" : theme.match("balham") ? "balham" : theme.match("alpine") ? "alpine" : "custom");
          var defaultValue = HARD_CODED_SIZES[useTheme][key];
          var calculatedValue = 0;
          if (!CALCULATED_SIZES[theme]) {
            CALCULATED_SIZES[theme] = {};
          }
          var size = CALCULATED_SIZES[theme][key];
          if (size != null) {
            return size;
          }
          if (SASS_PROPERTY_BUILDER[key]) {
            var classList = SASS_PROPERTY_BUILDER[key];
            var div = document.createElement("div");
            addCssClass(div, theme);
            div.style.position = "absolute";
            var el = classList.reduce(function(prevEl, currentClass) {
              var currentDiv = document.createElement("div");
              currentDiv.style.position = "static";
              addCssClass(currentDiv, currentClass);
              prevEl.appendChild(currentDiv);
              return currentDiv;
            }, div);
            if (document.body) {
              document.body.appendChild(div);
              var sizeName = key.toLowerCase().indexOf("height") !== -1 ? "height" : "width";
              calculatedValue = parseInt(window.getComputedStyle(el)[sizeName], 10);
              document.body.removeChild(div);
            }
          }
          CALCULATED_SIZES[theme][key] = calculatedValue || defaultValue;
          return CALCULATED_SIZES[theme][key];
        };
        Environment2.prototype.isThemeDark = function() {
          var theme = this.getTheme().theme;
          return !!theme && theme.indexOf("dark") >= 0;
        };
        Environment2.prototype.chartMenuPanelWidth = function() {
          var theme = this.getTheme().themeFamily;
          return this.getSassVariable(theme, "chartMenuPanelWidth");
        };
        Environment2.prototype.getTheme = function() {
          var reg = /\bag-(material|(?:theme-([\w\-]*)))\b/;
          var el = this.eGridDiv;
          var themeMatch = null;
          while (el) {
            themeMatch = reg.exec(el.className);
            if (!themeMatch) {
              el = el.parentElement || void 0;
            } else {
              break;
            }
          }
          if (!themeMatch) {
            return {};
          }
          var theme = themeMatch[0];
          var usingOldTheme = themeMatch[2] === void 0;
          if (usingOldTheme) {
            var newTheme_1 = theme.replace("ag-", "ag-theme-");
            doOnce(function() {
              return console.warn("AG Grid: As of v19 old theme are no longer provided. Please replace " + theme + " with " + newTheme_1 + ".");
            }, "using-old-theme");
          }
          return { theme, el, themeFamily: theme.replace(/-dark$/, "") };
        };
        __decorate$1N([
          Autowired("eGridDiv")
        ], Environment2.prototype, "eGridDiv", void 0);
        Environment2 = __decorate$1N([
          Bean3("environment")
        ], Environment2);
        return Environment2;
      }(BeanStub)
    );
    var __extends$1_ = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1O = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var AnimationFrameService = (
      /** @class */
      function(_super) {
        __extends$1_(AnimationFrameService2, _super);
        function AnimationFrameService2() {
          var _this = _super !== null && _super.apply(this, arguments) || this;
          _this.createTasksP1 = { list: [], sorted: false };
          _this.createTasksP2 = { list: [], sorted: false };
          _this.destroyTasks = [];
          _this.ticking = false;
          _this.scrollGoingDown = true;
          _this.lastScrollTop = 0;
          _this.taskCount = 0;
          _this.cancelledTasks = /* @__PURE__ */ new Set();
          return _this;
        }
        AnimationFrameService2.prototype.setScrollTop = function(scrollTop) {
          this.scrollGoingDown = scrollTop > this.lastScrollTop;
          this.lastScrollTop = scrollTop;
        };
        AnimationFrameService2.prototype.init = function() {
          this.useAnimationFrame = !this.gridOptionsWrapper.isSuppressAnimationFrame();
        };
        AnimationFrameService2.prototype.isOn = function() {
          return this.useAnimationFrame;
        };
        AnimationFrameService2.prototype.verifyAnimationFrameOn = function(methodName) {
          if (this.useAnimationFrame === false) {
            console.warn("AG Grid: AnimationFrameService." + methodName + " called but animation frames are off");
          }
        };
        AnimationFrameService2.prototype.createTask = function(task, index, list) {
          this.verifyAnimationFrameOn(list);
          var taskItem = { task, index, createOrder: ++this.taskCount };
          this.addTaskToList(this[list], taskItem);
          this.schedule();
        };
        AnimationFrameService2.prototype.cancelTask = function(task) {
          this.cancelledTasks.add(task);
        };
        AnimationFrameService2.prototype.addTaskToList = function(taskList, task) {
          taskList.list.push(task);
          taskList.sorted = false;
        };
        AnimationFrameService2.prototype.sortTaskList = function(taskList) {
          if (taskList.sorted) {
            return;
          }
          var sortDirection = this.scrollGoingDown ? 1 : -1;
          taskList.list.sort(function(a, b) {
            return a.index !== b.index ? sortDirection * (b.index - a.index) : b.createOrder - a.createOrder;
          });
          taskList.sorted = true;
        };
        AnimationFrameService2.prototype.addDestroyTask = function(task) {
          this.verifyAnimationFrameOn("createTasksP3");
          this.destroyTasks.push(task);
          this.schedule();
        };
        AnimationFrameService2.prototype.executeFrame = function(millis) {
          this.verifyAnimationFrameOn("executeFrame");
          var p1TaskList = this.createTasksP1;
          var p1Tasks = p1TaskList.list;
          var p2TaskList = this.createTasksP2;
          var p2Tasks = p2TaskList.list;
          var destroyTasks = this.destroyTasks;
          var frameStart = new Date().getTime();
          var duration = new Date().getTime() - frameStart;
          var noMaxMillis = millis <= 0;
          var gridBodyCon = this.ctrlsService.getGridBodyCtrl();
          while (noMaxMillis || duration < millis) {
            var gridBodyDidSomething = gridBodyCon.getScrollFeature().executeAnimationFrameScroll();
            if (!gridBodyDidSomething) {
              var task = void 0;
              if (p1Tasks.length) {
                this.sortTaskList(p1TaskList);
                task = p1Tasks.pop().task;
              } else if (p2Tasks.length) {
                this.sortTaskList(p2TaskList);
                task = p2Tasks.pop().task;
              } else if (destroyTasks.length) {
                task = destroyTasks.pop();
              } else {
                this.cancelledTasks.clear();
                break;
              }
              if (!this.cancelledTasks.has(task)) {
                task();
              }
            }
            duration = new Date().getTime() - frameStart;
          }
          if (p1Tasks.length || p2Tasks.length || destroyTasks.length) {
            this.requestFrame();
          } else {
            this.stopTicking();
          }
        };
        AnimationFrameService2.prototype.stopTicking = function() {
          this.ticking = false;
        };
        AnimationFrameService2.prototype.flushAllFrames = function() {
          if (!this.useAnimationFrame) {
            return;
          }
          this.executeFrame(-1);
        };
        AnimationFrameService2.prototype.schedule = function() {
          if (!this.useAnimationFrame) {
            return;
          }
          if (!this.ticking) {
            this.ticking = true;
            this.requestFrame();
          }
        };
        AnimationFrameService2.prototype.requestFrame = function() {
          var callback = this.executeFrame.bind(this, 60);
          if (window.requestAnimationFrame) {
            window.requestAnimationFrame(callback);
          } else if (window.webkitRequestAnimationFrame) {
            window.webkitRequestAnimationFrame(callback);
          } else {
            window.setTimeout(callback, 0);
          }
        };
        AnimationFrameService2.prototype.isQueueEmpty = function() {
          return !this.ticking;
        };
        AnimationFrameService2.prototype.debounce = function(func) {
          var _this = this;
          var pending = false;
          return function() {
            if (!_this.isOn()) {
              _this.getFrameworkOverrides().setTimeout(func, 0);
              return;
            }
            if (pending) {
              return;
            }
            pending = true;
            _this.addDestroyTask(function() {
              pending = false;
              func();
            });
          };
        };
        __decorate$1O([
          Autowired("ctrlsService")
        ], AnimationFrameService2.prototype, "ctrlsService", void 0);
        __decorate$1O([
          PostConstruct
        ], AnimationFrameService2.prototype, "init", null);
        AnimationFrameService2 = __decorate$1O([
          Bean3("animationFrameService")
        ], AnimationFrameService2);
        return AnimationFrameService2;
      }(BeanStub)
    );
    var __extends$1$ = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __assign$b = function() {
      __assign$b = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign$b.apply(this, arguments);
    };
    var __decorate$1P = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var NavigationService = (
      /** @class */
      function(_super) {
        __extends$1$(NavigationService2, _super);
        function NavigationService2() {
          var _this = _super !== null && _super.apply(this, arguments) || this;
          _this.timeLastPageEventProcessed = 0;
          return _this;
        }
        NavigationService2.prototype.postConstruct = function() {
          var _this = this;
          this.ctrlsService.whenReady(function(p) {
            _this.gridBodyCon = p.gridBodyCtrl;
          });
        };
        NavigationService2.prototype.handlePageScrollingKey = function(event) {
          var key = event.which || event.keyCode;
          var alt = event.altKey;
          var ctrl = event.ctrlKey || event.metaKey;
          var currentCell = this.mouseEventService.getCellPositionForEvent(event);
          if (!currentCell) {
            return false;
          }
          var processed = false;
          switch (key) {
            case KeyCode.PAGE_HOME:
            case KeyCode.PAGE_END:
              if (!ctrl && !alt) {
                this.onHomeOrEndKey(key);
                processed = true;
              }
              break;
            case KeyCode.LEFT:
            case KeyCode.RIGHT:
              if (ctrl && !alt) {
                this.onCtrlLeftOrRight(key, currentCell);
                processed = true;
              }
              break;
            case KeyCode.UP:
            case KeyCode.DOWN:
              if (ctrl && !alt) {
                this.onCtrlUpOrDown(key, currentCell);
                processed = true;
              }
              break;
            case KeyCode.PAGE_DOWN:
              if (!ctrl && !alt) {
                this.onPageDown(currentCell);
                processed = true;
              }
              break;
            case KeyCode.PAGE_UP:
              if (!ctrl && !alt) {
                this.onPageUp(currentCell);
                processed = true;
              }
              break;
          }
          if (processed) {
            event.preventDefault();
          }
          return processed;
        };
        NavigationService2.prototype.isTimeSinceLastPageEventToRecent = function() {
          var now = new Date().getTime();
          var diff = now - this.timeLastPageEventProcessed;
          return diff < 100;
        };
        NavigationService2.prototype.setTimeLastPageEventProcessed = function() {
          this.timeLastPageEventProcessed = new Date().getTime();
        };
        NavigationService2.prototype.navigateTo = function(navigateParams) {
          var scrollIndex = navigateParams.scrollIndex, scrollType = navigateParams.scrollType, scrollColumn = navigateParams.scrollColumn, focusIndex = navigateParams.focusIndex, focusColumn = navigateParams.focusColumn;
          if (exists(scrollColumn) && !scrollColumn.isPinned()) {
            this.gridBodyCon.getScrollFeature().ensureColumnVisible(scrollColumn);
          }
          if (exists(scrollIndex)) {
            this.gridBodyCon.getScrollFeature().ensureIndexVisible(scrollIndex, scrollType);
          }
          this.animationFrameService.flushAllFrames();
          this.focusService.setFocusedCell(focusIndex, focusColumn, null, true);
          if (this.rangeService) {
            var cellPosition = { rowIndex: focusIndex, rowPinned: null, column: focusColumn };
            this.rangeService.setRangeToCell(cellPosition);
          }
        };
        NavigationService2.prototype.onPageDown = function(gridCell) {
          if (this.isTimeSinceLastPageEventToRecent()) {
            return;
          }
          var gridBodyCon = this.ctrlsService.getGridBodyCtrl();
          var scrollPosition = gridBodyCon.getScrollFeature().getVScrollPosition();
          var scrollbarWidth = this.gridOptionsWrapper.getScrollbarWidth();
          var pixelsInOnePage = scrollPosition.bottom - scrollPosition.top;
          if (this.ctrlsService.getCenterRowContainerCtrl().isHorizontalScrollShowing()) {
            pixelsInOnePage -= scrollbarWidth;
          }
          var pagingPixelOffset = this.paginationProxy.getPixelOffset();
          var currentPageBottomPixel = scrollPosition.top + pixelsInOnePage;
          var currentPageBottomRow = this.paginationProxy.getRowIndexAtPixel(currentPageBottomPixel + pagingPixelOffset);
          var scrollIndex = currentPageBottomRow;
          var currentCellPixel = this.paginationProxy.getRow(gridCell.rowIndex).rowTop;
          var nextCellPixel = currentCellPixel + pixelsInOnePage - pagingPixelOffset;
          var focusIndex = this.paginationProxy.getRowIndexAtPixel(nextCellPixel + pagingPixelOffset);
          var pageLastRow = this.paginationProxy.getPageLastRow();
          if (focusIndex > pageLastRow) {
            focusIndex = pageLastRow;
          }
          if (scrollIndex > pageLastRow) {
            scrollIndex = pageLastRow;
          }
          this.navigateTo({
            scrollIndex,
            scrollType: "top",
            scrollColumn: null,
            focusIndex,
            focusColumn: gridCell.column
          });
          this.setTimeLastPageEventProcessed();
        };
        NavigationService2.prototype.onPageUp = function(gridCell) {
          if (this.isTimeSinceLastPageEventToRecent()) {
            return;
          }
          var gridBodyCon = this.ctrlsService.getGridBodyCtrl();
          var scrollPosition = gridBodyCon.getScrollFeature().getVScrollPosition();
          var scrollbarWidth = this.gridOptionsWrapper.getScrollbarWidth();
          var pixelsInOnePage = scrollPosition.bottom - scrollPosition.top;
          if (this.ctrlsService.getCenterRowContainerCtrl().isHorizontalScrollShowing()) {
            pixelsInOnePage -= scrollbarWidth;
          }
          var pagingPixelOffset = this.paginationProxy.getPixelOffset();
          var currentPageTopPixel = scrollPosition.top;
          var currentPageTopRow = this.paginationProxy.getRowIndexAtPixel(currentPageTopPixel + pagingPixelOffset);
          var scrollIndex = currentPageTopRow;
          var currentRowNode = this.paginationProxy.getRow(gridCell.rowIndex);
          var nextCellPixel = currentRowNode.rowTop + currentRowNode.rowHeight - pixelsInOnePage - pagingPixelOffset;
          var focusIndex = this.paginationProxy.getRowIndexAtPixel(nextCellPixel + pagingPixelOffset);
          var firstRow = this.paginationProxy.getPageFirstRow();
          if (focusIndex < firstRow) {
            focusIndex = firstRow;
          }
          if (scrollIndex < firstRow) {
            scrollIndex = firstRow;
          }
          this.navigateTo({
            scrollIndex,
            scrollType: "bottom",
            scrollColumn: null,
            focusIndex,
            focusColumn: gridCell.column
          });
          this.setTimeLastPageEventProcessed();
        };
        NavigationService2.prototype.getIndexToFocus = function(indexToScrollTo, isDown) {
          var indexToFocus = indexToScrollTo;
          if (isDown) {
            var node = this.paginationProxy.getRow(indexToScrollTo);
            if (node && node.stub) {
              indexToFocus -= 1;
            }
          }
          return indexToFocus;
        };
        NavigationService2.prototype.onCtrlUpOrDown = function(key, gridCell) {
          var upKey = key === KeyCode.UP;
          var rowIndexToScrollTo = upKey ? this.paginationProxy.getPageFirstRow() : this.paginationProxy.getPageLastRow();
          this.navigateTo({
            scrollIndex: rowIndexToScrollTo,
            scrollType: null,
            scrollColumn: gridCell.column,
            focusIndex: this.getIndexToFocus(rowIndexToScrollTo, !upKey),
            focusColumn: gridCell.column
          });
        };
        NavigationService2.prototype.onCtrlLeftOrRight = function(key, gridCell) {
          var leftKey = key === KeyCode.LEFT;
          var allColumns = this.columnModel.getAllDisplayedColumns();
          var isRtl = this.gridOptionsWrapper.isEnableRtl();
          var columnToSelect = leftKey !== isRtl ? allColumns[0] : last(allColumns);
          this.navigateTo({
            scrollIndex: gridCell.rowIndex,
            scrollType: null,
            scrollColumn: columnToSelect,
            focusIndex: gridCell.rowIndex,
            focusColumn: columnToSelect
          });
        };
        NavigationService2.prototype.onHomeOrEndKey = function(key) {
          var homeKey = key === KeyCode.PAGE_HOME;
          var allColumns = this.columnModel.getAllDisplayedColumns();
          var columnToSelect = homeKey ? allColumns[0] : last(allColumns);
          var scrollIndex = homeKey ? this.paginationProxy.getPageFirstRow() : this.paginationProxy.getPageLastRow();
          this.navigateTo({
            scrollIndex,
            scrollType: null,
            scrollColumn: columnToSelect,
            focusIndex: this.getIndexToFocus(scrollIndex, !homeKey),
            focusColumn: columnToSelect
          });
        };
        NavigationService2.prototype.onTabKeyDown = function(previous, keyboardEvent) {
          var backwards = keyboardEvent.shiftKey;
          var movedToNextCell = this.tabToNextCellCommon(previous, backwards);
          if (movedToNextCell) {
            keyboardEvent.preventDefault();
            return;
          }
          if (backwards) {
            var _a2 = previous.getRowPosition(), rowIndex = _a2.rowIndex, rowPinned = _a2.rowPinned;
            var firstRow = rowPinned ? rowIndex === 0 : rowIndex === this.paginationProxy.getPageFirstRow();
            if (firstRow) {
              keyboardEvent.preventDefault();
              var headerRowIndex = this.headerNavigationService.getHeaderRowCount() - 1;
              var column = last(this.columnModel.getAllDisplayedColumns());
              this.focusService.focusHeaderPosition({
                headerPosition: { headerRowIndex, column },
                event: keyboardEvent
              });
            }
          } else {
            if (previous instanceof CellCtrl) {
              previous.focusCell(true);
            }
            if (this.focusService.focusNextGridCoreContainer(false)) {
              keyboardEvent.preventDefault();
            }
          }
        };
        NavigationService2.prototype.tabToNextCell = function(backwards) {
          var focusedCell = this.focusService.getFocusedCell();
          if (!focusedCell) {
            return false;
          }
          var cellOrRow = this.getCellByPosition(focusedCell);
          if (!cellOrRow) {
            cellOrRow = this.rowRenderer.getRowByPosition(focusedCell);
            if (!cellOrRow || !cellOrRow.isFullWidth()) {
              return false;
            }
          }
          return this.tabToNextCellCommon(cellOrRow, backwards);
        };
        NavigationService2.prototype.tabToNextCellCommon = function(previous, backwards) {
          var editing = previous.isEditing();
          if (!editing && previous instanceof CellCtrl) {
            var cell = previous;
            var row = cell.getRowCtrl();
            if (row) {
              editing = row.isEditing();
            }
          }
          var res;
          if (editing) {
            if (this.gridOptionsWrapper.isFullRowEdit()) {
              res = this.moveToNextEditingRow(previous, backwards);
            } else {
              res = this.moveToNextEditingCell(previous, backwards);
            }
          } else {
            res = this.moveToNextCellNotEditing(previous, backwards);
          }
          return res || !!this.focusService.getFocusedHeader();
        };
        NavigationService2.prototype.moveToNextEditingCell = function(previousCell, backwards) {
          var previousPos = previousCell.getCellPosition();
          previousCell.stopEditing();
          var nextCell = this.findNextCellToFocusOn(previousPos, backwards, true);
          if (nextCell == null) {
            return false;
          }
          nextCell.startEditing(null, null, true);
          nextCell.focusCell(false);
          return true;
        };
        NavigationService2.prototype.moveToNextEditingRow = function(previousCell, backwards) {
          var previousPos = previousCell.getCellPosition();
          var nextCell = this.findNextCellToFocusOn(previousPos, backwards, true);
          if (nextCell == null) {
            return false;
          }
          var nextPos = nextCell.getCellPosition();
          var previousEditable = this.isCellEditable(previousPos);
          var nextEditable = this.isCellEditable(nextPos);
          var rowsMatch = nextPos && previousPos.rowIndex === nextPos.rowIndex && previousPos.rowPinned === nextPos.rowPinned;
          if (previousEditable) {
            previousCell.setFocusOutOnEditor();
          }
          if (!rowsMatch) {
            var pRow = previousCell.getRowCtrl();
            pRow.stopEditing();
            var nRow = nextCell.getRowCtrl();
            nRow.startRowEditing();
          }
          if (nextEditable) {
            nextCell.setFocusInOnEditor();
            nextCell.focusCell();
          } else {
            nextCell.focusCell(true);
          }
          return true;
        };
        NavigationService2.prototype.moveToNextCellNotEditing = function(previousCell, backwards) {
          var displayedColumns = this.columnModel.getAllDisplayedColumns();
          var cellPos;
          if (previousCell instanceof RowCtrl) {
            cellPos = __assign$b(__assign$b({}, previousCell.getRowPosition()), { column: backwards ? displayedColumns[0] : last(displayedColumns) });
          } else {
            cellPos = previousCell.getCellPosition();
          }
          var nextCell = this.findNextCellToFocusOn(cellPos, backwards, false);
          if (nextCell instanceof CellCtrl) {
            nextCell.focusCell(true);
          } else if (nextCell) {
            return this.tryToFocusFullWidthRow(nextCell.getRowPosition(), backwards);
          }
          return exists(nextCell);
        };
        NavigationService2.prototype.findNextCellToFocusOn = function(previousPosition, backwards, startEditing) {
          var nextPosition = previousPosition;
          while (true) {
            if (!backwards) {
              nextPosition = this.getLastCellOfColSpan(nextPosition);
            }
            nextPosition = this.cellNavigationService.getNextTabbedCell(nextPosition, backwards);
            var userFunc = this.gridOptionsWrapper.getTabToNextCellFunc();
            if (exists(userFunc)) {
              var params = {
                backwards,
                editing: startEditing,
                previousCellPosition: previousPosition,
                nextCellPosition: nextPosition ? nextPosition : null,
                api: this.gridOptionsWrapper.getApi(),
                columnApi: this.gridOptionsWrapper.getColumnApi()
              };
              var userCell = userFunc(params);
              if (exists(userCell)) {
                if (userCell.floating) {
                  doOnce(function() {
                    console.warn("AG Grid: tabToNextCellFunc return type should have attributes: rowIndex, rowPinned, column. However you had 'floating', maybe you meant 'rowPinned'?");
                  }, "no floating in userCell");
                  userCell.rowPinned = userCell.floating;
                }
                nextPosition = {
                  rowIndex: userCell.rowIndex,
                  column: userCell.column,
                  rowPinned: userCell.rowPinned
                };
              } else {
                nextPosition = null;
              }
            }
            if (!nextPosition) {
              return null;
            }
            if (nextPosition.rowIndex < 0) {
              var headerLen = this.headerNavigationService.getHeaderRowCount();
              this.focusService.focusHeaderPosition({
                headerPosition: {
                  headerRowIndex: headerLen + nextPosition.rowIndex,
                  column: nextPosition.column
                }
              });
              return null;
            }
            var fullRowEdit = this.gridOptionsWrapper.isFullRowEdit();
            if (startEditing && !fullRowEdit) {
              var cellIsEditable = this.isCellEditable(nextPosition);
              if (!cellIsEditable) {
                continue;
              }
            }
            this.ensureCellVisible(nextPosition);
            var nextCell = this.getCellByPosition(nextPosition);
            if (!nextCell) {
              var row = this.rowRenderer.getRowByPosition(nextPosition);
              if (!row || !row.isFullWidth()) {
                continue;
              } else {
                return row;
              }
            }
            if (nextCell.isSuppressNavigable()) {
              continue;
            }
            if (this.rangeService) {
              this.rangeService.setRangeToCell(nextPosition);
            }
            return nextCell;
          }
        };
        NavigationService2.prototype.isCellEditable = function(cell) {
          var rowNode = this.lookupRowNodeForCell(cell);
          if (rowNode) {
            return cell.column.isCellEditable(rowNode);
          }
          return false;
        };
        NavigationService2.prototype.getCellByPosition = function(cellPosition) {
          var rowCtrl = this.rowRenderer.getRowByPosition(cellPosition);
          if (!rowCtrl) {
            return null;
          }
          return rowCtrl.getCellCtrl(cellPosition.column);
        };
        NavigationService2.prototype.lookupRowNodeForCell = function(cell) {
          if (cell.rowPinned === Constants.PINNED_TOP) {
            return this.pinnedRowModel.getPinnedTopRow(cell.rowIndex);
          }
          if (cell.rowPinned === Constants.PINNED_BOTTOM) {
            return this.pinnedRowModel.getPinnedBottomRow(cell.rowIndex);
          }
          return this.paginationProxy.getRow(cell.rowIndex);
        };
        NavigationService2.prototype.navigateToNextCell = function(event, key, currentCell, allowUserOverride) {
          var nextCell = currentCell;
          var hitEdgeOfGrid = false;
          while (nextCell && (nextCell === currentCell || !this.isValidNavigateCell(nextCell))) {
            if (this.gridOptionsWrapper.isEnableRtl()) {
              if (key === KeyCode.LEFT) {
                nextCell = this.getLastCellOfColSpan(nextCell);
              }
            } else if (key === KeyCode.RIGHT) {
              nextCell = this.getLastCellOfColSpan(nextCell);
            }
            nextCell = this.cellNavigationService.getNextCellToFocus(key, nextCell);
            hitEdgeOfGrid = missing(nextCell);
          }
          if (hitEdgeOfGrid && event && event.keyCode === KeyCode.UP) {
            nextCell = {
              rowIndex: -1,
              rowPinned: null,
              column: currentCell.column
            };
          }
          if (allowUserOverride) {
            var userFunc = this.gridOptionsWrapper.getNavigateToNextCellFunc();
            if (exists(userFunc)) {
              var params = {
                key,
                previousCellPosition: currentCell,
                nextCellPosition: nextCell ? nextCell : null,
                event,
                api: this.gridOptionsWrapper.getApi(),
                columnApi: this.gridOptionsWrapper.getColumnApi()
              };
              var userCell = userFunc(params);
              if (exists(userCell)) {
                if (userCell.floating) {
                  doOnce(function() {
                    console.warn("AG Grid: tabToNextCellFunc return type should have attributes: rowIndex, rowPinned, column. However you had 'floating', maybe you meant 'rowPinned'?");
                  }, "no floating in userCell");
                  userCell.rowPinned = userCell.floating;
                }
                nextCell = {
                  rowPinned: userCell.rowPinned,
                  rowIndex: userCell.rowIndex,
                  column: userCell.column
                };
              } else {
                nextCell = null;
              }
            }
          }
          if (!nextCell) {
            return;
          }
          if (nextCell.rowIndex < 0) {
            var headerLen = this.headerNavigationService.getHeaderRowCount();
            this.focusService.focusHeaderPosition({
              headerPosition: { headerRowIndex: headerLen + nextCell.rowIndex, column: currentCell.column },
              event: event || void 0
            });
            return;
          }
          var normalisedPosition = this.getNormalisedPosition(nextCell);
          if (normalisedPosition) {
            this.focusPosition(normalisedPosition);
          } else {
            this.tryToFocusFullWidthRow(nextCell);
          }
        };
        NavigationService2.prototype.getNormalisedPosition = function(cellPosition) {
          this.ensureCellVisible(cellPosition);
          var cellComp = this.getCellByPosition(cellPosition);
          if (!cellComp) {
            return null;
          }
          cellPosition = cellComp.getCellPosition();
          this.ensureCellVisible(cellPosition);
          return cellPosition;
        };
        NavigationService2.prototype.tryToFocusFullWidthRow = function(position, backwards) {
          if (backwards === void 0) {
            backwards = false;
          }
          var displayedColumns = this.columnModel.getAllDisplayedColumns();
          var rowComp = this.rowRenderer.getRowByPosition(position);
          if (!rowComp || !rowComp.isFullWidth()) {
            return false;
          }
          var cellPosition = {
            rowIndex: position.rowIndex,
            rowPinned: position.rowPinned,
            column: position.column || (backwards ? last(displayedColumns) : displayedColumns[0])
          };
          this.focusPosition(cellPosition);
          return true;
        };
        NavigationService2.prototype.focusPosition = function(cellPosition) {
          this.focusService.setFocusedCell(cellPosition.rowIndex, cellPosition.column, cellPosition.rowPinned, true);
          if (this.rangeService) {
            this.rangeService.setRangeToCell(cellPosition);
          }
        };
        NavigationService2.prototype.isValidNavigateCell = function(cell) {
          var rowNode = this.rowPositionUtils.getRowNode(cell);
          return !!rowNode;
        };
        NavigationService2.prototype.getLastCellOfColSpan = function(cell) {
          var cellCtrl = this.getCellByPosition(cell);
          if (!cellCtrl) {
            return cell;
          }
          var colSpanningList = cellCtrl.getColSpanningList();
          if (colSpanningList.length === 1) {
            return cell;
          }
          return {
            rowIndex: cell.rowIndex,
            column: last(colSpanningList),
            rowPinned: cell.rowPinned
          };
        };
        NavigationService2.prototype.ensureCellVisible = function(gridCell) {
          if (missing(gridCell.rowPinned)) {
            this.gridBodyCon.getScrollFeature().ensureIndexVisible(gridCell.rowIndex);
          }
          if (!gridCell.column.isPinned()) {
            this.gridBodyCon.getScrollFeature().ensureColumnVisible(gridCell.column);
          }
          this.gridBodyCon.getScrollFeature().horizontallyScrollHeaderCenterAndFloatingCenter();
          this.animationFrameService.flushAllFrames();
        };
        __decorate$1P([
          Autowired("mouseEventService")
        ], NavigationService2.prototype, "mouseEventService", void 0);
        __decorate$1P([
          Autowired("paginationProxy")
        ], NavigationService2.prototype, "paginationProxy", void 0);
        __decorate$1P([
          Autowired("focusService")
        ], NavigationService2.prototype, "focusService", void 0);
        __decorate$1P([
          Autowired("animationFrameService")
        ], NavigationService2.prototype, "animationFrameService", void 0);
        __decorate$1P([
          Optional("rangeService")
        ], NavigationService2.prototype, "rangeService", void 0);
        __decorate$1P([
          Autowired("columnModel")
        ], NavigationService2.prototype, "columnModel", void 0);
        __decorate$1P([
          Autowired("ctrlsService")
        ], NavigationService2.prototype, "ctrlsService", void 0);
        __decorate$1P([
          Autowired("rowRenderer")
        ], NavigationService2.prototype, "rowRenderer", void 0);
        __decorate$1P([
          Autowired("headerNavigationService")
        ], NavigationService2.prototype, "headerNavigationService", void 0);
        __decorate$1P([
          Autowired("rowPositionUtils")
        ], NavigationService2.prototype, "rowPositionUtils", void 0);
        __decorate$1P([
          Autowired("cellNavigationService")
        ], NavigationService2.prototype, "cellNavigationService", void 0);
        __decorate$1P([
          Autowired("pinnedRowModel")
        ], NavigationService2.prototype, "pinnedRowModel", void 0);
        __decorate$1P([
          PostConstruct
        ], NavigationService2.prototype, "postConstruct", null);
        NavigationService2 = __decorate$1P([
          Bean3("navigationService")
        ], NavigationService2);
        return NavigationService2;
      }(BeanStub)
    );
    var __extends$20 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1Q = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __param$8 = function(paramIndex, decorator) {
      return function(target, key) {
        decorator(target, key, paramIndex);
      };
    };
    var RowContainerHeightService = (
      /** @class */
      function(_super) {
        __extends$20(RowContainerHeightService2, _super);
        function RowContainerHeightService2() {
          var _this = _super !== null && _super.apply(this, arguments) || this;
          _this.scrollY = 0;
          _this.uiBodyHeight = 0;
          return _this;
        }
        RowContainerHeightService2.prototype.agWire = function(loggerFactory) {
          this.logger = loggerFactory.create("RowContainerHeightService");
        };
        RowContainerHeightService2.prototype.postConstruct = function() {
          this.addManagedListener(this.eventService, Events.EVENT_BODY_HEIGHT_CHANGED, this.updateOffset.bind(this));
          this.maxDivHeight = getMaxDivHeight();
          this.logger.log("maxDivHeight = " + this.maxDivHeight);
        };
        RowContainerHeightService2.prototype.isStretching = function() {
          return this.stretching;
        };
        RowContainerHeightService2.prototype.getDivStretchOffset = function() {
          return this.divStretchOffset;
        };
        RowContainerHeightService2.prototype.updateOffset = function() {
          if (!this.stretching) {
            return;
          }
          var gridBodyCon = this.ctrlsService.getGridBodyCtrl();
          var newScrollY = gridBodyCon.getScrollFeature().getVScrollPosition().top;
          var newBodyHeight = this.getUiBodyHeight();
          var atLeastOneChanged = newScrollY !== this.scrollY || newBodyHeight !== this.uiBodyHeight;
          if (atLeastOneChanged) {
            this.scrollY = newScrollY;
            this.uiBodyHeight = newBodyHeight;
            this.calculateOffset();
          }
        };
        RowContainerHeightService2.prototype.calculateOffset = function() {
          this.setUiContainerHeight(this.maxDivHeight);
          this.pixelsToShave = this.modelHeight - this.uiContainerHeight;
          this.maxScrollY = this.uiContainerHeight - this.uiBodyHeight;
          var scrollPercent = this.scrollY / this.maxScrollY;
          var divStretchOffset = scrollPercent * this.pixelsToShave;
          this.logger.log("Div Stretch Offset = " + divStretchOffset + " (" + this.pixelsToShave + " * " + scrollPercent + ")");
          this.setDivStretchOffset(divStretchOffset);
        };
        RowContainerHeightService2.prototype.setUiContainerHeight = function(height) {
          if (height !== this.uiContainerHeight) {
            this.uiContainerHeight = height;
            this.eventService.dispatchEvent({ type: Events.EVENT_ROW_CONTAINER_HEIGHT_CHANGED });
          }
        };
        RowContainerHeightService2.prototype.clearOffset = function() {
          this.setUiContainerHeight(this.modelHeight);
          this.pixelsToShave = 0;
          this.setDivStretchOffset(0);
        };
        RowContainerHeightService2.prototype.setDivStretchOffset = function(newOffset) {
          var newOffsetFloor = typeof newOffset === "number" ? Math.floor(newOffset) : null;
          if (this.divStretchOffset === newOffsetFloor) {
            return;
          }
          this.divStretchOffset = newOffsetFloor;
          this.eventService.dispatchEvent({ type: Events.EVENT_HEIGHT_SCALE_CHANGED });
        };
        RowContainerHeightService2.prototype.setModelHeight = function(modelHeight) {
          this.modelHeight = modelHeight;
          this.stretching = modelHeight != null && this.maxDivHeight > 0 && modelHeight > this.maxDivHeight;
          if (this.stretching) {
            this.calculateOffset();
          } else {
            this.clearOffset();
          }
        };
        RowContainerHeightService2.prototype.getUiContainerHeight = function() {
          return this.uiContainerHeight;
        };
        RowContainerHeightService2.prototype.getRealPixelPosition = function(modelPixel) {
          return modelPixel - this.divStretchOffset;
        };
        RowContainerHeightService2.prototype.getUiBodyHeight = function() {
          var gridBodyCon = this.ctrlsService.getGridBodyCtrl();
          var pos = gridBodyCon.getScrollFeature().getVScrollPosition();
          return pos.bottom - pos.top;
        };
        RowContainerHeightService2.prototype.getScrollPositionForPixel = function(rowTop) {
          if (this.pixelsToShave <= 0) {
            return rowTop;
          }
          var modelMaxScroll = this.modelHeight - this.getUiBodyHeight();
          var scrollPercent = rowTop / modelMaxScroll;
          var scrollPixel = this.maxScrollY * scrollPercent;
          return scrollPixel;
        };
        __decorate$1Q([
          Autowired("ctrlsService")
        ], RowContainerHeightService2.prototype, "ctrlsService", void 0);
        __decorate$1Q([
          __param$8(0, Qualifier("loggerFactory"))
        ], RowContainerHeightService2.prototype, "agWire", null);
        __decorate$1Q([
          PostConstruct
        ], RowContainerHeightService2.prototype, "postConstruct", null);
        RowContainerHeightService2 = __decorate$1Q([
          Bean3("rowContainerHeightService")
        ], RowContainerHeightService2);
        return RowContainerHeightService2;
      }(BeanStub)
    );
    var __extends$21 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1R = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var SelectableService = (
      /** @class */
      function(_super) {
        __extends$21(SelectableService2, _super);
        function SelectableService2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        SelectableService2.prototype.init = function() {
          this.groupSelectsChildren = this.gridOptionsWrapper.isGroupSelectsChildren();
          this.isRowSelectableFunc = this.gridOptionsWrapper.getIsRowSelectableFunc();
        };
        SelectableService2.prototype.updateSelectableAfterGrouping = function(rowNode) {
          if (this.isRowSelectableFunc) {
            var nextChildrenFunc = function(node) {
              return node.childrenAfterGroup;
            };
            this.recurseDown(rowNode.childrenAfterGroup, nextChildrenFunc);
          }
        };
        SelectableService2.prototype.updateSelectableAfterFiltering = function(rowNode) {
          if (this.isRowSelectableFunc) {
            var nextChildrenFunc = function(node) {
              return node.childrenAfterFilter;
            };
            this.recurseDown(rowNode.childrenAfterGroup, nextChildrenFunc);
          }
        };
        SelectableService2.prototype.recurseDown = function(children, nextChildrenFunc) {
          var _this = this;
          if (!children) {
            return;
          }
          children.forEach(function(child) {
            if (!child.group) {
              return;
            }
            if (child.hasChildren()) {
              _this.recurseDown(nextChildrenFunc(child), nextChildrenFunc);
            }
            var rowSelectable;
            if (_this.groupSelectsChildren) {
              var firstSelectable = find(nextChildrenFunc(child), "selectable", true);
              rowSelectable = exists(firstSelectable);
            } else {
              rowSelectable = _this.isRowSelectableFunc ? _this.isRowSelectableFunc(child) : false;
            }
            child.setRowSelectable(rowSelectable);
          });
        };
        __decorate$1R([
          PostConstruct
        ], SelectableService2.prototype, "init", null);
        SelectableService2 = __decorate$1R([
          Bean3("selectableService")
        ], SelectableService2);
        return SelectableService2;
      }(BeanStub)
    );
    var __extends$22 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1S = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var PaginationComp = (
      /** @class */
      function(_super) {
        __extends$22(PaginationComp2, _super);
        function PaginationComp2() {
          var _this = _super.call(this) || this;
          _this.previousAndFirstButtonsDisabled = false;
          _this.nextButtonDisabled = false;
          _this.lastButtonDisabled = false;
          return _this;
        }
        PaginationComp2.prototype.postConstruct = function() {
          var _this = this;
          var isRtl = this.gridOptionsWrapper.isEnableRtl();
          this.setTemplate(this.getTemplate());
          this.btFirst.insertAdjacentElement("afterbegin", createIconNoSpan(isRtl ? "last" : "first", this.gridOptionsWrapper));
          this.btPrevious.insertAdjacentElement("afterbegin", createIconNoSpan(isRtl ? "next" : "previous", this.gridOptionsWrapper));
          this.btNext.insertAdjacentElement("afterbegin", createIconNoSpan(isRtl ? "previous" : "next", this.gridOptionsWrapper));
          this.btLast.insertAdjacentElement("afterbegin", createIconNoSpan(isRtl ? "first" : "last", this.gridOptionsWrapper));
          var isPaging = this.gridOptionsWrapper.isPagination();
          var paginationPanelEnabled = isPaging && !this.gridOptionsWrapper.isSuppressPaginationPanel();
          if (!paginationPanelEnabled) {
            this.setDisplayed(false);
            return;
          }
          this.addManagedListener(this.eventService, Events.EVENT_PAGINATION_CHANGED, this.onPaginationChanged.bind(this));
          [
            { el: this.btFirst, fn: this.onBtFirst.bind(this) },
            { el: this.btPrevious, fn: this.onBtPrevious.bind(this) },
            { el: this.btNext, fn: this.onBtNext.bind(this) },
            { el: this.btLast, fn: this.onBtLast.bind(this) }
          ].forEach(function(item) {
            var el = item.el, fn = item.fn;
            _this.addManagedListener(el, "click", fn);
            _this.addManagedListener(el, "keydown", function(e) {
              if (e.keyCode === KeyCode.ENTER || e.keyCode === KeyCode.SPACE) {
                e.preventDefault();
                fn();
              }
            });
          });
          this.onPaginationChanged();
        };
        PaginationComp2.prototype.onPaginationChanged = function() {
          this.enableOrDisableButtons();
          this.updateRowLabels();
          this.setCurrentPageLabel();
          this.setTotalLabels();
        };
        PaginationComp2.prototype.onBtFirst = function() {
          if (!this.previousAndFirstButtonsDisabled) {
            this.paginationProxy.goToFirstPage();
          }
        };
        PaginationComp2.prototype.setCurrentPageLabel = function() {
          var pagesExist = this.paginationProxy.getTotalPages() > 0;
          var currentPage = this.paginationProxy.getCurrentPage();
          var toDisplay = pagesExist ? currentPage + 1 : 0;
          this.lbCurrent.innerHTML = this.formatNumber(toDisplay);
        };
        PaginationComp2.prototype.formatNumber = function(value) {
          var userFunc = this.gridOptionsWrapper.getPaginationNumberFormatterFunc();
          if (userFunc) {
            return userFunc({ value });
          }
          return formatNumberCommas(value);
        };
        PaginationComp2.prototype.getTemplate = function() {
          var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
          var strPage = localeTextFunc("page", "Page");
          var strTo = localeTextFunc("to", "to");
          var strOf = localeTextFunc("of", "of");
          var strFirst = localeTextFunc("firstPage", "First Page");
          var strPrevious = localeTextFunc("previousPage", "Previous Page");
          var strNext = localeTextFunc("nextPage", "Next Page");
          var strLast = localeTextFunc("lastPage", "Last Page");
          var compId = this.getCompId();
          return (
            /* html */
            '<div class="ag-paging-panel ag-unselectable" id="ag-' + compId + '">\n                <span class="ag-paging-row-summary-panel" role="status">\n                    <span id="ag-' + compId + '-first-row" ref="lbFirstRowOnPage" class="ag-paging-row-summary-panel-number"></span>\n                    <span id="ag-' + compId + '-to">' + strTo + '</span>\n                    <span id="ag-' + compId + '-last-row" ref="lbLastRowOnPage" class="ag-paging-row-summary-panel-number"></span>\n                    <span id="ag-' + compId + '-of">' + strOf + '</span>\n                    <span id="ag-' + compId + '-row-count" ref="lbRecordCount" class="ag-paging-row-summary-panel-number"></span>\n                </span>\n                <span class="ag-paging-page-summary-panel" role="presentation">\n                    <div ref="btFirst" class="ag-paging-button" role="button" aria-label="' + strFirst + '" tabindex="0"></div>\n                    <div ref="btPrevious" class="ag-paging-button" role="button" aria-label="' + strPrevious + '" tabindex="0"></div>\n                    <span class="ag-paging-description" role="status">\n                        <span id="ag-' + compId + '-start-page">' + strPage + '</span>\n                        <span id="ag-' + compId + '-start-page-number" ref="lbCurrent" class="ag-paging-number"></span>\n                        <span id="ag-' + compId + '-of-page">' + strOf + '</span>\n                        <span id="ag-' + compId + '-of-page-number" ref="lbTotal" class="ag-paging-number"></span>\n                    </span>\n                    <div ref="btNext" class="ag-paging-button" role="button" aria-label="' + strNext + '" tabindex="0"></div>\n                    <div ref="btLast" class="ag-paging-button" role="button" aria-label="' + strLast + '" tabindex="0"></div>\n                </span>\n            </div>'
          );
        };
        PaginationComp2.prototype.onBtNext = function() {
          if (!this.nextButtonDisabled) {
            this.paginationProxy.goToNextPage();
          }
        };
        PaginationComp2.prototype.onBtPrevious = function() {
          if (!this.previousAndFirstButtonsDisabled) {
            this.paginationProxy.goToPreviousPage();
          }
        };
        PaginationComp2.prototype.onBtLast = function() {
          if (!this.lastButtonDisabled) {
            this.paginationProxy.goToLastPage();
          }
        };
        PaginationComp2.prototype.enableOrDisableButtons = function() {
          var currentPage = this.paginationProxy.getCurrentPage();
          var maxRowFound = this.paginationProxy.isLastPageFound();
          var totalPages = this.paginationProxy.getTotalPages();
          this.previousAndFirstButtonsDisabled = currentPage === 0;
          addOrRemoveCssClass(this.btFirst, "ag-disabled", this.previousAndFirstButtonsDisabled);
          setAriaDisabled(this.btFirst, this.previousAndFirstButtonsDisabled);
          addOrRemoveCssClass(this.btPrevious, "ag-disabled", this.previousAndFirstButtonsDisabled);
          setAriaDisabled(this.btPrevious, this.previousAndFirstButtonsDisabled);
          var zeroPagesToDisplay = this.isZeroPagesToDisplay();
          var onLastPage = maxRowFound && currentPage === totalPages - 1;
          this.nextButtonDisabled = onLastPage || zeroPagesToDisplay;
          addOrRemoveCssClass(this.btNext, "ag-disabled", this.nextButtonDisabled);
          setAriaDisabled(this.btNext, this.nextButtonDisabled);
          this.lastButtonDisabled = !maxRowFound || zeroPagesToDisplay || currentPage === totalPages - 1;
          addOrRemoveCssClass(this.btLast, "ag-disabled", this.lastButtonDisabled);
          setAriaDisabled(this.btLast, this.lastButtonDisabled);
        };
        PaginationComp2.prototype.updateRowLabels = function() {
          var currentPage = this.paginationProxy.getCurrentPage();
          var pageSize = this.paginationProxy.getPageSize();
          var maxRowFound = this.paginationProxy.isLastPageFound();
          var rowCount = this.paginationProxy.isLastPageFound() ? this.paginationProxy.getMasterRowCount() : null;
          var startRow;
          var endRow;
          if (this.isZeroPagesToDisplay()) {
            startRow = endRow = 0;
          } else {
            startRow = pageSize * currentPage + 1;
            endRow = startRow + pageSize - 1;
            if (maxRowFound && endRow > rowCount) {
              endRow = rowCount;
            }
          }
          this.lbFirstRowOnPage.innerHTML = this.formatNumber(startRow);
          if (this.rowNodeBlockLoader.isLoading()) {
            this.lbLastRowOnPage.innerHTML = "?";
          } else {
            this.lbLastRowOnPage.innerHTML = this.formatNumber(endRow);
          }
        };
        PaginationComp2.prototype.isZeroPagesToDisplay = function() {
          var maxRowFound = this.paginationProxy.isLastPageFound();
          var totalPages = this.paginationProxy.getTotalPages();
          return maxRowFound && totalPages === 0;
        };
        PaginationComp2.prototype.setTotalLabels = function() {
          var lastPageFound = this.paginationProxy.isLastPageFound();
          var totalPages = this.paginationProxy.getTotalPages();
          var rowCount = lastPageFound ? this.paginationProxy.getMasterRowCount() : null;
          if (rowCount === 1) {
            var firstRow = this.paginationProxy.getRow(0);
            var hiddenGroupRow = firstRow && firstRow.group && !(firstRow.groupData || firstRow.aggData);
            if (hiddenGroupRow) {
              this.setTotalLabelsToZero();
              return;
            }
          }
          if (lastPageFound) {
            this.lbTotal.innerHTML = this.formatNumber(totalPages);
            this.lbRecordCount.innerHTML = this.formatNumber(rowCount);
          } else {
            var moreText = this.gridOptionsWrapper.getLocaleTextFunc()("more", "more");
            this.lbTotal.innerHTML = moreText;
            this.lbRecordCount.innerHTML = moreText;
          }
        };
        PaginationComp2.prototype.setTotalLabelsToZero = function() {
          this.lbFirstRowOnPage.innerHTML = this.formatNumber(0);
          this.lbCurrent.innerHTML = this.formatNumber(0);
          this.lbLastRowOnPage.innerHTML = this.formatNumber(0);
          this.lbTotal.innerHTML = this.formatNumber(0);
          this.lbRecordCount.innerHTML = this.formatNumber(0);
        };
        __decorate$1S([
          Autowired("paginationProxy")
        ], PaginationComp2.prototype, "paginationProxy", void 0);
        __decorate$1S([
          Autowired("rowNodeBlockLoader")
        ], PaginationComp2.prototype, "rowNodeBlockLoader", void 0);
        __decorate$1S([
          RefSelector("btFirst")
        ], PaginationComp2.prototype, "btFirst", void 0);
        __decorate$1S([
          RefSelector("btPrevious")
        ], PaginationComp2.prototype, "btPrevious", void 0);
        __decorate$1S([
          RefSelector("btNext")
        ], PaginationComp2.prototype, "btNext", void 0);
        __decorate$1S([
          RefSelector("btLast")
        ], PaginationComp2.prototype, "btLast", void 0);
        __decorate$1S([
          RefSelector("lbRecordCount")
        ], PaginationComp2.prototype, "lbRecordCount", void 0);
        __decorate$1S([
          RefSelector("lbFirstRowOnPage")
        ], PaginationComp2.prototype, "lbFirstRowOnPage", void 0);
        __decorate$1S([
          RefSelector("lbLastRowOnPage")
        ], PaginationComp2.prototype, "lbLastRowOnPage", void 0);
        __decorate$1S([
          RefSelector("lbCurrent")
        ], PaginationComp2.prototype, "lbCurrent", void 0);
        __decorate$1S([
          RefSelector("lbTotal")
        ], PaginationComp2.prototype, "lbTotal", void 0);
        __decorate$1S([
          PostConstruct
        ], PaginationComp2.prototype, "postConstruct", null);
        return PaginationComp2;
      }(Component)
    );
    var __extends$23 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1T = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var DEBOUNCE_DELAY = 50;
    var ResizeObserverService = (
      /** @class */
      function(_super) {
        __extends$23(ResizeObserverService2, _super);
        function ResizeObserverService2() {
          var _this = _super !== null && _super.apply(this, arguments) || this;
          _this.polyfillFunctions = [];
          return _this;
        }
        ResizeObserverService2.prototype.observeResize = function(element, callback) {
          var _this = this;
          var debouncedCallback = debounce(callback, DEBOUNCE_DELAY);
          var useBrowserResizeObserver = function() {
            var resizeObserver = new window.ResizeObserver(debouncedCallback);
            resizeObserver.observe(element);
            return function() {
              return resizeObserver.disconnect();
            };
          };
          var usePolyfill = function() {
            var widthLastTime = offsetWidth(element);
            var heightLastTime = offsetHeight(element);
            var running = true;
            var periodicallyCheckWidthAndHeight = function() {
              if (running) {
                var newWidth = offsetWidth(element);
                var newHeight = offsetHeight(element);
                var changed = newWidth !== widthLastTime || newHeight !== heightLastTime;
                if (changed) {
                  widthLastTime = newWidth;
                  heightLastTime = newHeight;
                  callback();
                }
                _this.doNextPolyfillTurn(periodicallyCheckWidthAndHeight);
              }
            };
            periodicallyCheckWidthAndHeight();
            return function() {
              return running = false;
            };
          };
          var suppressResize = this.gridOptionsWrapper.isSuppressBrowserResizeObserver();
          var resizeObserverExists = !!window.ResizeObserver;
          if (resizeObserverExists && !suppressResize) {
            return useBrowserResizeObserver();
          } else {
            return usePolyfill();
          }
        };
        ResizeObserverService2.prototype.doNextPolyfillTurn = function(func) {
          this.polyfillFunctions.push(func);
          this.schedulePolyfill();
        };
        ResizeObserverService2.prototype.schedulePolyfill = function() {
          var _this = this;
          if (this.polyfillScheduled) {
            return;
          }
          var executeAllFuncs = function() {
            var funcs = _this.polyfillFunctions;
            _this.polyfillScheduled = false;
            _this.polyfillFunctions = [];
            funcs.forEach(function(f) {
              return f();
            });
          };
          this.polyfillScheduled = true;
          this.getFrameworkOverrides().setTimeout(executeAllFuncs, DEBOUNCE_DELAY);
        };
        ResizeObserverService2 = __decorate$1T([
          Bean3("resizeObserverService")
        ], ResizeObserverService2);
        return ResizeObserverService2;
      }(BeanStub)
    );
    var __extends$24 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1U = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var LoadingType;
    (function(LoadingType2) {
      LoadingType2[LoadingType2["Loading"] = 0] = "Loading";
      LoadingType2[LoadingType2["NoRows"] = 1] = "NoRows";
    })(LoadingType || (LoadingType = {}));
    var OverlayWrapperComponent = (
      /** @class */
      function(_super) {
        __extends$24(OverlayWrapperComponent2, _super);
        function OverlayWrapperComponent2() {
          var _this = _super.call(this, OverlayWrapperComponent2.TEMPLATE) || this;
          _this.inProgress = false;
          _this.destroyRequested = false;
          return _this;
        }
        OverlayWrapperComponent2.prototype.updateLayoutClasses = function(cssClass, params) {
          addOrRemoveCssClass(this.eOverlayWrapper, exports.LayoutCssClasses.AUTO_HEIGHT, params.autoHeight);
          addOrRemoveCssClass(this.eOverlayWrapper, exports.LayoutCssClasses.NORMAL, params.normal);
          addOrRemoveCssClass(this.eOverlayWrapper, exports.LayoutCssClasses.PRINT, params.print);
        };
        OverlayWrapperComponent2.prototype.postConstruct = function() {
          this.createManagedBean(new LayoutFeature(this));
          this.setDisplayed(false);
          this.addManagedListener(this.eventService, Events.EVENT_ROW_DATA_CHANGED, this.onRowDataChanged.bind(this));
          this.addManagedListener(this.eventService, Events.EVENT_ROW_DATA_UPDATED, this.onRowDataChanged.bind(this));
          this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, this.onNewColumnsLoaded.bind(this));
          if (this.gridOptionsWrapper.isRowModelDefault() && !this.gridOptionsWrapper.getRowData()) {
            this.showLoadingOverlay();
          }
          this.gridApi.registerOverlayWrapperComp(this);
        };
        OverlayWrapperComponent2.prototype.setWrapperTypeClass = function(loadingType) {
          addOrRemoveCssClass(this.eOverlayWrapper, "ag-overlay-loading-wrapper", loadingType === LoadingType.Loading);
          addOrRemoveCssClass(this.eOverlayWrapper, "ag-overlay-no-rows-wrapper", loadingType === LoadingType.NoRows);
        };
        OverlayWrapperComponent2.prototype.showLoadingOverlay = function() {
          if (this.gridOptionsWrapper.isSuppressLoadingOverlay()) {
            return;
          }
          var params = {
            api: this.gridOptionsWrapper.getApi()
          };
          var compDetails = this.userComponentFactory.getLoadingOverlayCompDetails(params);
          var promise = compDetails.newAgStackInstance();
          this.showOverlay(promise, LoadingType.Loading);
        };
        OverlayWrapperComponent2.prototype.showNoRowsOverlay = function() {
          if (this.gridOptionsWrapper.isSuppressNoRowsOverlay()) {
            return;
          }
          var params = {
            api: this.gridOptionsWrapper.getApi()
          };
          var compDetails = this.userComponentFactory.getNoRowsOverlayCompDetails(params);
          var promise = compDetails.newAgStackInstance();
          this.showOverlay(promise, LoadingType.NoRows);
        };
        OverlayWrapperComponent2.prototype.showOverlay = function(workItem, type) {
          var _this = this;
          if (this.inProgress) {
            return;
          }
          this.setWrapperTypeClass(type);
          this.destroyActiveOverlay();
          this.inProgress = true;
          if (workItem) {
            workItem.then(function(comp) {
              _this.inProgress = false;
              _this.eOverlayWrapper.appendChild(comp.getGui());
              _this.activeOverlay = comp;
              if (_this.destroyRequested) {
                _this.destroyRequested = false;
                _this.destroyActiveOverlay();
              }
            });
          }
          this.setDisplayed(true);
        };
        OverlayWrapperComponent2.prototype.destroyActiveOverlay = function() {
          if (this.inProgress) {
            this.destroyRequested = true;
            return;
          }
          if (!this.activeOverlay) {
            return;
          }
          this.activeOverlay = this.getContext().destroyBean(this.activeOverlay);
          clearElement(this.eOverlayWrapper);
        };
        OverlayWrapperComponent2.prototype.hideOverlay = function() {
          this.destroyActiveOverlay();
          this.setDisplayed(false);
        };
        OverlayWrapperComponent2.prototype.destroy = function() {
          this.destroyActiveOverlay();
          _super.prototype.destroy.call(this);
        };
        OverlayWrapperComponent2.prototype.showOrHideOverlay = function() {
          var isEmpty = this.paginationProxy.isEmpty();
          var isSuppressNoRowsOverlay = this.gridOptionsWrapper.isSuppressNoRowsOverlay();
          if (isEmpty && !isSuppressNoRowsOverlay) {
            this.showNoRowsOverlay();
          } else {
            this.hideOverlay();
          }
        };
        OverlayWrapperComponent2.prototype.onRowDataChanged = function() {
          this.showOrHideOverlay();
        };
        OverlayWrapperComponent2.prototype.onNewColumnsLoaded = function() {
          if (this.columnModel.isReady() && !this.paginationProxy.isEmpty()) {
            this.hideOverlay();
          }
        };
        OverlayWrapperComponent2.TEMPLATE = '\n        <div class="ag-overlay" aria-hidden="true">\n            <div class="ag-overlay-panel">\n                <div class="ag-overlay-wrapper" ref="eOverlayWrapper"></div>\n            </div>\n        </div>';
        __decorate$1U([
          Autowired("userComponentFactory")
        ], OverlayWrapperComponent2.prototype, "userComponentFactory", void 0);
        __decorate$1U([
          Autowired("paginationProxy")
        ], OverlayWrapperComponent2.prototype, "paginationProxy", void 0);
        __decorate$1U([
          Autowired("gridApi")
        ], OverlayWrapperComponent2.prototype, "gridApi", void 0);
        __decorate$1U([
          Autowired("columnModel")
        ], OverlayWrapperComponent2.prototype, "columnModel", void 0);
        __decorate$1U([
          RefSelector("eOverlayWrapper")
        ], OverlayWrapperComponent2.prototype, "eOverlayWrapper", void 0);
        __decorate$1U([
          PostConstruct
        ], OverlayWrapperComponent2.prototype, "postConstruct", null);
        return OverlayWrapperComponent2;
      }(Component)
    );
    var __extends$25 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1V = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var AgGroupComponent = (
      /** @class */
      function(_super) {
        __extends$25(AgGroupComponent2, _super);
        function AgGroupComponent2(params) {
          if (params === void 0) {
            params = {};
          }
          var _this = _super.call(this, AgGroupComponent2.getTemplate(params)) || this;
          _this.suppressEnabledCheckbox = true;
          _this.suppressOpenCloseIcons = false;
          var title = params.title, enabled = params.enabled, items = params.items, suppressEnabledCheckbox = params.suppressEnabledCheckbox, suppressOpenCloseIcons = params.suppressOpenCloseIcons;
          _this.title = title;
          _this.cssIdentifier = params.cssIdentifier || "default";
          _this.enabled = enabled != null ? enabled : true;
          _this.items = items || [];
          _this.alignItems = params.alignItems || "center";
          if (suppressEnabledCheckbox != null) {
            _this.suppressEnabledCheckbox = suppressEnabledCheckbox;
          }
          if (suppressOpenCloseIcons != null) {
            _this.suppressOpenCloseIcons = suppressOpenCloseIcons;
          }
          return _this;
        }
        AgGroupComponent2.getTemplate = function(params) {
          var cssIdentifier = params.cssIdentifier || "default";
          var direction = params.direction || "vertical";
          return (
            /* html */
            '<div class="ag-group ag-' + cssIdentifier + '-group" role="presentation">\n            <div class="ag-group-title-bar ag-' + cssIdentifier + '-group-title-bar ag-unselectable" ref="eTitleBar" role="button">\n                <span class="ag-group-title-bar-icon ag-' + cssIdentifier + '-group-title-bar-icon" ref="eGroupOpenedIcon" role="presentation"></span>\n                <span class="ag-group-title-bar-icon ag-' + cssIdentifier + '-group-title-bar-icon" ref="eGroupClosedIcon" role="presentation"></span>\n                <span ref="eTitle" class="ag-group-title ag-' + cssIdentifier + '-group-title"></span>\n            </div>\n            <div ref="eToolbar" class="ag-group-toolbar ag-' + cssIdentifier + '-group-toolbar">\n                <ag-checkbox ref="cbGroupEnabled"></ag-checkbox>\n            </div>\n            <div ref="eContainer" class="ag-group-container ag-group-container-' + direction + " ag-" + cssIdentifier + '-group-container"></div>\n        </div>'
          );
        };
        AgGroupComponent2.prototype.postConstruct = function() {
          if (this.items.length) {
            var initialItems = this.items;
            this.items = [];
            this.addItems(initialItems);
          }
          var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
          this.cbGroupEnabled.setLabel(localeTextFunc("enabled", "Enabled"));
          if (this.title) {
            this.setTitle(this.title);
          }
          if (this.enabled) {
            this.setEnabled(this.enabled);
          }
          this.setAlignItems(this.alignItems);
          this.hideEnabledCheckbox(this.suppressEnabledCheckbox);
          this.hideOpenCloseIcons(this.suppressOpenCloseIcons);
          this.setupExpandContract();
          this.refreshAriaStatus();
          this.refreshChildDisplay();
        };
        AgGroupComponent2.prototype.setupExpandContract = function() {
          var _this = this;
          this.eGroupClosedIcon.appendChild(createIcon("columnSelectClosed", this.gridOptionsWrapper, null));
          this.eGroupOpenedIcon.appendChild(createIcon("columnSelectOpen", this.gridOptionsWrapper, null));
          this.addManagedListener(this.eTitleBar, "click", function() {
            return _this.toggleGroupExpand();
          });
          this.addManagedListener(this.eTitleBar, "keydown", function(e) {
            switch (e.keyCode) {
              case KeyCode.ENTER:
              case KeyCode.SPACE:
                e.preventDefault();
                _this.toggleGroupExpand();
                break;
              case KeyCode.RIGHT:
              case KeyCode.LEFT:
                e.preventDefault();
                _this.toggleGroupExpand(e.keyCode === KeyCode.RIGHT);
                break;
            }
          });
        };
        AgGroupComponent2.prototype.refreshAriaStatus = function() {
          if (!this.suppressOpenCloseIcons) {
            setAriaExpanded(this.eTitleBar, this.expanded);
          }
        };
        AgGroupComponent2.prototype.refreshChildDisplay = function() {
          var showIcon = !this.suppressOpenCloseIcons;
          setDisplayed(this.eToolbar, this.expanded && !this.suppressEnabledCheckbox);
          setDisplayed(this.eGroupOpenedIcon, showIcon && this.expanded);
          setDisplayed(this.eGroupClosedIcon, showIcon && !this.expanded);
        };
        AgGroupComponent2.prototype.isExpanded = function() {
          return this.expanded;
        };
        AgGroupComponent2.prototype.setAlignItems = function(alignment) {
          var eGui = this.getGui();
          if (this.alignItems !== alignment) {
            removeCssClass(eGui, "ag-group-item-alignment-" + this.alignItems);
          }
          this.alignItems = alignment;
          var newCls = "ag-group-item-alignment-" + this.alignItems;
          addCssClass(eGui, newCls);
          return this;
        };
        AgGroupComponent2.prototype.toggleGroupExpand = function(expanded) {
          if (this.suppressOpenCloseIcons) {
            this.expanded = true;
            this.refreshChildDisplay();
            setDisplayed(this.eContainer, true);
            return this;
          }
          expanded = expanded != null ? expanded : !this.expanded;
          if (this.expanded === expanded) {
            return this;
          }
          this.expanded = expanded;
          this.refreshAriaStatus();
          this.refreshChildDisplay();
          setDisplayed(this.eContainer, expanded);
          this.dispatchEvent({ type: this.expanded ? AgGroupComponent2.EVENT_EXPANDED : AgGroupComponent2.EVENT_COLLAPSED });
          return this;
        };
        AgGroupComponent2.prototype.addItems = function(items) {
          var _this = this;
          items.forEach(function(item) {
            return _this.addItem(item);
          });
        };
        AgGroupComponent2.prototype.addItem = function(item) {
          var container = this.eContainer;
          var el = item instanceof Component ? item.getGui() : item;
          addCssClass(el, "ag-group-item");
          addCssClass(el, "ag-" + this.cssIdentifier + "-group-item");
          container.appendChild(el);
          this.items.push(el);
        };
        AgGroupComponent2.prototype.hideItem = function(hide, index) {
          var itemToHide = this.items[index];
          addOrRemoveCssClass(itemToHide, "ag-hidden", hide);
        };
        AgGroupComponent2.prototype.setTitle = function(title) {
          this.eTitle.innerText = title;
          return this;
        };
        AgGroupComponent2.prototype.addCssClassToTitleBar = function(cssClass) {
          addCssClass(this.eTitleBar, cssClass);
        };
        AgGroupComponent2.prototype.setEnabled = function(enabled, skipToggle) {
          this.enabled = enabled;
          this.refreshDisabledStyles();
          this.toggleGroupExpand(enabled);
          if (!skipToggle) {
            this.cbGroupEnabled.setValue(enabled);
          }
          return this;
        };
        AgGroupComponent2.prototype.isEnabled = function() {
          return this.enabled;
        };
        AgGroupComponent2.prototype.onEnableChange = function(callbackFn) {
          var _this = this;
          this.cbGroupEnabled.onValueChange(function(newSelection) {
            _this.setEnabled(newSelection, true);
            callbackFn(newSelection);
          });
          return this;
        };
        AgGroupComponent2.prototype.hideEnabledCheckbox = function(hide) {
          this.suppressEnabledCheckbox = hide;
          this.refreshChildDisplay();
          this.refreshDisabledStyles();
          return this;
        };
        AgGroupComponent2.prototype.hideOpenCloseIcons = function(hide) {
          this.suppressOpenCloseIcons = hide;
          if (hide) {
            this.toggleGroupExpand(true);
          }
          return this;
        };
        AgGroupComponent2.prototype.refreshDisabledStyles = function() {
          addOrRemoveCssClass(this.getGui(), "ag-disabled", !this.enabled);
          if (this.suppressEnabledCheckbox && !this.enabled) {
            addCssClass(this.eTitleBar, "ag-disabled-group-title-bar");
            this.eTitleBar.removeAttribute("tabindex");
          } else {
            removeCssClass(this.eTitleBar, "ag-disabled-group-title-bar");
            this.eTitleBar.setAttribute("tabindex", "0");
          }
          addOrRemoveCssClass(this.eContainer, "ag-disabled-group-container", !this.enabled);
        };
        AgGroupComponent2.EVENT_EXPANDED = "expanded";
        AgGroupComponent2.EVENT_COLLAPSED = "collapsed";
        __decorate$1V([
          RefSelector("eTitleBar")
        ], AgGroupComponent2.prototype, "eTitleBar", void 0);
        __decorate$1V([
          RefSelector("eGroupOpenedIcon")
        ], AgGroupComponent2.prototype, "eGroupOpenedIcon", void 0);
        __decorate$1V([
          RefSelector("eGroupClosedIcon")
        ], AgGroupComponent2.prototype, "eGroupClosedIcon", void 0);
        __decorate$1V([
          RefSelector("eToolbar")
        ], AgGroupComponent2.prototype, "eToolbar", void 0);
        __decorate$1V([
          RefSelector("cbGroupEnabled")
        ], AgGroupComponent2.prototype, "cbGroupEnabled", void 0);
        __decorate$1V([
          RefSelector("eTitle")
        ], AgGroupComponent2.prototype, "eTitle", void 0);
        __decorate$1V([
          RefSelector("eContainer")
        ], AgGroupComponent2.prototype, "eContainer", void 0);
        __decorate$1V([
          PostConstruct
        ], AgGroupComponent2.prototype, "postConstruct", null);
        return AgGroupComponent2;
      }(Component)
    );
    var __extends$26 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1W = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var RESIZE_CONTAINER_STYLE = "ag-resizer-wrapper";
    var RESIZE_TEMPLATE = (
      /* html */
      '<div class="' + RESIZE_CONTAINER_STYLE + '">\n        <div ref="eTopLeftResizer" class="ag-resizer ag-resizer-topLeft"></div>\n        <div ref="eTopResizer" class="ag-resizer ag-resizer-top"></div>\n        <div ref="eTopRightResizer" class="ag-resizer ag-resizer-topRight"></div>\n        <div ref="eRightResizer" class="ag-resizer ag-resizer-right"></div>\n        <div ref="eBottomRightResizer" class="ag-resizer ag-resizer-bottomRight"></div>\n        <div ref="eBottomResizer" class="ag-resizer ag-resizer-bottom"></div>\n        <div ref="eBottomLeftResizer" class="ag-resizer ag-resizer-bottomLeft"></div>\n        <div ref="eLeftResizer" class="ag-resizer ag-resizer-left"></div>\n    </div>'
    );
    var PositionableFeature = (
      /** @class */
      function(_super) {
        __extends$26(PositionableFeature2, _super);
        function PositionableFeature2(element, config) {
          var _this = _super.call(this) || this;
          _this.element = element;
          _this.dragStartPosition = {
            x: 0,
            y: 0
          };
          _this.position = {
            x: 0,
            y: 0
          };
          _this.lastSize = {
            width: -1,
            height: -1
          };
          _this.positioned = false;
          _this.resizersAdded = false;
          _this.resizeListeners = [];
          _this.boundaryEl = null;
          _this.isResizing = false;
          _this.isMoving = false;
          _this.resizable = {};
          _this.movable = false;
          _this.currentResizer = null;
          _this.config = assign({}, { popup: false }, config);
          return _this;
        }
        PositionableFeature2.prototype.center = function() {
          var _a2 = this.offsetParent, clientHeight = _a2.clientHeight, clientWidth = _a2.clientWidth;
          var x = clientWidth / 2 - this.getWidth() / 2;
          var y = clientHeight / 2 - this.getHeight() / 2;
          this.offsetElement(x, y);
        };
        PositionableFeature2.prototype.initialisePosition = function() {
          var _a2 = this.config, centered = _a2.centered, forcePopupParentAsOffsetParent = _a2.forcePopupParentAsOffsetParent, minWidth = _a2.minWidth, width = _a2.width, minHeight = _a2.minHeight, height = _a2.height, x = _a2.x, y = _a2.y;
          if (!this.offsetParent) {
            this.setOffsetParent();
          }
          var computedMinHeight = 0;
          var computedMinWidth = 0;
          var isVisible2 = !!this.element.offsetParent;
          if (isVisible2) {
            var boundaryEl = this.findBoundaryElement();
            var offsetParentComputedStyles = window.getComputedStyle(boundaryEl);
            if (offsetParentComputedStyles.minWidth != null) {
              var paddingWidth = boundaryEl.offsetWidth - this.element.offsetWidth;
              computedMinWidth = parseInt(offsetParentComputedStyles.minWidth, 10) - paddingWidth;
            }
            if (offsetParentComputedStyles.minHeight != null) {
              var paddingHeight = boundaryEl.offsetHeight - this.element.offsetHeight;
              computedMinHeight = parseInt(offsetParentComputedStyles.minHeight, 10) - paddingHeight;
            }
          }
          this.minHeight = minHeight || computedMinHeight;
          this.minWidth = minWidth || computedMinWidth;
          if (width) {
            this.setWidth(width);
          }
          if (height) {
            this.setHeight(height);
          }
          if (!width || !height) {
            this.refreshSize();
          }
          if (centered) {
            this.center();
          } else if (x || y) {
            this.offsetElement(x, y);
          } else if (isVisible2 && forcePopupParentAsOffsetParent && this.boundaryEl) {
            var top_1 = parseFloat(this.boundaryEl.style.top);
            var left = parseFloat(this.boundaryEl.style.left);
            this.offsetElement(isNaN(left) ? 0 : left, isNaN(top_1) ? 0 : top_1);
          }
          this.positioned = !!this.offsetParent;
        };
        PositionableFeature2.prototype.isPositioned = function() {
          return this.positioned;
        };
        PositionableFeature2.prototype.getPosition = function() {
          return this.position;
        };
        PositionableFeature2.prototype.setMovable = function(movable, moveElement) {
          if (!this.config.popup || movable === this.movable) {
            return;
          }
          this.movable = movable;
          var params = this.moveElementDragListener || {
            eElement: moveElement,
            onDragStart: this.onMoveStart.bind(this),
            onDragging: this.onMove.bind(this),
            onDragStop: this.onMoveEnd.bind(this)
          };
          if (movable) {
            this.dragService.addDragSource(params);
            this.moveElementDragListener = params;
          } else {
            this.dragService.removeDragSource(params);
            this.moveElementDragListener = void 0;
          }
        };
        PositionableFeature2.prototype.setResizable = function(resizable) {
          var _this = this;
          this.clearResizeListeners();
          if (resizable) {
            this.addResizers();
          } else {
            this.removeResizers();
          }
          if (typeof resizable === "boolean") {
            if (resizable === false) {
              return;
            }
            resizable = {
              topLeft: resizable,
              top: resizable,
              topRight: resizable,
              right: resizable,
              bottomRight: resizable,
              bottom: resizable,
              bottomLeft: resizable,
              left: resizable
            };
          }
          Object.keys(resizable).forEach(function(side) {
            var resizableStructure = resizable;
            var val = !!resizableStructure[side];
            var resizerEl = _this.getResizerElement(side);
            var params = {
              dragStartPixels: 0,
              eElement: resizerEl,
              onDragStart: function(e) {
                return _this.onResizeStart(e, side);
              },
              onDragging: _this.onResize.bind(_this),
              onDragStop: function(e) {
                return _this.onResizeEnd(e, side);
              }
            };
            if (!!_this.resizable[side] !== val || !_this.isAlive() && !val) {
              if (val) {
                _this.dragService.addDragSource(params);
                _this.resizeListeners.push(params);
                resizerEl.style.pointerEvents = "all";
              } else {
                resizerEl.style.pointerEvents = "none";
              }
            }
          });
        };
        PositionableFeature2.prototype.removeSizeFromEl = function() {
          this.element.style.removeProperty("height");
          this.element.style.removeProperty("width");
          this.element.style.removeProperty("flex");
        };
        PositionableFeature2.prototype.restoreLastSize = function() {
          this.element.style.flex = "0 0 auto";
          var _a2 = this.lastSize, height = _a2.height, width = _a2.width;
          if (width !== -1) {
            this.element.style.width = width + "px";
          }
          if (height !== -1) {
            this.element.style.height = height + "px";
          }
        };
        PositionableFeature2.prototype.getHeight = function() {
          return this.element.offsetHeight;
        };
        PositionableFeature2.prototype.setHeight = function(height) {
          var popup = this.config.popup;
          var eGui = this.element;
          var isPercent = false;
          if (typeof height === "string" && height.indexOf("%") !== -1) {
            setFixedHeight(eGui, height);
            height = getAbsoluteHeight(eGui);
            isPercent = true;
          } else if (this.positioned) {
            var elRect = this.element.getBoundingClientRect();
            var parentRect = this.offsetParent.getBoundingClientRect();
            height = Math.max(this.minHeight, height);
            var clientHeight = this.offsetParent.clientHeight;
            var yPosition = popup ? this.position.y : elRect.top;
            var parentTop = popup ? 0 : parentRect.top;
            if (clientHeight && height + yPosition > clientHeight + parentTop) {
              height = clientHeight - yPosition;
            }
          }
          if (this.getHeight() === height) {
            return;
          }
          if (!isPercent) {
            if (popup) {
              setFixedHeight(eGui, height);
            } else {
              eGui.style.height = height + "px";
              eGui.style.flex = "0 0 auto";
              this.lastSize.height = typeof height === "number" ? height : parseFloat(height);
            }
          } else {
            eGui.style.maxHeight = "unset";
            eGui.style.minHeight = "unset";
          }
        };
        PositionableFeature2.prototype.getWidth = function() {
          return this.element.offsetWidth;
        };
        PositionableFeature2.prototype.setWidth = function(width) {
          var eGui = this.element;
          var popup = this.config.popup;
          var isPercent = false;
          if (typeof width === "string" && width.indexOf("%") !== -1) {
            setFixedWidth(eGui, width);
            width = getAbsoluteWidth(eGui);
            isPercent = true;
          } else if (this.positioned) {
            width = Math.max(this.minWidth, width);
            var clientWidth = this.offsetParent.clientWidth;
            var xPosition = popup ? this.position.x : this.element.getBoundingClientRect().left;
            if (clientWidth && width + xPosition > clientWidth) {
              width = clientWidth - xPosition;
            }
          }
          if (this.getWidth() === width) {
            return;
          }
          if (!isPercent) {
            if (this.config.popup) {
              setFixedWidth(eGui, width);
            } else {
              eGui.style.width = width + "px";
              eGui.style.flex = " unset";
              this.lastSize.width = typeof width === "number" ? width : parseFloat(width);
            }
          } else {
            eGui.style.maxWidth = "unset";
            eGui.style.minWidth = "unset";
          }
        };
        PositionableFeature2.prototype.offsetElement = function(x, y) {
          if (x === void 0) {
            x = 0;
          }
          if (y === void 0) {
            y = 0;
          }
          var ePopup = this.config.forcePopupParentAsOffsetParent ? this.boundaryEl : this.element;
          this.popupService.positionPopup({
            ePopup,
            x,
            y,
            keepWithinBounds: true
          });
          this.setPosition(parseFloat(ePopup.style.left), parseFloat(ePopup.style.top));
        };
        PositionableFeature2.prototype.setPosition = function(x, y) {
          this.position.x = x;
          this.position.y = y;
        };
        PositionableFeature2.prototype.updateDragStartPosition = function(x, y) {
          this.dragStartPosition = { x, y };
        };
        PositionableFeature2.prototype.calculateMouseMovement = function(params) {
          var e = params.e, isLeft = params.isLeft, isTop = params.isTop, anywhereWithin = params.anywhereWithin, topBuffer = params.topBuffer;
          var xDiff = e.clientX - this.dragStartPosition.x;
          var yDiff = e.clientY - this.dragStartPosition.y;
          var movementX = this.shouldSkipX(e, !!isLeft, !!anywhereWithin, xDiff) ? 0 : xDiff;
          var movementY = this.shouldSkipY(e, !!isTop, topBuffer, yDiff) ? 0 : yDiff;
          return { movementX, movementY };
        };
        PositionableFeature2.prototype.shouldSkipX = function(e, isLeft, anywhereWithin, diff) {
          var elRect = this.element.getBoundingClientRect();
          var parentRect = this.offsetParent.getBoundingClientRect();
          var boundaryElRect = this.boundaryEl.getBoundingClientRect();
          var xPosition = this.config.popup ? this.position.x : elRect.left;
          var skipX = xPosition <= 0 && parentRect.left >= e.clientX || parentRect.right <= e.clientX && parentRect.right <= boundaryElRect.right;
          if (skipX) {
            return true;
          }
          if (isLeft) {
            skipX = // skip if we are moving to the left and the cursor
            // is positioned to the right of the left side anchor
            diff < 0 && e.clientX > xPosition + parentRect.left || // skip if we are moving to the right and the cursor
            // is positioned to the left of the dialog
            diff > 0 && e.clientX < xPosition + parentRect.left;
          } else {
            if (anywhereWithin) {
              skipX = diff < 0 && e.clientX > boundaryElRect.right || diff > 0 && e.clientX < xPosition + parentRect.left;
            } else {
              skipX = // if the movement is bound to the right side of the dialog
              // we skip if we are moving to the left and the cursor
              // is to the right of the dialog
              diff < 0 && e.clientX > boundaryElRect.right || // or skip if we are moving to the right and the cursor
              // is to the left of the right side anchor
              diff > 0 && e.clientX < boundaryElRect.right;
            }
          }
          return skipX;
        };
        PositionableFeature2.prototype.shouldSkipY = function(e, isTop, topBuffer, diff) {
          if (topBuffer === void 0) {
            topBuffer = 0;
          }
          var elRect = this.element.getBoundingClientRect();
          var parentRect = this.offsetParent.getBoundingClientRect();
          var boundaryElRect = this.boundaryEl.getBoundingClientRect();
          var yPosition = this.config.popup ? this.position.y : elRect.top;
          var skipY = yPosition <= 0 && parentRect.top >= e.clientY || parentRect.bottom <= e.clientY && parentRect.bottom <= boundaryElRect.bottom;
          if (skipY) {
            return true;
          }
          if (isTop) {
            skipY = // skip if we are moving to towards top and the cursor is
            // below the top anchor + topBuffer
            // note: topBuffer is used when moving the dialog using the title bar
            diff < 0 && e.clientY > yPosition + parentRect.top + topBuffer || // skip if we are moving to the bottom and the cursor is
            // above the top anchor
            diff > 0 && e.clientY < yPosition + parentRect.top;
          } else {
            skipY = // skip if we are moving towards the top and the cursor
            // is below the bottom anchor
            diff < 0 && e.clientY > boundaryElRect.bottom || // skip if we are moving towards the bottom and the cursor
            // is above the bottom anchor
            diff > 0 && e.clientY < boundaryElRect.bottom;
          }
          return skipY;
        };
        PositionableFeature2.prototype.createResizeMap = function() {
          var eGui = this.element;
          this.resizerMap = {
            topLeft: { element: eGui.querySelector("[ref=eTopLeftResizer]") },
            top: { element: eGui.querySelector("[ref=eTopResizer]") },
            topRight: { element: eGui.querySelector("[ref=eTopRightResizer]") },
            right: { element: eGui.querySelector("[ref=eRightResizer]") },
            bottomRight: { element: eGui.querySelector("[ref=eBottomRightResizer]") },
            bottom: { element: eGui.querySelector("[ref=eBottomResizer]") },
            bottomLeft: { element: eGui.querySelector("[ref=eBottomLeftResizer]") },
            left: { element: eGui.querySelector("[ref=eLeftResizer]") }
          };
        };
        PositionableFeature2.prototype.addResizers = function() {
          if (this.resizersAdded) {
            return;
          }
          var eGui = this.element;
          if (!eGui) {
            return;
          }
          var parser = new DOMParser();
          var resizers = parser.parseFromString(RESIZE_TEMPLATE, "text/html").body;
          eGui.appendChild(resizers.firstChild);
          this.createResizeMap();
          this.resizersAdded = true;
        };
        PositionableFeature2.prototype.removeResizers = function() {
          this.resizerMap = void 0;
          var resizerEl = this.element.querySelector("." + RESIZE_CONTAINER_STYLE);
          if (resizerEl) {
            this.element.removeChild(resizerEl);
          }
          this.resizersAdded = false;
        };
        PositionableFeature2.prototype.getResizerElement = function(side) {
          return this.resizerMap[side].element;
        };
        PositionableFeature2.prototype.onResizeStart = function(e, side) {
          this.boundaryEl = this.findBoundaryElement();
          if (!this.positioned) {
            this.initialisePosition();
          }
          this.currentResizer = {
            isTop: !!side.match(/top/i),
            isRight: !!side.match(/right/i),
            isBottom: !!side.match(/bottom/i),
            isLeft: !!side.match(/left/i)
          };
          addCssClass(this.element, "ag-resizing");
          addCssClass(this.resizerMap[side].element, "ag-active");
          var _a2 = this.config, popup = _a2.popup, forcePopupParentAsOffsetParent = _a2.forcePopupParentAsOffsetParent;
          if (!popup && !forcePopupParentAsOffsetParent) {
            this.applySizeToSiblings(this.currentResizer.isBottom || this.currentResizer.isTop);
          }
          this.isResizing = true;
          this.updateDragStartPosition(e.clientX, e.clientY);
        };
        PositionableFeature2.prototype.getSiblings = function() {
          var element = this.element;
          var parent = element.parentElement;
          if (!parent) {
            return null;
          }
          return Array.prototype.slice.call(parent.children).filter(function(el) {
            return !containsClass(el, "ag-hidden");
          });
        };
        PositionableFeature2.prototype.getMinSizeOfSiblings = function() {
          var siblings = this.getSiblings() || [];
          var height = 0;
          var width = 0;
          for (var i = 0; i < siblings.length; i++) {
            var currentEl = siblings[i];
            var isFlex = !!currentEl.style.flex && currentEl.style.flex !== "0 0 auto";
            if (currentEl === this.element) {
              continue;
            }
            var nextHeight = this.minHeight || 0;
            var nextWidth = this.minWidth || 0;
            if (isFlex) {
              var computedStyle = window.getComputedStyle(currentEl);
              if (computedStyle.minHeight) {
                nextHeight = parseInt(computedStyle.minHeight, 10);
              }
              if (computedStyle.minWidth) {
                nextWidth = parseInt(computedStyle.minWidth, 10);
              }
            } else {
              nextHeight = currentEl.offsetHeight;
              nextWidth = currentEl.offsetWidth;
            }
            height += nextHeight;
            width += nextWidth;
          }
          return { height, width };
        };
        PositionableFeature2.prototype.applySizeToSiblings = function(vertical) {
          var containerToFlex = null;
          var siblings = this.getSiblings();
          if (!siblings) {
            return;
          }
          for (var i = 0; i < siblings.length; i++) {
            var el = siblings[i];
            if (el === containerToFlex) {
              continue;
            }
            if (vertical) {
              el.style.height = el.offsetHeight + "px";
            } else {
              el.style.width = el.offsetWidth + "px";
            }
            el.style.flex = "0 0 auto";
            if (el === this.element) {
              containerToFlex = siblings[i + 1];
            }
          }
          if (containerToFlex) {
            containerToFlex.style.removeProperty("height");
            containerToFlex.style.removeProperty("min-height");
            containerToFlex.style.removeProperty("max-height");
            containerToFlex.style.flex = "1 1 auto";
          }
        };
        PositionableFeature2.prototype.onResize = function(e) {
          if (!this.isResizing || !this.currentResizer) {
            return;
          }
          var _a2 = this.config, popup = _a2.popup, forcePopupParentAsOffsetParent = _a2.forcePopupParentAsOffsetParent;
          var _b = this.currentResizer, isTop = _b.isTop, isRight = _b.isRight, isBottom = _b.isBottom, isLeft = _b.isLeft;
          var isHorizontal = isRight || isLeft;
          var isVertical = isBottom || isTop;
          var _c = this.calculateMouseMovement({ e, isLeft, isTop }), movementX = _c.movementX, movementY = _c.movementY;
          var xPosition = this.position.x;
          var yPosition = this.position.y;
          var offsetLeft = 0;
          var offsetTop = 0;
          if (isHorizontal && movementX) {
            var direction = isLeft ? -1 : 1;
            var oldWidth = this.getWidth();
            var newWidth = oldWidth + movementX * direction;
            var skipWidth = false;
            if (isLeft) {
              offsetLeft = oldWidth - newWidth;
              if (xPosition + offsetLeft <= 0 || newWidth <= this.minWidth) {
                skipWidth = true;
                offsetLeft = 0;
              }
            }
            if (!skipWidth) {
              this.setWidth(newWidth);
            }
          }
          if (isVertical && movementY) {
            var direction = isTop ? -1 : 1;
            var oldHeight = this.getHeight();
            var newHeight = oldHeight + movementY * direction;
            var skipHeight = false;
            if (isTop) {
              offsetTop = oldHeight - newHeight;
              if (yPosition + offsetTop <= 0 || newHeight <= this.minHeight) {
                skipHeight = true;
                offsetTop = 0;
              }
            } else {
              if (!this.config.popup && !this.config.forcePopupParentAsOffsetParent && oldHeight < newHeight && this.getMinSizeOfSiblings().height + newHeight > this.element.parentElement.offsetHeight) {
                skipHeight = true;
              }
            }
            if (!skipHeight) {
              this.setHeight(newHeight);
            }
          }
          this.updateDragStartPosition(e.clientX, e.clientY);
          if ((popup || forcePopupParentAsOffsetParent) && offsetLeft || offsetTop) {
            this.offsetElement(xPosition + offsetLeft, yPosition + offsetTop);
          }
        };
        PositionableFeature2.prototype.onResizeEnd = function(e, side) {
          this.isResizing = false;
          this.currentResizer = null;
          this.boundaryEl = null;
          var params = {
            type: "resize",
            api: this.gridOptionsWrapper.getApi(),
            columnApi: this.gridOptionsWrapper.getColumnApi()
          };
          removeCssClass(this.element, "ag-resizing");
          removeCssClass(this.resizerMap[side].element, "ag-active");
          this.dispatchEvent(params);
        };
        PositionableFeature2.prototype.refreshSize = function() {
          var eGui = this.element;
          if (this.config.popup) {
            if (!this.config.width) {
              this.setWidth(eGui.offsetWidth);
            }
            if (!this.config.height) {
              this.setHeight(eGui.offsetHeight);
            }
          }
        };
        PositionableFeature2.prototype.onMoveStart = function(e) {
          this.boundaryEl = this.findBoundaryElement();
          if (!this.positioned) {
            this.initialisePosition();
          }
          this.isMoving = true;
          addCssClass(this.element, "ag-moving");
          this.updateDragStartPosition(e.clientX, e.clientY);
        };
        PositionableFeature2.prototype.onMove = function(e) {
          if (!this.isMoving) {
            return;
          }
          var _a2 = this.position, x = _a2.x, y = _a2.y;
          var topBuffer;
          if (this.config.calculateTopBuffer) {
            topBuffer = this.config.calculateTopBuffer();
          }
          var _b = this.calculateMouseMovement({
            e,
            isTop: true,
            anywhereWithin: true,
            topBuffer
          }), movementX = _b.movementX, movementY = _b.movementY;
          this.offsetElement(x + movementX, y + movementY);
          this.updateDragStartPosition(e.clientX, e.clientY);
        };
        PositionableFeature2.prototype.onMoveEnd = function() {
          this.isMoving = false;
          this.boundaryEl = null;
          removeCssClass(this.element, "ag-moving");
        };
        PositionableFeature2.prototype.setOffsetParent = function() {
          if (this.config.forcePopupParentAsOffsetParent) {
            this.offsetParent = this.popupService.getPopupParent();
          } else {
            this.offsetParent = this.element.offsetParent;
          }
        };
        PositionableFeature2.prototype.findBoundaryElement = function() {
          var el = this.element;
          while (el) {
            if (window.getComputedStyle(el).position !== "static") {
              return el;
            }
            el = el.parentElement;
          }
          return this.element;
        };
        PositionableFeature2.prototype.clearResizeListeners = function() {
          while (this.resizeListeners.length) {
            var params = this.resizeListeners.pop();
            this.dragService.removeDragSource(params);
          }
        };
        PositionableFeature2.prototype.destroy = function() {
          _super.prototype.destroy.call(this);
          if (this.moveElementDragListener) {
            this.dragService.removeDragSource(this.moveElementDragListener);
          }
          this.clearResizeListeners();
          this.removeResizers();
        };
        __decorate$1W([
          Autowired("popupService")
        ], PositionableFeature2.prototype, "popupService", void 0);
        __decorate$1W([
          Autowired("dragService")
        ], PositionableFeature2.prototype, "dragService", void 0);
        return PositionableFeature2;
      }(BeanStub)
    );
    var __extends$27 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1X = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var AgPanel = (
      /** @class */
      function(_super) {
        __extends$27(AgPanel2, _super);
        function AgPanel2(config) {
          var _this = _super.call(this, AgPanel2.getTemplate(config)) || this;
          _this.closable = true;
          _this.config = config;
          return _this;
        }
        AgPanel2.getTemplate = function(config) {
          var cssIdentifier = config && config.cssIdentifier || "default";
          return (
            /* html */
            '<div class="ag-panel ag-' + cssIdentifier + '-panel" tabindex="-1">\n            <div ref="eTitleBar" class="ag-panel-title-bar ag-' + cssIdentifier + '-panel-title-bar ag-unselectable">\n                <span ref="eTitle" class="ag-panel-title-bar-title ag-' + cssIdentifier + '-panel-title-bar-title"></span>\n                <div ref="eTitleBarButtons" class="ag-panel-title-bar-buttons ag-' + cssIdentifier + '-panel-title-bar-buttons"></div>\n            </div>\n            <div ref="eContentWrapper" class="ag-panel-content-wrapper ag-' + cssIdentifier + '-panel-content-wrapper"></div>\n        </div>'
          );
        };
        AgPanel2.prototype.postConstruct = function() {
          var _this = this;
          var _a2 = this.config, component = _a2.component, closable = _a2.closable, hideTitleBar = _a2.hideTitleBar, title = _a2.title, _b = _a2.minWidth, minWidth = _b === void 0 ? 250 : _b, width = _a2.width, _c = _a2.minHeight, minHeight = _c === void 0 ? 250 : _c, height = _a2.height, centered = _a2.centered, popup = _a2.popup, x = _a2.x, y = _a2.y;
          this.positionableFeature = new PositionableFeature(this.getGui(), {
            minWidth,
            width,
            minHeight,
            height,
            centered,
            x,
            y,
            popup,
            calculateTopBuffer: function() {
              return _this.positionableFeature.getHeight() - _this.getBodyHeight();
            }
          });
          this.createManagedBean(this.positionableFeature);
          var eGui = this.getGui();
          if (component) {
            this.setBodyComponent(component);
          }
          if (!hideTitleBar) {
            if (title) {
              this.setTitle(title);
            }
            this.setClosable(closable != null ? closable : this.closable);
          } else {
            addCssClass(this.eTitleBar, "ag-hidden");
          }
          this.addManagedListener(this.eTitleBar, "mousedown", function(e) {
            if (eGui.contains(e.relatedTarget) || eGui.contains(document.activeElement) || _this.eTitleBarButtons.contains(e.target)) {
              e.preventDefault();
              return;
            }
            var focusEl = _this.eContentWrapper.querySelector("button, [href], input, select, textarea, [tabindex]");
            if (focusEl) {
              focusEl.focus();
            }
          });
          if (popup && this.positionableFeature.isPositioned()) {
            return;
          }
          if (this.renderComponent) {
            this.renderComponent();
          }
          this.positionableFeature.initialisePosition();
          this.eContentWrapper.style.height = "0";
        };
        AgPanel2.prototype.renderComponent = function() {
          var _this = this;
          var eGui = this.getGui();
          eGui.focus();
          this.close = function() {
            eGui.parentElement.removeChild(eGui);
            _this.destroy();
          };
        };
        AgPanel2.prototype.getHeight = function() {
          return this.positionableFeature.getHeight();
        };
        AgPanel2.prototype.setHeight = function(height) {
          this.positionableFeature.setHeight(height);
        };
        AgPanel2.prototype.getWidth = function() {
          return this.positionableFeature.getWidth();
        };
        AgPanel2.prototype.setWidth = function(width) {
          this.positionableFeature.setWidth(width);
        };
        AgPanel2.prototype.setClosable = function(closable) {
          if (closable !== this.closable) {
            this.closable = closable;
          }
          if (closable) {
            var closeButtonComp = this.closeButtonComp = new Component(AgPanel2.CLOSE_BTN_TEMPLATE);
            this.getContext().createBean(closeButtonComp);
            var eGui = closeButtonComp.getGui();
            eGui.appendChild(addCssClass(createIconNoSpan("close", this.gridOptionsWrapper), "ag-panel-title-bar-button-icon"));
            this.addTitleBarButton(closeButtonComp);
            closeButtonComp.addManagedListener(eGui, "click", this.onBtClose.bind(this));
          } else if (this.closeButtonComp) {
            var eGui = this.closeButtonComp.getGui();
            eGui.parentElement.removeChild(eGui);
            this.closeButtonComp = this.destroyBean(this.closeButtonComp);
          }
        };
        AgPanel2.prototype.setBodyComponent = function(bodyComponent) {
          bodyComponent.setParentComponent(this);
          this.eContentWrapper.appendChild(bodyComponent.getGui());
        };
        AgPanel2.prototype.addTitleBarButton = function(button, position) {
          var eTitleBarButtons = this.eTitleBarButtons;
          var buttons = eTitleBarButtons.children;
          var len = buttons.length;
          if (position == null) {
            position = len;
          }
          position = Math.max(0, Math.min(position, len));
          var eGui = button.getGui();
          addCssClass(eGui, "ag-panel-title-bar-button");
          if (position === 0) {
            eTitleBarButtons.insertAdjacentElement("afterbegin", eGui);
          } else if (position === len) {
            eTitleBarButtons.insertAdjacentElement("beforeend", eGui);
          } else {
            buttons[position - 1].insertAdjacentElement("afterend", eGui);
          }
          button.setParentComponent(this);
        };
        AgPanel2.prototype.getBodyHeight = function() {
          return getInnerHeight(this.eContentWrapper);
        };
        AgPanel2.prototype.getBodyWidth = function() {
          return getInnerWidth(this.eContentWrapper);
        };
        AgPanel2.prototype.setTitle = function(title) {
          this.eTitle.innerText = title;
        };
        AgPanel2.prototype.onBtClose = function() {
          this.close();
        };
        AgPanel2.prototype.destroy = function() {
          if (this.closeButtonComp) {
            this.closeButtonComp = this.destroyBean(this.closeButtonComp);
          }
          var eGui = this.getGui();
          if (eGui && eGui.offsetParent) {
            this.close();
          }
          _super.prototype.destroy.call(this);
        };
        AgPanel2.CLOSE_BTN_TEMPLATE = '<div class="ag-button"></div>';
        __decorate$1X([
          RefSelector("eContentWrapper")
        ], AgPanel2.prototype, "eContentWrapper", void 0);
        __decorate$1X([
          RefSelector("eTitleBar")
        ], AgPanel2.prototype, "eTitleBar", void 0);
        __decorate$1X([
          RefSelector("eTitleBarButtons")
        ], AgPanel2.prototype, "eTitleBarButtons", void 0);
        __decorate$1X([
          RefSelector("eTitle")
        ], AgPanel2.prototype, "eTitle", void 0);
        __decorate$1X([
          PostConstruct
        ], AgPanel2.prototype, "postConstruct", null);
        return AgPanel2;
      }(Component)
    );
    var __extends$28 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __assign$c = function() {
      __assign$c = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign$c.apply(this, arguments);
    };
    var __decorate$1Y = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var AgDialog = (
      /** @class */
      function(_super) {
        __extends$28(AgDialog2, _super);
        function AgDialog2(config) {
          var _this = _super.call(this, __assign$c(__assign$c({}, config), { popup: true })) || this;
          _this.isMaximizable = false;
          _this.isMaximized = false;
          _this.maximizeListeners = [];
          _this.resizeListenerDestroy = null;
          _this.lastPosition = {
            x: 0,
            y: 0,
            width: 0,
            height: 0
          };
          return _this;
        }
        AgDialog2.prototype.postConstruct = function() {
          var _this = this;
          var eGui = this.getGui();
          var _a2 = this.config, movable = _a2.movable, resizable = _a2.resizable, maximizable = _a2.maximizable;
          addCssClass(eGui, "ag-dialog");
          _super.prototype.postConstruct.call(this);
          this.addManagedListener(eGui, "focusin", function(e) {
            if (eGui.contains(e.relatedTarget)) {
              return;
            }
            _this.popupService.bringPopupToFront(eGui);
          });
          if (movable) {
            this.setMovable(movable);
          }
          if (maximizable) {
            this.setMaximizable(maximizable);
          }
          if (resizable) {
            this.setResizable(resizable);
          }
        };
        AgDialog2.prototype.renderComponent = function() {
          var eGui = this.getGui();
          var _a2 = this.config, alwaysOnTop = _a2.alwaysOnTop, modal = _a2.modal, title = _a2.title;
          var translate = this.gridOptionsWrapper.getLocaleTextFunc();
          var addPopupRes = this.popupService.addPopup({
            modal,
            eChild: eGui,
            closeOnEsc: true,
            closedCallback: this.destroy.bind(this),
            alwaysOnTop,
            ariaLabel: title || translate("ariaLabelDialog", "Dialog")
          });
          if (addPopupRes) {
            this.close = addPopupRes.hideFunc;
          }
        };
        AgDialog2.prototype.toggleMaximize = function() {
          var position = this.positionableFeature.getPosition();
          if (this.isMaximized) {
            var _a2 = this.lastPosition, x = _a2.x, y = _a2.y, width = _a2.width, height = _a2.height;
            this.setWidth(width);
            this.setHeight(height);
            this.positionableFeature.offsetElement(x, y);
          } else {
            this.lastPosition.width = this.getWidth();
            this.lastPosition.height = this.getHeight();
            this.lastPosition.x = position.x;
            this.lastPosition.y = position.y;
            this.positionableFeature.offsetElement(0, 0);
            this.setHeight("100%");
            this.setWidth("100%");
          }
          this.isMaximized = !this.isMaximized;
          this.refreshMaximizeIcon();
        };
        AgDialog2.prototype.refreshMaximizeIcon = function() {
          setDisplayed(this.maximizeIcon, !this.isMaximized);
          setDisplayed(this.minimizeIcon, this.isMaximized);
        };
        AgDialog2.prototype.clearMaximizebleListeners = function() {
          if (this.maximizeListeners.length) {
            this.maximizeListeners.forEach(function(destroyListener) {
              return destroyListener();
            });
            this.maximizeListeners.length = 0;
          }
          if (this.resizeListenerDestroy) {
            this.resizeListenerDestroy();
            this.resizeListenerDestroy = null;
          }
        };
        AgDialog2.prototype.destroy = function() {
          this.maximizeButtonComp = this.destroyBean(this.maximizeButtonComp);
          this.clearMaximizebleListeners();
          _super.prototype.destroy.call(this);
        };
        AgDialog2.prototype.setResizable = function(resizable) {
          this.positionableFeature.setResizable(resizable);
        };
        AgDialog2.prototype.setMovable = function(movable) {
          this.positionableFeature.setMovable(movable, this.eTitleBar);
        };
        AgDialog2.prototype.setMaximizable = function(maximizable) {
          var _this = this;
          if (!maximizable) {
            this.clearMaximizebleListeners();
            if (this.maximizeButtonComp) {
              this.destroyBean(this.maximizeButtonComp);
              this.maximizeButtonComp = this.maximizeIcon = this.minimizeIcon = void 0;
            }
            return;
          }
          var eTitleBar = this.eTitleBar;
          if (!eTitleBar || maximizable === this.isMaximizable) {
            return;
          }
          var maximizeButtonComp = this.maximizeButtonComp = this.createBean(new Component(
            /* html */
            '<div class="ag-dialog-button"></span>'
          ));
          var eGui = maximizeButtonComp.getGui();
          eGui.appendChild(this.maximizeIcon = createIconNoSpan("maximize", this.gridOptionsWrapper));
          addCssClass(this.maximizeIcon, "ag-panel-title-bar-button-icon");
          eGui.appendChild(this.minimizeIcon = createIconNoSpan("minimize", this.gridOptionsWrapper));
          addCssClass(this.minimizeIcon, "ag-panel-title-bar-button-icon");
          addCssClass(this.minimizeIcon, "ag-hidden");
          maximizeButtonComp.addManagedListener(eGui, "click", this.toggleMaximize.bind(this));
          this.addTitleBarButton(maximizeButtonComp, 0);
          this.maximizeListeners.push(this.addManagedListener(eTitleBar, "dblclick", this.toggleMaximize.bind(this)));
          this.resizeListenerDestroy = this.addManagedListener(this, "resize", function() {
            _this.isMaximized = false;
            _this.refreshMaximizeIcon();
          });
        };
        __decorate$1Y([
          Autowired("popupService")
        ], AgDialog2.prototype, "popupService", void 0);
        return AgDialog2;
      }(AgPanel)
    );
    var __extends$29 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var AgInputTextField = (
      /** @class */
      function(_super) {
        __extends$29(AgInputTextField2, _super);
        function AgInputTextField2(config, className, inputType) {
          if (className === void 0) {
            className = "ag-text-field";
          }
          if (inputType === void 0) {
            inputType = "text";
          }
          return _super.call(this, config, className, inputType) || this;
        }
        AgInputTextField2.prototype.postConstruct = function() {
          _super.prototype.postConstruct.call(this);
          if (this.config.allowedCharPattern) {
            this.preventDisallowedCharacters();
          }
        };
        AgInputTextField2.prototype.setValue = function(value, silent) {
          var ret = _super.prototype.setValue.call(this, value, silent);
          if (this.eInput.value !== value) {
            this.eInput.value = exists(value) ? value : "";
          }
          return ret;
        };
        AgInputTextField2.prototype.preventDisallowedCharacters = function() {
          var pattern = new RegExp("[" + this.config.allowedCharPattern + "]");
          var preventDisallowedCharacters = function(event) {
            if (event.key && !pattern.test(event.key)) {
              event.preventDefault();
            }
          };
          this.addManagedListener(this.eInput, "keypress", preventDisallowedCharacters);
          this.addManagedListener(this.eInput, "paste", function(e) {
            var text = e.clipboardData.getData("text");
            if (some(text, function(c) {
              return !pattern.test(c);
            })) {
              e.preventDefault();
            }
          });
        };
        return AgInputTextField2;
      }(AgAbstractInputField)
    );
    var __extends$2a = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var AgInputTextArea = (
      /** @class */
      function(_super) {
        __extends$2a(AgInputTextArea2, _super);
        function AgInputTextArea2(config) {
          return _super.call(this, config, "ag-text-area", null, "textarea") || this;
        }
        AgInputTextArea2.prototype.setValue = function(value, silent) {
          var ret = _super.prototype.setValue.call(this, value, silent);
          this.eInput.value = value;
          return ret;
        };
        AgInputTextArea2.prototype.setCols = function(cols) {
          this.eInput.cols = cols;
          return this;
        };
        AgInputTextArea2.prototype.setRows = function(rows) {
          this.eInput.rows = rows;
          return this;
        };
        return AgInputTextArea2;
      }(AgAbstractInputField)
    );
    var __extends$2b = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1Z = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var AgSlider = (
      /** @class */
      function(_super) {
        __extends$2b(AgSlider2, _super);
        function AgSlider2(config) {
          var _this = _super.call(this, config, AgSlider2.TEMPLATE) || this;
          _this.labelAlignment = "top";
          return _this;
        }
        AgSlider2.prototype.init = function() {
          addCssClass(this.eSlider.getGui(), "ag-slider-field");
        };
        AgSlider2.prototype.onValueChange = function(callbackFn) {
          var _this = this;
          var eventChanged = AgAbstractField.EVENT_CHANGED;
          this.addManagedListener(this.eText, eventChanged, function() {
            var textValue = parseFloat(_this.eText.getValue());
            _this.eSlider.setValue(textValue.toString(), true);
            callbackFn(textValue || 0);
          });
          this.addManagedListener(this.eSlider, eventChanged, function() {
            var sliderValue = _this.eSlider.getValue();
            _this.eText.setValue(sliderValue, true);
            callbackFn(parseFloat(sliderValue));
          });
          return this;
        };
        AgSlider2.prototype.setSliderWidth = function(width) {
          this.eSlider.setWidth(width);
          return this;
        };
        AgSlider2.prototype.setTextFieldWidth = function(width) {
          this.eText.setWidth(width);
          return this;
        };
        AgSlider2.prototype.setMinValue = function(minValue) {
          this.eSlider.setMinValue(minValue);
          this.eText.setMin(minValue);
          return this;
        };
        AgSlider2.prototype.setMaxValue = function(maxValue) {
          this.eSlider.setMaxValue(maxValue);
          this.eText.setMax(maxValue);
          return this;
        };
        AgSlider2.prototype.getValue = function() {
          return this.eText.getValue();
        };
        AgSlider2.prototype.setValue = function(value) {
          if (this.getValue() === value) {
            return this;
          }
          this.eText.setValue(value, true);
          this.eSlider.setValue(value, true);
          this.dispatchEvent({ type: AgAbstractField.EVENT_CHANGED });
          return this;
        };
        AgSlider2.prototype.setStep = function(step) {
          this.eSlider.setStep(step);
          this.eText.setStep(step);
          return this;
        };
        AgSlider2.TEMPLATE = '<div class="ag-slider">\n            <label ref="eLabel"></label>\n            <div class="ag-wrapper ag-slider-wrapper">\n                <ag-input-range ref="eSlider"></ag-input-range>\n                <ag-input-number-field ref="eText"></ag-input-number-field>\n            </div>\n        </div>';
        __decorate$1Z([
          RefSelector("eLabel")
        ], AgSlider2.prototype, "eLabel", void 0);
        __decorate$1Z([
          RefSelector("eSlider")
        ], AgSlider2.prototype, "eSlider", void 0);
        __decorate$1Z([
          RefSelector("eText")
        ], AgSlider2.prototype, "eText", void 0);
        __decorate$1Z([
          PostConstruct
        ], AgSlider2.prototype, "init", null);
        return AgSlider2;
      }(AgAbstractLabel)
    );
    var __extends$2c = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1_ = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var AgColorPanel = (
      /** @class */
      function(_super) {
        __extends$2c(AgColorPanel2, _super);
        function AgColorPanel2(config) {
          var _this = _super.call(this, AgColorPanel2.TEMPLATE) || this;
          _this.H = 1;
          _this.S = 1;
          _this.B = 1;
          _this.A = 1;
          _this.isSpectrumDragging = false;
          _this.isSpectrumHueDragging = false;
          _this.isSpectrumAlphaDragging = false;
          _this.colorChanged = false;
          _this.picker = config.picker;
          return _this;
        }
        AgColorPanel2.prototype.postConstruct = function() {
          var eGui = this.getGui();
          this.initRecentColors();
          this.addManagedListener(this.spectrumVal, "mousedown", this.onSpectrumDraggerDown.bind(this));
          this.addManagedListener(eGui, "mousemove", this.onSpectrumDraggerMove.bind(this));
          this.addManagedListener(this.spectrumHue, "mousedown", this.onSpectrumHueDown.bind(this));
          this.addManagedListener(eGui, "mousemove", this.onSpectrumHueMove.bind(this));
          this.addManagedListener(this.spectrumAlpha, "mousedown", this.onSpectrumAlphaDown.bind(this));
          this.addManagedListener(eGui, "mousemove", this.onSpectrumAlphaMove.bind(this));
          this.addManagedListener(document, "mouseup", this.onMouseUp.bind(this));
          this.addManagedListener(this.recentColors, "click", this.onRecentColorClick.bind(this));
        };
        AgColorPanel2.prototype.refreshSpectrumRect = function() {
          return this.spectrumValRect = this.spectrumVal.getBoundingClientRect();
        };
        AgColorPanel2.prototype.refreshHueRect = function() {
          return this.spectrumHueRect = this.spectrumHue.getBoundingClientRect();
        };
        AgColorPanel2.prototype.refreshAlphaRect = function() {
          return this.spectrumAlphaRect = this.spectrumAlpha.getBoundingClientRect();
        };
        AgColorPanel2.prototype.onSpectrumDraggerDown = function(e) {
          this.refreshSpectrumRect();
          this.isSpectrumDragging = true;
          this.moveDragger(e);
        };
        AgColorPanel2.prototype.onSpectrumDraggerMove = function(e) {
          if (this.isSpectrumDragging) {
            this.moveDragger(e);
          }
        };
        AgColorPanel2.prototype.onSpectrumHueDown = function(e) {
          this.refreshHueRect();
          this.isSpectrumHueDragging = true;
          this.moveHueSlider(e);
        };
        AgColorPanel2.prototype.onSpectrumHueMove = function(e) {
          if (this.isSpectrumHueDragging) {
            this.moveHueSlider(e);
          }
        };
        AgColorPanel2.prototype.onSpectrumAlphaDown = function(e) {
          this.refreshAlphaRect();
          this.isSpectrumAlphaDragging = true;
          this.moveAlphaSlider(e);
        };
        AgColorPanel2.prototype.onSpectrumAlphaMove = function(e) {
          if (this.isSpectrumAlphaDragging) {
            this.moveAlphaSlider(e);
          }
        };
        AgColorPanel2.prototype.onMouseUp = function() {
          this.isSpectrumDragging = false;
          this.isSpectrumHueDragging = false;
          this.isSpectrumAlphaDragging = false;
        };
        AgColorPanel2.prototype.moveDragger = function(e) {
          var valRect = this.spectrumValRect;
          if (valRect) {
            var x = e.clientX - valRect.left;
            var y = e.clientY - valRect.top;
            x = Math.max(x, 0);
            x = Math.min(x, valRect.width);
            y = Math.max(y, 0);
            y = Math.min(y, valRect.height);
            this.setSpectrumValue(x / valRect.width, 1 - y / valRect.height);
          }
        };
        AgColorPanel2.prototype.moveHueSlider = function(e) {
          var hueRect = this.spectrumHueRect;
          if (hueRect) {
            var slider = this.spectrumHueSlider;
            var sliderRect = slider.getBoundingClientRect();
            var x = e.clientX - hueRect.left;
            x = Math.max(x, 0);
            x = Math.min(x, hueRect.width);
            this.H = 1 - x / hueRect.width;
            slider.style.left = x + sliderRect.width / 2 + "px";
            this.update();
          }
        };
        AgColorPanel2.prototype.moveAlphaSlider = function(e) {
          var alphaRect = this.spectrumAlphaRect;
          if (alphaRect) {
            var slider = this.spectrumAlphaSlider;
            var sliderRect = slider.getBoundingClientRect();
            var x = e.clientX - alphaRect.left;
            x = Math.max(x, 0);
            x = Math.min(x, alphaRect.width);
            this.A = x / alphaRect.width;
            slider.style.left = x + sliderRect.width / 2 + "px";
            this.update();
          }
        };
        AgColorPanel2.prototype.update = function() {
          var color = Color.fromHSB(this.H * 360, this.S, this.B, this.A);
          var spectrumColor = Color.fromHSB(this.H * 360, 1, 1);
          var rgbaColor = color.toRgbaString();
          var colorPicker = this.picker;
          var existingColor = Color.fromString(colorPicker.getValue());
          if (existingColor.toRgbaString() !== rgbaColor) {
            this.colorChanged = true;
          }
          colorPicker.setValue(rgbaColor);
          this.spectrumColor.style.backgroundColor = spectrumColor.toRgbaString();
          this.spectrumDragger.style.backgroundColor = rgbaColor;
        };
        AgColorPanel2.prototype.setSpectrumValue = function(saturation, brightness) {
          var valRect = this.spectrumValRect || this.refreshSpectrumRect();
          if (valRect) {
            var dragger = this.spectrumDragger;
            var draggerRect = dragger.getBoundingClientRect();
            saturation = Math.max(0, saturation);
            saturation = Math.min(1, saturation);
            brightness = Math.max(0, brightness);
            brightness = Math.min(1, brightness);
            this.S = saturation;
            this.B = brightness;
            dragger.style.left = saturation * valRect.width - draggerRect.width / 2 + "px";
            dragger.style.top = (1 - brightness) * valRect.height - draggerRect.height / 2 + "px";
            this.update();
          }
        };
        AgColorPanel2.prototype.initRecentColors = function() {
          var recentColors = AgColorPanel2.recentColors;
          var innerHtml = recentColors.map(function(color, index) {
            return '<div class="ag-recent-color" id=' + index + ' style="background-color: ' + color + '; width: 15px; height: 15px;" recent-color="' + color + '"></div>';
          });
          this.recentColors.innerHTML = innerHtml.join("");
        };
        AgColorPanel2.prototype.setValue = function(val) {
          var color = Color.fromString(val);
          var _a2 = color.toHSB(), h2 = _a2[0], s = _a2[1], b = _a2[2];
          this.H = (isNaN(h2) ? 0 : h2) / 360;
          this.A = color.a;
          var spectrumHueRect = this.spectrumHueRect || this.refreshHueRect();
          var spectrumAlphaRect = this.spectrumAlphaRect || this.refreshAlphaRect();
          this.spectrumHueSlider.style.left = (this.H - 1) * -spectrumHueRect.width + "px";
          this.spectrumAlphaSlider.style.left = this.A * spectrumAlphaRect.width + "px";
          this.setSpectrumValue(s, b);
        };
        AgColorPanel2.prototype.onRecentColorClick = function(e) {
          var target = e.target;
          if (!exists(target.id)) {
            return;
          }
          var id = parseInt(target.id, 10);
          this.setValue(AgColorPanel2.recentColors[id]);
          this.destroy();
        };
        AgColorPanel2.prototype.addRecentColor = function() {
          var color = Color.fromHSB(this.H * 360, this.S, this.B, this.A);
          var rgbaColor = color.toRgbaString();
          var recentColors = AgColorPanel2.recentColors;
          if (!this.colorChanged || recentColors[0] === rgbaColor) {
            return;
          }
          recentColors = recentColors.filter(function(currentColor) {
            return currentColor != rgbaColor;
          });
          recentColors = [rgbaColor].concat(recentColors);
          if (recentColors.length > AgColorPanel2.maxRecentColors) {
            recentColors = recentColors.slice(0, AgColorPanel2.maxRecentColors);
          }
          AgColorPanel2.recentColors = recentColors;
        };
        AgColorPanel2.prototype.destroy = function() {
          this.addRecentColor();
          _super.prototype.destroy.call(this);
        };
        AgColorPanel2.maxRecentColors = 8;
        AgColorPanel2.recentColors = [];
        AgColorPanel2.TEMPLATE = '<div class="ag-color-panel">\n            <div ref="spectrumColor" class="ag-spectrum-color">\n                <div class="ag-spectrum-sat ag-spectrum-fill">\n                    <div ref="spectrumVal" class="ag-spectrum-val ag-spectrum-fill">\n                        <div ref="spectrumDragger" class="ag-spectrum-dragger"></div>\n                    </div>\n                </div>\n            </div>\n            <div class="ag-spectrum-tools">\n                <div ref="spectrumHue" class="ag-spectrum-hue ag-spectrum-tool">\n                    <div class="ag-spectrum-hue-background"></div>\n                    <div ref="spectrumHueSlider" class="ag-spectrum-slider"></div>\n                </div>\n                <div ref="spectrumAlpha" class="ag-spectrum-alpha ag-spectrum-tool">\n                    <div class="ag-spectrum-alpha-background"></div>\n                    <div ref="spectrumAlphaSlider" class="ag-spectrum-slider"></div>\n                </div>\n                <div ref="recentColors" class="ag-recent-colors"></div>\n            </div>\n        </div>';
        __decorate$1_([
          RefSelector("spectrumColor")
        ], AgColorPanel2.prototype, "spectrumColor", void 0);
        __decorate$1_([
          RefSelector("spectrumVal")
        ], AgColorPanel2.prototype, "spectrumVal", void 0);
        __decorate$1_([
          RefSelector("spectrumDragger")
        ], AgColorPanel2.prototype, "spectrumDragger", void 0);
        __decorate$1_([
          RefSelector("spectrumHue")
        ], AgColorPanel2.prototype, "spectrumHue", void 0);
        __decorate$1_([
          RefSelector("spectrumHueSlider")
        ], AgColorPanel2.prototype, "spectrumHueSlider", void 0);
        __decorate$1_([
          RefSelector("spectrumAlpha")
        ], AgColorPanel2.prototype, "spectrumAlpha", void 0);
        __decorate$1_([
          RefSelector("spectrumAlphaSlider")
        ], AgColorPanel2.prototype, "spectrumAlphaSlider", void 0);
        __decorate$1_([
          RefSelector("recentColors")
        ], AgColorPanel2.prototype, "recentColors", void 0);
        __decorate$1_([
          PostConstruct
        ], AgColorPanel2.prototype, "postConstruct", null);
        return AgColorPanel2;
      }(Component)
    );
    var __extends$2d = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var AgColorPicker = (
      /** @class */
      function(_super) {
        __extends$2d(AgColorPicker2, _super);
        function AgColorPicker2(config) {
          var _this = _super.call(this, config, "ag-color-picker", "colorPicker") || this;
          if (config && config.color) {
            _this.value = config.color;
          }
          return _this;
        }
        AgColorPicker2.prototype.postConstruct = function() {
          _super.prototype.postConstruct.call(this);
          if (this.value) {
            this.setValue(this.value);
          }
        };
        AgColorPicker2.prototype.showPicker = function() {
          var _this = this;
          var eGuiRect = this.getGui().getBoundingClientRect();
          var colorDialog = this.createBean(new AgDialog({
            closable: false,
            modal: true,
            hideTitleBar: true,
            minWidth: 190,
            width: 190,
            height: 250,
            x: eGuiRect.right - 190,
            y: eGuiRect.top - 250
          }));
          this.isPickerDisplayed = true;
          addCssClass(colorDialog.getGui(), "ag-color-dialog");
          var colorPanel = this.createBean(new AgColorPanel({ picker: this }));
          colorPanel.addDestroyFunc(function() {
            if (colorDialog.isAlive()) {
              _this.destroyBean(colorDialog);
            }
          });
          colorDialog.setParentComponent(this);
          colorDialog.setBodyComponent(colorPanel);
          colorPanel.setValue(this.getValue());
          colorDialog.addDestroyFunc(function() {
            if (!_this.isDestroyingPicker) {
              _this.isDestroyingPicker = true;
              if (colorPanel.isAlive()) {
                _this.destroyBean(colorPanel);
              }
            } else {
              _this.isDestroyingPicker = false;
            }
            if (_this.isAlive()) {
              _this.getFocusableElement().focus();
            }
            _this.isPickerDisplayed = false;
          });
          return colorDialog;
        };
        AgColorPicker2.prototype.setValue = function(color) {
          if (this.value === color) {
            return this;
          }
          this.eDisplayField.style.backgroundColor = color;
          return _super.prototype.setValue.call(this, color);
        };
        AgColorPicker2.prototype.getValue = function() {
          return this.value;
        };
        return AgColorPicker2;
      }(AgPickerField)
    );
    var __extends$2e = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var AgInputNumberField = (
      /** @class */
      function(_super) {
        __extends$2e(AgInputNumberField2, _super);
        function AgInputNumberField2(config) {
          return _super.call(this, config, "ag-number-field", "number") || this;
        }
        AgInputNumberField2.prototype.postConstruct = function() {
          var _this = this;
          _super.prototype.postConstruct.call(this);
          this.addManagedListener(this.eInput, "blur", function() {
            var floatedValue = parseFloat(_this.eInput.value);
            var value = isNaN(floatedValue) ? "" : _this.normalizeValue(floatedValue.toString());
            if (_this.value !== value) {
              _this.setValue(value);
            }
          });
        };
        AgInputNumberField2.prototype.normalizeValue = function(value) {
          if (value === "") {
            return "";
          }
          if (this.precision) {
            value = this.adjustPrecision(value);
          }
          var val = parseFloat(value);
          if (this.min != null && val < this.min) {
            value = this.min.toString();
          } else if (this.max != null && val > this.max) {
            value = this.max.toString();
          }
          return value;
        };
        AgInputNumberField2.prototype.adjustPrecision = function(value) {
          if (this.precision) {
            var floatString = parseFloat(value).toFixed(this.precision);
            value = parseFloat(floatString).toString();
          }
          return value;
        };
        AgInputNumberField2.prototype.setMin = function(min) {
          if (this.min === min) {
            return this;
          }
          this.min = min;
          addOrRemoveAttribute(this.eInput, "min", min);
          return this;
        };
        AgInputNumberField2.prototype.setMax = function(max) {
          if (this.max === max) {
            return this;
          }
          this.max = max;
          addOrRemoveAttribute(this.eInput, "max", max);
          return this;
        };
        AgInputNumberField2.prototype.setPrecision = function(precision) {
          this.precision = precision;
          return this;
        };
        AgInputNumberField2.prototype.setStep = function(step) {
          if (this.step === step) {
            return this;
          }
          this.step = step;
          addOrRemoveAttribute(this.eInput, "step", step);
          return this;
        };
        AgInputNumberField2.prototype.setValue = function(value, silent) {
          value = this.adjustPrecision(value);
          var normalizedValue = this.normalizeValue(value);
          if (value != normalizedValue) {
            return this;
          }
          return _super.prototype.setValue.call(this, value, silent);
        };
        return AgInputNumberField2;
      }(AgInputTextField)
    );
    var __extends$2f = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var AgInputRange = (
      /** @class */
      function(_super) {
        __extends$2f(AgInputRange2, _super);
        function AgInputRange2(config) {
          return _super.call(this, config, "ag-range-field", "range") || this;
        }
        AgInputRange2.prototype.postConstruct = function() {
          _super.prototype.postConstruct.call(this);
          var _a2 = this.config, min = _a2.min, max = _a2.max, step = _a2.step;
          if (min != null) {
            this.setMinValue(min);
          }
          if (max != null) {
            this.setMaxValue(max);
          }
          this.setStep(step || 1);
        };
        AgInputRange2.prototype.addInputListeners = function() {
          var _this = this;
          var isIE2 = isBrowserIE();
          var eventName = isIE2 ? "change" : "input";
          this.addManagedListener(this.eInput, eventName, function(e) {
            var value = e.target.value;
            _this.setValue(value);
          });
        };
        AgInputRange2.prototype.setMinValue = function(value) {
          this.min = value;
          this.eInput.setAttribute("min", value.toString());
          return this;
        };
        AgInputRange2.prototype.setMaxValue = function(value) {
          this.max = value;
          this.eInput.setAttribute("max", value.toString());
          return this;
        };
        AgInputRange2.prototype.setStep = function(value) {
          this.eInput.setAttribute("step", value.toString());
          return this;
        };
        AgInputRange2.prototype.setValue = function(value, silent) {
          if (this.min != null) {
            value = Math.max(parseFloat(value), this.min).toString();
          }
          if (this.max != null) {
            value = Math.min(parseFloat(value), this.max).toString();
          }
          var ret = _super.prototype.setValue.call(this, value, silent);
          this.eInput.value = value;
          return ret;
        };
        return AgInputRange2;
      }(AgAbstractInputField)
    );
    var __extends$2g = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$1$ = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var AgAngleSelect = (
      /** @class */
      function(_super) {
        __extends$2g(AgAngleSelect2, _super);
        function AgAngleSelect2(config) {
          var _this = _super.call(this, config, AgAngleSelect2.TEMPLATE) || this;
          _this.radius = 0;
          _this.offsetX = 0;
          _this.offsetY = 0;
          return _this;
        }
        AgAngleSelect2.prototype.postConstruct = function() {
          var _this = this;
          _super.prototype.postConstruct.call(this);
          this.dragListener = {
            eElement: this.eParentCircle,
            dragStartPixels: 0,
            onDragStart: function(e) {
              _this.parentCircleRect = _this.eParentCircle.getBoundingClientRect();
            },
            onDragging: function(e) {
              return _this.calculateAngleDrag(e);
            },
            onDragStop: function() {
            }
          };
          this.dragService.addDragSource(this.dragListener);
          this.eAngleValue.setLabel("").setLabelWidth(5).setInputWidth(45).setMin(0).setMax(360).setValue("" + this.degrees).onValueChange(function(value) {
            if (value == null || value === "") {
              value = "0";
            }
            value = _this.eAngleValue.normalizeValue(value);
            var floatValue = parseFloat(value);
            if (floatValue > 180) {
              floatValue = floatValue - 360;
            }
            _this.setValue(floatValue);
          });
          this.updateNumberInput();
          if (exists(this.getValue())) {
            this.eAngleValue.setValue(this.normalizeNegativeValue(this.getValue()).toString());
          }
          this.addManagedListener(this, AgAbstractField.EVENT_CHANGED, function() {
            if (_this.eAngleValue.getInputElement().contains(document.activeElement)) {
              return;
            }
            _this.updateNumberInput();
          });
        };
        AgAngleSelect2.prototype.updateNumberInput = function() {
          var normalizedValue = this.normalizeNegativeValue(this.getValue());
          this.eAngleValue.setValue(normalizedValue.toString());
        };
        AgAngleSelect2.prototype.positionChildCircle = function(radians) {
          var rect = this.parentCircleRect || { width: 24, height: 24 };
          var eChildCircle = this.eChildCircle;
          var centerX = rect.width / 2;
          var centerY = rect.height / 2;
          eChildCircle.style.left = centerX + Math.cos(radians) * 8 + "px";
          eChildCircle.style.top = centerY + Math.sin(radians) * 8 + "px";
        };
        AgAngleSelect2.prototype.calculatePolar = function() {
          var x = this.offsetX;
          var y = this.offsetY;
          var radians = Math.atan2(y, x);
          this.degrees = this.toDegrees(radians);
          this.radius = Math.sqrt(x * x + y * y);
          this.positionChildCircle(radians);
        };
        AgAngleSelect2.prototype.calculateCartesian = function() {
          var radians = this.toRadians(this.getValue());
          var radius = this.getRadius();
          this.setOffsetX(Math.cos(radians) * radius).setOffsetY(Math.sin(radians) * radius);
        };
        AgAngleSelect2.prototype.setOffsetX = function(offset) {
          if (this.offsetX !== offset) {
            this.offsetX = offset;
            this.calculatePolar();
          }
          return this;
        };
        AgAngleSelect2.prototype.setOffsetY = function(offset) {
          if (this.offsetY !== offset) {
            this.offsetY = offset;
            this.calculatePolar();
          }
          return this;
        };
        AgAngleSelect2.prototype.calculateAngleDrag = function(e) {
          var rect = this.parentCircleRect;
          var centerX = rect.width / 2;
          var centerY = rect.height / 2;
          var x = e.clientX - rect.left;
          var y = e.clientY - rect.top;
          var dx = x - centerX;
          var dy = y - centerY;
          var radians = Math.atan2(dy, dx);
          this.setValue(radians, true);
        };
        AgAngleSelect2.prototype.toDegrees = function(radians) {
          return radians / Math.PI * 180;
        };
        AgAngleSelect2.prototype.toRadians = function(degrees) {
          return degrees / 180 * Math.PI;
        };
        AgAngleSelect2.prototype.normalizeNegativeValue = function(degrees) {
          return degrees < 0 ? 360 + degrees : degrees;
        };
        AgAngleSelect2.prototype.normalizeAngle180 = function(radians) {
          radians %= Math.PI * 2;
          if (radians < -Math.PI) {
            radians += Math.PI * 2;
          } else if (radians >= Math.PI) {
            radians -= Math.PI * 2;
          }
          return radians;
        };
        AgAngleSelect2.prototype.getRadius = function() {
          return this.radius;
        };
        AgAngleSelect2.prototype.setRadius = function(r) {
          if (this.radius === r) {
            return this;
          }
          this.radius = r;
          this.calculateCartesian();
          return this;
        };
        AgAngleSelect2.prototype.onValueChange = function(callbackFn) {
          var _this = this;
          this.addManagedListener(this, AgAbstractField.EVENT_CHANGED, function() {
            callbackFn(_this.degrees);
          });
          return this;
        };
        AgAngleSelect2.prototype.getValue = function(radians) {
          return radians ? this.toRadians(this.degrees) : this.degrees;
        };
        AgAngleSelect2.prototype.setValue = function(degrees, radians) {
          var radiansValue;
          if (!radians) {
            radiansValue = this.normalizeAngle180(this.toRadians(degrees));
          } else {
            radiansValue = degrees;
          }
          degrees = this.toDegrees(radiansValue);
          if (this.degrees !== degrees) {
            this.degrees = Math.floor(degrees);
            this.calculateCartesian();
            this.positionChildCircle(radiansValue);
            this.dispatchEvent({ type: AgAbstractField.EVENT_CHANGED });
          }
          return this;
        };
        AgAngleSelect2.prototype.setWidth = function(width) {
          setFixedWidth(this.getGui(), width);
          return this;
        };
        AgAngleSelect2.prototype.destroy = function() {
          this.dragService.removeDragSource(this.dragListener);
          _super.prototype.destroy.call(this);
        };
        AgAngleSelect2.TEMPLATE = '<div class="ag-angle-select">\n            <div ref="eLabel"></div>\n            <div class="ag-wrapper ag-angle-select-wrapper">\n                <div ref="eAngleSelectField" class="ag-angle-select-field">\n                    <div ref="eParentCircle" class="ag-angle-select-parent-circle">\n                        <div ref="eChildCircle" class="ag-angle-select-child-circle"></div>\n                    </div>\n                </div>\n                <ag-input-number-field ref="eAngleValue"></ag-input-number-field>\n            </div>\n        </div>';
        __decorate$1$([
          RefSelector("eLabel")
        ], AgAngleSelect2.prototype, "eLabel", void 0);
        __decorate$1$([
          RefSelector("eParentCircle")
        ], AgAngleSelect2.prototype, "eParentCircle", void 0);
        __decorate$1$([
          RefSelector("eChildCircle")
        ], AgAngleSelect2.prototype, "eChildCircle", void 0);
        __decorate$1$([
          RefSelector("eAngleValue")
        ], AgAngleSelect2.prototype, "eAngleValue", void 0);
        __decorate$1$([
          Autowired("dragService")
        ], AgAngleSelect2.prototype, "dragService", void 0);
        return AgAngleSelect2;
      }(AgAbstractLabel)
    );
    var __extends$2h = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var AgToggleButton = (
      /** @class */
      function(_super) {
        __extends$2h(AgToggleButton2, _super);
        function AgToggleButton2(config) {
          return _super.call(this, config, "ag-toggle-button") || this;
        }
        AgToggleButton2.prototype.setValue = function(value, silent) {
          _super.prototype.setValue.call(this, value, silent);
          addOrRemoveCssClass(this.getGui(), "ag-selected", this.getValue());
          return this;
        };
        return AgToggleButton2;
      }(AgCheckbox)
    );
    var __extends$2i = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$20 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var RowPositionUtils = (
      /** @class */
      function(_super) {
        __extends$2i(RowPositionUtils2, _super);
        function RowPositionUtils2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        RowPositionUtils2.prototype.getFirstRow = function() {
          var rowIndex = 0;
          var rowPinned;
          if (this.pinnedRowModel.getPinnedTopRowCount()) {
            rowPinned = Constants.PINNED_TOP;
          } else if (this.rowModel.getRowCount()) {
            rowPinned = null;
            rowIndex = this.paginationProxy.getPageFirstRow();
          } else if (this.pinnedRowModel.getPinnedBottomRowCount()) {
            rowPinned = Constants.PINNED_BOTTOM;
          }
          return rowPinned === void 0 ? null : { rowIndex, rowPinned };
        };
        RowPositionUtils2.prototype.getLastRow = function() {
          var rowIndex;
          var rowPinned = null;
          var pinnedBottomCount = this.pinnedRowModel.getPinnedBottomRowCount();
          var pinnedTopCount = this.pinnedRowModel.getPinnedTopRowCount();
          if (pinnedBottomCount) {
            rowPinned = Constants.PINNED_BOTTOM;
            rowIndex = pinnedBottomCount - 1;
          } else if (this.rowModel.getRowCount()) {
            rowPinned = null;
            rowIndex = this.paginationProxy.getPageLastRow();
          } else if (pinnedTopCount) {
            rowPinned = Constants.PINNED_TOP;
            rowIndex = pinnedTopCount - 1;
          }
          return rowIndex === void 0 ? null : { rowIndex, rowPinned };
        };
        RowPositionUtils2.prototype.getRowNode = function(gridRow) {
          switch (gridRow.rowPinned) {
            case Constants.PINNED_TOP:
              return this.pinnedRowModel.getPinnedTopRowData()[gridRow.rowIndex];
            case Constants.PINNED_BOTTOM:
              return this.pinnedRowModel.getPinnedBottomRowData()[gridRow.rowIndex];
            default:
              return this.rowModel.getRow(gridRow.rowIndex);
          }
        };
        RowPositionUtils2.prototype.sameRow = function(rowA, rowB) {
          if (!rowA && !rowB) {
            return true;
          }
          if (rowA && !rowB || !rowA && rowB) {
            return false;
          }
          return rowA.rowIndex === rowB.rowIndex && rowA.rowPinned == rowB.rowPinned;
        };
        RowPositionUtils2.prototype.before = function(rowA, rowB) {
          switch (rowA.rowPinned) {
            case Constants.PINNED_TOP:
              if (rowB.rowPinned !== Constants.PINNED_TOP) {
                return true;
              }
              break;
            case Constants.PINNED_BOTTOM:
              if (rowB.rowPinned !== Constants.PINNED_BOTTOM) {
                return false;
              }
              break;
            default:
              if (exists(rowB.rowPinned)) {
                return rowB.rowPinned !== Constants.PINNED_TOP;
              }
              break;
          }
          return rowA.rowIndex < rowB.rowIndex;
        };
        __decorate$20([
          Autowired("rowModel")
        ], RowPositionUtils2.prototype, "rowModel", void 0);
        __decorate$20([
          Autowired("pinnedRowModel")
        ], RowPositionUtils2.prototype, "pinnedRowModel", void 0);
        __decorate$20([
          Autowired("paginationProxy")
        ], RowPositionUtils2.prototype, "paginationProxy", void 0);
        RowPositionUtils2 = __decorate$20([
          Bean3("rowPositionUtils")
        ], RowPositionUtils2);
        return RowPositionUtils2;
      }(BeanStub)
    );
    var __extends$2j = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$21 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var CellPositionUtils = (
      /** @class */
      function(_super) {
        __extends$2j(CellPositionUtils2, _super);
        function CellPositionUtils2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        CellPositionUtils2.prototype.createId = function(cellPosition) {
          var rowIndex = cellPosition.rowIndex, rowPinned = cellPosition.rowPinned, column = cellPosition.column;
          return this.createIdFromValues(rowIndex, column, rowPinned);
        };
        CellPositionUtils2.prototype.createIdFromValues = function(rowIndex, column, rowPinned) {
          return rowIndex + "." + (rowPinned == null ? "null" : rowPinned) + "." + column.getId();
        };
        CellPositionUtils2.prototype.equals = function(cellA, cellB) {
          var colsMatch = cellA.column === cellB.column;
          var floatingMatch = cellA.rowPinned === cellB.rowPinned;
          var indexMatch = cellA.rowIndex === cellB.rowIndex;
          return colsMatch && floatingMatch && indexMatch;
        };
        CellPositionUtils2 = __decorate$21([
          Bean3("cellPositionUtils")
        ], CellPositionUtils2);
        return CellPositionUtils2;
      }(BeanStub)
    );
    var __extends$2k = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$22 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var PinnedRowModel = (
      /** @class */
      function(_super) {
        __extends$2k(PinnedRowModel2, _super);
        function PinnedRowModel2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        PinnedRowModel2.prototype.init = function() {
          this.setPinnedTopRowData(this.gridOptionsWrapper.getPinnedTopRowData());
          this.setPinnedBottomRowData(this.gridOptionsWrapper.getPinnedBottomRowData());
        };
        PinnedRowModel2.prototype.isEmpty = function(floating) {
          var rows = floating === Constants.PINNED_TOP ? this.pinnedTopRows : this.pinnedBottomRows;
          return missingOrEmpty(rows);
        };
        PinnedRowModel2.prototype.isRowsToRender = function(floating) {
          return !this.isEmpty(floating);
        };
        PinnedRowModel2.prototype.getRowAtPixel = function(pixel, floating) {
          var rows = floating === Constants.PINNED_TOP ? this.pinnedTopRows : this.pinnedBottomRows;
          if (missingOrEmpty(rows)) {
            return 0;
          }
          for (var i = 0; i < rows.length; i++) {
            var rowNode = rows[i];
            var rowTopPixel = rowNode.rowTop + rowNode.rowHeight - 1;
            if (rowTopPixel >= pixel) {
              return i;
            }
          }
          return rows.length - 1;
        };
        PinnedRowModel2.prototype.setPinnedTopRowData = function(rowData) {
          this.pinnedTopRows = this.createNodesFromData(rowData, true);
          var event = {
            type: Events.EVENT_PINNED_ROW_DATA_CHANGED,
            api: this.gridApi,
            columnApi: this.columnApi
          };
          this.eventService.dispatchEvent(event);
        };
        PinnedRowModel2.prototype.setPinnedBottomRowData = function(rowData) {
          this.pinnedBottomRows = this.createNodesFromData(rowData, false);
          var event = {
            type: Events.EVENT_PINNED_ROW_DATA_CHANGED,
            api: this.gridApi,
            columnApi: this.columnApi
          };
          this.eventService.dispatchEvent(event);
        };
        PinnedRowModel2.prototype.createNodesFromData = function(allData, isTop) {
          var _this = this;
          var rowNodes = [];
          if (allData) {
            var nextRowTop_1 = 0;
            allData.forEach(function(dataItem, index) {
              var rowNode = new RowNode(_this.beans);
              rowNode.data = dataItem;
              var idPrefix = isTop ? RowNode.ID_PREFIX_TOP_PINNED : RowNode.ID_PREFIX_BOTTOM_PINNED;
              rowNode.id = idPrefix + index;
              rowNode.rowPinned = isTop ? Constants.PINNED_TOP : Constants.PINNED_BOTTOM;
              rowNode.setRowTop(nextRowTop_1);
              rowNode.setRowHeight(_this.gridOptionsWrapper.getRowHeightForNode(rowNode).height);
              rowNode.setRowIndex(index);
              nextRowTop_1 += rowNode.rowHeight;
              rowNodes.push(rowNode);
            });
          }
          return rowNodes;
        };
        PinnedRowModel2.prototype.getPinnedTopRowData = function() {
          return this.pinnedTopRows;
        };
        PinnedRowModel2.prototype.getPinnedBottomRowData = function() {
          return this.pinnedBottomRows;
        };
        PinnedRowModel2.prototype.getPinnedTopTotalHeight = function() {
          return this.getTotalHeight(this.pinnedTopRows);
        };
        PinnedRowModel2.prototype.getPinnedTopRowCount = function() {
          return this.pinnedTopRows ? this.pinnedTopRows.length : 0;
        };
        PinnedRowModel2.prototype.getPinnedBottomRowCount = function() {
          return this.pinnedBottomRows ? this.pinnedBottomRows.length : 0;
        };
        PinnedRowModel2.prototype.getPinnedTopRow = function(index) {
          return this.pinnedTopRows[index];
        };
        PinnedRowModel2.prototype.getPinnedBottomRow = function(index) {
          return this.pinnedBottomRows[index];
        };
        PinnedRowModel2.prototype.forEachPinnedTopRow = function(callback) {
          if (missingOrEmpty(this.pinnedTopRows)) {
            return;
          }
          this.pinnedTopRows.forEach(callback);
        };
        PinnedRowModel2.prototype.forEachPinnedBottomRow = function(callback) {
          if (missingOrEmpty(this.pinnedBottomRows)) {
            return;
          }
          this.pinnedBottomRows.forEach(callback);
        };
        PinnedRowModel2.prototype.getPinnedBottomTotalHeight = function() {
          return this.getTotalHeight(this.pinnedBottomRows);
        };
        PinnedRowModel2.prototype.getTotalHeight = function(rowNodes) {
          if (!rowNodes || rowNodes.length === 0) {
            return 0;
          }
          var lastNode = last(rowNodes);
          return lastNode.rowTop + lastNode.rowHeight;
        };
        __decorate$22([
          Autowired("columnApi")
        ], PinnedRowModel2.prototype, "columnApi", void 0);
        __decorate$22([
          Autowired("gridApi")
        ], PinnedRowModel2.prototype, "gridApi", void 0);
        __decorate$22([
          Autowired("beans")
        ], PinnedRowModel2.prototype, "beans", void 0);
        __decorate$22([
          PostConstruct
        ], PinnedRowModel2.prototype, "init", null);
        PinnedRowModel2 = __decorate$22([
          Bean3("pinnedRowModel")
        ], PinnedRowModel2);
        return PinnedRowModel2;
      }(BeanStub)
    );
    var __extends$2l = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var UndoRedoAction = (
      /** @class */
      function() {
        function UndoRedoAction2(cellValueChanges) {
          this.cellValueChanges = cellValueChanges;
        }
        return UndoRedoAction2;
      }()
    );
    var FillUndoRedoAction = (
      /** @class */
      function(_super) {
        __extends$2l(FillUndoRedoAction2, _super);
        function FillUndoRedoAction2(cellValueChanges, initialRange, finalRange) {
          var _this = _super.call(this, cellValueChanges) || this;
          _this.initialRange = initialRange;
          _this.finalRange = finalRange;
          return _this;
        }
        return FillUndoRedoAction2;
      }(UndoRedoAction)
    );
    var UndoRedoStack = (
      /** @class */
      function() {
        function UndoRedoStack2(maxStackSize) {
          this.actionStack = [];
          this.maxStackSize = maxStackSize ? maxStackSize : UndoRedoStack2.DEFAULT_STACK_SIZE;
          this.actionStack = new Array(this.maxStackSize);
        }
        UndoRedoStack2.prototype.pop = function() {
          return this.actionStack.pop();
        };
        UndoRedoStack2.prototype.push = function(item) {
          var shouldAddActions = item.cellValueChanges && item.cellValueChanges.length > 0;
          if (!shouldAddActions) {
            return;
          }
          if (this.actionStack.length === this.maxStackSize) {
            this.actionStack.shift();
          }
          this.actionStack.push(item);
        };
        UndoRedoStack2.prototype.clear = function() {
          this.actionStack = [];
        };
        UndoRedoStack2.prototype.getCurrentStackSize = function() {
          return this.actionStack.length;
        };
        UndoRedoStack2.DEFAULT_STACK_SIZE = 10;
        return UndoRedoStack2;
      }()
    );
    var __extends$2m = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$23 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var UndoRedoService = (
      /** @class */
      function(_super) {
        __extends$2m(UndoRedoService2, _super);
        function UndoRedoService2() {
          var _this = _super !== null && _super.apply(this, arguments) || this;
          _this.cellValueChanges = [];
          _this.activeCellEdit = null;
          _this.activeRowEdit = null;
          _this.isPasting = false;
          _this.isFilling = false;
          _this.onCellValueChanged = function(event) {
            var eventCell = { column: event.column, rowIndex: event.rowIndex, rowPinned: event.rowPinned };
            var isCellEditing = _this.activeCellEdit !== null && _this.cellPositionUtils.equals(_this.activeCellEdit, eventCell);
            var isRowEditing = _this.activeRowEdit !== null && _this.rowPositionUtils.sameRow(_this.activeRowEdit, eventCell);
            var shouldCaptureAction = isCellEditing || isRowEditing || _this.isPasting || _this.isFilling;
            if (!shouldCaptureAction) {
              return;
            }
            var rowPinned = event.rowPinned, rowIndex = event.rowIndex, column = event.column, oldValue = event.oldValue, value = event.value;
            var cellValueChange = {
              rowPinned,
              rowIndex,
              columnId: column.getColId(),
              newValue: value,
              oldValue
            };
            _this.cellValueChanges.push(cellValueChange);
          };
          _this.clearStacks = function() {
            _this.undoStack.clear();
            _this.redoStack.clear();
          };
          return _this;
        }
        UndoRedoService2.prototype.init = function() {
          if (!this.gridOptionsWrapper.isUndoRedoCellEditing()) {
            return;
          }
          var undoRedoLimit = this.gridOptionsWrapper.getUndoRedoCellEditingLimit();
          if (undoRedoLimit <= 0) {
            return;
          }
          this.undoStack = new UndoRedoStack(undoRedoLimit);
          this.redoStack = new UndoRedoStack(undoRedoLimit);
          this.addRowEditingListeners();
          this.addCellEditingListeners();
          this.addPasteListeners();
          this.addFillListeners();
          this.addManagedListener(this.eventService, Events.EVENT_CELL_VALUE_CHANGED, this.onCellValueChanged);
          this.addManagedListener(this.eventService, Events.EVENT_MODEL_UPDATED, this.clearStacks);
          this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, this.clearStacks);
          this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, this.clearStacks);
          this.addManagedListener(this.eventService, Events.EVENT_COLUMN_GROUP_OPENED, this.clearStacks);
          this.addManagedListener(this.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.clearStacks);
          this.addManagedListener(this.eventService, Events.EVENT_COLUMN_MOVED, this.clearStacks);
          this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PINNED, this.clearStacks);
          this.addManagedListener(this.eventService, Events.EVENT_COLUMN_VISIBLE, this.clearStacks);
          this.addManagedListener(this.eventService, Events.EVENT_ROW_DRAG_END, this.clearStacks);
        };
        UndoRedoService2.prototype.getCurrentUndoStackSize = function() {
          return this.undoStack ? this.undoStack.getCurrentStackSize() : 0;
        };
        UndoRedoService2.prototype.getCurrentRedoStackSize = function() {
          return this.redoStack ? this.redoStack.getCurrentStackSize() : 0;
        };
        UndoRedoService2.prototype.undo = function() {
          if (!this.undoStack) {
            return;
          }
          var undoAction = this.undoStack.pop();
          if (!undoAction || !undoAction.cellValueChanges) {
            return;
          }
          this.processAction(undoAction, function(cellValueChange) {
            return cellValueChange.oldValue;
          });
          if (undoAction instanceof FillUndoRedoAction) {
            this.processRangeAndCellFocus(undoAction.cellValueChanges, undoAction.initialRange);
          } else {
            this.processRangeAndCellFocus(undoAction.cellValueChanges);
          }
          this.redoStack.push(undoAction);
        };
        UndoRedoService2.prototype.redo = function() {
          if (!this.redoStack) {
            return;
          }
          var redoAction = this.redoStack.pop();
          if (!redoAction || !redoAction.cellValueChanges) {
            return;
          }
          this.processAction(redoAction, function(cellValueChange) {
            return cellValueChange.newValue;
          });
          if (redoAction instanceof FillUndoRedoAction) {
            this.processRangeAndCellFocus(redoAction.cellValueChanges, redoAction.finalRange);
          } else {
            this.processRangeAndCellFocus(redoAction.cellValueChanges);
          }
          this.undoStack.push(redoAction);
        };
        UndoRedoService2.prototype.processAction = function(action, valueExtractor) {
          var _this = this;
          action.cellValueChanges.forEach(function(cellValueChange) {
            var rowIndex = cellValueChange.rowIndex, rowPinned = cellValueChange.rowPinned, columnId = cellValueChange.columnId;
            var rowPosition = { rowIndex, rowPinned };
            var currentRow = _this.getRowNode(rowPosition);
            if (!currentRow.displayed) {
              return;
            }
            currentRow.setDataValue(columnId, valueExtractor(cellValueChange));
          });
        };
        UndoRedoService2.prototype.processRangeAndCellFocus = function(cellValueChanges, range) {
          var lastFocusedCell;
          if (range) {
            var startRow = range.startRow;
            var endRow = range.endRow;
            lastFocusedCell = {
              rowPinned: startRow.rowPinned,
              rowIndex: startRow.rowIndex,
              columnId: range.startColumn.getColId()
            };
            this.setLastFocusedCell(lastFocusedCell);
            var cellRangeParams = {
              rowStartIndex: startRow.rowIndex,
              rowStartPinned: startRow.rowPinned,
              rowEndIndex: endRow.rowIndex,
              rowEndPinned: endRow.rowPinned,
              columnStart: range.startColumn,
              columns: range.columns
            };
            this.gridApi.addCellRange(cellRangeParams);
            return;
          }
          var cellValueChange = cellValueChanges[0];
          var rowIndex = cellValueChange.rowIndex, rowPinned = cellValueChange.rowPinned;
          var rowPosition = { rowIndex, rowPinned };
          var row = this.getRowNode(rowPosition);
          lastFocusedCell = {
            rowPinned: cellValueChange.rowPinned,
            rowIndex: row.rowIndex,
            columnId: cellValueChange.columnId
          };
          this.setLastFocusedCell(lastFocusedCell);
        };
        UndoRedoService2.prototype.setLastFocusedCell = function(lastFocusedCell) {
          var rowIndex = lastFocusedCell.rowIndex, columnId = lastFocusedCell.columnId, rowPinned = lastFocusedCell.rowPinned;
          this.gridApi.ensureIndexVisible(rowIndex);
          this.gridApi.ensureColumnVisible(columnId);
          if (ModuleRegistry.isRegistered(exports.ModuleNames.RangeSelectionModule)) {
            this.gridApi.clearRangeSelection();
          }
          this.focusService.setFocusedCell(rowIndex, columnId, rowPinned, true);
        };
        UndoRedoService2.prototype.addRowEditingListeners = function() {
          var _this = this;
          this.addManagedListener(this.eventService, Events.EVENT_ROW_EDITING_STARTED, function(e) {
            _this.activeRowEdit = { rowIndex: e.rowIndex, rowPinned: e.rowPinned };
          });
          this.addManagedListener(this.eventService, Events.EVENT_ROW_EDITING_STOPPED, function() {
            var action = new UndoRedoAction(_this.cellValueChanges);
            _this.pushActionsToUndoStack(action);
            _this.activeRowEdit = null;
          });
        };
        UndoRedoService2.prototype.addCellEditingListeners = function() {
          var _this = this;
          this.addManagedListener(this.eventService, Events.EVENT_CELL_EDITING_STARTED, function(e) {
            _this.activeCellEdit = { column: e.column, rowIndex: e.rowIndex, rowPinned: e.rowPinned };
          });
          this.addManagedListener(this.eventService, Events.EVENT_CELL_EDITING_STOPPED, function() {
            _this.activeCellEdit = null;
            var shouldPushAction = !_this.activeRowEdit && !_this.isPasting && !_this.isFilling;
            if (shouldPushAction) {
              var action = new UndoRedoAction(_this.cellValueChanges);
              _this.pushActionsToUndoStack(action);
            }
          });
        };
        UndoRedoService2.prototype.addPasteListeners = function() {
          var _this = this;
          this.addManagedListener(this.eventService, Events.EVENT_PASTE_START, function() {
            _this.isPasting = true;
          });
          this.addManagedListener(this.eventService, Events.EVENT_PASTE_END, function() {
            var action = new UndoRedoAction(_this.cellValueChanges);
            _this.pushActionsToUndoStack(action);
            _this.isPasting = false;
          });
        };
        UndoRedoService2.prototype.addFillListeners = function() {
          var _this = this;
          this.addManagedListener(this.eventService, Events.EVENT_FILL_START, function() {
            _this.isFilling = true;
          });
          this.addManagedListener(this.eventService, Events.EVENT_FILL_END, function(event) {
            var action = new FillUndoRedoAction(_this.cellValueChanges, event.initialRange, event.finalRange);
            _this.pushActionsToUndoStack(action);
            _this.isFilling = false;
          });
        };
        UndoRedoService2.prototype.pushActionsToUndoStack = function(action) {
          this.undoStack.push(action);
          this.cellValueChanges = [];
          this.redoStack.clear();
        };
        UndoRedoService2.prototype.getRowNode = function(gridRow) {
          switch (gridRow.rowPinned) {
            case Constants.PINNED_TOP:
              return this.pinnedRowModel.getPinnedTopRowData()[gridRow.rowIndex];
            case Constants.PINNED_BOTTOM:
              return this.pinnedRowModel.getPinnedBottomRowData()[gridRow.rowIndex];
            default:
              return this.rowModel.getRow(gridRow.rowIndex);
          }
        };
        __decorate$23([
          Autowired("focusService")
        ], UndoRedoService2.prototype, "focusService", void 0);
        __decorate$23([
          Autowired("gridApi")
        ], UndoRedoService2.prototype, "gridApi", void 0);
        __decorate$23([
          Autowired("rowModel")
        ], UndoRedoService2.prototype, "rowModel", void 0);
        __decorate$23([
          Autowired("pinnedRowModel")
        ], UndoRedoService2.prototype, "pinnedRowModel", void 0);
        __decorate$23([
          Autowired("cellPositionUtils")
        ], UndoRedoService2.prototype, "cellPositionUtils", void 0);
        __decorate$23([
          Autowired("rowPositionUtils")
        ], UndoRedoService2.prototype, "rowPositionUtils", void 0);
        __decorate$23([
          PostConstruct
        ], UndoRedoService2.prototype, "init", null);
        UndoRedoService2 = __decorate$23([
          Bean3("undoRedoService")
        ], UndoRedoService2);
        return UndoRedoService2;
      }(BeanStub)
    );
    var __extends$2n = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$24 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var HeaderPositionUtils = (
      /** @class */
      function(_super) {
        __extends$2n(HeaderPositionUtils2, _super);
        function HeaderPositionUtils2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        HeaderPositionUtils2.prototype.findHeader = function(focusedHeader, direction) {
          var nextColumn;
          var getGroupMethod;
          var getColMethod;
          if (focusedHeader.column instanceof ColumnGroup) {
            getGroupMethod = "getDisplayedGroup" + direction;
            nextColumn = this.columnModel[getGroupMethod](focusedHeader.column);
          } else {
            getColMethod = "getDisplayedCol" + direction;
            nextColumn = this.columnModel[getColMethod](focusedHeader.column);
          }
          if (nextColumn) {
            return {
              column: nextColumn,
              headerRowIndex: focusedHeader.headerRowIndex
            };
          }
        };
        HeaderPositionUtils2.prototype.findColAtEdgeForHeaderRow = function(level, position) {
          var displayedColumns = this.columnModel.getAllDisplayedColumns();
          var column = displayedColumns[position === "start" ? 0 : displayedColumns.length - 1];
          if (!column) {
            return;
          }
          var childContainer = this.ctrlsService.getHeaderRowContainerCtrl(column.getPinned());
          var type = childContainer.getRowType(level);
          console.log("level=" + level + " type = " + type);
          if (type == exports.HeaderRowType.COLUMN_GROUP) {
            var columnGroup = this.columnModel.getColumnGroupAtLevel(column, level);
            return {
              headerRowIndex: level,
              column: columnGroup
            };
          }
          return {
            // if type==null, means the header level didn't exist
            headerRowIndex: type == null ? -1 : level,
            column
          };
        };
        __decorate$24([
          Autowired("columnModel")
        ], HeaderPositionUtils2.prototype, "columnModel", void 0);
        __decorate$24([
          Autowired("ctrlsService")
        ], HeaderPositionUtils2.prototype, "ctrlsService", void 0);
        HeaderPositionUtils2 = __decorate$24([
          Bean3("headerPositionUtils")
        ], HeaderPositionUtils2);
        return HeaderPositionUtils2;
      }(BeanStub)
    );
    var __decorate$25 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var ColumnDefFactory = (
      /** @class */
      function() {
        function ColumnDefFactory2() {
        }
        ColumnDefFactory2.prototype.buildColumnDefs = function(cols, rowGroupColumns, pivotColumns) {
          var _this = this;
          var res = [];
          var colGroupDefs = {};
          cols.forEach(function(col) {
            var colDef = _this.createDefFromColumn(col, rowGroupColumns, pivotColumns);
            var addToResult = true;
            var childDef = colDef;
            var pointer = col.getOriginalParent();
            while (pointer) {
              var parentDef = null;
              if (pointer.isPadding()) {
                pointer = pointer.getOriginalParent();
                continue;
              }
              var existingParentDef = colGroupDefs[pointer.getGroupId()];
              if (existingParentDef) {
                existingParentDef.children.push(childDef);
                addToResult = false;
                break;
              }
              parentDef = _this.createDefFromGroup(pointer);
              if (parentDef) {
                parentDef.children = [childDef];
                colGroupDefs[parentDef.groupId] = parentDef;
                childDef = parentDef;
                pointer = pointer.getOriginalParent();
              }
            }
            if (addToResult) {
              res.push(childDef);
            }
          });
          return res;
        };
        ColumnDefFactory2.prototype.createDefFromGroup = function(group) {
          var defCloned = deepCloneDefinition(group.getColGroupDef(), ["children"]);
          if (defCloned) {
            defCloned.groupId = group.getGroupId();
          }
          return defCloned;
        };
        ColumnDefFactory2.prototype.createDefFromColumn = function(col, rowGroupColumns, pivotColumns) {
          var colDefCloned = deepCloneDefinition(col.getColDef());
          colDefCloned.colId = col.getColId();
          colDefCloned.width = col.getActualWidth();
          colDefCloned.rowGroup = col.isRowGroupActive();
          colDefCloned.rowGroupIndex = col.isRowGroupActive() ? rowGroupColumns.indexOf(col) : null;
          colDefCloned.pivot = col.isPivotActive();
          colDefCloned.pivotIndex = col.isPivotActive() ? pivotColumns.indexOf(col) : null;
          colDefCloned.aggFunc = col.isValueActive() ? col.getAggFunc() : null;
          colDefCloned.hide = col.isVisible() ? void 0 : true;
          colDefCloned.pinned = col.isPinned() ? col.getPinned() : null;
          colDefCloned.sort = col.getSort() ? col.getSort() : null;
          colDefCloned.sortIndex = col.getSortIndex() != null ? col.getSortIndex() : null;
          return colDefCloned;
        };
        ColumnDefFactory2 = __decorate$25([
          Bean3("columnDefFactory")
        ], ColumnDefFactory2);
        return ColumnDefFactory2;
      }()
    );
    var __decorate$26 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var RowCssClassCalculator = (
      /** @class */
      function() {
        function RowCssClassCalculator2() {
        }
        RowCssClassCalculator2.prototype.getInitialRowClasses = function(params) {
          var classes = [];
          if (exists(params.extraCssClass)) {
            classes.push(params.extraCssClass);
          }
          classes.push("ag-row");
          classes.push(params.rowFocused ? "ag-row-focus" : "ag-row-no-focus");
          if (params.fadeRowIn) {
            classes.push("ag-opacity-zero");
          }
          classes.push(params.rowIsEven ? "ag-row-even" : "ag-row-odd");
          if (params.rowNode.isRowPinned()) {
            classes.push("ag-row-pinned");
          }
          if (params.rowNode.isSelected()) {
            classes.push("ag-row-selected");
          }
          if (params.rowNode.footer) {
            classes.push("ag-row-footer");
          }
          classes.push("ag-row-level-" + params.rowLevel);
          if (params.rowNode.stub) {
            classes.push("ag-row-loading");
          }
          if (params.fullWidthRow) {
            classes.push("ag-full-width-row");
          }
          if (params.expandable) {
            classes.push("ag-row-group");
            classes.push(params.rowNode.expanded ? "ag-row-group-expanded" : "ag-row-group-contracted");
          }
          if (params.rowNode.dragging) {
            classes.push("ag-row-dragging");
          }
          pushAll(classes, this.processClassesFromGridOptions(params.rowNode, params.scope));
          pushAll(classes, this.preProcessRowClassRules(params.rowNode, params.scope));
          classes.push(params.printLayout ? "ag-row-position-relative" : "ag-row-position-absolute");
          if (params.firstRowOnPage) {
            classes.push("ag-row-first");
          }
          if (params.lastRowOnPage) {
            classes.push("ag-row-last");
          }
          if (params.fullWidthRow) {
            if (params.pinned === Constants.PINNED_LEFT) {
              classes.push("ag-cell-last-left-pinned");
            }
            if (params.pinned === Constants.PINNED_RIGHT) {
              classes.push("ag-cell-first-right-pinned");
            }
          }
          return classes;
        };
        RowCssClassCalculator2.prototype.processClassesFromGridOptions = function(rowNode, scope) {
          var res = [];
          var process = function(rowCls) {
            if (typeof rowCls === "string") {
              res.push(rowCls);
            } else if (Array.isArray(rowCls)) {
              rowCls.forEach(function(e) {
                return res.push(e);
              });
            }
          };
          var rowClass = this.gridOptionsWrapper.getRowClass();
          if (rowClass) {
            if (typeof rowClass === "function") {
              console.warn("AG Grid: rowClass should not be a function, please use getRowClass instead");
              return [];
            }
            process(rowClass);
          }
          var rowClassFunc = this.gridOptionsWrapper.getRowClassFunc();
          if (rowClassFunc) {
            var params = {
              data: rowNode.data,
              node: rowNode,
              rowIndex: rowNode.rowIndex,
              $scope: scope,
              api: this.gridOptionsWrapper.getApi(),
              columnApi: this.gridOptionsWrapper.getColumnApi(),
              context: this.gridOptionsWrapper.getContext()
            };
            var rowClassFuncResult = rowClassFunc(params);
            process(rowClassFuncResult);
          }
          return res;
        };
        RowCssClassCalculator2.prototype.preProcessRowClassRules = function(rowNode, scope) {
          var res = [];
          this.processRowClassRules(rowNode, scope, function(className) {
            res.push(className);
          }, function(className) {
          });
          return res;
        };
        RowCssClassCalculator2.prototype.processRowClassRules = function(rowNode, scope, onApplicableClass, onNotApplicableClass) {
          var rowClassParams = {
            data: rowNode.data,
            node: rowNode,
            rowIndex: rowNode.rowIndex,
            api: this.gridOptionsWrapper.getApi(),
            columnApi: this.gridOptionsWrapper.getColumnApi(),
            $scope: scope,
            context: this.gridOptionsWrapper.getContext()
          };
          this.stylingService.processClassRules(this.gridOptionsWrapper.rowClassRules(), rowClassParams, onApplicableClass, onNotApplicableClass);
        };
        RowCssClassCalculator2.prototype.calculateRowLevel = function(rowNode) {
          if (rowNode.group) {
            return rowNode.level;
          }
          return rowNode.parent ? rowNode.parent.level + 1 : 0;
        };
        __decorate$26([
          Autowired("stylingService")
        ], RowCssClassCalculator2.prototype, "stylingService", void 0);
        __decorate$26([
          Autowired("gridOptionsWrapper")
        ], RowCssClassCalculator2.prototype, "gridOptionsWrapper", void 0);
        RowCssClassCalculator2 = __decorate$26([
          Bean3("rowCssClassCalculator")
        ], RowCssClassCalculator2);
        return RowCssClassCalculator2;
      }()
    );
    var __extends$2o = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var RowNodeBlock = (
      /** @class */
      function(_super) {
        __extends$2o(RowNodeBlock2, _super);
        function RowNodeBlock2(id) {
          var _this = _super.call(this) || this;
          _this.state = RowNodeBlock2.STATE_WAITING_TO_LOAD;
          _this.version = 0;
          _this.id = id;
          return _this;
        }
        RowNodeBlock2.prototype.getId = function() {
          return this.id;
        };
        RowNodeBlock2.prototype.load = function() {
          this.state = RowNodeBlock2.STATE_LOADING;
          this.loadFromDatasource();
        };
        RowNodeBlock2.prototype.getVersion = function() {
          return this.version;
        };
        RowNodeBlock2.prototype.setStateWaitingToLoad = function() {
          this.version++;
          this.state = RowNodeBlock2.STATE_WAITING_TO_LOAD;
        };
        RowNodeBlock2.prototype.getState = function() {
          return this.state;
        };
        RowNodeBlock2.prototype.pageLoadFailed = function(version) {
          var requestMostRecentAndLive = this.isRequestMostRecentAndLive(version);
          if (requestMostRecentAndLive) {
            this.state = RowNodeBlock2.STATE_FAILED;
            this.processServerFail();
          }
          this.dispatchLoadCompleted(false);
        };
        RowNodeBlock2.prototype.success = function(version, params) {
          this.successCommon(version, params);
        };
        RowNodeBlock2.prototype.pageLoaded = function(version, rows, lastRow) {
          this.successCommon(version, { rowData: rows, rowCount: lastRow });
        };
        RowNodeBlock2.prototype.isRequestMostRecentAndLive = function(version) {
          var thisIsMostRecentRequest = version === this.version;
          var weAreNotDestroyed = this.isAlive();
          return thisIsMostRecentRequest && weAreNotDestroyed;
        };
        RowNodeBlock2.prototype.successCommon = function(version, params) {
          this.dispatchLoadCompleted();
          var requestMostRecentAndLive = this.isRequestMostRecentAndLive(version);
          if (requestMostRecentAndLive) {
            this.state = RowNodeBlock2.STATE_LOADED;
            this.processServerResult(params);
          }
        };
        RowNodeBlock2.prototype.dispatchLoadCompleted = function(success) {
          if (success === void 0) {
            success = true;
          }
          var event = {
            type: RowNodeBlock2.EVENT_LOAD_COMPLETE,
            success,
            block: this
          };
          this.dispatchEvent(event);
        };
        RowNodeBlock2.EVENT_LOAD_COMPLETE = "loadComplete";
        RowNodeBlock2.STATE_WAITING_TO_LOAD = "needsLoading";
        RowNodeBlock2.STATE_LOADING = "loading";
        RowNodeBlock2.STATE_LOADED = "loaded";
        RowNodeBlock2.STATE_FAILED = "failed";
        return RowNodeBlock2;
      }(BeanStub)
    );
    var __extends$2p = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$27 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __param$9 = function(paramIndex, decorator) {
      return function(target, key) {
        decorator(target, key, paramIndex);
      };
    };
    var RowNodeBlockLoader = (
      /** @class */
      function(_super) {
        __extends$2p(RowNodeBlockLoader2, _super);
        function RowNodeBlockLoader2() {
          var _this = _super !== null && _super.apply(this, arguments) || this;
          _this.activeBlockLoadsCount = 0;
          _this.blocks = [];
          _this.active = true;
          return _this;
        }
        RowNodeBlockLoader_1 = RowNodeBlockLoader2;
        RowNodeBlockLoader2.prototype.postConstruct = function() {
          this.maxConcurrentRequests = this.gridOptionsWrapper.getMaxConcurrentDatasourceRequests();
          var blockLoadDebounceMillis = this.gridOptionsWrapper.getBlockLoadDebounceMillis();
          if (blockLoadDebounceMillis && blockLoadDebounceMillis > 0) {
            this.checkBlockToLoadDebounce = _.debounce(this.performCheckBlocksToLoad.bind(this), blockLoadDebounceMillis);
          }
        };
        RowNodeBlockLoader2.prototype.setBeans = function(loggerFactory) {
          this.logger = loggerFactory.create("RowNodeBlockLoader");
        };
        RowNodeBlockLoader2.prototype.addBlock = function(block) {
          this.blocks.push(block);
          block.addEventListener(RowNodeBlock.EVENT_LOAD_COMPLETE, this.loadComplete.bind(this));
          this.checkBlockToLoad();
        };
        RowNodeBlockLoader2.prototype.removeBlock = function(block) {
          _.removeFromArray(this.blocks, block);
        };
        RowNodeBlockLoader2.prototype.destroy = function() {
          _super.prototype.destroy.call(this);
          this.active = false;
        };
        RowNodeBlockLoader2.prototype.loadComplete = function() {
          this.activeBlockLoadsCount--;
          this.checkBlockToLoad();
          if (this.activeBlockLoadsCount == 0) {
            this.dispatchEvent({ type: RowNodeBlockLoader_1.BLOCK_LOADER_FINISHED_EVENT });
          }
        };
        RowNodeBlockLoader2.prototype.checkBlockToLoad = function() {
          if (this.checkBlockToLoadDebounce) {
            this.checkBlockToLoadDebounce();
          } else {
            this.performCheckBlocksToLoad();
          }
        };
        RowNodeBlockLoader2.prototype.performCheckBlocksToLoad = function() {
          if (!this.active) {
            return;
          }
          this.printCacheStatus();
          if (this.maxConcurrentRequests != null && this.activeBlockLoadsCount >= this.maxConcurrentRequests) {
            this.logger.log("checkBlockToLoad: max loads exceeded");
            return;
          }
          var blockToLoad = null;
          this.blocks.forEach(function(block) {
            if (block.getState() === RowNodeBlock.STATE_WAITING_TO_LOAD) {
              blockToLoad = block;
            }
          });
          if (blockToLoad) {
            blockToLoad.load();
            this.activeBlockLoadsCount++;
            this.printCacheStatus();
          }
        };
        RowNodeBlockLoader2.prototype.getBlockState = function() {
          var result = {};
          this.blocks.forEach(function(block) {
            var _a2 = block.getBlockStateJson(), id = _a2.id, state = _a2.state;
            result[id] = state;
          });
          return result;
        };
        RowNodeBlockLoader2.prototype.printCacheStatus = function() {
          if (this.logger.isLogging()) {
            this.logger.log("printCacheStatus: activePageLoadsCount = " + this.activeBlockLoadsCount + "," + (" blocks = " + JSON.stringify(this.getBlockState())));
          }
        };
        RowNodeBlockLoader2.prototype.isLoading = function() {
          return this.activeBlockLoadsCount > 0;
        };
        var RowNodeBlockLoader_1;
        RowNodeBlockLoader2.BLOCK_LOADER_FINISHED_EVENT = "blockLoaderFinished";
        __decorate$27([
          PostConstruct
        ], RowNodeBlockLoader2.prototype, "postConstruct", null);
        __decorate$27([
          __param$9(0, Qualifier("loggerFactory"))
        ], RowNodeBlockLoader2.prototype, "setBeans", null);
        RowNodeBlockLoader2 = RowNodeBlockLoader_1 = __decorate$27([
          Bean3("rowNodeBlockLoader")
        ], RowNodeBlockLoader2);
        return RowNodeBlockLoader2;
      }(BeanStub)
    );
    var __decorate$28 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var RowNodeSorter = (
      /** @class */
      function() {
        function RowNodeSorter2() {
        }
        RowNodeSorter2.prototype.doFullSort = function(rowNodes, sortOptions) {
          var mapper = function(rowNode, pos) {
            return { currentPos: pos, rowNode };
          };
          var sortedRowNodes = rowNodes.map(mapper);
          sortedRowNodes.sort(this.compareRowNodes.bind(this, sortOptions));
          return sortedRowNodes.map(function(item) {
            return item.rowNode;
          });
        };
        RowNodeSorter2.prototype.compareRowNodes = function(sortOptions, sortedNodeA, sortedNodeB) {
          var nodeA = sortedNodeA.rowNode;
          var nodeB = sortedNodeB.rowNode;
          for (var i = 0, len = sortOptions.length; i < len; i++) {
            var sortOption = sortOptions[i];
            var isInverted = sortOption.sort === Constants.SORT_DESC;
            var valueA = this.getValue(nodeA, sortOption.column);
            var valueB = this.getValue(nodeB, sortOption.column);
            var comparatorResult = void 0;
            var providedComparator = this.getComparator(sortOption, nodeA);
            if (providedComparator) {
              comparatorResult = providedComparator(valueA, valueB, nodeA, nodeB, isInverted);
            } else {
              comparatorResult = _.defaultComparator(valueA, valueB, this.gridOptionsWrapper.isAccentedSort());
            }
            var validResult = !isNaN(comparatorResult);
            if (validResult && comparatorResult !== 0) {
              return sortOption.sort === Constants.SORT_ASC ? comparatorResult : comparatorResult * -1;
            }
          }
          return sortedNodeA.currentPos - sortedNodeB.currentPos;
        };
        RowNodeSorter2.prototype.getComparator = function(sortOption, rowNode) {
          var column = sortOption.column;
          var comparatorOnCol = column.getColDef().comparator;
          if (comparatorOnCol != null) {
            return comparatorOnCol;
          }
          if (rowNode.rowGroupColumn) {
            return rowNode.rowGroupColumn.getColDef().comparator;
          }
          if (!column.getColDef().showRowGroup) {
            return;
          }
          var groupLeafField = !rowNode.group && column.getColDef().field;
          if (!groupLeafField) {
            return;
          }
          var primaryColumn = this.columnModel.getPrimaryColumn(groupLeafField);
          if (!primaryColumn) {
            return;
          }
          return primaryColumn.getColDef().comparator;
        };
        RowNodeSorter2.prototype.getValue = function(nodeA, column) {
          return this.valueService.getValue(column, nodeA, false, false);
        };
        __decorate$28([
          Autowired("gridOptionsWrapper")
        ], RowNodeSorter2.prototype, "gridOptionsWrapper", void 0);
        __decorate$28([
          Autowired("valueService")
        ], RowNodeSorter2.prototype, "valueService", void 0);
        __decorate$28([
          Autowired("columnModel")
        ], RowNodeSorter2.prototype, "columnModel", void 0);
        RowNodeSorter2 = __decorate$28([
          Bean3("rowNodeSorter")
        ], RowNodeSorter2);
        return RowNodeSorter2;
      }()
    );
    var __extends$2q = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$29 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var CtrlsService = (
      /** @class */
      function(_super) {
        __extends$2q(CtrlsService2, _super);
        function CtrlsService2() {
          var _this = _super !== null && _super.apply(this, arguments) || this;
          _this.ready = false;
          _this.readyCallbacks = [];
          return _this;
        }
        CtrlsService2.prototype.checkReady = function() {
          this.ready = this.gridCtrl != null && this.gridBodyCtrl != null && this.centerRowContainerCtrl != null && this.leftRowContainerCtrl != null && this.rightRowContainerCtrl != null && this.bottomCenterRowContainerCtrl != null && this.bottomLeftRowContainerCtrl != null && this.bottomRightRowContainerCtrl != null && this.topCenterRowContainerCtrl != null && this.topLeftRowContainerCtrl != null && this.topRightRowContainerCtrl != null && this.centerHeaderRowContainerCtrl != null && this.leftHeaderRowContainerCtrl != null && this.rightHeaderRowContainerCtrl != null && this.fakeHScrollCtrl != null && this.gridHeaderCtrl != null;
          if (this.ready) {
            var p_1 = this.createReadyParams();
            this.readyCallbacks.forEach(function(c) {
              return c(p_1);
            });
            this.readyCallbacks.length = 0;
          }
        };
        CtrlsService2.prototype.whenReady = function(callback) {
          if (this.ready) {
            callback(this.createReadyParams());
          } else {
            this.readyCallbacks.push(callback);
          }
        };
        CtrlsService2.prototype.createReadyParams = function() {
          return {
            centerRowContainerCtrl: this.centerRowContainerCtrl,
            leftRowContainerCtrl: this.leftRowContainerCtrl,
            rightRowContainerCtrl: this.rightRowContainerCtrl,
            bottomCenterRowContainerCtrl: this.bottomCenterRowContainerCtrl,
            bottomLeftRowContainerCtrl: this.bottomLeftRowContainerCtrl,
            bottomRightRowContainerCtrl: this.bottomRightRowContainerCtrl,
            topCenterRowContainerCtrl: this.topCenterRowContainerCtrl,
            topLeftRowContainerCtrl: this.topLeftRowContainerCtrl,
            topRightRowContainerCtrl: this.topRightRowContainerCtrl,
            centerHeaderRowContainerCtrl: this.centerHeaderRowContainerCtrl,
            leftHeaderRowContainerCtrl: this.leftHeaderRowContainerCtrl,
            rightHeaderRowContainerCtrl: this.rightHeaderRowContainerCtrl,
            fakeHScrollCtrl: this.fakeHScrollCtrl,
            gridBodyCtrl: this.gridBodyCtrl,
            gridCtrl: this.gridCtrl,
            gridHeaderCtrl: this.gridHeaderCtrl
          };
        };
        CtrlsService2.prototype.registerFakeHScrollCtrl = function(ctrl) {
          this.fakeHScrollCtrl = ctrl;
          this.checkReady();
        };
        CtrlsService2.prototype.registerGridHeaderCtrl = function(gridHeaderCtrl) {
          this.gridHeaderCtrl = gridHeaderCtrl;
          this.checkReady();
        };
        CtrlsService2.prototype.registerCenterRowContainerCtrl = function(ctrl) {
          this.centerRowContainerCtrl = ctrl;
          this.checkReady();
        };
        CtrlsService2.prototype.registerLeftRowContainerCtrl = function(ctrl) {
          this.leftRowContainerCtrl = ctrl;
          this.checkReady();
        };
        CtrlsService2.prototype.registerRightRowContainerCtrl = function(ctrl) {
          this.rightRowContainerCtrl = ctrl;
          this.checkReady();
        };
        CtrlsService2.prototype.registerTopCenterRowContainerCtrl = function(ctrl) {
          this.topCenterRowContainerCtrl = ctrl;
          this.checkReady();
        };
        CtrlsService2.prototype.registerTopLeftRowContainerCon = function(ctrl) {
          this.topLeftRowContainerCtrl = ctrl;
          this.checkReady();
        };
        CtrlsService2.prototype.registerTopRightRowContainerCtrl = function(ctrl) {
          this.topRightRowContainerCtrl = ctrl;
          this.checkReady();
        };
        CtrlsService2.prototype.registerBottomCenterRowContainerCtrl = function(ctrl) {
          this.bottomCenterRowContainerCtrl = ctrl;
          this.checkReady();
        };
        CtrlsService2.prototype.registerBottomLeftRowContainerCtrl = function(ctrl) {
          this.bottomLeftRowContainerCtrl = ctrl;
          this.checkReady();
        };
        CtrlsService2.prototype.registerBottomRightRowContainerCtrl = function(ctrl) {
          this.bottomRightRowContainerCtrl = ctrl;
          this.checkReady();
        };
        CtrlsService2.prototype.registerHeaderContainer = function(ctrl, pinned) {
          switch (pinned) {
            case Constants.PINNED_LEFT:
              this.leftHeaderRowContainerCtrl = ctrl;
              break;
            case Constants.PINNED_RIGHT:
              this.rightHeaderRowContainerCtrl = ctrl;
              break;
            default:
              this.centerHeaderRowContainerCtrl = ctrl;
              break;
          }
          this.checkReady();
        };
        CtrlsService2.prototype.registerGridBodyCtrl = function(ctrl) {
          this.gridBodyCtrl = ctrl;
          this.checkReady();
        };
        CtrlsService2.prototype.registerGridCtrl = function(ctrl) {
          this.gridCtrl = ctrl;
          this.checkReady();
        };
        CtrlsService2.prototype.getFakeHScrollCtrl = function() {
          return this.fakeHScrollCtrl;
        };
        CtrlsService2.prototype.getGridHeaderCtrl = function() {
          return this.gridHeaderCtrl;
        };
        CtrlsService2.prototype.getGridCtrl = function() {
          return this.gridCtrl;
        };
        CtrlsService2.prototype.getCenterRowContainerCtrl = function() {
          return this.centerRowContainerCtrl;
        };
        CtrlsService2.prototype.getTopCenterRowContainerCtrl = function() {
          return this.topCenterRowContainerCtrl;
        };
        CtrlsService2.prototype.getBottomCenterRowContainerCtrl = function() {
          return this.bottomCenterRowContainerCtrl;
        };
        CtrlsService2.prototype.getGridBodyCtrl = function() {
          return this.gridBodyCtrl;
        };
        CtrlsService2.prototype.getHeaderRowContainerCtrls = function() {
          return [this.leftHeaderRowContainerCtrl, this.rightHeaderRowContainerCtrl, this.centerHeaderRowContainerCtrl];
        };
        CtrlsService2.prototype.getHeaderRowContainerCtrl = function(pinned) {
          switch (pinned) {
            case Constants.PINNED_LEFT:
              return this.leftHeaderRowContainerCtrl;
            case Constants.PINNED_RIGHT:
              return this.rightHeaderRowContainerCtrl;
            default:
              return this.centerHeaderRowContainerCtrl;
          }
        };
        CtrlsService2 = __decorate$29([
          Bean3("ctrlsService")
        ], CtrlsService2);
        return CtrlsService2;
      }(BeanStub)
    );
    var __extends$2r = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$2a = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var CtrlsFactory = (
      /** @class */
      function(_super) {
        __extends$2r(CtrlsFactory2, _super);
        function CtrlsFactory2() {
          var _this = _super !== null && _super.apply(this, arguments) || this;
          _this.registry = {};
          return _this;
        }
        CtrlsFactory2.prototype.register = function(meta) {
          this.registry[meta.controllerName] = meta.controllerClass;
        };
        CtrlsFactory2.prototype.getInstance = function(name) {
          var ControllerClass = this.registry[name];
          if (ControllerClass == null) {
            return void 0;
          }
          return new ControllerClass();
        };
        CtrlsFactory2 = __decorate$2a([
          Bean3("ctrlsFactory")
        ], CtrlsFactory2);
        return CtrlsFactory2;
      }(BeanStub)
    );
    var __extends$2s = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$2b = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var FakeHScrollCtrl = (
      /** @class */
      function(_super) {
        __extends$2s(FakeHScrollCtrl2, _super);
        function FakeHScrollCtrl2() {
          return _super.call(this) || this;
        }
        FakeHScrollCtrl2.prototype.setComp = function(view, eGui, eViewport, eContainer) {
          this.view = view;
          this.eViewport = eViewport;
          this.eContainer = eContainer;
          this.eGui = eGui;
          this.addManagedListener(this.eventService, Events.EVENT_SCROLL_VISIBILITY_CHANGED, this.onScrollVisibilityChanged.bind(this));
          this.onScrollVisibilityChanged();
          var spacerWidthsListener = this.setFakeHScrollSpacerWidths.bind(this);
          this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, spacerWidthsListener);
          this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, spacerWidthsListener);
          this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_DOM_LAYOUT, spacerWidthsListener);
          this.setFakeHScrollSpacerWidths();
          if (this.invisibleScrollbar) {
            this.hideAndShowInvisibleScrollAsNeeded();
            this.addActiveListenerToggles();
          }
          this.ctrlsService.registerFakeHScrollCtrl(this);
        };
        FakeHScrollCtrl2.prototype.addActiveListenerToggles = function() {
          var _this = this;
          var activateEvents = ["mouseenter", "mousedown", "touchstart"];
          var deactivateEvents = ["mouseleave", "mouseup", "touchend"];
          activateEvents.forEach(function(eventName) {
            return _this.addManagedListener(_this.eGui, eventName, function() {
              return _this.view.addOrRemoveCssClass("ag-scrollbar-active", true);
            });
          });
          deactivateEvents.forEach(function(eventName) {
            return _this.addManagedListener(_this.eGui, eventName, function() {
              return _this.view.addOrRemoveCssClass("ag-scrollbar-active", false);
            });
          });
        };
        FakeHScrollCtrl2.prototype.postConstruct = function() {
          this.enableRtl = this.gridOptionsWrapper.isEnableRtl();
          this.invisibleScrollbar = isInvisibleScrollbar();
        };
        FakeHScrollCtrl2.prototype.onScrollVisibilityChanged = function() {
          this.setScrollVisible();
          this.setFakeHScrollSpacerWidths();
        };
        FakeHScrollCtrl2.prototype.hideAndShowInvisibleScrollAsNeeded = function() {
          var _this = this;
          this.addManagedListener(this.eventService, Events.EVENT_BODY_SCROLL, function(params) {
            if (params.direction === "horizontal") {
              _this.view.addOrRemoveCssClass("ag-scrollbar-scrolling", true);
            }
          });
          this.addManagedListener(this.eventService, Events.EVENT_BODY_SCROLL_END, function() {
            return _this.view.addOrRemoveCssClass("ag-scrollbar-scrolling", false);
          });
        };
        FakeHScrollCtrl2.prototype.setFakeHScrollSpacerWidths = function() {
          var vScrollShowing = this.scrollVisibleService.isVerticalScrollShowing();
          var rightSpacing = this.columnModel.getDisplayedColumnsRightWidth();
          var scrollOnRight = !this.enableRtl && vScrollShowing;
          var scrollbarWidth = this.gridOptionsWrapper.getScrollbarWidth();
          if (scrollOnRight) {
            rightSpacing += scrollbarWidth;
          }
          this.view.setRightSpacerFixedWidth(rightSpacing);
          this.view.includeRightSpacerScrollerCss("ag-scroller-corner", rightSpacing <= scrollbarWidth);
          var leftSpacing = this.columnModel.getDisplayedColumnsLeftWidth();
          var scrollOnLeft = this.enableRtl && vScrollShowing;
          if (scrollOnLeft) {
            leftSpacing += scrollbarWidth;
          }
          this.view.setLeftSpacerFixedWidth(leftSpacing);
          this.view.includeLeftSpacerScrollerCss("ag-scroller-corner", leftSpacing <= scrollbarWidth);
        };
        FakeHScrollCtrl2.prototype.setScrollVisible = function() {
          var hScrollShowing = this.scrollVisibleService.isHorizontalScrollShowing();
          var invisibleScrollbar2 = this.invisibleScrollbar;
          var isSuppressHorizontalScroll = this.gridOptionsWrapper.isSuppressHorizontalScroll();
          var scrollbarWidth = hScrollShowing ? this.gridOptionsWrapper.getScrollbarWidth() || 0 : 0;
          var adjustedScrollbarWidth = scrollbarWidth === 0 && invisibleScrollbar2 ? 15 : scrollbarWidth;
          var scrollContainerSize = !isSuppressHorizontalScroll ? adjustedScrollbarWidth : 0;
          var addIEPadding = isBrowserIE() && hScrollShowing;
          this.view.addOrRemoveCssClass("ag-scrollbar-invisible", invisibleScrollbar2);
          this.view.setHeight(scrollContainerSize);
          this.view.setViewportHeight(scrollContainerSize + (addIEPadding ? 1 : 0));
          this.view.setContainerHeight(scrollContainerSize);
        };
        FakeHScrollCtrl2.prototype.getViewport = function() {
          return this.eViewport;
        };
        FakeHScrollCtrl2.prototype.getContainer = function() {
          return this.eContainer;
        };
        __decorate$2b([
          Autowired("scrollVisibleService")
        ], FakeHScrollCtrl2.prototype, "scrollVisibleService", void 0);
        __decorate$2b([
          Autowired("columnModel")
        ], FakeHScrollCtrl2.prototype, "columnModel", void 0);
        __decorate$2b([
          Autowired("ctrlsService")
        ], FakeHScrollCtrl2.prototype, "ctrlsService", void 0);
        __decorate$2b([
          PostConstruct
        ], FakeHScrollCtrl2.prototype, "postConstruct", null);
        return FakeHScrollCtrl2;
      }(BeanStub)
    );
    var __extends$2t = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$2c = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var FakeHScrollComp = (
      /** @class */
      function(_super) {
        __extends$2t(FakeHScrollComp2, _super);
        function FakeHScrollComp2() {
          return _super.call(this, FakeHScrollComp2.TEMPLATE) || this;
        }
        FakeHScrollComp2.prototype.postConstruct = function() {
          var _this = this;
          var compProxy = {
            addOrRemoveCssClass: function(cssClassName, on) {
              return _this.addOrRemoveCssClass(cssClassName, on);
            },
            setHeight: function(height) {
              return setFixedHeight(_this.getGui(), height);
            },
            setContainerHeight: function(height) {
              return setFixedHeight(_this.eContainer, height);
            },
            setViewportHeight: function(height) {
              return setFixedHeight(_this.eViewport, height);
            },
            setRightSpacerFixedWidth: function(width) {
              return setFixedWidth(_this.eRightSpacer, width);
            },
            setLeftSpacerFixedWidth: function(width) {
              return setFixedWidth(_this.eLeftSpacer, width);
            },
            includeLeftSpacerScrollerCss: function(cssClass, include) {
              return addOrRemoveCssClass(_this.eLeftSpacer, cssClass, include);
            },
            includeRightSpacerScrollerCss: function(cssClass, include) {
              return addOrRemoveCssClass(_this.eRightSpacer, cssClass, include);
            }
          };
          var ctrl = this.createManagedBean(new FakeHScrollCtrl());
          ctrl.setComp(compProxy, this.getGui(), this.eViewport, this.eContainer);
          this.createManagedBean(new CenterWidthFeature(function(width) {
            return _this.eContainer.style.width = width + "px";
          }));
        };
        FakeHScrollComp2.TEMPLATE = '<div class="ag-body-horizontal-scroll" aria-hidden="true">\n            <div class="ag-horizontal-left-spacer" ref="eLeftSpacer"></div>\n            <div class="ag-body-horizontal-scroll-viewport" ref="eViewport">\n                <div class="ag-body-horizontal-scroll-container" ref="eContainer"></div>\n            </div>\n            <div class="ag-horizontal-right-spacer" ref="eRightSpacer"></div>\n        </div>';
        __decorate$2c([
          RefSelector("eLeftSpacer")
        ], FakeHScrollComp2.prototype, "eLeftSpacer", void 0);
        __decorate$2c([
          RefSelector("eRightSpacer")
        ], FakeHScrollComp2.prototype, "eRightSpacer", void 0);
        __decorate$2c([
          RefSelector("eViewport")
        ], FakeHScrollComp2.prototype, "eViewport", void 0);
        __decorate$2c([
          RefSelector("eContainer")
        ], FakeHScrollComp2.prototype, "eContainer", void 0);
        __decorate$2c([
          PostConstruct
        ], FakeHScrollComp2.prototype, "postConstruct", null);
        return FakeHScrollComp2;
      }(Component)
    );
    var __extends$2u = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$2d = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var PinnedWidthService = (
      /** @class */
      function(_super) {
        __extends$2u(PinnedWidthService2, _super);
        function PinnedWidthService2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        PinnedWidthService2.prototype.postConstruct = function() {
          var listener = this.checkContainerWidths.bind(this);
          this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, listener);
          this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, listener);
          this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_DOM_LAYOUT, listener);
        };
        PinnedWidthService2.prototype.checkContainerWidths = function() {
          var printLayout = this.gridOptionsWrapper.getDomLayout() === Constants.DOM_LAYOUT_PRINT;
          var newLeftWidth = printLayout ? 0 : this.columnModel.getDisplayedColumnsLeftWidth();
          var newRightWidth = printLayout ? 0 : this.columnModel.getDisplayedColumnsRightWidth();
          if (newLeftWidth != this.leftWidth) {
            this.leftWidth = newLeftWidth;
            this.eventService.dispatchEvent({ type: Events.EVENT_LEFT_PINNED_WIDTH_CHANGED });
          }
          if (newRightWidth != this.rightWidth) {
            this.rightWidth = newRightWidth;
            this.eventService.dispatchEvent({ type: Events.EVENT_RIGHT_PINNED_WIDTH_CHANGED });
          }
        };
        PinnedWidthService2.prototype.getPinnedRightWidth = function() {
          return this.rightWidth;
        };
        PinnedWidthService2.prototype.getPinnedLeftWidth = function() {
          return this.leftWidth;
        };
        __decorate$2d([
          Autowired("columnModel")
        ], PinnedWidthService2.prototype, "columnModel", void 0);
        __decorate$2d([
          PostConstruct
        ], PinnedWidthService2.prototype, "postConstruct", null);
        PinnedWidthService2 = __decorate$2d([
          Bean3("pinnedWidthService")
        ], PinnedWidthService2);
        return PinnedWidthService2;
      }(BeanStub)
    );
    var __extends$2v = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$2e = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var PopupEditorWrapper = (
      /** @class */
      function(_super) {
        __extends$2v(PopupEditorWrapper2, _super);
        function PopupEditorWrapper2(params) {
          var _this = _super.call(
            this,
            /* html */
            '<div class="ag-popup-editor" tabindex="-1"/>'
          ) || this;
          _this.params = params;
          return _this;
        }
        PopupEditorWrapper2.prototype.postConstruct = function() {
          this.gridOptionsWrapper.setDomData(this.getGui(), PopupEditorWrapper2.DOM_KEY_POPUP_EDITOR_WRAPPER, true);
          this.addKeyDownListener();
        };
        PopupEditorWrapper2.prototype.addKeyDownListener = function() {
          var _this = this;
          var eGui = this.getGui();
          var params = this.params;
          var listener = function(event) {
            if (!isUserSuppressingKeyboardEvent(_this.gridOptionsWrapper, event, params.node, params.column, true)) {
              params.onKeyDown(event);
            }
          };
          this.addManagedListener(eGui, "keydown", listener);
        };
        PopupEditorWrapper2.DOM_KEY_POPUP_EDITOR_WRAPPER = "popupEditorWrapper";
        __decorate$2e([
          PostConstruct
        ], PopupEditorWrapper2.prototype, "postConstruct", null);
        return PopupEditorWrapper2;
      }(PopupComponent)
    );
    var __extends$2w = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __assign$d = function() {
      __assign$d = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign$d.apply(this, arguments);
    };
    var CellComp = (
      /** @class */
      function(_super) {
        __extends$2w(CellComp2, _super);
        function CellComp2(scope, beans, cellCtrl, autoHeightCell, printLayout, eRow, editingRow) {
          var _this = _super.call(this) || this;
          _this.scope = null;
          _this.rendererVersion = 0;
          _this.editorVersion = 0;
          _this.scope = scope;
          _this.beans = beans;
          _this.column = cellCtrl.getColumn();
          _this.rowNode = cellCtrl.getRowNode();
          _this.rowCtrl = cellCtrl.getRowCtrl();
          _this.autoHeightCell = autoHeightCell;
          _this.eRow = eRow;
          _this.setTemplate(
            /* html */
            '<div comp-id="' + _this.getCompId() + '"/>'
          );
          var eGui = _this.getGui();
          var style = eGui.style;
          _this.eCellValue = eGui;
          var setAttribute = function(name, value, element) {
            var actualElement = element ? element : eGui;
            if (value != null && value != "") {
              actualElement.setAttribute(name, value);
            } else {
              actualElement.removeAttribute(name);
            }
          };
          var compProxy = {
            addOrRemoveCssClass: function(cssClassName, on) {
              return _this.addOrRemoveCssClass(cssClassName, on);
            },
            setUserStyles: function(styles) {
              return addStylesToElement(eGui, styles);
            },
            setAriaSelected: function(selected) {
              return setAriaSelected(eGui, selected);
            },
            setAriaExpanded: function(selected) {
              return setAriaExpanded(eGui, selected);
            },
            getFocusableElement: function() {
              return _this.getFocusableElement();
            },
            setLeft: function(left) {
              return style.left = left;
            },
            setWidth: function(width) {
              return style.width = width;
            },
            setAriaColIndex: function(index) {
              return setAriaColIndex(_this.getGui(), index);
            },
            setHeight: function(height) {
              return style.height = height;
            },
            setZIndex: function(zIndex) {
              return style.zIndex = zIndex;
            },
            setTabIndex: function(tabIndex) {
              return setAttribute("tabindex", tabIndex.toString());
            },
            setRole: function(role) {
              return setAriaRole(eGui, role);
            },
            setColId: function(colId) {
              return setAttribute("col-id", colId);
            },
            setTitle: function(title) {
              return setAttribute("title", title);
            },
            setUnselectable: function(value) {
              return setAttribute("unselectable", value, _this.eCellValue);
            },
            setTransition: function(transition) {
              return style.transition = transition ? transition : "";
            },
            setIncludeSelection: function(include) {
              return _this.includeSelection = include;
            },
            setIncludeRowDrag: function(include) {
              return _this.includeRowDrag = include;
            },
            setIncludeDndSource: function(include) {
              return _this.includeDndSource = include;
            },
            setForceWrapper: function(force) {
              return _this.forceWrapper = force;
            },
            setRenderDetails: function(compDetails, valueToDisplay, force) {
              return _this.setRenderDetails(compDetails, valueToDisplay, force);
            },
            setEditDetails: function(compDetails, popup, position) {
              return _this.setEditDetails(compDetails, popup, position);
            },
            getCellEditor: function() {
              return _this.cellEditor || null;
            },
            getCellRenderer: function() {
              return _this.cellRenderer || null;
            },
            getParentOfValue: function() {
              return _this.eCellValue;
            }
          };
          _this.cellCtrl = cellCtrl;
          cellCtrl.setComp(compProxy, _this.scope, _this.getGui(), printLayout, editingRow);
          return _this;
        }
        CellComp2.prototype.setRenderDetails = function(compDetails, valueToDisplay, forceNewCellRendererInstance) {
          var isInlineEditing = this.cellEditor && !this.cellEditorPopupWrapper;
          if (isInlineEditing) {
            return;
          }
          this.firstRender = this.firstRender == null;
          var usingAngular1Template = this.isUsingAngular1Template();
          var controlWrapperChanged = this.setupControlsWrapper();
          if (compDetails) {
            var neverRefresh = forceNewCellRendererInstance || controlWrapperChanged;
            var cellRendererRefreshSuccessful = neverRefresh ? false : this.refreshCellRenderer(compDetails);
            if (!cellRendererRefreshSuccessful) {
              this.destroyRenderer();
              this.createCellRendererInstance(compDetails);
            }
          } else {
            this.destroyRenderer();
            if (usingAngular1Template) {
              this.insertValueUsingAngular1Template();
            } else {
              this.insertValueWithoutCellRenderer(valueToDisplay);
            }
          }
        };
        CellComp2.prototype.setEditDetails = function(compDetails, popup, position) {
          if (compDetails) {
            this.createCellEditorInstance(compDetails, popup, position);
          } else {
            this.destroyEditor();
          }
        };
        CellComp2.prototype.removeControlsWrapper = function() {
          this.eCellValue = this.getGui();
          this.eCellWrapper = null;
          this.checkboxSelectionComp = this.beans.context.destroyBean(this.checkboxSelectionComp);
          this.dndSourceComp = this.beans.context.destroyBean(this.dndSourceComp);
          this.rowDraggingComp = this.beans.context.destroyBean(this.rowDraggingComp);
        };
        CellComp2.prototype.setupControlsWrapper = function() {
          var usingWrapper = this.includeRowDrag || this.includeDndSource || this.includeSelection || this.forceWrapper;
          var changed = true;
          var notChanged = false;
          this.addOrRemoveCssClass("ag-cell-value", !usingWrapper);
          if (usingWrapper && !this.eCellWrapper) {
            this.addControlsWrapper();
            return changed;
          }
          if (!usingWrapper && this.eCellWrapper) {
            this.removeControlsWrapper();
            return changed;
          }
          return notChanged;
        };
        CellComp2.prototype.addControlsWrapper = function() {
          var eGui = this.getGui();
          eGui.innerHTML = /* html */
          '<div ref="eCellWrapper" class="ag-cell-wrapper" role="presentation">\n                <span ref="eCellValue" class="ag-cell-value" role="presentation"></span>\n            </div>';
          this.eCellValue = this.getRefElement("eCellValue");
          this.eCellWrapper = this.getRefElement("eCellWrapper");
          if (!this.forceWrapper) {
            this.eCellValue.setAttribute("unselectable", "on");
          }
          var id = this.eCellValue.id = "cell-" + this.getCompId();
          var describedByIds = [];
          if (this.includeRowDrag) {
            this.rowDraggingComp = this.cellCtrl.createRowDragComp();
            if (this.rowDraggingComp) {
              this.eCellWrapper.insertBefore(this.rowDraggingComp.getGui(), this.eCellValue);
            }
          }
          if (this.includeDndSource) {
            this.dndSourceComp = this.cellCtrl.createDndSource();
            this.eCellWrapper.insertBefore(this.dndSourceComp.getGui(), this.eCellValue);
          }
          if (this.includeSelection) {
            this.checkboxSelectionComp = this.cellCtrl.createSelectionCheckbox();
            this.eCellWrapper.insertBefore(this.checkboxSelectionComp.getGui(), this.eCellValue);
            describedByIds.push(this.checkboxSelectionComp.getCheckboxId());
          }
          describedByIds.push(id);
          setAriaDescribedBy(this.getGui(), describedByIds.join(" "));
        };
        CellComp2.prototype.createCellEditorInstance = function(compDetails, popup, position) {
          var _this = this;
          var versionCopy = this.editorVersion;
          var cellEditorPromise = compDetails.newAgStackInstance();
          if (!cellEditorPromise) {
            return;
          }
          var params = compDetails.params;
          cellEditorPromise.then(function(c) {
            return _this.afterCellEditorCreated(versionCopy, c, params, popup, position);
          });
          var cellEditorAsync = missing(this.cellEditor);
          if (cellEditorAsync && params.cellStartedEdit) {
            this.cellCtrl.focusCell(true);
          }
        };
        CellComp2.prototype.insertValueWithoutCellRenderer = function(valueToDisplay) {
          var escapedValue = valueToDisplay != null ? escapeString(valueToDisplay) : null;
          if (escapedValue != null) {
            this.eCellValue.innerHTML = escapedValue;
          } else {
            clearElement(this.eCellValue);
          }
        };
        CellComp2.prototype.insertValueUsingAngular1Template = function() {
          var _this = this;
          var _a2 = this.column.getColDef(), template = _a2.template, templateUrl = _a2.templateUrl;
          var templateToInsert;
          if (template != null) {
            templateToInsert = template;
          } else if (templateUrl != null) {
            templateToInsert = this.beans.templateService.getTemplate(templateUrl, function() {
              return _this.cellCtrl.refreshCell({ forceRefresh: true });
            });
          }
          if (templateToInsert != null) {
            this.eCellValue.innerHTML = templateToInsert;
            this.updateAngular1ScopeAndCompile();
          }
        };
        CellComp2.prototype.destroyEditorAndRenderer = function() {
          this.destroyRenderer();
          this.destroyEditor();
        };
        CellComp2.prototype.destroyRenderer = function() {
          var context = this.beans.context;
          this.cellRenderer = context.destroyBean(this.cellRenderer);
          removeFromParent(this.cellRendererGui);
          this.cellRendererGui = null;
          this.rendererVersion++;
        };
        CellComp2.prototype.destroyEditor = function() {
          var context = this.beans.context;
          if (this.hideEditorPopup) {
            this.hideEditorPopup();
          }
          this.hideEditorPopup = void 0;
          this.cellEditor = context.destroyBean(this.cellEditor);
          this.cellEditorPopupWrapper = context.destroyBean(this.cellEditorPopupWrapper);
          removeFromParent(this.cellEditorGui);
          this.cellEditorGui = null;
          this.editorVersion++;
        };
        CellComp2.prototype.refreshCellRenderer = function(compClassAndParams) {
          if (this.cellRenderer == null || this.cellRenderer.refresh == null) {
            return false;
          }
          if (this.cellRendererClass !== compClassAndParams.componentClass) {
            return false;
          }
          var result = this.cellRenderer.refresh(compClassAndParams.params);
          return result === true || result === void 0;
        };
        CellComp2.prototype.createCellRendererInstance = function(compDetails) {
          var _this = this;
          var angularCompileRows = this.beans.gridOptionsWrapper.isAngularCompileRows();
          var suppressAnimationFrame = this.beans.gridOptionsWrapper.isSuppressAnimationFrame();
          var useTaskService = !angularCompileRows && !suppressAnimationFrame && !this.autoHeightCell;
          var displayComponentVersionCopy = this.rendererVersion;
          var componentClass = compDetails.componentClass;
          var createCellRendererFunc = function() {
            var staleTask = _this.rendererVersion !== displayComponentVersionCopy || !_this.isAlive();
            if (staleTask) {
              return;
            }
            var componentPromise = compDetails.newAgStackInstance();
            var callback = _this.afterCellRendererCreated.bind(_this, displayComponentVersionCopy, componentClass);
            if (componentPromise) {
              componentPromise.then(callback);
            }
          };
          if (useTaskService && this.firstRender) {
            this.beans.animationFrameService.createTask(createCellRendererFunc, this.rowNode.rowIndex, "createTasksP2");
          } else {
            createCellRendererFunc();
          }
        };
        CellComp2.prototype.isUsingAngular1Template = function() {
          var colDef = this.column.getColDef();
          var res = colDef.template != null || colDef.templateUrl != null;
          return res;
        };
        CellComp2.prototype.getCtrl = function() {
          return this.cellCtrl;
        };
        CellComp2.prototype.getRowCtrl = function() {
          return this.rowCtrl;
        };
        CellComp2.prototype.getCellRenderer = function() {
          return this.cellRenderer;
        };
        CellComp2.prototype.getCellEditor = function() {
          return this.cellEditor;
        };
        CellComp2.prototype.afterCellRendererCreated = function(cellRendererVersion, cellRendererClass, cellRenderer) {
          var staleTask = !this.isAlive() || cellRendererVersion !== this.rendererVersion;
          if (staleTask) {
            this.beans.context.destroyBean(cellRenderer);
            return;
          }
          this.cellRenderer = cellRenderer;
          this.cellRendererClass = cellRendererClass;
          this.cellRendererGui = this.cellRenderer.getGui();
          if (this.cellRendererGui != null) {
            clearElement(this.eCellValue);
            this.eCellValue.appendChild(this.cellRendererGui);
            this.updateAngular1ScopeAndCompile();
          }
        };
        CellComp2.prototype.afterCellEditorCreated = function(requestVersion, cellEditor, params, popup, position) {
          var staleComp = requestVersion !== this.editorVersion;
          if (staleComp) {
            this.beans.context.destroyBean(cellEditor);
            return;
          }
          var editingCancelledByUserComp = cellEditor.isCancelBeforeStart && cellEditor.isCancelBeforeStart();
          if (editingCancelledByUserComp) {
            this.beans.context.destroyBean(cellEditor);
            this.cellCtrl.stopEditing();
            return;
          }
          if (!cellEditor.getGui) {
            console.warn("AG Grid: cellEditor for column " + this.column.getId() + " is missing getGui() method");
            this.beans.context.destroyBean(cellEditor);
            return;
          }
          this.cellEditor = cellEditor;
          this.cellEditorGui = cellEditor.getGui();
          var cellEditorInPopup = popup || cellEditor.isPopup !== void 0 && cellEditor.isPopup();
          if (cellEditorInPopup) {
            if (!popup) {
              this.cellCtrl.hackSayEditingInPopup();
            }
            this.addPopupCellEditor(params, position);
          } else {
            this.addInCellEditor();
          }
          if (cellEditor.afterGuiAttached) {
            cellEditor.afterGuiAttached();
          }
        };
        CellComp2.prototype.addInCellEditor = function() {
          var eGui = this.getGui();
          if (eGui.contains(document.activeElement)) {
            eGui.focus();
          }
          this.destroyRenderer();
          this.removeControlsWrapper();
          this.clearCellElement();
          if (this.cellEditorGui) {
            eGui.appendChild(this.cellEditorGui);
          }
        };
        CellComp2.prototype.addPopupCellEditor = function(params, position) {
          var _this = this;
          if (this.beans.gridOptionsWrapper.isFullRowEdit()) {
            console.warn("AG Grid: popup cellEditor does not work with fullRowEdit - you cannot use them both - either turn off fullRowEdit, or stop using popup editors.");
          }
          var cellEditor = this.cellEditor;
          this.cellEditorPopupWrapper = this.beans.context.createBean(new PopupEditorWrapper(params));
          var ePopupGui = this.cellEditorPopupWrapper.getGui();
          if (this.cellEditorGui) {
            ePopupGui.appendChild(this.cellEditorGui);
          }
          var popupService = this.beans.popupService;
          var useModelPopup = this.beans.gridOptionsWrapper.isStopEditingWhenCellsLoseFocus();
          var positionToUse = position != null ? position : cellEditor.getPopupPosition ? cellEditor.getPopupPosition() : "over";
          var positionParams = {
            column: this.column,
            rowNode: this.rowNode,
            type: "popupCellEditor",
            eventSource: this.getGui(),
            ePopup: ePopupGui,
            keepWithinBounds: true
          };
          var positionCallback = position === "under" ? popupService.positionPopupUnderComponent.bind(popupService, positionParams) : popupService.positionPopupOverComponent.bind(popupService, positionParams);
          var translate = this.beans.gridOptionsWrapper.getLocaleTextFunc();
          var addPopupRes = popupService.addPopup({
            modal: useModelPopup,
            eChild: ePopupGui,
            closeOnEsc: true,
            closedCallback: function() {
              _this.cellCtrl.onPopupEditorClosed();
            },
            anchorToElement: this.getGui(),
            positionCallback,
            ariaLabel: translate("ariaLabelCellEditor", "Cell Editor")
          });
          if (addPopupRes) {
            this.hideEditorPopup = addPopupRes.hideFunc;
          }
        };
        CellComp2.prototype.detach = function() {
          this.eRow.removeChild(this.getGui());
        };
        CellComp2.prototype.destroy = function() {
          this.cellCtrl.stopEditing();
          this.destroyEditorAndRenderer();
          this.removeControlsWrapper();
          if (this.angularCompiledElement) {
            this.angularCompiledElement.remove();
            this.angularCompiledElement = void 0;
          }
          _super.prototype.destroy.call(this);
        };
        CellComp2.prototype.clearCellElement = function() {
          var eGui = this.getGui();
          if (eGui.contains(document.activeElement) && !isBrowserIE()) {
            eGui.focus({
              preventScroll: true
            });
          }
          clearElement(eGui);
        };
        CellComp2.prototype.updateAngular1ScopeAndCompile = function() {
          if (this.beans.gridOptionsWrapper.isAngularCompileRows() && this.scope) {
            this.scope.data = __assign$d({}, this.rowNode.data);
            if (this.angularCompiledElement) {
              this.angularCompiledElement.remove();
            }
            this.angularCompiledElement = this.beans.$compile(this.eCellValue.children)(this.scope);
            this.beans.ctrlsService.getGridBodyCtrl().requestAngularApply();
          }
        };
        return CellComp2;
      }(Component)
    );
    var __extends$2x = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var RowComp = (
      /** @class */
      function(_super) {
        __extends$2x(RowComp2, _super);
        function RowComp2(ctrl, beans, pinned) {
          var _this = _super.call(this) || this;
          _this.cellComps = {};
          _this.beans = beans;
          _this.rowCtrl = ctrl;
          _this.setTemplate(
            /* html */
            '<div comp-id="' + _this.getCompId() + '" style="' + _this.getInitialStyle() + '"/>'
          );
          var eGui = _this.getGui();
          var style = eGui.style;
          var compProxy = {
            setDisplay: function(value) {
              if (value == null) {
                style.removeProperty("display");
              } else {
                style.setProperty("display", "none");
              }
            },
            setDomOrder: function(domOrder) {
              return _this.domOrder = domOrder;
            },
            setCellCtrls: function(cellCtrls) {
              return _this.setCellCtrls(cellCtrls);
            },
            showFullWidth: function(compDetails) {
              return _this.showFullWidth(compDetails);
            },
            getFullWidthCellRenderer: function() {
              return _this.getFullWidthCellRenderer();
            },
            addOrRemoveCssClass: function(name, on) {
              return _this.addOrRemoveCssClass(name, on);
            },
            setAriaExpanded: function(on) {
              return setAriaExpanded(eGui, on);
            },
            setUserStyles: function(styles) {
              return addStylesToElement(eGui, styles);
            },
            setAriaSelected: function(value) {
              return setAriaSelected(eGui, value);
            },
            setAriaLabel: function(value) {
              setAriaLabel(eGui, value == null ? "" : value);
            },
            setHeight: function(height) {
              return style.height = height;
            },
            setTop: function(top) {
              return style.top = top;
            },
            setTransform: function(transform) {
              return style.transform = transform;
            },
            setRowIndex: function(rowIndex) {
              return eGui.setAttribute("row-index", rowIndex);
            },
            setRole: function(role) {
              return setAriaRole(eGui, role);
            },
            setAriaRowIndex: function(rowIndex) {
              return setAriaRowIndex(_this.getGui(), rowIndex);
            },
            setRowId: function(rowId) {
              return eGui.setAttribute("row-id", rowId);
            },
            setRowBusinessKey: function(businessKey) {
              return eGui.setAttribute("row-business-key", businessKey);
            },
            setTabIndex: function(tabIndex) {
              return eGui.setAttribute("tabindex", tabIndex.toString());
            }
          };
          ctrl.setComp(compProxy, _this.getGui(), pinned);
          return _this;
        }
        RowComp2.prototype.getInitialStyle = function() {
          var transform = this.rowCtrl.getInitialTransform();
          var top = this.rowCtrl.getInitialRowTop();
          return transform ? "transform: " + transform : "top: " + top;
        };
        RowComp2.prototype.showFullWidth = function(compDetails) {
          var _this = this;
          var callback = function(cellRenderer) {
            if (_this.isAlive()) {
              var eGui = cellRenderer.getGui();
              _this.getGui().appendChild(eGui);
              if (_this.rowCtrl.getRowType() === RowType.FullWidthDetail) {
                _this.rowCtrl.setupDetailRowAutoHeight(eGui);
              }
              _this.setFullWidthRowComp(cellRenderer);
            } else {
              _this.beans.context.destroyBean(cellRenderer);
            }
          };
          var res = compDetails.newAgStackInstance(this.rowCtrl.getFullWidthCellRendererType());
          if (!res) {
            return;
          }
          res.then(callback);
        };
        RowComp2.prototype.setCellCtrls = function(cellCtrls) {
          var _this = this;
          var cellsToRemove = assign({}, this.cellComps);
          cellCtrls.forEach(function(cellCtrl) {
            var key = cellCtrl.getInstanceId();
            var existingCellComp = _this.cellComps[key];
            if (existingCellComp == null) {
              _this.newCellComp(cellCtrl);
            } else {
              cellsToRemove[key] = null;
            }
          });
          var cellCompsToRemove = getAllValuesInObject(cellsToRemove).filter(function(cellComp) {
            return cellComp != null;
          });
          this.destroyCells(cellCompsToRemove);
          this.ensureDomOrder(cellCtrls);
        };
        RowComp2.prototype.ensureDomOrder = function(cellCtrls) {
          var _this = this;
          if (!this.domOrder) {
            return;
          }
          var elementsInOrder = [];
          cellCtrls.forEach(function(cellCtrl) {
            var cellComp = _this.cellComps[cellCtrl.getInstanceId()];
            if (cellComp) {
              elementsInOrder.push(cellComp.getGui());
            }
          });
          setDomChildOrder(this.getGui(), elementsInOrder);
        };
        RowComp2.prototype.newCellComp = function(cellCtrl) {
          var cellComp = new CellComp(this.rowCtrl.getScope(), this.beans, cellCtrl, false, this.rowCtrl.isPrintLayout(), this.getGui(), this.rowCtrl.isEditing());
          this.cellComps[cellCtrl.getInstanceId()] = cellComp;
          this.getGui().appendChild(cellComp.getGui());
        };
        RowComp2.prototype.destroy = function() {
          _super.prototype.destroy.call(this);
          this.destroyAllCells();
        };
        RowComp2.prototype.destroyAllCells = function() {
          var cellsToDestroy = getAllValuesInObject(this.cellComps).filter(function(cp) {
            return cp != null;
          });
          this.destroyCells(cellsToDestroy);
        };
        RowComp2.prototype.setFullWidthRowComp = function(fullWidthRowComponent) {
          var _this = this;
          if (this.fullWidthCellRenderer) {
            console.error("AG Grid - should not be setting fullWidthRowComponent twice");
          }
          this.fullWidthCellRenderer = fullWidthRowComponent;
          this.addDestroyFunc(function() {
            _this.fullWidthCellRenderer = _this.beans.context.destroyBean(_this.fullWidthCellRenderer);
          });
        };
        RowComp2.prototype.getFullWidthCellRenderer = function() {
          return this.fullWidthCellRenderer;
        };
        RowComp2.prototype.destroyCells = function(cellComps) {
          var _this = this;
          cellComps.forEach(function(cellComp) {
            if (!cellComp) {
              return;
            }
            var instanceId = cellComp.getCtrl().getInstanceId();
            if (_this.cellComps[instanceId] !== cellComp) {
              return;
            }
            cellComp.detach();
            cellComp.destroy();
            _this.cellComps[instanceId] = null;
          });
        };
        return RowComp2;
      }(Component)
    );
    var __extends$2y = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __assign$e = function() {
      __assign$e = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign$e.apply(this, arguments);
    };
    var __decorate$2f = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    function templateFactory() {
      var name = Component.elementGettingCreated.getAttribute("name");
      var cssClasses = RowContainerCtrl.getRowContainerCssClasses(name);
      var res;
      var template1 = name === exports.RowContainerName.CENTER;
      var template2 = name === exports.RowContainerName.TOP_CENTER || name === exports.RowContainerName.BOTTOM_CENTER;
      if (template1) {
        res = /* html */
        '<div class="' + cssClasses.wrapper + '" ref="eWrapper" role="presentation" unselectable="on">\n                <div class="' + cssClasses.viewport + '" ref="eViewport" role="presentation">\n                    <div class="' + cssClasses.container + '" ref="eContainer" role="rowgroup" unselectable="on"></div>\n                </div>\n            </div>';
      } else if (template2) {
        res = /* html */
        '<div class="' + cssClasses.viewport + '" ref="eViewport" role="presentation" unselectable="on">\n                <div class="' + cssClasses.container + '" ref="eContainer" role="presentation" unselectable="on"></div>\n            </div>';
      } else {
        res = /* html */
        '<div class="' + cssClasses.container + '" ref="eContainer" role="presentation" unselectable="on"></div>';
      }
      return res;
    }
    var RowContainerComp = (
      /** @class */
      function(_super) {
        __extends$2y(RowContainerComp2, _super);
        function RowContainerComp2() {
          var _this = _super.call(this, templateFactory()) || this;
          _this.rowComps = {};
          _this.name = Component.elementGettingCreated.getAttribute("name");
          return _this;
        }
        RowContainerComp2.prototype.postConstruct = function() {
          var _this = this;
          var compProxy = {
            setViewportHeight: function(height) {
              return _this.eViewport.style.height = height;
            },
            setRowCtrls: function(rowCtrls) {
              return _this.setRowCtrls(rowCtrls);
            },
            setDomOrder: function(domOrder) {
              _this.domOrder = domOrder;
            },
            setContainerWidth: function(width) {
              return _this.eContainer.style.width = width;
            }
          };
          var ctrl = this.createManagedBean(new RowContainerCtrl(this.name));
          ctrl.setComp(compProxy, this.eContainer, this.eViewport, this.eWrapper);
        };
        RowContainerComp2.prototype.preDestroy = function() {
          this.setRowCtrls([]);
        };
        RowContainerComp2.prototype.setRowCtrls = function(rowCtrls) {
          var _this = this;
          var oldRows = __assign$e({}, this.rowComps);
          this.rowComps = {};
          this.lastPlacedElement = null;
          var processRow = function(rowCon) {
            var instanceId = rowCon.getInstanceId();
            var existingRowComp = oldRows[instanceId];
            if (existingRowComp) {
              _this.rowComps[instanceId] = existingRowComp;
              delete oldRows[instanceId];
              _this.ensureDomOrder(existingRowComp.getGui());
            } else {
              var rowComp = _this.newRowComp(rowCon);
              _this.rowComps[instanceId] = rowComp;
              _this.appendRow(rowComp.getGui());
            }
          };
          rowCtrls.forEach(processRow);
          getAllValuesInObject(oldRows).forEach(function(oldRowComp) {
            _this.eContainer.removeChild(oldRowComp.getGui());
            oldRowComp.destroy();
          });
        };
        RowContainerComp2.prototype.appendRow = function(element) {
          if (this.domOrder) {
            insertWithDomOrder(this.eContainer, element, this.lastPlacedElement);
          } else {
            this.eContainer.appendChild(element);
          }
          this.lastPlacedElement = element;
        };
        RowContainerComp2.prototype.ensureDomOrder = function(eRow) {
          if (this.domOrder) {
            ensureDomOrder(this.eContainer, eRow, this.lastPlacedElement);
            this.lastPlacedElement = eRow;
          }
        };
        RowContainerComp2.prototype.newRowComp = function(rowCtrl) {
          var pinned = RowContainerCtrl.getPinned(this.name);
          var res = new RowComp(rowCtrl, this.beans, pinned);
          return res;
        };
        __decorate$2f([
          Autowired("beans")
        ], RowContainerComp2.prototype, "beans", void 0);
        __decorate$2f([
          RefSelector("eViewport")
        ], RowContainerComp2.prototype, "eViewport", void 0);
        __decorate$2f([
          RefSelector("eContainer")
        ], RowContainerComp2.prototype, "eContainer", void 0);
        __decorate$2f([
          RefSelector("eWrapper")
        ], RowContainerComp2.prototype, "eWrapper", void 0);
        __decorate$2f([
          PostConstruct
        ], RowContainerComp2.prototype, "postConstruct", null);
        __decorate$2f([
          PreDestroy
        ], RowContainerComp2.prototype, "preDestroy", null);
        return RowContainerComp2;
      }(Component)
    );
    var __extends$2z = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$2g = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var RowNodeEventThrottle = (
      /** @class */
      function(_super) {
        __extends$2z(RowNodeEventThrottle2, _super);
        function RowNodeEventThrottle2() {
          var _this = _super !== null && _super.apply(this, arguments) || this;
          _this.events = [];
          return _this;
        }
        RowNodeEventThrottle2.prototype.postConstruct = function() {
          if (this.rowModel.getType() == Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {
            this.clientSideRowModel = this.rowModel;
          }
        };
        RowNodeEventThrottle2.prototype.dispatchExpanded = function(event) {
          var _this = this;
          this.events.push(event);
          if (this.dispatchExpandedDebounced == null) {
            this.dispatchExpandedDebounced = this.animationFrameService.debounce(function() {
              _this.clientSideRowModel && _this.clientSideRowModel.onRowGroupOpened();
              _this.events.forEach(function(e) {
                return _this.eventService.dispatchEvent(e);
              });
              _this.events = [];
            });
          }
          this.dispatchExpandedDebounced();
        };
        __decorate$2g([
          Autowired("animationFrameService")
        ], RowNodeEventThrottle2.prototype, "animationFrameService", void 0);
        __decorate$2g([
          Autowired("rowModel")
        ], RowNodeEventThrottle2.prototype, "rowModel", void 0);
        __decorate$2g([
          PostConstruct
        ], RowNodeEventThrottle2.prototype, "postConstruct", null);
        RowNodeEventThrottle2 = __decorate$2g([
          Bean3("rowNodeEventThrottle")
        ], RowNodeEventThrottle2);
        return RowNodeEventThrottle2;
      }(BeanStub)
    );
    var __extends$2A = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$2h = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var StandardMenuFactory = (
      /** @class */
      function(_super) {
        __extends$2A(StandardMenuFactory2, _super);
        function StandardMenuFactory2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        StandardMenuFactory2.prototype.hideActiveMenu = function() {
          if (this.hidePopup) {
            this.hidePopup();
          }
        };
        StandardMenuFactory2.prototype.showMenuAfterMouseEvent = function(column, mouseEvent) {
          var _this = this;
          this.showPopup(column, function(eMenu) {
            _this.popupService.positionPopupUnderMouseEvent({
              column,
              type: "columnMenu",
              mouseEvent,
              ePopup: eMenu
            });
          }, mouseEvent.target);
        };
        StandardMenuFactory2.prototype.showMenuAfterButtonClick = function(column, eventSource, containerType) {
          var _this = this;
          this.showPopup(column, function(eMenu) {
            _this.popupService.positionPopupUnderComponent({
              type: containerType,
              eventSource,
              ePopup: eMenu,
              keepWithinBounds: true,
              column
            });
          }, eventSource);
        };
        StandardMenuFactory2.prototype.showPopup = function(column, positionCallback, eventSource) {
          var _this = this;
          var filterWrapper = this.filterManager.getOrCreateFilterWrapper(column, "COLUMN_MENU");
          var eMenu = document.createElement("div");
          setAriaRole(eMenu, "presentation");
          addCssClass(eMenu, "ag-menu");
          this.tabListener = this.addManagedListener(eMenu, "keydown", function(e) {
            return _this.trapFocusWithin(e, eMenu);
          });
          filterWrapper.guiPromise.then(function(gui) {
            return eMenu.appendChild(gui);
          });
          var hidePopup;
          var anchorToElement = eventSource || this.ctrlsService.getGridBodyCtrl().getGui();
          var closedCallback = function(e) {
            column.setMenuVisible(false, "contextMenu");
            var isKeyboardEvent = e instanceof KeyboardEvent;
            if (_this.tabListener) {
              _this.tabListener = _this.tabListener();
            }
            if (isKeyboardEvent && eventSource && isVisible(eventSource)) {
              var focusableEl = _this.focusService.findTabbableParent(eventSource);
              if (focusableEl) {
                focusableEl.focus();
              }
            }
          };
          var translate = this.gridOptionsWrapper.getLocaleTextFunc();
          var addPopupRes = this.popupService.addPopup({
            modal: true,
            eChild: eMenu,
            closeOnEsc: true,
            closedCallback,
            positionCallback: function() {
              return positionCallback(eMenu);
            },
            anchorToElement,
            ariaLabel: translate("ariaLabelColumnMenu", "Column Menu")
          });
          if (addPopupRes) {
            this.hidePopup = hidePopup = addPopupRes.hideFunc;
          }
          filterWrapper.filterPromise.then(function(filter2) {
            positionCallback(eMenu);
            if (filter2.afterGuiAttached) {
              filter2.afterGuiAttached({ container: "columnMenu", hidePopup });
            }
          });
          column.setMenuVisible(true, "contextMenu");
        };
        StandardMenuFactory2.prototype.trapFocusWithin = function(e, menu) {
          if (e.keyCode !== KeyCode.TAB || e.defaultPrevented || this.focusService.findNextFocusableElement(menu, false, e.shiftKey)) {
            return;
          }
          e.preventDefault();
          this.focusService.focusInto(menu, e.shiftKey);
        };
        StandardMenuFactory2.prototype.isMenuEnabled = function(column) {
          return column.isFilterAllowed();
        };
        __decorate$2h([
          Autowired("filterManager")
        ], StandardMenuFactory2.prototype, "filterManager", void 0);
        __decorate$2h([
          Autowired("popupService")
        ], StandardMenuFactory2.prototype, "popupService", void 0);
        __decorate$2h([
          Autowired("focusService")
        ], StandardMenuFactory2.prototype, "focusService", void 0);
        __decorate$2h([
          Autowired("ctrlsService")
        ], StandardMenuFactory2.prototype, "ctrlsService", void 0);
        StandardMenuFactory2 = __decorate$2h([
          Bean3("menuFactory")
        ], StandardMenuFactory2);
        return StandardMenuFactory2;
      }(BeanStub)
    );
    var Grid2 = (
      /** @class */
      function() {
        function Grid3(eGridDiv, gridOptions, params) {
          if (!gridOptions) {
            console.error("AG Grid: no gridOptions provided to the grid");
            return;
          }
          this.gridOptions = gridOptions;
          new GridCoreCreator().create(eGridDiv, gridOptions, function(context) {
            var gridComp = new GridComp(eGridDiv);
            context.createBean(gridComp);
          }, params);
        }
        Grid3.prototype.destroy = function() {
          if (this.gridOptions && this.gridOptions.api) {
            this.gridOptions.api.destroy();
          }
        };
        return Grid3;
      }()
    );
    var GridCoreCreator = (
      /** @class */
      function() {
        function GridCoreCreator2() {
        }
        GridCoreCreator2.prototype.create = function(eGridDiv, gridOptions, uiCallback, params) {
          var _this = this;
          var debug = !!gridOptions.debug;
          var registeredModules = this.getRegisteredModules(params);
          var beanClasses = this.createBeansList(gridOptions.rowModelType, registeredModules);
          var providedBeanInstances = this.createProvidedBeans(eGridDiv, gridOptions, params);
          if (!beanClasses) {
            return;
          }
          var contextParams = {
            providedBeanInstances,
            beanClasses,
            debug
          };
          var logger = new Logger("AG Grid", function() {
            return gridOptions.debug;
          });
          var contextLogger = new Logger("Context", function() {
            return contextParams.debug;
          });
          var context = new Context(contextParams, contextLogger);
          var beans = context.getBean("beans");
          this.registerModuleUserComponents(beans, registeredModules);
          this.registerStackComponents(beans, registeredModules);
          this.registerControllers(beans, registeredModules);
          uiCallback(context);
          beans.ctrlsService.whenReady(function() {
            _this.setColumnsAndData(beans);
            _this.dispatchGridReadyEvent(beans, gridOptions);
            var isEnterprise = ModuleRegistry.isRegistered(exports.ModuleNames.EnterpriseCoreModule);
            logger.log("initialised successfully, enterprise = " + isEnterprise);
          });
        };
        GridCoreCreator2.prototype.registerControllers = function(beans, registeredModules) {
          registeredModules.forEach(function(module2) {
            module2.controllers && module2.controllers.forEach(function(meta) {
              return beans.ctrlsFactory.register(meta);
            });
          });
        };
        GridCoreCreator2.prototype.registerStackComponents = function(beans, registeredModules) {
          var agStackComponents = this.createAgStackComponentsList(registeredModules);
          beans.agStackComponentsRegistry.setupComponents(agStackComponents);
        };
        GridCoreCreator2.prototype.getRegisteredModules = function(params) {
          var passedViaConstructor = params ? params.modules : null;
          var registered2 = ModuleRegistry.getRegisteredModules();
          var allModules = [];
          var mapNames = {};
          function addModule(moduleBased, mod) {
            function addIndividualModule(currentModule) {
              if (!mapNames[currentModule.moduleName]) {
                mapNames[currentModule.moduleName] = true;
                allModules.push(currentModule);
                ModuleRegistry.register(currentModule, moduleBased);
              }
            }
            addIndividualModule(mod);
            if (mod.dependantModules) {
              mod.dependantModules.forEach(addModule.bind(null, moduleBased));
            }
          }
          if (passedViaConstructor) {
            passedViaConstructor.forEach(addModule.bind(null, true));
          }
          if (registered2) {
            registered2.forEach(addModule.bind(null, !ModuleRegistry.isPackageBased()));
          }
          return allModules;
        };
        GridCoreCreator2.prototype.registerModuleUserComponents = function(beans, registeredModules) {
          var moduleUserComps = this.extractModuleEntity(registeredModules, function(module2) {
            return module2.userComponents ? module2.userComponents : [];
          });
          moduleUserComps.forEach(function(compMeta) {
            beans.userComponentRegistry.registerDefaultComponent(compMeta.componentName, compMeta.componentClass);
          });
        };
        GridCoreCreator2.prototype.createProvidedBeans = function(eGridDiv, gridOptions, params) {
          var frameworkOverrides = params ? params.frameworkOverrides : null;
          if (missing(frameworkOverrides)) {
            frameworkOverrides = new VanillaFrameworkOverrides();
          }
          var seed = {
            gridOptions,
            eGridDiv,
            $scope: params ? params.$scope : null,
            $compile: params ? params.$compile : null,
            globalEventListener: params ? params.globalEventListener : null,
            frameworkOverrides
          };
          if (params && params.providedBeanInstances) {
            assign(seed, params.providedBeanInstances);
          }
          return seed;
        };
        GridCoreCreator2.prototype.createAgStackComponentsList = function(registeredModules) {
          var components = [
            { componentName: "AgCheckbox", componentClass: AgCheckbox },
            { componentName: "AgRadioButton", componentClass: AgRadioButton },
            { componentName: "AgToggleButton", componentClass: AgToggleButton },
            { componentName: "AgInputTextField", componentClass: AgInputTextField },
            { componentName: "AgInputTextArea", componentClass: AgInputTextArea },
            { componentName: "AgInputNumberField", componentClass: AgInputNumberField },
            { componentName: "AgInputRange", componentClass: AgInputRange },
            { componentName: "AgSelect", componentClass: AgSelect },
            { componentName: "AgSlider", componentClass: AgSlider },
            { componentName: "AgAngleSelect", componentClass: AgAngleSelect },
            { componentName: "AgColorPicker", componentClass: AgColorPicker },
            { componentName: "AgGridBody", componentClass: GridBodyComp },
            { componentName: "AgHeaderRoot", componentClass: GridHeaderComp },
            { componentName: "AgPagination", componentClass: PaginationComp },
            { componentName: "AgOverlayWrapper", componentClass: OverlayWrapperComponent },
            { componentName: "AgGroupComponent", componentClass: AgGroupComponent },
            { componentName: "AgPanel", componentClass: AgPanel },
            { componentName: "AgDialog", componentClass: AgDialog },
            { componentName: "AgRowContainer", componentClass: RowContainerComp },
            { componentName: "AgFakeHorizontalScroll", componentClass: FakeHScrollComp }
          ];
          var moduleAgStackComps = this.extractModuleEntity(registeredModules, function(module2) {
            return module2.agStackComponents ? module2.agStackComponents : [];
          });
          components = components.concat(moduleAgStackComps);
          return components;
        };
        GridCoreCreator2.prototype.createBeansList = function(rowModelType, registeredModules) {
          var rowModelClass = this.getRowModelClass(rowModelType, registeredModules);
          if (!rowModelClass) {
            return;
          }
          var beans = [
            rowModelClass,
            Beans,
            RowPositionUtils,
            CellPositionUtils,
            HeaderPositionUtils,
            PaginationAutoPageSizeService,
            GridApi,
            UserComponentRegistry,
            AgComponentUtils,
            ComponentMetadataProvider,
            ResizeObserverService,
            UserComponentFactory,
            RowContainerHeightService,
            HorizontalResizeService,
            PinnedRowModel,
            DragService,
            DisplayedGroupCreator,
            EventService,
            GridOptionsWrapper,
            PopupService,
            SelectionService,
            FilterManager,
            ColumnModel,
            HeaderNavigationService,
            PaginationProxy,
            RowRenderer,
            ExpressionService,
            ColumnFactory,
            TemplateService,
            AlignedGridsService,
            NavigationService,
            ValueCache,
            ValueService,
            LoggerFactory,
            ColumnUtils,
            AutoWidthCalculator,
            StandardMenuFactory,
            DragAndDropService,
            ColumnApi,
            FocusService,
            MouseEventService,
            Environment,
            CellNavigationService,
            ValueFormatterService,
            StylingService,
            ScrollVisibleService,
            SortController,
            ColumnHoverService,
            ColumnAnimationService,
            SelectableService,
            AutoGroupColService,
            ChangeDetectionService,
            AnimationFrameService,
            UndoRedoService,
            AgStackComponentsRegistry,
            ColumnDefFactory,
            RowCssClassCalculator,
            RowNodeBlockLoader,
            RowNodeSorter,
            CtrlsService,
            PinnedWidthService,
            RowNodeEventThrottle,
            CtrlsFactory
          ];
          var moduleBeans = this.extractModuleEntity(registeredModules, function(module2) {
            return module2.beans ? module2.beans : [];
          });
          beans.push.apply(beans, moduleBeans);
          var beansNoDuplicates = [];
          beans.forEach(function(bean) {
            if (beansNoDuplicates.indexOf(bean) < 0) {
              beansNoDuplicates.push(bean);
            }
          });
          return beansNoDuplicates;
        };
        GridCoreCreator2.prototype.extractModuleEntity = function(moduleEntities, extractor) {
          return [].concat.apply([], moduleEntities.map(extractor));
        };
        GridCoreCreator2.prototype.setColumnsAndData = function(beans) {
          var columnDefs = beans.gridOptionsWrapper.getColumnDefs();
          beans.columnModel.setColumnDefs(columnDefs || [], "gridInitializing");
          beans.rowModel.start();
        };
        GridCoreCreator2.prototype.dispatchGridReadyEvent = function(beans, gridOptions) {
          var readyEvent = {
            type: Events.EVENT_GRID_READY,
            api: gridOptions.api,
            columnApi: gridOptions.columnApi
          };
          beans.eventService.dispatchEvent(readyEvent);
        };
        GridCoreCreator2.prototype.getRowModelClass = function(rowModelType, registeredModules) {
          if (!rowModelType) {
            rowModelType = Constants.ROW_MODEL_TYPE_CLIENT_SIDE;
          }
          var rowModelClasses = {};
          registeredModules.forEach(function(module2) {
            iterateObject(module2.rowModels, function(key, value) {
              rowModelClasses[key] = value;
            });
          });
          var rowModelClass = rowModelClasses[rowModelType];
          if (exists(rowModelClass)) {
            return rowModelClass;
          }
          if (rowModelType === Constants.ROW_MODEL_TYPE_INFINITE) {
            console.error('AG Grid: Row Model "Infinite" not found. Please ensure the ' + exports.ModuleNames.InfiniteRowModelModule + " is registered.';");
          }
          console.error("AG Grid: could not find matching row model for rowModelType " + rowModelType);
          if (rowModelType === Constants.ROW_MODEL_TYPE_VIEWPORT) {
            console.error('AG Grid: Row Model "Viewport" not found. Please ensure the AG Grid Enterprise Module ' + exports.ModuleNames.ViewportRowModelModule + " is registered.';");
          }
          if (rowModelType === Constants.ROW_MODEL_TYPE_SERVER_SIDE) {
            console.error('AG Grid: Row Model "Server Side" not found. Please ensure the AG Grid Enterprise Module ' + exports.ModuleNames.ServerSideRowModelModule + " is registered.';");
          }
          if (rowModelType === Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {
            console.error('AG Grid: Row Model "Client Side" not found. Please ensure the ' + exports.ModuleNames.ClientSideRowModelModule + " is registered.';");
          }
        };
        return GridCoreCreator2;
      }()
    );
    function initialiseAgGridWithAngular1(angular) {
      var angularModule = angular.module("agGrid", []);
      angularModule.directive("agGrid", function() {
        return {
          restrict: "A",
          controller: ["$element", "$scope", "$compile", "$attrs", AngularDirectiveController],
          scope: true
        };
      });
    }
    function AngularDirectiveController($element, $scope, $compile, $attrs) {
      var gridOptions;
      var keyOfGridInScope = $attrs.agGrid;
      gridOptions = $scope.$eval(keyOfGridInScope);
      if (!gridOptions) {
        console.warn("WARNING - grid options for AG Grid not found. Please ensure the attribute ag-grid points to a valid object on the scope");
        return;
      }
      var eGridDiv = $element[0];
      var gridParams = {
        $scope,
        $compile
      };
      var grid = new Grid2(eGridDiv, gridOptions, gridParams);
      var quickFilterOnScope = keyOfGridInScope + ".quickFilterText";
      var quickFilterUnregisterFn = $scope.$watch(quickFilterOnScope, function(newFilter) {
        gridOptions.api.setQuickFilter(newFilter);
      });
      $scope.$on("$destroy", function() {
        quickFilterUnregisterFn();
        if (grid) {
          grid.destroy();
        }
        grid = null;
      });
    }
    var registered = false;
    function initialiseAgGridWithWebComponents() {
      console.warn("ag-grid: initialiseAgGridWithWebComponents is deprecated. Please use the ag-grid-webcomponent dependency instead. ");
      if (registered) {
        return;
      }
      registered = true;
      if (typeof document === "undefined" || !document.registerElement) {
        console.error("AG Grid: unable to find document.registerElement() function, unable to initialise AG Grid as a Web Component");
      }
      var AgileGridProto = Object.create(HTMLElement.prototype);
      ComponentUtil3.ALL_PROPERTIES.forEach(function(key) {
        Object.defineProperty(AgileGridProto, key, {
          set: function(v) {
            this.__agGridSetProperty(key, v);
          },
          get: function() {
            return this.__agGridGetProperty(key);
          },
          enumerable: true,
          configurable: true
        });
      });
      var agGridProtoNoType = AgileGridProto;
      agGridProtoNoType.__agGridSetProperty = function(key, value) {
        if (!this.__attributes) {
          this.__attributes = {};
        }
        this.__attributes[key] = value;
        var changeObject = {};
        changeObject[key] = { currentValue: value };
        this.onChange(changeObject);
      };
      agGridProtoNoType.onChange = function(changes) {
        if (this._initialised) {
          ComponentUtil3.processOnChange(changes, this._gridOptions, this.api, this.columnApi);
        }
      };
      agGridProtoNoType.__agGridGetProperty = function(key) {
        if (!this.__attributes) {
          this.__attributes = {};
        }
        return this.__attributes[key];
      };
      agGridProtoNoType.setGridOptions = function(options) {
        var globalEventListener = this.globalEventListener.bind(this);
        this._gridOptions = ComponentUtil3.copyAttributesToGridOptions(options, this);
        var gridParams = {
          globalEventListener
        };
        this._agGrid = new Grid2(this, this._gridOptions, gridParams);
        this.api = options.api;
        this.columnApi = options.columnApi;
        this._initialised = true;
      };
      agGridProtoNoType.createdCallback = function() {
        for (var i = 0; i < this.attributes.length; i++) {
          var attribute = this.attributes[i];
          this.setPropertyFromAttribute(attribute);
        }
      };
      agGridProtoNoType.setPropertyFromAttribute = function(attribute) {
        var name = toCamelCase(attribute.nodeName);
        var value = attribute.nodeValue;
        if (ComponentUtil3.ALL_PROPERTIES.indexOf(name) >= 0) {
          this[name] = value;
        }
      };
      agGridProtoNoType.attachedCallback = function(params) {
      };
      agGridProtoNoType.detachedCallback = function(params) {
      };
      agGridProtoNoType.attributeChangedCallback = function(attributeName) {
        var attribute = this.attributes[attributeName];
        this.setPropertyFromAttribute(attribute);
      };
      agGridProtoNoType.globalEventListener = function(eventType, event) {
        var eventLowerCase = eventType.toLowerCase();
        var browserEvent = new Event(eventLowerCase);
        var browserEventNoType = browserEvent;
        browserEventNoType.agGridDetails = event;
        this.dispatchEvent(browserEvent);
        var callbackMethod = "on" + eventLowerCase;
        if (typeof this[callbackMethod] === "function") {
          this[callbackMethod](browserEvent);
        }
      };
      document.registerElement("ag-grid", { prototype: AgileGridProto });
    }
    function toCamelCase(myString) {
      if (typeof myString === "string") {
        var result = myString.replace(/-([a-z])/g, function(g) {
          return g[1].toUpperCase();
        });
        return result;
      } else {
        return myString;
      }
    }
    var __extends$2B = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$2i = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var TabbedLayout = (
      /** @class */
      function(_super) {
        __extends$2B(TabbedLayout2, _super);
        function TabbedLayout2(params) {
          var _this = _super.call(this, TabbedLayout2.getTemplate(params.cssClass)) || this;
          _this.items = [];
          _this.params = params;
          if (params.items) {
            params.items.forEach(function(item) {
              return _this.addItem(item);
            });
          }
          return _this;
        }
        TabbedLayout2.prototype.postConstruct = function() {
          this.createManagedBean(new ManagedFocusFeature(this.getFocusableElement(), {
            onTabKeyDown: this.onTabKeyDown.bind(this),
            handleKeyDown: this.handleKeyDown.bind(this)
          }));
        };
        TabbedLayout2.getTemplate = function(cssClass) {
          return (
            /* html */
            '<div class="ag-tabs ' + cssClass + '">\n            <div ref="eHeader" role="tablist" class="ag-tabs-header ' + (cssClass ? cssClass + "-header" : "") + '"></div>\n            <div ref="eBody" role="presentation" class="ag-tabs-body ' + (cssClass ? cssClass + "-body" : "") + '"></div>\n        </div>'
          );
        };
        TabbedLayout2.prototype.handleKeyDown = function(e) {
          switch (e.keyCode) {
            case KeyCode.RIGHT:
            case KeyCode.LEFT:
              if (!this.eHeader.contains(document.activeElement)) {
                return;
              }
              var currentPosition = this.items.indexOf(this.activeItem);
              var nextPosition = e.keyCode === KeyCode.RIGHT ? Math.min(currentPosition + 1, this.items.length - 1) : Math.max(currentPosition - 1, 0);
              if (currentPosition === nextPosition) {
                return;
              }
              e.preventDefault();
              var nextItem = this.items[nextPosition];
              this.showItemWrapper(nextItem);
              nextItem.eHeaderButton.focus();
              break;
            case KeyCode.UP:
            case KeyCode.DOWN:
              e.stopPropagation();
              break;
          }
        };
        TabbedLayout2.prototype.onTabKeyDown = function(e) {
          if (e.defaultPrevented) {
            return;
          }
          var _a2 = this, focusService = _a2.focusService, eHeader = _a2.eHeader, eBody = _a2.eBody, activeItem = _a2.activeItem;
          var activeElement = document.activeElement;
          e.preventDefault();
          if (eHeader.contains(activeElement)) {
            focusService.focusInto(eBody, e.shiftKey);
          } else {
            if (focusService.isFocusUnderManagedComponent(eBody)) {
              activeItem.eHeaderButton.focus();
            } else {
              var nextEl = focusService.findNextFocusableElement(eBody, false, e.shiftKey);
              if (nextEl) {
                nextEl.focus();
              } else {
                activeItem.eHeaderButton.focus();
              }
            }
          }
        };
        TabbedLayout2.prototype.setAfterAttachedParams = function(params) {
          this.afterAttachedParams = params;
        };
        TabbedLayout2.prototype.showFirstItem = function() {
          if (this.items.length > 0) {
            this.showItemWrapper(this.items[0]);
          }
        };
        TabbedLayout2.prototype.addItem = function(item) {
          var eHeaderButton = document.createElement("span");
          setAriaRole(eHeaderButton, "tab");
          eHeaderButton.setAttribute("tabIndex", "-1");
          eHeaderButton.appendChild(item.title);
          addCssClass(eHeaderButton, "ag-tab");
          this.eHeader.appendChild(eHeaderButton);
          setAriaLabel(eHeaderButton, item.titleLabel);
          var wrapper = {
            tabbedItem: item,
            eHeaderButton
          };
          this.items.push(wrapper);
          eHeaderButton.addEventListener("click", this.showItemWrapper.bind(this, wrapper));
        };
        TabbedLayout2.prototype.showItem = function(tabbedItem) {
          var itemWrapper = find(this.items, function(wrapper) {
            return wrapper.tabbedItem === tabbedItem;
          });
          if (itemWrapper) {
            this.showItemWrapper(itemWrapper);
          }
        };
        TabbedLayout2.prototype.showItemWrapper = function(wrapper) {
          var _this = this;
          if (this.params.onItemClicked) {
            this.params.onItemClicked({ item: wrapper.tabbedItem });
          }
          if (this.activeItem === wrapper) {
            callIfPresent(this.params.onActiveItemClicked);
            return;
          }
          clearElement(this.eBody);
          wrapper.tabbedItem.bodyPromise.then(function(body) {
            _this.eBody.appendChild(body);
            var onlyUnmanaged = !_this.focusService.isKeyboardMode();
            _this.focusService.focusInto(_this.eBody, false, onlyUnmanaged);
            if (wrapper.tabbedItem.afterAttachedCallback) {
              wrapper.tabbedItem.afterAttachedCallback(_this.afterAttachedParams);
            }
          });
          if (this.activeItem) {
            removeCssClass(this.activeItem.eHeaderButton, "ag-tab-selected");
          }
          addCssClass(wrapper.eHeaderButton, "ag-tab-selected");
          this.activeItem = wrapper;
        };
        __decorate$2i([
          Autowired("focusService")
        ], TabbedLayout2.prototype, "focusService", void 0);
        __decorate$2i([
          RefSelector("eHeader")
        ], TabbedLayout2.prototype, "eHeader", void 0);
        __decorate$2i([
          RefSelector("eBody")
        ], TabbedLayout2.prototype, "eBody", void 0);
        __decorate$2i([
          PostConstruct
        ], TabbedLayout2.prototype, "postConstruct", null);
        return TabbedLayout2;
      }(Component)
    );
    function simpleHttpRequest(params) {
      return new AgPromise(function(resolve) {
        var httpRequest = new XMLHttpRequest();
        httpRequest.open("GET", params.url);
        httpRequest.send();
        httpRequest.onreadystatechange = function() {
          if (httpRequest.readyState === 4 && httpRequest.status === 200) {
            resolve(JSON.parse(httpRequest.responseText));
          }
        };
      });
    }
    (function(ServerSideTransactionResultStatus) {
      ServerSideTransactionResultStatus["Applied"] = "Applied";
      ServerSideTransactionResultStatus["StoreNotFound"] = "StoreNotFound";
      ServerSideTransactionResultStatus["StoreLoading"] = "StoreLoading";
      ServerSideTransactionResultStatus["StoreWaitingToLoad"] = "StoreWaitingToLoad";
      ServerSideTransactionResultStatus["StoreLoadingFailed"] = "StoreLoadingFailed";
      ServerSideTransactionResultStatus["StoreWrongType"] = "StoreWrongType";
      ServerSideTransactionResultStatus["Cancelled"] = "Cancelled";
    })(exports.ServerSideTransactionResultStatus || (exports.ServerSideTransactionResultStatus = {}));
    var __extends$2C = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$2j = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var VirtualList = (
      /** @class */
      function(_super) {
        __extends$2C(VirtualList2, _super);
        function VirtualList2(cssIdentifier, ariaRole, listName) {
          if (cssIdentifier === void 0) {
            cssIdentifier = "default";
          }
          if (ariaRole === void 0) {
            ariaRole = "listbox";
          }
          var _this = _super.call(this, VirtualList2.getTemplate(cssIdentifier)) || this;
          _this.cssIdentifier = cssIdentifier;
          _this.ariaRole = ariaRole;
          _this.listName = listName;
          _this.renderedRows = /* @__PURE__ */ new Map();
          _this.rowHeight = 20;
          _this.isDestroyed = false;
          return _this;
        }
        VirtualList2.prototype.postConstruct = function() {
          var _this = this;
          this.addScrollListener();
          this.rowHeight = this.getItemHeight();
          this.addResizeObserver();
          this.initialiseTabGuard({
            onFocusIn: function(e) {
              return _this.onFocusIn(e);
            },
            onFocusOut: function(e) {
              return _this.onFocusOut(e);
            },
            focusInnerElement: function(fromBottom) {
              return _this.focusInnerElement(fromBottom);
            },
            onTabKeyDown: function(e) {
              return _this.onTabKeyDown(e);
            },
            handleKeyDown: function(e) {
              return _this.handleKeyDown(e);
            }
          });
          this.setAriaProperties();
        };
        VirtualList2.prototype.setAriaProperties = function() {
          var translate = this.gridOptionsWrapper.getLocaleTextFunc();
          var listName = translate("ariaDefaultListName", this.listName || "List");
          var ariaEl = this.eContainer;
          setAriaRole(ariaEl, this.ariaRole);
          setAriaLabel(ariaEl, listName);
        };
        VirtualList2.prototype.addResizeObserver = function() {
          var listener = this.drawVirtualRows.bind(this);
          var destroyObserver = this.resizeObserverService.observeResize(this.getGui(), listener);
          this.addDestroyFunc(destroyObserver);
        };
        VirtualList2.prototype.focusInnerElement = function(fromBottom) {
          this.focusRow(fromBottom ? this.model.getRowCount() - 1 : 0);
        };
        VirtualList2.prototype.onFocusIn = function(e) {
          var target = e.target;
          if (containsClass(target, "ag-virtual-list-item")) {
            this.lastFocusedRowIndex = getAriaPosInSet(target) - 1;
          }
          return false;
        };
        VirtualList2.prototype.onFocusOut = function(e) {
          if (!this.getFocusableElement().contains(e.relatedTarget)) {
            this.lastFocusedRowIndex = null;
          }
          return false;
        };
        VirtualList2.prototype.handleKeyDown = function(e) {
          switch (e.keyCode) {
            case KeyCode.UP:
            case KeyCode.DOWN:
              if (this.navigate(e.keyCode === KeyCode.UP)) {
                e.preventDefault();
              }
              break;
          }
        };
        VirtualList2.prototype.onTabKeyDown = function(e) {
          if (this.navigate(e.shiftKey)) {
            e.preventDefault();
          } else {
            this.focusService.focusInto(this.getGui(), !e.shiftKey);
          }
        };
        VirtualList2.prototype.navigate = function(up) {
          if (this.lastFocusedRowIndex == null) {
            return false;
          }
          var nextRow = this.lastFocusedRowIndex + (up ? -1 : 1);
          if (nextRow < 0 || nextRow >= this.model.getRowCount()) {
            return false;
          }
          this.focusRow(nextRow);
          return true;
        };
        VirtualList2.prototype.getLastFocusedRow = function() {
          return this.lastFocusedRowIndex;
        };
        VirtualList2.prototype.focusRow = function(rowNumber) {
          var _this = this;
          this.ensureIndexVisible(rowNumber);
          window.setTimeout(function() {
            var renderedRow = _this.renderedRows.get(rowNumber);
            if (renderedRow) {
              renderedRow.eDiv.focus();
            }
          }, 10);
        };
        VirtualList2.prototype.getComponentAt = function(rowIndex) {
          var comp = this.renderedRows.get(rowIndex);
          return comp && comp.rowComponent;
        };
        VirtualList2.getTemplate = function(cssIdentifier) {
          return (
            /* html */
            '\n            <div class="ag-virtual-list-viewport ag-' + cssIdentifier + '-virtual-list-viewport" role="presentation">\n                <div class="ag-virtual-list-container ag-' + cssIdentifier + '-virtual-list-container" ref="eContainer"></div>\n            </div>'
          );
        };
        VirtualList2.prototype.getItemHeight = function() {
          return this.gridOptionsWrapper.getListItemHeight();
        };
        VirtualList2.prototype.ensureIndexVisible = function(index) {
          var lastRow = this.model.getRowCount();
          if (typeof index !== "number" || index < 0 || index >= lastRow) {
            console.warn("invalid row index for ensureIndexVisible: " + index);
            return;
          }
          var rowTopPixel = index * this.rowHeight;
          var rowBottomPixel = rowTopPixel + this.rowHeight;
          var eGui = this.getGui();
          var viewportTopPixel = eGui.scrollTop;
          var viewportHeight = eGui.offsetHeight;
          var viewportBottomPixel = viewportTopPixel + viewportHeight;
          var viewportScrolledPastRow = viewportTopPixel > rowTopPixel;
          var viewportScrolledBeforeRow = viewportBottomPixel < rowBottomPixel;
          if (viewportScrolledPastRow) {
            eGui.scrollTop = rowTopPixel;
          } else if (viewportScrolledBeforeRow) {
            var newScrollPosition = rowBottomPixel - viewportHeight;
            eGui.scrollTop = newScrollPosition;
          }
        };
        VirtualList2.prototype.setComponentCreator = function(componentCreator) {
          this.componentCreator = componentCreator;
        };
        VirtualList2.prototype.getRowHeight = function() {
          return this.rowHeight;
        };
        VirtualList2.prototype.getScrollTop = function() {
          return this.getGui().scrollTop;
        };
        VirtualList2.prototype.setRowHeight = function(rowHeight) {
          this.rowHeight = rowHeight;
          this.refresh();
        };
        VirtualList2.prototype.refresh = function() {
          var _this = this;
          if (this.model == null || this.isDestroyed) {
            return;
          }
          var rowCount = this.model.getRowCount();
          this.eContainer.style.height = rowCount * this.rowHeight + "px";
          waitUntil(function() {
            return _this.eContainer.clientHeight >= rowCount * _this.rowHeight;
          }, function() {
            if (_this.isDestroyed) {
              return;
            }
            _this.clearVirtualRows();
            _this.drawVirtualRows();
          });
        };
        VirtualList2.prototype.clearVirtualRows = function() {
          var _this = this;
          this.renderedRows.forEach(function(_2, rowIndex) {
            return _this.removeRow(rowIndex);
          });
        };
        VirtualList2.prototype.drawVirtualRows = function() {
          var gui = this.getGui();
          var topPixel = gui.scrollTop;
          var bottomPixel = topPixel + gui.offsetHeight;
          var firstRow = Math.floor(topPixel / this.rowHeight);
          var lastRow = Math.floor(bottomPixel / this.rowHeight);
          this.ensureRowsRendered(firstRow, lastRow);
        };
        VirtualList2.prototype.ensureRowsRendered = function(start, finish) {
          var _this = this;
          this.renderedRows.forEach(function(_2, rowIndex2) {
            if ((rowIndex2 < start || rowIndex2 > finish) && rowIndex2 !== _this.lastFocusedRowIndex) {
              _this.removeRow(rowIndex2);
            }
          });
          for (var rowIndex = start; rowIndex <= finish; rowIndex++) {
            if (this.renderedRows.has(rowIndex)) {
              continue;
            }
            if (rowIndex < this.model.getRowCount()) {
              this.insertRow(rowIndex);
            }
          }
        };
        VirtualList2.prototype.insertRow = function(rowIndex) {
          var _this = this;
          var value = this.model.getRow(rowIndex);
          var eDiv = document.createElement("div");
          addCssClass(eDiv, "ag-virtual-list-item");
          addCssClass(eDiv, "ag-" + this.cssIdentifier + "-virtual-list-item");
          setAriaRole(eDiv, this.ariaRole === "tree" ? "treeitem" : "option");
          setAriaSetSize(eDiv, this.model.getRowCount());
          setAriaPosInSet(eDiv, rowIndex + 1);
          eDiv.setAttribute("tabindex", "-1");
          if (typeof this.model.isRowSelected === "function") {
            var isSelected = this.model.isRowSelected(rowIndex);
            setAriaSelected(eDiv, !!isSelected);
            setAriaChecked(eDiv, isSelected);
          }
          eDiv.style.height = this.rowHeight + "px";
          eDiv.style.top = this.rowHeight * rowIndex + "px";
          var rowComponent = this.componentCreator(value, eDiv);
          rowComponent.addGuiEventListener("focusin", function() {
            return _this.lastFocusedRowIndex = rowIndex;
          });
          eDiv.appendChild(rowComponent.getGui());
          if (this.renderedRows.has(rowIndex - 1)) {
            this.renderedRows.get(rowIndex - 1).eDiv.insertAdjacentElement("afterend", eDiv);
          } else if (this.renderedRows.has(rowIndex + 1)) {
            this.renderedRows.get(rowIndex + 1).eDiv.insertAdjacentElement("beforebegin", eDiv);
          } else {
            this.eContainer.appendChild(eDiv);
          }
          this.renderedRows.set(rowIndex, { rowComponent, eDiv });
        };
        VirtualList2.prototype.removeRow = function(rowIndex) {
          var component = this.renderedRows.get(rowIndex);
          this.eContainer.removeChild(component.eDiv);
          this.destroyBean(component.rowComponent);
          this.renderedRows.delete(rowIndex);
        };
        VirtualList2.prototype.addScrollListener = function() {
          var _this = this;
          this.addGuiEventListener("scroll", function() {
            return _this.drawVirtualRows();
          });
        };
        VirtualList2.prototype.setModel = function(model2) {
          this.model = model2;
        };
        VirtualList2.prototype.destroy = function() {
          if (this.isDestroyed) {
            return;
          }
          this.clearVirtualRows();
          this.isDestroyed = true;
          _super.prototype.destroy.call(this);
        };
        __decorate$2j([
          Autowired("resizeObserverService")
        ], VirtualList2.prototype, "resizeObserverService", void 0);
        __decorate$2j([
          Autowired("focusService")
        ], VirtualList2.prototype, "focusService", void 0);
        __decorate$2j([
          RefSelector("eContainer")
        ], VirtualList2.prototype, "eContainer", void 0);
        __decorate$2j([
          PostConstruct
        ], VirtualList2.prototype, "postConstruct", null);
        return VirtualList2;
      }(TabGuardComp)
    );
    function defaultGroupComparator(valueA, valueB, nodeA, nodeB, accentedCompare) {
      if (accentedCompare === void 0) {
        accentedCompare = false;
      }
      console.warn("AG Grid: Since ag-grid 11.0.0 defaultGroupComparator is not necessary. You can remove this from your colDef");
      var nodeAIsGroup = exists(nodeA) && nodeA.group;
      var nodeBIsGroup = exists(nodeB) && nodeB.group;
      var bothAreGroups = nodeAIsGroup && nodeBIsGroup;
      var bothAreNormal = !nodeAIsGroup && !nodeBIsGroup;
      if (bothAreGroups) {
        return defaultComparator(nodeA.key, nodeB.key, accentedCompare);
      }
      if (bothAreNormal) {
        return defaultComparator(valueA, valueB, accentedCompare);
      }
      if (nodeAIsGroup) {
        return 1;
      }
      return -1;
    }
    var BaseComponentWrapper2 = (
      /** @class */
      function() {
        function BaseComponentWrapper3() {
        }
        BaseComponentWrapper3.prototype.wrap = function(OriginalConstructor, mandatoryMethodList, optionalMethodList, componentType, componentName) {
          var _this = this;
          if (optionalMethodList === void 0) {
            optionalMethodList = [];
          }
          var wrapper = this.createWrapper(OriginalConstructor, componentType, componentName);
          mandatoryMethodList.forEach(function(methodName) {
            _this.createMethod(wrapper, methodName, true);
          });
          optionalMethodList.forEach(function(methodName) {
            _this.createMethod(wrapper, methodName, false);
          });
          return wrapper;
        };
        BaseComponentWrapper3.prototype.unwrap = function(comp) {
          return comp;
        };
        BaseComponentWrapper3.prototype.createMethod = function(wrapper, methodName, mandatory) {
          wrapper.addMethod(methodName, this.createMethodProxy(wrapper, methodName, mandatory));
        };
        BaseComponentWrapper3.prototype.createMethodProxy = function(wrapper, methodName, mandatory) {
          return function() {
            if (wrapper.hasMethod(methodName)) {
              return wrapper.callMethod(methodName, arguments);
            }
            if (mandatory) {
              console.warn("AG Grid: Framework component is missing the method " + methodName + "()");
            }
            return null;
          };
        };
        return BaseComponentWrapper3;
      }()
    );
    (function(ChartType) {
      ChartType["Column"] = "column";
      ChartType["GroupedColumn"] = "groupedColumn";
      ChartType["StackedColumn"] = "stackedColumn";
      ChartType["NormalizedColumn"] = "normalizedColumn";
      ChartType["Bar"] = "bar";
      ChartType["GroupedBar"] = "groupedBar";
      ChartType["StackedBar"] = "stackedBar";
      ChartType["NormalizedBar"] = "normalizedBar";
      ChartType["Line"] = "line";
      ChartType["Scatter"] = "scatter";
      ChartType["Bubble"] = "bubble";
      ChartType["Pie"] = "pie";
      ChartType["Doughnut"] = "doughnut";
      ChartType["Area"] = "area";
      ChartType["StackedArea"] = "stackedArea";
      ChartType["NormalizedArea"] = "normalizedArea";
      ChartType["Histogram"] = "histogram";
    })(exports.ChartType || (exports.ChartType = {}));
    var globalObj = typeof global === "undefined" ? {} : global;
    globalObj.HTMLElement = typeof HTMLElement === "undefined" ? {} : HTMLElement;
    globalObj.HTMLButtonElement = typeof HTMLButtonElement === "undefined" ? {} : HTMLButtonElement;
    globalObj.HTMLSelectElement = typeof HTMLSelectElement === "undefined" ? {} : HTMLSelectElement;
    globalObj.HTMLInputElement = typeof HTMLInputElement === "undefined" ? {} : HTMLInputElement;
    globalObj.Node = typeof Node === "undefined" ? {} : Node;
    globalObj.MouseEvent = typeof MouseEvent === "undefined" ? {} : MouseEvent;
    var __spreadArrays$b = function() {
      for (var s = 0, i = 0, il = arguments.length; i < il; i++)
        s += arguments[i].length;
      for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
          r[k] = a[j];
      return r;
    };
    var ClientSideNodeManager = (
      /** @class */
      function() {
        function ClientSideNodeManager2(rootNode, gridOptionsWrapper, eventService, columnModel, gridApi, columnApi, selectionService, beans) {
          this.nextId = 0;
          this.allNodesMap = {};
          this.rootNode = rootNode;
          this.gridOptionsWrapper = gridOptionsWrapper;
          this.eventService = eventService;
          this.columnModel = columnModel;
          this.gridApi = gridApi;
          this.columnApi = columnApi;
          this.beans = beans;
          this.selectionService = selectionService;
          this.rootNode.group = true;
          this.rootNode.level = -1;
          this.rootNode.id = ClientSideNodeManager2.ROOT_NODE_ID;
          this.rootNode.allLeafChildren = [];
          this.rootNode.childrenAfterGroup = [];
          this.rootNode.childrenAfterSort = [];
          this.rootNode.childrenAfterFilter = [];
          this.postConstruct();
        }
        ClientSideNodeManager2.prototype.postConstruct = function() {
          this.suppressParentsInRowNodes = this.gridOptionsWrapper.isSuppressParentsInRowNodes();
          this.isRowMasterFunc = this.gridOptionsWrapper.getIsRowMasterFunc();
          this.doingTreeData = this.gridOptionsWrapper.isTreeData();
          this.doingMasterDetail = this.gridOptionsWrapper.isMasterDetail();
        };
        ClientSideNodeManager2.prototype.getCopyOfNodesMap = function() {
          return _.cloneObject(this.allNodesMap);
        };
        ClientSideNodeManager2.prototype.getRowNode = function(id) {
          return this.allNodesMap[id];
        };
        ClientSideNodeManager2.prototype.setRowData = function(rowData) {
          var _this = this;
          if (typeof rowData === "string") {
            console.warn("AG Grid: rowData must be an array, however you passed in a string. If you are loading JSON, make sure you convert the JSON string to JavaScript objects first");
            return;
          }
          var rootNode = this.rootNode;
          var sibling = this.rootNode.sibling;
          rootNode.childrenAfterFilter = null;
          rootNode.childrenAfterGroup = null;
          rootNode.childrenAfterSort = null;
          rootNode.childrenMapped = null;
          rootNode.updateHasChildren();
          this.nextId = 0;
          this.allNodesMap = {};
          if (rowData) {
            rootNode.allLeafChildren = rowData.map(function(dataItem) {
              return _this.createNode(dataItem, _this.rootNode, ClientSideNodeManager2.TOP_LEVEL);
            });
          } else {
            rootNode.allLeafChildren = [];
            rootNode.childrenAfterGroup = [];
          }
          if (sibling) {
            sibling.childrenAfterFilter = rootNode.childrenAfterFilter;
            sibling.childrenAfterGroup = rootNode.childrenAfterGroup;
            sibling.childrenAfterSort = rootNode.childrenAfterSort;
            sibling.childrenMapped = rootNode.childrenMapped;
            sibling.allLeafChildren = rootNode.allLeafChildren;
          }
        };
        ClientSideNodeManager2.prototype.updateRowData = function(rowDataTran, rowNodeOrder) {
          var rowNodeTransaction = {
            remove: [],
            update: [],
            add: []
          };
          var nodesToUnselect = [];
          this.executeRemove(rowDataTran, rowNodeTransaction, nodesToUnselect);
          this.executeUpdate(rowDataTran, rowNodeTransaction, nodesToUnselect);
          this.executeAdd(rowDataTran, rowNodeTransaction);
          this.updateSelection(nodesToUnselect);
          if (rowNodeOrder) {
            _.sortRowNodesByOrder(this.rootNode.allLeafChildren, rowNodeOrder);
          }
          return rowNodeTransaction;
        };
        ClientSideNodeManager2.prototype.updateSelection = function(nodesToUnselect) {
          var selectionChanged = nodesToUnselect.length > 0;
          if (selectionChanged) {
            nodesToUnselect.forEach(function(rowNode) {
              rowNode.setSelected(false, false, true);
            });
          }
          this.selectionService.updateGroupsFromChildrenSelections();
          if (selectionChanged) {
            var event_1 = {
              type: Events.EVENT_SELECTION_CHANGED,
              api: this.gridApi,
              columnApi: this.columnApi
            };
            this.eventService.dispatchEvent(event_1);
          }
        };
        ClientSideNodeManager2.prototype.executeAdd = function(rowDataTran, rowNodeTransaction) {
          var _this = this;
          var add = rowDataTran.add, addIndex = rowDataTran.addIndex;
          if (_.missingOrEmpty(add)) {
            return;
          }
          var newNodes = add.map(function(item) {
            return _this.createNode(item, _this.rootNode, ClientSideNodeManager2.TOP_LEVEL);
          });
          var useIndex = typeof addIndex === "number" && addIndex >= 0;
          if (useIndex) {
            var existingLeafChildren = this.rootNode.allLeafChildren;
            var nodesBeforeIndex = existingLeafChildren.slice(0, addIndex);
            var nodesAfterIndex = existingLeafChildren.slice(addIndex, existingLeafChildren.length);
            this.rootNode.allLeafChildren = __spreadArrays$b(nodesBeforeIndex, newNodes, nodesAfterIndex);
          } else {
            this.rootNode.allLeafChildren = __spreadArrays$b(this.rootNode.allLeafChildren, newNodes);
          }
          if (this.rootNode.sibling) {
            this.rootNode.sibling.allLeafChildren = this.rootNode.allLeafChildren;
          }
          rowNodeTransaction.add = newNodes;
        };
        ClientSideNodeManager2.prototype.executeRemove = function(rowDataTran, rowNodeTransaction, nodesToUnselect) {
          var _this = this;
          var remove = rowDataTran.remove;
          if (_.missingOrEmpty(remove)) {
            return;
          }
          var rowIdsRemoved = {};
          remove.forEach(function(item) {
            var rowNode = _this.lookupRowNode(item);
            if (!rowNode) {
              return;
            }
            if (rowNode.isSelected()) {
              nodesToUnselect.push(rowNode);
            }
            rowNode.clearRowTopAndRowIndex();
            rowIdsRemoved[rowNode.id] = true;
            delete _this.allNodesMap[rowNode.id];
            rowNodeTransaction.remove.push(rowNode);
          });
          this.rootNode.allLeafChildren = this.rootNode.allLeafChildren.filter(function(rowNode) {
            return !rowIdsRemoved[rowNode.id];
          });
          if (this.rootNode.sibling) {
            this.rootNode.sibling.allLeafChildren = this.rootNode.allLeafChildren;
          }
        };
        ClientSideNodeManager2.prototype.executeUpdate = function(rowDataTran, rowNodeTransaction, nodesToUnselect) {
          var _this = this;
          var update = rowDataTran.update;
          if (_.missingOrEmpty(update)) {
            return;
          }
          update.forEach(function(item) {
            var rowNode = _this.lookupRowNode(item);
            if (!rowNode) {
              return;
            }
            rowNode.updateData(item);
            if (!rowNode.selectable && rowNode.isSelected()) {
              nodesToUnselect.push(rowNode);
            }
            _this.setMasterForRow(rowNode, item, ClientSideNodeManager2.TOP_LEVEL, false);
            rowNodeTransaction.update.push(rowNode);
          });
        };
        ClientSideNodeManager2.prototype.lookupRowNode = function(data) {
          var rowNodeIdFunc = this.gridOptionsWrapper.getRowNodeIdFunc();
          var rowNode;
          if (_.exists(rowNodeIdFunc)) {
            var id = rowNodeIdFunc(data);
            rowNode = this.allNodesMap[id];
            if (!rowNode) {
              console.error("AG Grid: could not find row id=" + id + ", data item was not found for this id");
              return null;
            }
          } else {
            rowNode = _.find(this.rootNode.allLeafChildren, function(node) {
              return node.data === data;
            });
            if (!rowNode) {
              console.error("AG Grid: could not find data item as object was not found", data);
              console.error("Consider using getRowNodeId to help the Grid find matching row data");
              return null;
            }
          }
          return rowNode;
        };
        ClientSideNodeManager2.prototype.createNode = function(dataItem, parent, level) {
          var node = new RowNode(this.beans);
          node.group = false;
          this.setMasterForRow(node, dataItem, level, true);
          if (parent && !this.suppressParentsInRowNodes) {
            node.parent = parent;
          }
          node.level = level;
          node.setDataAndId(dataItem, this.nextId.toString());
          if (this.allNodesMap[node.id]) {
            console.warn("ag-grid: duplicate node id '" + node.id + "' detected from getRowNodeId callback, this could cause issues in your grid.");
          }
          this.allNodesMap[node.id] = node;
          this.nextId++;
          return node;
        };
        ClientSideNodeManager2.prototype.setMasterForRow = function(rowNode, data, level, setExpanded) {
          if (this.doingTreeData) {
            rowNode.setMaster(false);
            if (setExpanded) {
              rowNode.expanded = false;
            }
          } else {
            if (this.doingMasterDetail) {
              if (this.isRowMasterFunc) {
                rowNode.setMaster(this.isRowMasterFunc(data));
              } else {
                rowNode.setMaster(true);
              }
            } else {
              rowNode.setMaster(false);
            }
            if (setExpanded) {
              var rowGroupColumns = this.columnModel.getRowGroupColumns();
              var numRowGroupColumns = rowGroupColumns ? rowGroupColumns.length : 0;
              var masterRowLevel = level + numRowGroupColumns;
              rowNode.expanded = rowNode.master ? this.isExpanded(masterRowLevel) : false;
            }
          }
        };
        ClientSideNodeManager2.prototype.isExpanded = function(level) {
          var expandByDefault = this.gridOptionsWrapper.getGroupDefaultExpanded();
          if (expandByDefault === -1) {
            return true;
          }
          return level < expandByDefault;
        };
        ClientSideNodeManager2.TOP_LEVEL = 0;
        ClientSideNodeManager2.ROOT_NODE_ID = "ROOT_NODE_ID";
        return ClientSideNodeManager2;
      }()
    );
    var __extends$2D = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$2k = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var RecursionType;
    (function(RecursionType2) {
      RecursionType2[RecursionType2["Normal"] = 0] = "Normal";
      RecursionType2[RecursionType2["AfterFilter"] = 1] = "AfterFilter";
      RecursionType2[RecursionType2["AfterFilterAndSort"] = 2] = "AfterFilterAndSort";
      RecursionType2[RecursionType2["PivotNodes"] = 3] = "PivotNodes";
    })(RecursionType || (RecursionType = {}));
    var ClientSideRowModel = (
      /** @class */
      function(_super) {
        __extends$2D(ClientSideRowModel2, _super);
        function ClientSideRowModel2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        ClientSideRowModel2.prototype.init = function() {
          var refreshEverythingFunc = this.refreshModel.bind(this, { step: exports.ClientSideRowModelSteps.EVERYTHING });
          var refreshEverythingAfterColsChangedFunc = this.refreshModel.bind(this, {
            step: exports.ClientSideRowModelSteps.EVERYTHING,
            afterColumnsChanged: true,
            keepRenderedRows: true,
            animate: true
          });
          this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, refreshEverythingAfterColsChangedFunc);
          this.addManagedListener(this.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, refreshEverythingFunc);
          this.addManagedListener(this.eventService, Events.EVENT_COLUMN_VALUE_CHANGED, this.onValueChanged.bind(this));
          this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_CHANGED, this.refreshModel.bind(this, { step: exports.ClientSideRowModelSteps.PIVOT }));
          this.addManagedListener(this.eventService, Events.EVENT_FILTER_CHANGED, this.onFilterChanged.bind(this));
          this.addManagedListener(this.eventService, Events.EVENT_SORT_CHANGED, this.onSortChanged.bind(this));
          this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, refreshEverythingFunc);
          var refreshMapListener = this.refreshModel.bind(this, {
            step: exports.ClientSideRowModelSteps.MAP,
            keepRenderedRows: true,
            animate: true
          });
          this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_GROUP_REMOVE_SINGLE_CHILDREN, refreshMapListener);
          this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_GROUP_REMOVE_LOWEST_SINGLE_CHILDREN, refreshMapListener);
          this.rootNode = new RowNode(this.beans);
          this.nodeManager = new ClientSideNodeManager(this.rootNode, this.gridOptionsWrapper, this.eventService, this.columnModel, this.gridApi, this.columnApi, this.selectionService, this.beans);
        };
        ClientSideRowModel2.prototype.start = function() {
          var rowData = this.gridOptionsWrapper.getRowData();
          if (rowData) {
            this.setRowData(rowData);
          }
        };
        ClientSideRowModel2.prototype.ensureRowHeightsValid = function(startPixel, endPixel, startLimitIndex, endLimitIndex) {
          var atLeastOneChange;
          var res = false;
          do {
            atLeastOneChange = false;
            var rowAtStartPixel = this.getRowIndexAtPixel(startPixel);
            var rowAtEndPixel = this.getRowIndexAtPixel(endPixel);
            var firstRow = Math.max(rowAtStartPixel, startLimitIndex);
            var lastRow = Math.min(rowAtEndPixel, endLimitIndex);
            for (var rowIndex = firstRow; rowIndex <= lastRow; rowIndex++) {
              var rowNode = this.getRow(rowIndex);
              if (rowNode.rowHeightEstimated) {
                var rowHeight = this.gridOptionsWrapper.getRowHeightForNode(rowNode);
                rowNode.setRowHeight(rowHeight.height);
                atLeastOneChange = true;
                res = true;
              }
            }
            if (atLeastOneChange) {
              this.setRowTopAndRowIndex();
            }
          } while (atLeastOneChange);
          return res;
        };
        ClientSideRowModel2.prototype.setRowTopAndRowIndex = function() {
          var defaultRowHeight = this.gridOptionsWrapper.getDefaultRowHeight();
          var nextRowTop = 0;
          var displayedRowsMapped = /* @__PURE__ */ new Set();
          var allowEstimate = this.gridOptionsWrapper.getDomLayout() === Constants.DOM_LAYOUT_NORMAL;
          for (var i = 0; i < this.rowsToDisplay.length; i++) {
            var rowNode = this.rowsToDisplay[i];
            if (rowNode.id != null) {
              displayedRowsMapped.add(rowNode.id);
            }
            if (rowNode.rowHeight == null) {
              var rowHeight = this.gridOptionsWrapper.getRowHeightForNode(rowNode, allowEstimate, defaultRowHeight);
              rowNode.setRowHeight(rowHeight.height, rowHeight.estimated);
            }
            rowNode.setRowTop(nextRowTop);
            rowNode.setRowIndex(i);
            nextRowTop += rowNode.rowHeight;
          }
          return displayedRowsMapped;
        };
        ClientSideRowModel2.prototype.clearRowTopAndRowIndex = function(changedPath, displayedRowsMapped) {
          var changedPathActive = changedPath.isActive();
          var clearIfNotDisplayed = function(rowNode) {
            if (rowNode && rowNode.id != null && !displayedRowsMapped.has(rowNode.id)) {
              rowNode.clearRowTopAndRowIndex();
            }
          };
          var recurse = function(rowNode) {
            clearIfNotDisplayed(rowNode);
            clearIfNotDisplayed(rowNode.detailNode);
            clearIfNotDisplayed(rowNode.sibling);
            if (rowNode.hasChildren()) {
              if (rowNode.childrenAfterGroup) {
                var isRootNode = rowNode.level == -1;
                var skipChildren = changedPathActive && !isRootNode && !rowNode.expanded;
                if (!skipChildren) {
                  rowNode.childrenAfterGroup.forEach(recurse);
                }
              }
            }
          };
          recurse(this.rootNode);
        };
        ClientSideRowModel2.prototype.ensureRowsAtPixel = function(rowNodes, pixel, increment) {
          var _this = this;
          if (increment === void 0) {
            increment = 0;
          }
          var indexAtPixelNow = this.getRowIndexAtPixel(pixel);
          var rowNodeAtPixelNow = this.getRow(indexAtPixelNow);
          if (rowNodeAtPixelNow === rowNodes[0]) {
            return false;
          }
          rowNodes.forEach(function(rowNode) {
            _.removeFromArray(_this.rootNode.allLeafChildren, rowNode);
          });
          rowNodes.forEach(function(rowNode, idx) {
            _.insertIntoArray(_this.rootNode.allLeafChildren, rowNode, Math.max(indexAtPixelNow + increment, 0) + idx);
          });
          this.refreshModel({
            step: exports.ClientSideRowModelSteps.EVERYTHING,
            keepRenderedRows: true,
            animate: true,
            keepEditingRows: true
          });
          return true;
        };
        ClientSideRowModel2.prototype.highlightRowAtPixel = function(rowNode, pixel) {
          var indexAtPixelNow = pixel != null ? this.getRowIndexAtPixel(pixel) : null;
          var rowNodeAtPixelNow = indexAtPixelNow != null ? this.getRow(indexAtPixelNow) : null;
          if (!rowNodeAtPixelNow || !rowNode || rowNodeAtPixelNow === rowNode || pixel == null) {
            if (this.lastHighlightedRow) {
              this.lastHighlightedRow.setHighlighted(null);
              this.lastHighlightedRow = null;
            }
            return;
          }
          var highlight = this.getHighlightPosition(pixel, rowNodeAtPixelNow);
          if (this.lastHighlightedRow && this.lastHighlightedRow !== rowNodeAtPixelNow) {
            this.lastHighlightedRow.setHighlighted(null);
            this.lastHighlightedRow = null;
          }
          rowNodeAtPixelNow.setHighlighted(highlight);
          this.lastHighlightedRow = rowNodeAtPixelNow;
        };
        ClientSideRowModel2.prototype.getHighlightPosition = function(pixel, rowNode) {
          if (!rowNode) {
            var index = this.getRowIndexAtPixel(pixel);
            rowNode = this.getRow(index || 0);
            if (!rowNode) {
              return exports.RowHighlightPosition.Below;
            }
          }
          var rowTop = rowNode.rowTop, rowHeight = rowNode.rowHeight;
          return pixel - rowTop < rowHeight / 2 ? exports.RowHighlightPosition.Above : exports.RowHighlightPosition.Below;
        };
        ClientSideRowModel2.prototype.getLastHighlightedRowNode = function() {
          return this.lastHighlightedRow;
        };
        ClientSideRowModel2.prototype.isLastRowIndexKnown = function() {
          return true;
        };
        ClientSideRowModel2.prototype.getRowCount = function() {
          if (this.rowsToDisplay) {
            return this.rowsToDisplay.length;
          }
          return 0;
        };
        ClientSideRowModel2.prototype.getTopLevelRowCount = function() {
          var showingRootNode = this.rowsToDisplay && this.rowsToDisplay[0] === this.rootNode;
          if (showingRootNode) {
            return 1;
          }
          return this.rootNode.childrenAfterFilter ? this.rootNode.childrenAfterFilter.length : 0;
        };
        ClientSideRowModel2.prototype.getTopLevelRowDisplayedIndex = function(topLevelIndex) {
          var showingRootNode = this.rowsToDisplay && this.rowsToDisplay[0] === this.rootNode;
          if (showingRootNode) {
            return topLevelIndex;
          }
          var rowNode = this.rootNode.childrenAfterSort[topLevelIndex];
          if (this.gridOptionsWrapper.isGroupHideOpenParents()) {
            while (rowNode.expanded && rowNode.childrenAfterSort && rowNode.childrenAfterSort.length > 0) {
              rowNode = rowNode.childrenAfterSort[0];
            }
          }
          return rowNode.rowIndex;
        };
        ClientSideRowModel2.prototype.getRowBounds = function(index) {
          if (_.missing(this.rowsToDisplay)) {
            return null;
          }
          var rowNode = this.rowsToDisplay[index];
          if (rowNode) {
            return {
              rowTop: rowNode.rowTop,
              rowHeight: rowNode.rowHeight
            };
          }
          return null;
        };
        ClientSideRowModel2.prototype.onRowGroupOpened = function() {
          var animate = this.gridOptionsWrapper.isAnimateRows();
          this.refreshModel({ step: exports.ClientSideRowModelSteps.MAP, keepRenderedRows: true, animate });
        };
        ClientSideRowModel2.prototype.onFilterChanged = function(event) {
          if (event.afterDataChange) {
            return;
          }
          var animate = this.gridOptionsWrapper.isAnimateRows();
          this.refreshModel({ step: exports.ClientSideRowModelSteps.FILTER, keepRenderedRows: true, animate });
        };
        ClientSideRowModel2.prototype.onSortChanged = function() {
          var animate = this.gridOptionsWrapper.isAnimateRows();
          this.refreshModel({ step: exports.ClientSideRowModelSteps.SORT, keepRenderedRows: true, animate, keepEditingRows: true });
        };
        ClientSideRowModel2.prototype.getType = function() {
          return Constants.ROW_MODEL_TYPE_CLIENT_SIDE;
        };
        ClientSideRowModel2.prototype.onValueChanged = function() {
          if (this.columnModel.isPivotActive()) {
            this.refreshModel({ step: exports.ClientSideRowModelSteps.PIVOT });
          } else {
            this.refreshModel({ step: exports.ClientSideRowModelSteps.AGGREGATE });
          }
        };
        ClientSideRowModel2.prototype.createChangePath = function(rowNodeTransactions) {
          var noTransactions = _.missingOrEmpty(rowNodeTransactions);
          var changedPath = new ChangedPath(false, this.rootNode);
          if (noTransactions || this.gridOptionsWrapper.isTreeData()) {
            changedPath.setInactive();
          }
          return changedPath;
        };
        ClientSideRowModel2.prototype.isSuppressModelUpdateAfterUpdateTransaction = function(params) {
          if (!this.gridOptionsWrapper.isSuppressModelUpdateAfterUpdateTransaction()) {
            return false;
          }
          if (params.rowNodeTransactions == null) {
            return false;
          }
          var transWithAddsOrDeletes = _.filter(params.rowNodeTransactions, function(tx) {
            return tx.add != null && tx.add.length > 0 || tx.remove != null && tx.remove.length > 0;
          });
          var transactionsContainUpdatesOnly = transWithAddsOrDeletes == null || transWithAddsOrDeletes.length == 0;
          return transactionsContainUpdatesOnly;
        };
        ClientSideRowModel2.prototype.refreshModel = function(params) {
          var _this = this;
          if (this.isSuppressModelUpdateAfterUpdateTransaction(params)) {
            return;
          }
          var changedPath = this.createChangePath(params.rowNodeTransactions);
          switch (params.step) {
            case exports.ClientSideRowModelSteps.EVERYTHING:
              this.doRowGrouping(params.groupState, params.rowNodeTransactions, params.rowNodeOrder, changedPath, !!params.afterColumnsChanged);
            case exports.ClientSideRowModelSteps.FILTER:
              this.doFilter(changedPath);
            case exports.ClientSideRowModelSteps.PIVOT:
              this.doPivot(changedPath);
            case exports.ClientSideRowModelSteps.AGGREGATE:
              this.doAggregate(changedPath);
            case exports.ClientSideRowModelSteps.SORT:
              this.doSort(params.rowNodeTransactions, changedPath);
            case exports.ClientSideRowModelSteps.MAP:
              this.doRowsToDisplay();
          }
          var displayedNodesMapped = this.setRowTopAndRowIndex();
          this.clearRowTopAndRowIndex(changedPath, displayedNodesMapped);
          var event = {
            type: Events.EVENT_MODEL_UPDATED,
            api: this.gridApi,
            columnApi: this.columnApi,
            animate: params.animate,
            keepRenderedRows: params.keepRenderedRows,
            newData: params.newData,
            newPage: false
          };
          this.eventService.dispatchEvent(event);
          if (this.$scope) {
            window.setTimeout(function() {
              _this.$scope.$apply();
            }, 0);
          }
        };
        ClientSideRowModel2.prototype.isEmpty = function() {
          var rowsMissing = _.missing(this.rootNode.allLeafChildren) || this.rootNode.allLeafChildren.length === 0;
          return _.missing(this.rootNode) || rowsMissing || !this.columnModel.isReady();
        };
        ClientSideRowModel2.prototype.isRowsToRender = function() {
          return _.exists(this.rowsToDisplay) && this.rowsToDisplay.length > 0;
        };
        ClientSideRowModel2.prototype.getNodesInRangeForSelection = function(firstInRange, lastInRange) {
          var firstRowHit = !lastInRange;
          var lastRowHit = false;
          var lastRow;
          var result = [];
          var groupsSelectChildren = this.gridOptionsWrapper.isGroupSelectsChildren();
          this.forEachNodeAfterFilterAndSort(function(rowNode) {
            var lookingForLastRow = firstRowHit && !lastRowHit;
            if (!firstRowHit) {
              if (rowNode === lastInRange || rowNode === firstInRange) {
                firstRowHit = true;
              }
            }
            var skipThisGroupNode = rowNode.group && groupsSelectChildren;
            if (!skipThisGroupNode) {
              var inRange = firstRowHit && !lastRowHit;
              var childOfLastRow = rowNode.isParentOfNode(lastRow);
              if (inRange || childOfLastRow) {
                result.push(rowNode);
              }
            }
            if (lookingForLastRow) {
              if (rowNode === lastInRange || rowNode === firstInRange) {
                lastRowHit = true;
                if (rowNode === lastInRange) {
                  lastRow = lastInRange;
                } else {
                  lastRow = firstInRange;
                }
              }
            }
          });
          return result;
        };
        ClientSideRowModel2.prototype.setDatasource = function(datasource) {
          console.error("AG Grid: should never call setDatasource on clientSideRowController");
        };
        ClientSideRowModel2.prototype.getTopLevelNodes = function() {
          return this.rootNode ? this.rootNode.childrenAfterGroup : null;
        };
        ClientSideRowModel2.prototype.getRootNode = function() {
          return this.rootNode;
        };
        ClientSideRowModel2.prototype.getRow = function(index) {
          return this.rowsToDisplay[index];
        };
        ClientSideRowModel2.prototype.isRowPresent = function(rowNode) {
          return this.rowsToDisplay.indexOf(rowNode) >= 0;
        };
        ClientSideRowModel2.prototype.getRowIndexAtPixel = function(pixelToMatch) {
          if (this.isEmpty()) {
            return -1;
          }
          var bottomPointer = 0;
          var topPointer = this.rowsToDisplay.length - 1;
          if (pixelToMatch <= 0) {
            return 0;
          }
          var lastNode = _.last(this.rowsToDisplay);
          if (lastNode.rowTop <= pixelToMatch) {
            return this.rowsToDisplay.length - 1;
          }
          while (true) {
            var midPointer = Math.floor((bottomPointer + topPointer) / 2);
            var currentRowNode = this.rowsToDisplay[midPointer];
            if (this.isRowInPixel(currentRowNode, pixelToMatch)) {
              return midPointer;
            }
            if (currentRowNode.rowTop < pixelToMatch) {
              bottomPointer = midPointer + 1;
            } else if (currentRowNode.rowTop > pixelToMatch) {
              topPointer = midPointer - 1;
            }
          }
        };
        ClientSideRowModel2.prototype.isRowInPixel = function(rowNode, pixelToMatch) {
          var topPixel = rowNode.rowTop;
          var bottomPixel = rowNode.rowTop + rowNode.rowHeight;
          var pixelInRow = topPixel <= pixelToMatch && bottomPixel > pixelToMatch;
          return pixelInRow;
        };
        ClientSideRowModel2.prototype.forEachLeafNode = function(callback) {
          if (this.rootNode.allLeafChildren) {
            this.rootNode.allLeafChildren.forEach(function(rowNode, index) {
              return callback(rowNode, index);
            });
          }
        };
        ClientSideRowModel2.prototype.forEachNode = function(callback) {
          this.recursivelyWalkNodesAndCallback(this.rootNode.childrenAfterGroup, callback, RecursionType.Normal, 0);
        };
        ClientSideRowModel2.prototype.forEachNodeAfterFilter = function(callback) {
          this.recursivelyWalkNodesAndCallback(this.rootNode.childrenAfterFilter, callback, RecursionType.AfterFilter, 0);
        };
        ClientSideRowModel2.prototype.forEachNodeAfterFilterAndSort = function(callback) {
          this.recursivelyWalkNodesAndCallback(this.rootNode.childrenAfterSort, callback, RecursionType.AfterFilterAndSort, 0);
        };
        ClientSideRowModel2.prototype.forEachPivotNode = function(callback) {
          this.recursivelyWalkNodesAndCallback([this.rootNode], callback, RecursionType.PivotNodes, 0);
        };
        ClientSideRowModel2.prototype.recursivelyWalkNodesAndCallback = function(nodes, callback, recursionType, index) {
          if (!nodes) {
            return index;
          }
          for (var i = 0; i < nodes.length; i++) {
            var node = nodes[i];
            callback(node, index++);
            if (node.hasChildren()) {
              var nodeChildren = null;
              switch (recursionType) {
                case RecursionType.Normal:
                  nodeChildren = node.childrenAfterGroup;
                  break;
                case RecursionType.AfterFilter:
                  nodeChildren = node.childrenAfterFilter;
                  break;
                case RecursionType.AfterFilterAndSort:
                  nodeChildren = node.childrenAfterSort;
                  break;
                case RecursionType.PivotNodes:
                  nodeChildren = !node.leafGroup ? node.childrenAfterSort : null;
                  break;
              }
              if (nodeChildren) {
                index = this.recursivelyWalkNodesAndCallback(nodeChildren, callback, recursionType, index);
              }
            }
          }
          return index;
        };
        ClientSideRowModel2.prototype.doAggregate = function(changedPath) {
          if (this.aggregationStage) {
            this.aggregationStage.execute({ rowNode: this.rootNode, changedPath });
          }
        };
        ClientSideRowModel2.prototype.expandOrCollapseAll = function(expand) {
          var usingTreeData = this.gridOptionsWrapper.isTreeData();
          if (this.rootNode) {
            recursiveExpandOrCollapse(this.rootNode.childrenAfterGroup);
          }
          function recursiveExpandOrCollapse(rowNodes) {
            if (!rowNodes) {
              return;
            }
            rowNodes.forEach(function(rowNode) {
              var shouldExpandOrCollapse = usingTreeData ? _.exists(rowNode.childrenAfterGroup) : rowNode.group;
              if (shouldExpandOrCollapse) {
                rowNode.expanded = expand;
                recursiveExpandOrCollapse(rowNode.childrenAfterGroup);
              }
            });
          }
          this.refreshModel({ step: exports.ClientSideRowModelSteps.MAP });
          var eventSource = expand ? "expandAll" : "collapseAll";
          var event = {
            api: this.gridApi,
            columnApi: this.columnApi,
            type: Events.EVENT_EXPAND_COLLAPSE_ALL,
            source: eventSource
          };
          this.eventService.dispatchEvent(event);
        };
        ClientSideRowModel2.prototype.doSort = function(rowNodeTransactions, changedPath) {
          this.sortStage.execute({
            rowNode: this.rootNode,
            rowNodeTransactions,
            changedPath
          });
        };
        ClientSideRowModel2.prototype.doRowGrouping = function(groupState, rowNodeTransactions, rowNodeOrder, changedPath, afterColumnsChanged) {
          if (this.groupStage) {
            if (rowNodeTransactions) {
              this.groupStage.execute({
                rowNode: this.rootNode,
                rowNodeTransactions,
                rowNodeOrder,
                changedPath
              });
            } else {
              this.groupStage.execute({
                rowNode: this.rootNode,
                changedPath,
                afterColumnsChanged
              });
              this.restoreGroupState(groupState);
            }
            if (this.gridOptionsWrapper.isGroupSelectsChildren()) {
              this.selectionService.updateGroupsFromChildrenSelections(changedPath);
            }
          } else {
            this.rootNode.childrenAfterGroup = this.rootNode.allLeafChildren;
            if (this.rootNode.sibling) {
              this.rootNode.sibling.childrenAfterGroup = this.rootNode.childrenAfterGroup;
            }
            this.rootNode.updateHasChildren();
          }
        };
        ClientSideRowModel2.prototype.restoreGroupState = function(groupState) {
          if (!groupState) {
            return;
          }
          _.traverseNodesWithKey(this.rootNode.childrenAfterGroup, function(node, key) {
            if (typeof groupState[key] === "boolean") {
              node.expanded = groupState[key];
            }
          });
        };
        ClientSideRowModel2.prototype.doFilter = function(changedPath) {
          this.filterStage.execute({ rowNode: this.rootNode, changedPath });
        };
        ClientSideRowModel2.prototype.doPivot = function(changedPath) {
          if (this.pivotStage) {
            this.pivotStage.execute({ rowNode: this.rootNode, changedPath });
          }
        };
        ClientSideRowModel2.prototype.getGroupState = function() {
          if (!this.rootNode.childrenAfterGroup || !this.gridOptionsWrapper.isRememberGroupStateWhenNewData()) {
            return null;
          }
          var result = {};
          _.traverseNodesWithKey(this.rootNode.childrenAfterGroup, function(node, key) {
            return result[key] = node.expanded;
          });
          return result;
        };
        ClientSideRowModel2.prototype.getCopyOfNodesMap = function() {
          return this.nodeManager.getCopyOfNodesMap();
        };
        ClientSideRowModel2.prototype.getRowNode = function(id) {
          var idIsGroup = typeof id == "string" && id.indexOf(RowNode.ID_PREFIX_ROW_GROUP) == 0;
          if (idIsGroup) {
            var res_1 = void 0;
            this.forEachNode(function(node) {
              if (node.id === id) {
                res_1 = node;
              }
            });
            return res_1;
          } else {
            return this.nodeManager.getRowNode(id);
          }
        };
        ClientSideRowModel2.prototype.setRowData = function(rowData) {
          var groupState = this.getGroupState();
          this.nodeManager.setRowData(rowData);
          var rowDataChangedEvent = {
            type: Events.EVENT_ROW_DATA_CHANGED,
            api: this.gridApi,
            columnApi: this.columnApi
          };
          this.eventService.dispatchEvent(rowDataChangedEvent);
          this.refreshModel({
            step: exports.ClientSideRowModelSteps.EVERYTHING,
            groupState,
            newData: true
          });
        };
        ClientSideRowModel2.prototype.batchUpdateRowData = function(rowDataTransaction, callback) {
          var _this = this;
          if (this.applyAsyncTransactionsTimeout == null) {
            this.rowDataTransactionBatch = [];
            var waitMillis = this.gridOptionsWrapper.getAsyncTransactionWaitMillis();
            this.applyAsyncTransactionsTimeout = window.setTimeout(function() {
              _this.executeBatchUpdateRowData();
            }, waitMillis);
          }
          this.rowDataTransactionBatch.push({ rowDataTransaction, callback });
        };
        ClientSideRowModel2.prototype.flushAsyncTransactions = function() {
          if (this.applyAsyncTransactionsTimeout != null) {
            clearTimeout(this.applyAsyncTransactionsTimeout);
            this.executeBatchUpdateRowData();
          }
        };
        ClientSideRowModel2.prototype.executeBatchUpdateRowData = function() {
          var _this = this;
          this.valueCache.onDataChanged();
          var callbackFuncsBound = [];
          var rowNodeTrans = [];
          var forceRowNodeOrder = false;
          if (this.rowDataTransactionBatch) {
            this.rowDataTransactionBatch.forEach(function(tranItem) {
              var rowNodeTran = _this.nodeManager.updateRowData(tranItem.rowDataTransaction, void 0);
              rowNodeTrans.push(rowNodeTran);
              if (tranItem.callback) {
                callbackFuncsBound.push(tranItem.callback.bind(null, rowNodeTran));
              }
              if (typeof tranItem.rowDataTransaction.addIndex === "number") {
                forceRowNodeOrder = true;
              }
            });
          }
          this.commonUpdateRowData(rowNodeTrans, void 0, forceRowNodeOrder);
          if (callbackFuncsBound.length > 0) {
            window.setTimeout(function() {
              callbackFuncsBound.forEach(function(func) {
                return func();
              });
            }, 0);
          }
          if (rowNodeTrans.length > 0) {
            var event_1 = {
              api: this.gridOptionsWrapper.getApi(),
              columnApi: this.gridOptionsWrapper.getColumnApi(),
              type: Events.EVENT_ASYNC_TRANSACTIONS_FLUSHED,
              results: rowNodeTrans
            };
            this.eventService.dispatchEvent(event_1);
          }
          this.rowDataTransactionBatch = null;
          this.applyAsyncTransactionsTimeout = void 0;
        };
        ClientSideRowModel2.prototype.updateRowData = function(rowDataTran, rowNodeOrder) {
          this.valueCache.onDataChanged();
          var rowNodeTran = this.nodeManager.updateRowData(rowDataTran, rowNodeOrder);
          var forceRowNodeOrder = typeof rowDataTran.addIndex === "number";
          this.commonUpdateRowData([rowNodeTran], rowNodeOrder, forceRowNodeOrder);
          return rowNodeTran;
        };
        ClientSideRowModel2.prototype.createRowNodeOrder = function() {
          var suppressSortOrder = this.gridOptionsWrapper.isSuppressMaintainUnsortedOrder();
          if (suppressSortOrder) {
            return;
          }
          var orderMap = {};
          if (this.rootNode && this.rootNode.allLeafChildren) {
            for (var index = 0; index < this.rootNode.allLeafChildren.length; index++) {
              var node = this.rootNode.allLeafChildren[index];
              orderMap[node.id] = index;
            }
          }
          return orderMap;
        };
        ClientSideRowModel2.prototype.commonUpdateRowData = function(rowNodeTrans, rowNodeOrder, forceRowNodeOrder) {
          if (forceRowNodeOrder) {
            rowNodeOrder = this.createRowNodeOrder();
          }
          this.refreshModel({
            step: exports.ClientSideRowModelSteps.EVERYTHING,
            rowNodeTransactions: rowNodeTrans,
            rowNodeOrder,
            keepRenderedRows: true,
            animate: true,
            keepEditingRows: true
          });
          var event = {
            type: Events.EVENT_ROW_DATA_UPDATED,
            api: this.gridApi,
            columnApi: this.columnApi
          };
          this.eventService.dispatchEvent(event);
        };
        ClientSideRowModel2.prototype.doRowsToDisplay = function() {
          this.rowsToDisplay = this.flattenStage.execute({ rowNode: this.rootNode });
        };
        ClientSideRowModel2.prototype.onRowHeightChanged = function() {
          this.refreshModel({ step: exports.ClientSideRowModelSteps.MAP, keepRenderedRows: true, keepEditingRows: true });
        };
        ClientSideRowModel2.prototype.resetRowHeights = function() {
          var atLeastOne = false;
          this.forEachNode(function(rowNode) {
            rowNode.setRowHeight(rowNode.rowHeight, true);
            var detailNode = rowNode.detailNode;
            if (detailNode) {
              detailNode.setRowHeight(detailNode.rowHeight, true);
            }
            atLeastOne = true;
          });
          if (atLeastOne) {
            this.onRowHeightChanged();
          }
        };
        __decorate$2k([
          Autowired("columnModel")
        ], ClientSideRowModel2.prototype, "columnModel", void 0);
        __decorate$2k([
          Autowired("$scope")
        ], ClientSideRowModel2.prototype, "$scope", void 0);
        __decorate$2k([
          Autowired("selectionService")
        ], ClientSideRowModel2.prototype, "selectionService", void 0);
        __decorate$2k([
          Autowired("valueCache")
        ], ClientSideRowModel2.prototype, "valueCache", void 0);
        __decorate$2k([
          Autowired("columnApi")
        ], ClientSideRowModel2.prototype, "columnApi", void 0);
        __decorate$2k([
          Autowired("gridApi")
        ], ClientSideRowModel2.prototype, "gridApi", void 0);
        __decorate$2k([
          Autowired("animationFrameService")
        ], ClientSideRowModel2.prototype, "animationFrameService", void 0);
        __decorate$2k([
          Autowired("beans")
        ], ClientSideRowModel2.prototype, "beans", void 0);
        __decorate$2k([
          Autowired("filterStage")
        ], ClientSideRowModel2.prototype, "filterStage", void 0);
        __decorate$2k([
          Autowired("sortStage")
        ], ClientSideRowModel2.prototype, "sortStage", void 0);
        __decorate$2k([
          Autowired("flattenStage")
        ], ClientSideRowModel2.prototype, "flattenStage", void 0);
        __decorate$2k([
          Optional("groupStage")
        ], ClientSideRowModel2.prototype, "groupStage", void 0);
        __decorate$2k([
          Optional("aggregationStage")
        ], ClientSideRowModel2.prototype, "aggregationStage", void 0);
        __decorate$2k([
          Optional("pivotStage")
        ], ClientSideRowModel2.prototype, "pivotStage", void 0);
        __decorate$2k([
          PostConstruct
        ], ClientSideRowModel2.prototype, "init", null);
        ClientSideRowModel2 = __decorate$2k([
          Bean3("rowModel")
        ], ClientSideRowModel2);
        return ClientSideRowModel2;
      }(BeanStub)
    );
    var __extends$2E = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$2l = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var FilterStage = (
      /** @class */
      function(_super) {
        __extends$2E(FilterStage2, _super);
        function FilterStage2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        FilterStage2.prototype.execute = function(params) {
          var rowNode = params.rowNode, changedPath = params.changedPath;
          this.filterService.filter(changedPath);
          this.selectableService.updateSelectableAfterFiltering(rowNode);
        };
        __decorate$2l([
          Autowired("selectableService")
        ], FilterStage2.prototype, "selectableService", void 0);
        __decorate$2l([
          Autowired("filterService")
        ], FilterStage2.prototype, "filterService", void 0);
        FilterStage2 = __decorate$2l([
          Bean3("filterStage")
        ], FilterStage2);
        return FilterStage2;
      }(BeanStub)
    );
    var __extends$2F = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$2m = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var SortStage = (
      /** @class */
      function(_super) {
        __extends$2F(SortStage2, _super);
        function SortStage2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        SortStage2.prototype.execute = function(params) {
          var sortOptions = this.sortController.getSortOptions();
          var sortActive = _.exists(sortOptions) && sortOptions.length > 0;
          var deltaSort = sortActive && _.exists(params.rowNodeTransactions) && this.gridOptionsWrapper.isDeltaSort();
          var dirtyLeafNodes = deltaSort ? this.calculateDirtyNodes(params.rowNodeTransactions) : null;
          var noAggregations = _.missingOrEmpty(this.columnModel.getValueColumns());
          var sortContainsGroupColumns = _.some(sortOptions, function(opt) {
            return !!opt.column.getColDef().showRowGroup;
          });
          this.sortService.sort(sortOptions, sortActive, deltaSort, dirtyLeafNodes, params.changedPath, noAggregations, sortContainsGroupColumns);
        };
        SortStage2.prototype.calculateDirtyNodes = function(rowNodeTransactions) {
          var dirtyNodes = {};
          var addNodesFunc = function(rowNodes) {
            if (rowNodes) {
              rowNodes.forEach(function(rowNode) {
                return dirtyNodes[rowNode.id] = true;
              });
            }
          };
          if (rowNodeTransactions) {
            rowNodeTransactions.forEach(function(tran) {
              addNodesFunc(tran.add);
              addNodesFunc(tran.update);
              addNodesFunc(tran.remove);
            });
          }
          return dirtyNodes;
        };
        __decorate$2m([
          Autowired("sortService")
        ], SortStage2.prototype, "sortService", void 0);
        __decorate$2m([
          Autowired("sortController")
        ], SortStage2.prototype, "sortController", void 0);
        __decorate$2m([
          Autowired("columnModel")
        ], SortStage2.prototype, "columnModel", void 0);
        SortStage2 = __decorate$2m([
          Bean3("sortStage")
        ], SortStage2);
        return SortStage2;
      }(BeanStub)
    );
    var __extends$2G = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$2n = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var FlattenStage = (
      /** @class */
      function(_super) {
        __extends$2G(FlattenStage2, _super);
        function FlattenStage2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        FlattenStage2.prototype.execute = function(params) {
          var rootNode = params.rowNode;
          var result = [];
          var nextRowTop = { value: 0 };
          var skipLeafNodes = this.columnModel.isPivotMode();
          var showRootNode = skipLeafNodes && rootNode.leafGroup;
          var topList = showRootNode ? [rootNode] : rootNode.childrenAfterSort;
          this.recursivelyAddToRowsToDisplay(topList, result, nextRowTop, skipLeafNodes, 0);
          var atLeastOneRowPresent = result.length > 0;
          var includeGroupTotalFooter = !showRootNode && atLeastOneRowPresent && this.gridOptionsWrapper.isGroupIncludeTotalFooter();
          if (includeGroupTotalFooter) {
            this.ensureFooterNodeExists(rootNode);
            this.addRowNodeToRowsToDisplay(rootNode.sibling, result, nextRowTop, 0);
          }
          return result;
        };
        FlattenStage2.prototype.recursivelyAddToRowsToDisplay = function(rowsToFlatten, result, nextRowTop, skipLeafNodes, uiLevel) {
          if (_.missingOrEmpty(rowsToFlatten)) {
            return;
          }
          var hideOpenParents = this.gridOptionsWrapper.isGroupHideOpenParents();
          var groupRemoveSingleChildren = this.gridOptionsWrapper.isGroupRemoveSingleChildren();
          var groupRemoveLowestSingleChildren = !groupRemoveSingleChildren && this.gridOptionsWrapper.isGroupRemoveLowestSingleChildren();
          for (var i = 0; i < rowsToFlatten.length; i++) {
            var rowNode = rowsToFlatten[i];
            var isParent = rowNode.hasChildren();
            var isSkippedLeafNode = skipLeafNodes && !isParent;
            var isRemovedSingleChildrenGroup = groupRemoveSingleChildren && isParent && rowNode.childrenAfterGroup.length === 1;
            var isRemovedLowestSingleChildrenGroup = groupRemoveLowestSingleChildren && isParent && rowNode.leafGroup && rowNode.childrenAfterGroup.length === 1;
            var neverAllowToExpand = skipLeafNodes && rowNode.leafGroup;
            var isHiddenOpenParent = hideOpenParents && rowNode.expanded && !neverAllowToExpand;
            var thisRowShouldBeRendered = !isSkippedLeafNode && !isHiddenOpenParent && !isRemovedSingleChildrenGroup && !isRemovedLowestSingleChildrenGroup;
            if (thisRowShouldBeRendered) {
              this.addRowNodeToRowsToDisplay(rowNode, result, nextRowTop, uiLevel);
            }
            if (skipLeafNodes && rowNode.leafGroup) {
              continue;
            }
            if (isParent) {
              var excludedParent = isRemovedSingleChildrenGroup || isRemovedLowestSingleChildrenGroup;
              if (rowNode.expanded || excludedParent) {
                var uiLevelForChildren = excludedParent ? uiLevel : uiLevel + 1;
                this.recursivelyAddToRowsToDisplay(rowNode.childrenAfterSort, result, nextRowTop, skipLeafNodes, uiLevelForChildren);
                if (this.gridOptionsWrapper.isGroupIncludeFooter()) {
                  this.ensureFooterNodeExists(rowNode);
                  this.addRowNodeToRowsToDisplay(rowNode.sibling, result, nextRowTop, uiLevel);
                }
              }
            } else if (rowNode.master && rowNode.expanded) {
              var detailNode = this.createDetailNode(rowNode);
              this.addRowNodeToRowsToDisplay(detailNode, result, nextRowTop, uiLevel);
            }
          }
        };
        FlattenStage2.prototype.addRowNodeToRowsToDisplay = function(rowNode, result, nextRowTop, uiLevel) {
          var isGroupMultiAutoColumn = this.gridOptionsWrapper.isGroupMultiAutoColumn();
          result.push(rowNode);
          rowNode.setUiLevel(isGroupMultiAutoColumn ? 0 : uiLevel);
        };
        FlattenStage2.prototype.ensureFooterNodeExists = function(groupNode) {
          if (_.exists(groupNode.sibling)) {
            return;
          }
          var footerNode = new RowNode(this.beans);
          Object.keys(groupNode).forEach(function(key) {
            footerNode[key] = groupNode[key];
          });
          footerNode.footer = true;
          footerNode.setRowTop(null);
          footerNode.setRowIndex(null);
          footerNode.oldRowTop = null;
          if (_.exists(footerNode.id)) {
            footerNode.id = "rowGroupFooter_" + footerNode.id;
          }
          footerNode.sibling = groupNode;
          groupNode.sibling = footerNode;
        };
        FlattenStage2.prototype.createDetailNode = function(masterNode) {
          if (_.exists(masterNode.detailNode)) {
            return masterNode.detailNode;
          }
          var detailNode = new RowNode(this.beans);
          detailNode.detail = true;
          detailNode.selectable = false;
          detailNode.parent = masterNode;
          if (_.exists(masterNode.id)) {
            detailNode.id = "detail_" + masterNode.id;
          }
          detailNode.data = masterNode.data;
          detailNode.level = masterNode.level + 1;
          masterNode.detailNode = detailNode;
          return detailNode;
        };
        __decorate$2n([
          Autowired("columnModel")
        ], FlattenStage2.prototype, "columnModel", void 0);
        __decorate$2n([
          Autowired("beans")
        ], FlattenStage2.prototype, "beans", void 0);
        FlattenStage2 = __decorate$2n([
          Bean3("flattenStage")
        ], FlattenStage2);
        return FlattenStage2;
      }(BeanStub)
    );
    var __extends$2H = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$2o = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var SortService = (
      /** @class */
      function(_super) {
        __extends$2H(SortService2, _super);
        function SortService2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        SortService2.prototype.init = function() {
          this.postSortFunc = this.gridOptionsWrapper.getPostSortFunc();
        };
        SortService2.prototype.sort = function(sortOptions, sortActive, deltaSort, dirtyLeafNodes, changedPath, noAggregations, sortContainsGroupColumns) {
          var _this = this;
          var groupMaintainOrder = this.gridOptionsWrapper.isGroupMaintainOrder();
          var groupColumnsPresent = _.some(this.columnModel.getAllGridColumns(), function(c) {
            return c.isRowGroupActive();
          });
          var callback = function(rowNode) {
            _this.pullDownGroupDataForHideOpenParents(rowNode.childrenAfterFilter, true);
            if (sortActive) {
              var skipSortingGroups = groupMaintainOrder && groupColumnsPresent && !rowNode.leafGroup && !sortContainsGroupColumns;
              if (skipSortingGroups) {
                rowNode.childrenAfterSort = rowNode.childrenAfterFilter.slice(0);
              } else {
                rowNode.childrenAfterSort = deltaSort ? _this.doDeltaSort(rowNode, sortOptions, dirtyLeafNodes, changedPath, noAggregations) : _this.rowNodeSorter.doFullSort(rowNode.childrenAfterFilter, sortOptions);
              }
            } else {
              rowNode.childrenAfterSort = rowNode.childrenAfterFilter.slice(0);
            }
            if (rowNode.sibling) {
              rowNode.sibling.childrenAfterSort = rowNode.childrenAfterSort;
            }
            _this.updateChildIndexes(rowNode);
            if (_this.postSortFunc) {
              _this.postSortFunc(rowNode.childrenAfterSort);
            }
          };
          if (changedPath) {
            changedPath.forEachChangedNodeDepthFirst(callback);
          }
          this.updateGroupDataForHideOpenParents(changedPath);
        };
        SortService2.prototype.mapNodeToSortedNode = function(rowNode, pos) {
          return { currentPos: pos, rowNode };
        };
        SortService2.prototype.doDeltaSort = function(rowNode, sortOptions, dirtyLeafNodes, changedPath, noAggregations) {
          var cleanNodes = rowNode.childrenAfterSort.filter(function(node) {
            var passesDirtyNodesCheck = !dirtyLeafNodes[node.id];
            var passesChangedPathCheck = noAggregations || changedPath && changedPath.canSkip(node);
            return passesDirtyNodesCheck && passesChangedPathCheck;
          }).map(this.mapNodeToSortedNode.bind(this));
          var cleanNodesMapped = {};
          cleanNodes.forEach(function(sortedRowNode) {
            return cleanNodesMapped[sortedRowNode.rowNode.id] = sortedRowNode.rowNode;
          });
          var changedNodes = rowNode.childrenAfterFilter.filter(function(node) {
            return !cleanNodesMapped[node.id];
          }).map(this.mapNodeToSortedNode.bind(this));
          changedNodes.sort(this.rowNodeSorter.compareRowNodes.bind(this, sortOptions));
          var result;
          if (changedNodes.length === 0) {
            result = cleanNodes;
          } else if (cleanNodes.length === 0) {
            result = changedNodes;
          } else {
            result = this.mergeSortedArrays(sortOptions, cleanNodes, changedNodes);
          }
          return result.map(function(item) {
            return item.rowNode;
          });
        };
        SortService2.prototype.mergeSortedArrays = function(sortOptions, arr1, arr2) {
          var res = [];
          var i = 0;
          var j = 0;
          while (i < arr1.length && j < arr2.length) {
            var compareResult = this.rowNodeSorter.compareRowNodes(sortOptions, arr1[i], arr2[j]);
            if (compareResult < 0) {
              res.push(arr1[i++]);
            } else {
              res.push(arr2[j++]);
            }
          }
          while (i < arr1.length) {
            res.push(arr1[i++]);
          }
          while (j < arr2.length) {
            res.push(arr2[j++]);
          }
          return res;
        };
        SortService2.prototype.updateChildIndexes = function(rowNode) {
          if (_.missing(rowNode.childrenAfterSort)) {
            return;
          }
          var listToSort = rowNode.childrenAfterSort;
          for (var i = 0; i < listToSort.length; i++) {
            var child = listToSort[i];
            var firstChild = i === 0;
            var lastChild = i === rowNode.childrenAfterSort.length - 1;
            child.setFirstChild(firstChild);
            child.setLastChild(lastChild);
            child.setChildIndex(i);
          }
        };
        SortService2.prototype.updateGroupDataForHideOpenParents = function(changedPath) {
          var _this = this;
          if (!this.gridOptionsWrapper.isGroupHideOpenParents()) {
            return;
          }
          if (this.gridOptionsWrapper.isTreeData()) {
            var msg_1 = "AG Grid: The property hideOpenParents dose not work with Tree Data. This is because Tree Data has values at the group level, it doesn't make sense to hide them (as opposed to Row Grouping, which only has Aggregated Values at the group level).";
            _.doOnce(function() {
              return console.warn(msg_1);
            }, "sortService.hideOpenParentsWithTreeData");
            return false;
          }
          var callback = function(rowNode) {
            _this.pullDownGroupDataForHideOpenParents(rowNode.childrenAfterSort, false);
            rowNode.childrenAfterSort.forEach(function(child) {
              if (child.hasChildren()) {
                callback(child);
              }
            });
          };
          if (changedPath) {
            changedPath.executeFromRootNode(function(rowNode) {
              return callback(rowNode);
            });
          }
        };
        SortService2.prototype.pullDownGroupDataForHideOpenParents = function(rowNodes, clearOperation) {
          var _this = this;
          if (!this.gridOptionsWrapper.isGroupHideOpenParents() || _.missing(rowNodes)) {
            return;
          }
          rowNodes.forEach(function(childRowNode) {
            var groupDisplayCols = _this.columnModel.getGroupDisplayColumns();
            groupDisplayCols.forEach(function(groupDisplayCol) {
              var showRowGroup = groupDisplayCol.getColDef().showRowGroup;
              if (typeof showRowGroup !== "string") {
                console.error("AG Grid: groupHideOpenParents only works when specifying specific columns for colDef.showRowGroup");
                return;
              }
              var displayingGroupKey = showRowGroup;
              var rowGroupColumn = _this.columnModel.getPrimaryColumn(displayingGroupKey);
              var thisRowNodeMatches = rowGroupColumn === childRowNode.rowGroupColumn;
              if (thisRowNodeMatches) {
                return;
              }
              if (clearOperation) {
                childRowNode.setGroupValue(groupDisplayCol.getId(), void 0);
              } else {
                var parentToStealFrom = childRowNode.getFirstChildOfFirstChild(rowGroupColumn);
                if (parentToStealFrom) {
                  childRowNode.setGroupValue(groupDisplayCol.getId(), parentToStealFrom.key);
                }
              }
            });
          });
        };
        __decorate$2o([
          Autowired("columnModel")
        ], SortService2.prototype, "columnModel", void 0);
        __decorate$2o([
          Autowired("rowNodeSorter")
        ], SortService2.prototype, "rowNodeSorter", void 0);
        __decorate$2o([
          PostConstruct
        ], SortService2.prototype, "init", null);
        SortService2 = __decorate$2o([
          Bean3("sortService")
        ], SortService2);
        return SortService2;
      }(BeanStub)
    );
    var __extends$2I = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$2p = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var FilterService = (
      /** @class */
      function(_super) {
        __extends$2I(FilterService2, _super);
        function FilterService2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        FilterService2.prototype.postConstruct = function() {
          this.doingTreeData = this.gridOptionsWrapper.isTreeData();
        };
        FilterService2.prototype.filter = function(changedPath) {
          var filterActive = this.filterManager.isAnyFilterPresent();
          this.filterNodes(filterActive, changedPath);
        };
        FilterService2.prototype.filterNodes = function(filterActive, changedPath) {
          var _this = this;
          var filterCallback = function(rowNode, includeChildNodes) {
            if (rowNode.hasChildren()) {
              if (filterActive && !includeChildNodes) {
                rowNode.childrenAfterFilter = rowNode.childrenAfterGroup.filter(function(childNode) {
                  var passBecauseChildren = childNode.childrenAfterFilter && childNode.childrenAfterFilter.length > 0;
                  var passBecauseDataPasses = childNode.data && _this.filterManager.doesRowPassFilter({ rowNode: childNode });
                  return passBecauseChildren || passBecauseDataPasses;
                });
              } else {
                rowNode.childrenAfterFilter = rowNode.childrenAfterGroup;
              }
              _this.setAllChildrenCount(rowNode);
            } else {
              rowNode.childrenAfterFilter = rowNode.childrenAfterGroup;
              rowNode.setAllChildrenCount(null);
            }
            if (rowNode.sibling) {
              rowNode.sibling.childrenAfterFilter = rowNode.childrenAfterFilter;
            }
          };
          if (this.doingTreeDataFiltering()) {
            var treeDataDepthFirstFilter_1 = function(rowNode, alreadyFoundInParent) {
              if (rowNode.childrenAfterGroup) {
                for (var i = 0; i < rowNode.childrenAfterGroup.length; i++) {
                  var childNode = rowNode.childrenAfterGroup[i];
                  var foundInParent = alreadyFoundInParent || _this.filterManager.doesRowPassFilter({ rowNode: childNode });
                  if (childNode.childrenAfterGroup) {
                    treeDataDepthFirstFilter_1(rowNode.childrenAfterGroup[i], foundInParent);
                  } else {
                    filterCallback(childNode, foundInParent);
                  }
                }
              }
              filterCallback(rowNode, alreadyFoundInParent);
            };
            var treeDataFilterCallback = function(rowNode) {
              return treeDataDepthFirstFilter_1(rowNode, false);
            };
            changedPath.executeFromRootNode(treeDataFilterCallback);
          } else {
            var defaultFilterCallback = function(rowNode) {
              return filterCallback(rowNode, false);
            };
            changedPath.forEachChangedNodeDepthFirst(defaultFilterCallback, true);
          }
        };
        FilterService2.prototype.setAllChildrenCountTreeData = function(rowNode) {
          var allChildrenCount = 0;
          rowNode.childrenAfterFilter.forEach(function(child) {
            allChildrenCount++;
            allChildrenCount += child.allChildrenCount;
          });
          rowNode.setAllChildrenCount(allChildrenCount);
        };
        FilterService2.prototype.setAllChildrenCountGridGrouping = function(rowNode) {
          var allChildrenCount = 0;
          rowNode.childrenAfterFilter.forEach(function(child) {
            if (child.group) {
              allChildrenCount += child.allChildrenCount;
            } else {
              allChildrenCount++;
            }
          });
          rowNode.setAllChildrenCount(allChildrenCount);
        };
        FilterService2.prototype.setAllChildrenCount = function(rowNode) {
          if (this.doingTreeData) {
            this.setAllChildrenCountTreeData(rowNode);
          } else {
            this.setAllChildrenCountGridGrouping(rowNode);
          }
        };
        FilterService2.prototype.doingTreeDataFiltering = function() {
          return this.gridOptionsWrapper.isTreeData() && !this.gridOptionsWrapper.isExcludeChildrenWhenTreeDataFiltering();
        };
        __decorate$2p([
          Autowired("filterManager")
        ], FilterService2.prototype, "filterManager", void 0);
        __decorate$2p([
          PostConstruct
        ], FilterService2.prototype, "postConstruct", null);
        FilterService2 = __decorate$2p([
          Bean3("filterService")
        ], FilterService2);
        return FilterService2;
      }(BeanStub)
    );
    var __extends$2J = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$2q = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var ImmutableService = (
      /** @class */
      function(_super) {
        __extends$2J(ImmutableService2, _super);
        function ImmutableService2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        ImmutableService2.prototype.postConstruct = function() {
          if (this.rowModel.getType() === Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {
            this.clientSideRowModel = this.rowModel;
          }
        };
        ImmutableService2.prototype.createTransactionForRowData = function(data) {
          if (_.missing(this.clientSideRowModel)) {
            console.error("AG Grid: ImmutableService only works with ClientSideRowModel");
            return;
          }
          var getRowNodeIdFunc = this.gridOptionsWrapper.getRowNodeIdFunc();
          if (!getRowNodeIdFunc || _.missing(getRowNodeIdFunc)) {
            console.error("AG Grid: ImmutableService requires getRowNodeId() callback to be implemented, your row data need IDs!");
            return;
          }
          var transaction = {
            remove: [],
            update: [],
            add: []
          };
          var existingNodesMap = this.clientSideRowModel.getCopyOfNodesMap();
          var suppressSortOrder = this.gridOptionsWrapper.isSuppressMaintainUnsortedOrder();
          var orderMap = suppressSortOrder ? null : {};
          if (_.exists(data)) {
            data.forEach(function(dataItem, index) {
              var id = getRowNodeIdFunc(dataItem);
              var existingNode = existingNodesMap[id];
              if (orderMap) {
                orderMap[id] = index;
              }
              if (existingNode) {
                var dataHasChanged = existingNode.data !== dataItem;
                if (dataHasChanged) {
                  transaction.update.push(dataItem);
                }
                existingNodesMap[id] = void 0;
              } else {
                transaction.add.push(dataItem);
              }
            });
          }
          _.iterateObject(existingNodesMap, function(id, rowNode) {
            if (rowNode) {
              transaction.remove.push(rowNode.data);
            }
          });
          return [transaction, orderMap];
        };
        __decorate$2q([
          Autowired("rowModel")
        ], ImmutableService2.prototype, "rowModel", void 0);
        __decorate$2q([
          PostConstruct
        ], ImmutableService2.prototype, "postConstruct", null);
        ImmutableService2 = __decorate$2q([
          Bean3("immutableService")
        ], ImmutableService2);
        return ImmutableService2;
      }(BeanStub)
    );
    var ClientSideRowModelModule = {
      moduleName: exports.ModuleNames.ClientSideRowModelModule,
      beans: [FilterStage, SortStage, FlattenStage, SortService, FilterService, ImmutableService],
      rowModels: { clientSide: ClientSideRowModel }
    };
    var __extends$2K = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$2r = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var InfiniteBlock = (
      /** @class */
      function(_super) {
        __extends$2K(InfiniteBlock2, _super);
        function InfiniteBlock2(id, parentCache, params) {
          var _this = _super.call(this, id) || this;
          _this.parentCache = parentCache;
          _this.params = params;
          _this.startRow = id * params.blockSize;
          _this.endRow = _this.startRow + params.blockSize;
          return _this;
        }
        InfiniteBlock2.prototype.postConstruct = function() {
          this.createRowNodes();
        };
        InfiniteBlock2.prototype.getBlockStateJson = function() {
          return {
            id: "" + this.getId(),
            state: {
              blockNumber: this.getId(),
              startRow: this.getStartRow(),
              endRow: this.getEndRow(),
              pageStatus: this.getState()
            }
          };
        };
        InfiniteBlock2.prototype.setDataAndId = function(rowNode, data, index) {
          if (!rowNode.id && rowNode.alreadyRendered) {
            rowNode.alreadyRendered = false;
          }
          if (_.exists(data)) {
            rowNode.setDataAndId(data, index.toString());
          } else {
            rowNode.setDataAndId(void 0, void 0);
          }
        };
        InfiniteBlock2.prototype.loadFromDatasource = function() {
          var _this = this;
          var params = this.createLoadParams();
          if (_.missing(this.params.datasource.getRows)) {
            console.warn("AG Grid: datasource is missing getRows method");
            return;
          }
          window.setTimeout(function() {
            _this.params.datasource.getRows(params);
          }, 0);
        };
        InfiniteBlock2.prototype.processServerFail = function() {
        };
        InfiniteBlock2.prototype.createLoadParams = function() {
          var params = {
            startRow: this.getStartRow(),
            endRow: this.getEndRow(),
            successCallback: this.pageLoaded.bind(this, this.getVersion()),
            failCallback: this.pageLoadFailed.bind(this, this.getVersion()),
            sortModel: this.params.sortModel,
            filterModel: this.params.filterModel,
            context: this.gridOptionsWrapper.getContext()
          };
          return params;
        };
        InfiniteBlock2.prototype.forEachNode = function(callback, sequence, rowCount) {
          var _this = this;
          this.rowNodes.forEach(function(rowNode, index) {
            var rowIndex = _this.startRow + index;
            if (rowIndex < rowCount) {
              callback(rowNode, sequence.next());
            }
          });
        };
        InfiniteBlock2.prototype.getLastAccessed = function() {
          return this.lastAccessed;
        };
        InfiniteBlock2.prototype.getRow = function(rowIndex, dontTouchLastAccessed) {
          if (dontTouchLastAccessed === void 0) {
            dontTouchLastAccessed = false;
          }
          if (!dontTouchLastAccessed) {
            this.lastAccessed = this.params.lastAccessedSequence.next();
          }
          var localIndex = rowIndex - this.startRow;
          return this.rowNodes[localIndex];
        };
        InfiniteBlock2.prototype.getStartRow = function() {
          return this.startRow;
        };
        InfiniteBlock2.prototype.getEndRow = function() {
          return this.endRow;
        };
        InfiniteBlock2.prototype.createRowNodes = function() {
          this.rowNodes = [];
          for (var i = 0; i < this.params.blockSize; i++) {
            var rowIndex = this.startRow + i;
            var rowNode = new RowNode(this.beans);
            rowNode.setRowHeight(this.params.rowHeight);
            rowNode.uiLevel = 0;
            rowNode.setRowIndex(rowIndex);
            rowNode.setRowTop(this.params.rowHeight * rowIndex);
            this.rowNodes.push(rowNode);
          }
        };
        InfiniteBlock2.prototype.processServerResult = function(params) {
          var _this = this;
          this.rowNodes.forEach(function(rowNode, index) {
            var data = params.rowData ? params.rowData[index] : void 0;
            _this.setDataAndId(rowNode, data, _this.startRow + index);
          });
          var finalRowCount = params.rowCount != null && params.rowCount >= 0 ? params.rowCount : void 0;
          this.parentCache.pageLoaded(this, finalRowCount);
        };
        InfiniteBlock2.prototype.destroyRowNodes = function() {
          this.rowNodes.forEach(function(rowNode) {
            rowNode.clearRowTopAndRowIndex();
          });
        };
        __decorate$2r([
          Autowired("beans")
        ], InfiniteBlock2.prototype, "beans", void 0);
        __decorate$2r([
          PostConstruct
        ], InfiniteBlock2.prototype, "postConstruct", null);
        __decorate$2r([
          PreDestroy
        ], InfiniteBlock2.prototype, "destroyRowNodes", null);
        return InfiniteBlock2;
      }(RowNodeBlock)
    );
    var __extends$2L = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$2s = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __param$a = function(paramIndex, decorator) {
      return function(target, key) {
        decorator(target, key, paramIndex);
      };
    };
    var InfiniteCache = (
      /** @class */
      function(_super) {
        __extends$2L(InfiniteCache2, _super);
        function InfiniteCache2(params) {
          var _this = _super.call(this) || this;
          _this.lastRowIndexKnown = false;
          _this.blocks = {};
          _this.blockCount = 0;
          _this.rowCount = params.initialRowCount;
          _this.params = params;
          return _this;
        }
        InfiniteCache2.prototype.setBeans = function(loggerFactory) {
          this.logger = loggerFactory.create("InfiniteCache");
        };
        InfiniteCache2.prototype.getRow = function(rowIndex, dontCreatePage) {
          if (dontCreatePage === void 0) {
            dontCreatePage = false;
          }
          var blockId = Math.floor(rowIndex / this.params.blockSize);
          var block = this.blocks[blockId];
          if (!block) {
            if (dontCreatePage) {
              return void 0;
            }
            block = this.createBlock(blockId);
          }
          return block.getRow(rowIndex);
        };
        InfiniteCache2.prototype.createBlock = function(blockNumber) {
          var newBlock = this.createBean(new InfiniteBlock(blockNumber, this, this.params));
          this.blocks[newBlock.getId()] = newBlock;
          this.blockCount++;
          this.purgeBlocksIfNeeded(newBlock);
          this.params.rowNodeBlockLoader.addBlock(newBlock);
          return newBlock;
        };
        InfiniteCache2.prototype.refreshCache = function() {
          var nothingToRefresh = this.blockCount == 0;
          if (nothingToRefresh) {
            this.purgeCache();
            return;
          }
          this.getBlocksInOrder().forEach(function(block) {
            return block.setStateWaitingToLoad();
          });
          this.params.rowNodeBlockLoader.checkBlockToLoad();
        };
        InfiniteCache2.prototype.destroyAllBlocks = function() {
          var _this = this;
          this.getBlocksInOrder().forEach(function(block) {
            return _this.destroyBlock(block);
          });
        };
        InfiniteCache2.prototype.getRowCount = function() {
          return this.rowCount;
        };
        InfiniteCache2.prototype.isLastRowIndexKnown = function() {
          return this.lastRowIndexKnown;
        };
        InfiniteCache2.prototype.pageLoaded = function(block, lastRow) {
          if (!this.isAlive()) {
            return;
          }
          this.logger.log("onPageLoaded: page = " + block.getId() + ", lastRow = " + lastRow);
          this.checkRowCount(block, lastRow);
          this.onCacheUpdated();
        };
        InfiniteCache2.prototype.purgeBlocksIfNeeded = function(blockToExclude) {
          var _this = this;
          var blocksForPurging = this.getBlocksInOrder().filter(function(b) {
            return b != blockToExclude;
          });
          var lastAccessedComparator = function(a, b) {
            return b.getLastAccessed() - a.getLastAccessed();
          };
          blocksForPurging.sort(lastAccessedComparator);
          var maxBlocksProvided = this.params.maxBlocksInCache > 0;
          var blocksToKeep = maxBlocksProvided ? this.params.maxBlocksInCache - 1 : null;
          var emptyBlocksToKeep = InfiniteCache2.MAX_EMPTY_BLOCKS_TO_KEEP - 1;
          blocksForPurging.forEach(function(block, index) {
            var purgeBecauseBlockEmpty = block.getState() === InfiniteBlock.STATE_WAITING_TO_LOAD && index >= emptyBlocksToKeep;
            var purgeBecauseCacheFull = maxBlocksProvided ? index >= blocksToKeep : false;
            if (purgeBecauseBlockEmpty || purgeBecauseCacheFull) {
              if (_this.isBlockCurrentlyDisplayed(block)) {
                return;
              }
              if (_this.isBlockFocused(block)) {
                return;
              }
              _this.removeBlockFromCache(block);
            }
          });
        };
        InfiniteCache2.prototype.isBlockFocused = function(block) {
          var focusedCell = this.focusService.getFocusCellToUseAfterRefresh();
          if (!focusedCell) {
            return false;
          }
          if (focusedCell.rowPinned != null) {
            return false;
          }
          var blockIndexStart = block.getStartRow();
          var blockIndexEnd = block.getEndRow();
          var hasFocus = focusedCell.rowIndex >= blockIndexStart && focusedCell.rowIndex < blockIndexEnd;
          return hasFocus;
        };
        InfiniteCache2.prototype.isBlockCurrentlyDisplayed = function(block) {
          var startIndex = block.getStartRow();
          var endIndex = block.getEndRow() - 1;
          return this.rowRenderer.isRangeInRenderedViewport(startIndex, endIndex);
        };
        InfiniteCache2.prototype.removeBlockFromCache = function(blockToRemove) {
          if (!blockToRemove) {
            return;
          }
          this.destroyBlock(blockToRemove);
        };
        InfiniteCache2.prototype.checkRowCount = function(block, lastRow) {
          if (typeof lastRow === "number" && lastRow >= 0) {
            this.rowCount = lastRow;
            this.lastRowIndexKnown = true;
          } else if (!this.lastRowIndexKnown) {
            var lastRowIndex = (block.getId() + 1) * this.params.blockSize;
            var lastRowIndexPlusOverflow = lastRowIndex + this.params.overflowSize;
            if (this.rowCount < lastRowIndexPlusOverflow) {
              this.rowCount = lastRowIndexPlusOverflow;
            }
          }
        };
        InfiniteCache2.prototype.setRowCount = function(rowCount, lastRowIndexKnown) {
          this.rowCount = rowCount;
          if (_.exists(lastRowIndexKnown)) {
            this.lastRowIndexKnown = lastRowIndexKnown;
          }
          if (!this.lastRowIndexKnown) {
            if (this.rowCount % this.params.blockSize === 0) {
              this.rowCount++;
            }
          }
          this.onCacheUpdated();
        };
        InfiniteCache2.prototype.forEachNodeDeep = function(callback) {
          var _this = this;
          var sequence = new NumberSequence();
          this.getBlocksInOrder().forEach(function(block) {
            return block.forEachNode(callback, sequence, _this.rowCount);
          });
        };
        InfiniteCache2.prototype.getBlocksInOrder = function() {
          var blockComparator = function(a, b) {
            return a.getId() - b.getId();
          };
          var blocks = _.getAllValuesInObject(this.blocks).sort(blockComparator);
          return blocks;
        };
        InfiniteCache2.prototype.destroyBlock = function(block) {
          delete this.blocks[block.getId()];
          this.destroyBean(block);
          this.blockCount--;
          this.params.rowNodeBlockLoader.removeBlock(block);
        };
        InfiniteCache2.prototype.onCacheUpdated = function() {
          if (this.isAlive()) {
            this.destroyAllBlocksPastVirtualRowCount();
            var event_1 = {
              type: Events.EVENT_STORE_UPDATED
            };
            this.eventService.dispatchEvent(event_1);
          }
        };
        InfiniteCache2.prototype.destroyAllBlocksPastVirtualRowCount = function() {
          var _this = this;
          var blocksToDestroy = [];
          this.getBlocksInOrder().forEach(function(block) {
            var startRow = block.getId() * _this.params.blockSize;
            if (startRow >= _this.rowCount) {
              blocksToDestroy.push(block);
            }
          });
          if (blocksToDestroy.length > 0) {
            blocksToDestroy.forEach(function(block) {
              return _this.destroyBlock(block);
            });
          }
        };
        InfiniteCache2.prototype.purgeCache = function() {
          var _this = this;
          this.getBlocksInOrder().forEach(function(block) {
            return _this.removeBlockFromCache(block);
          });
          this.lastRowIndexKnown = false;
          if (this.rowCount === 0) {
            this.rowCount = this.params.initialRowCount;
          }
          this.onCacheUpdated();
        };
        InfiniteCache2.prototype.getRowNodesInRange = function(firstInRange, lastInRange) {
          var _this = this;
          var result = [];
          var lastBlockId = -1;
          var inActiveRange = false;
          var numberSequence = new NumberSequence();
          if (_.missing(firstInRange)) {
            inActiveRange = true;
          }
          var foundGapInSelection = false;
          this.getBlocksInOrder().forEach(function(block) {
            if (foundGapInSelection) {
              return;
            }
            if (inActiveRange && lastBlockId + 1 !== block.getId()) {
              foundGapInSelection = true;
              return;
            }
            lastBlockId = block.getId();
            block.forEachNode(function(rowNode) {
              var hitFirstOrLast = rowNode === firstInRange || rowNode === lastInRange;
              if (inActiveRange || hitFirstOrLast) {
                result.push(rowNode);
              }
              if (hitFirstOrLast) {
                inActiveRange = !inActiveRange;
              }
            }, numberSequence, _this.rowCount);
          });
          var invalidRange = foundGapInSelection || inActiveRange;
          return invalidRange ? [] : result;
        };
        InfiniteCache2.MAX_EMPTY_BLOCKS_TO_KEEP = 2;
        __decorate$2s([
          Autowired("rowRenderer")
        ], InfiniteCache2.prototype, "rowRenderer", void 0);
        __decorate$2s([
          Autowired("focusService")
        ], InfiniteCache2.prototype, "focusService", void 0);
        __decorate$2s([
          __param$a(0, Qualifier("loggerFactory"))
        ], InfiniteCache2.prototype, "setBeans", null);
        __decorate$2s([
          PreDestroy
        ], InfiniteCache2.prototype, "destroyAllBlocks", null);
        return InfiniteCache2;
      }(BeanStub)
    );
    var __extends$2M = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$2t = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var InfiniteRowModel = (
      /** @class */
      function(_super) {
        __extends$2M(InfiniteRowModel2, _super);
        function InfiniteRowModel2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        InfiniteRowModel2.prototype.getRowBounds = function(index) {
          return {
            rowHeight: this.rowHeight,
            rowTop: this.rowHeight * index
          };
        };
        InfiniteRowModel2.prototype.ensureRowHeightsValid = function(startPixel, endPixel, startLimitIndex, endLimitIndex) {
          return false;
        };
        InfiniteRowModel2.prototype.init = function() {
          var _this = this;
          if (!this.gridOptionsWrapper.isRowModelInfinite()) {
            return;
          }
          this.rowHeight = this.gridOptionsWrapper.getRowHeightAsNumber();
          this.addEventListeners();
          this.addDestroyFunc(function() {
            return _this.destroyCache();
          });
          this.verifyProps();
        };
        InfiniteRowModel2.prototype.verifyProps = function() {
          if (this.gridOptionsWrapper.getDefaultGroupOrderComparator() != null) {
            var message_1 = "AG Grid: defaultGroupOrderComparator cannot be used with Infinite Row Model. If using Infinite Row Model, then sorting is done on the server side, nothing to do with the client.";
            _.doOnce(function() {
              return console.warn(message_1);
            }, "IRM.DefaultGroupOrderComparator");
          }
        };
        InfiniteRowModel2.prototype.start = function() {
          this.setDatasource(this.gridOptionsWrapper.getDatasource());
        };
        InfiniteRowModel2.prototype.destroyDatasource = function() {
          if (this.datasource) {
            this.getContext().destroyBean(this.datasource);
            this.rowRenderer.datasourceChanged();
            this.datasource = null;
          }
        };
        InfiniteRowModel2.prototype.addEventListeners = function() {
          this.addManagedListener(this.eventService, Events.EVENT_FILTER_CHANGED, this.onFilterChanged.bind(this));
          this.addManagedListener(this.eventService, Events.EVENT_SORT_CHANGED, this.onSortChanged.bind(this));
          this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, this.onColumnEverything.bind(this));
          this.addManagedListener(this.eventService, Events.EVENT_STORE_UPDATED, this.onCacheUpdated.bind(this));
        };
        InfiniteRowModel2.prototype.onFilterChanged = function() {
          this.reset();
        };
        InfiniteRowModel2.prototype.onSortChanged = function() {
          this.reset();
        };
        InfiniteRowModel2.prototype.onColumnEverything = function() {
          var resetRequired;
          if (this.cacheParams) {
            resetRequired = this.isSortModelDifferent();
          } else {
            resetRequired = true;
          }
          if (resetRequired) {
            this.reset();
          }
        };
        InfiniteRowModel2.prototype.isSortModelDifferent = function() {
          return !_.jsonEquals(this.cacheParams.sortModel, this.sortController.getSortModel());
        };
        InfiniteRowModel2.prototype.getType = function() {
          return Constants.ROW_MODEL_TYPE_INFINITE;
        };
        InfiniteRowModel2.prototype.setDatasource = function(datasource) {
          this.destroyDatasource();
          this.datasource = datasource;
          if (datasource) {
            this.reset();
          }
        };
        InfiniteRowModel2.prototype.isEmpty = function() {
          return !this.infiniteCache;
        };
        InfiniteRowModel2.prototype.isRowsToRender = function() {
          return !!this.infiniteCache;
        };
        InfiniteRowModel2.prototype.getNodesInRangeForSelection = function(firstInRange, lastInRange) {
          return this.infiniteCache ? this.infiniteCache.getRowNodesInRange(firstInRange, lastInRange) : [];
        };
        InfiniteRowModel2.prototype.reset = function() {
          if (!this.datasource) {
            return;
          }
          var userGeneratingIds = _.exists(this.gridOptionsWrapper.getRowNodeIdFunc());
          if (!userGeneratingIds) {
            this.selectionService.reset();
          }
          this.resetCache();
          var event = this.createModelUpdatedEvent();
          this.eventService.dispatchEvent(event);
        };
        InfiniteRowModel2.prototype.createModelUpdatedEvent = function() {
          return {
            type: Events.EVENT_MODEL_UPDATED,
            api: this.gridApi,
            columnApi: this.columnApi,
            // not sure if these should all be false - noticed if after implementing,
            // maybe they should be true?
            newPage: false,
            newData: false,
            keepRenderedRows: true,
            animate: false
          };
        };
        InfiniteRowModel2.prototype.resetCache = function() {
          this.destroyCache();
          var maxConcurrentRequests = this.gridOptionsWrapper.getMaxConcurrentDatasourceRequests();
          this.cacheParams = {
            // the user provided datasource
            datasource: this.datasource,
            // sort and filter model
            filterModel: this.filterManager.getFilterModel(),
            sortModel: this.sortController.getSortModel(),
            rowNodeBlockLoader: this.rowNodeBlockLoader,
            // properties - this way we take a snapshot of them, so if user changes any, they will be
            // used next time we create a new cache, which is generally after a filter or sort change,
            // or a new datasource is set
            maxConcurrentRequests: this.defaultIfInvalid(maxConcurrentRequests, 2),
            initialRowCount: this.defaultIfInvalid(this.gridOptionsWrapper.getInfiniteInitialRowCount(), 1),
            maxBlocksInCache: this.gridOptionsWrapper.getMaxBlocksInCache(),
            rowHeight: this.gridOptionsWrapper.getRowHeightAsNumber(),
            // if user doesn't provide overflow, we use default overflow of 1, so user can scroll past
            // the current page and request first row of next page
            overflowSize: this.defaultIfInvalid(this.gridOptionsWrapper.getCacheOverflowSize(), 1),
            // page size needs to be 1 or greater. having it at 1 would be silly, as you would be hitting the
            // server for one page at a time. so the default if not specified is 100.
            blockSize: this.defaultIfInvalid(this.gridOptionsWrapper.getCacheBlockSize(), 100),
            // the cache could create this, however it is also used by the pages, so handy to create it
            // here as the settings are also passed to the pages
            lastAccessedSequence: new NumberSequence()
          };
          this.infiniteCache = this.createBean(new InfiniteCache(this.cacheParams));
        };
        InfiniteRowModel2.prototype.defaultIfInvalid = function(value, defaultValue) {
          return value > 0 ? value : defaultValue;
        };
        InfiniteRowModel2.prototype.destroyCache = function() {
          if (this.infiniteCache) {
            this.infiniteCache = this.destroyBean(this.infiniteCache);
          }
        };
        InfiniteRowModel2.prototype.onCacheUpdated = function() {
          var event = this.createModelUpdatedEvent();
          this.eventService.dispatchEvent(event);
        };
        InfiniteRowModel2.prototype.getRow = function(rowIndex) {
          if (!this.infiniteCache) {
            return void 0;
          }
          if (rowIndex >= this.infiniteCache.getRowCount()) {
            return void 0;
          }
          return this.infiniteCache.getRow(rowIndex);
        };
        InfiniteRowModel2.prototype.getRowNode = function(id) {
          var result = void 0;
          this.forEachNode(function(rowNode) {
            if (rowNode.id === id) {
              result = rowNode;
            }
          });
          return result;
        };
        InfiniteRowModel2.prototype.forEachNode = function(callback) {
          if (this.infiniteCache) {
            this.infiniteCache.forEachNodeDeep(callback);
          }
        };
        InfiniteRowModel2.prototype.getTopLevelRowCount = function() {
          return this.getRowCount();
        };
        InfiniteRowModel2.prototype.getTopLevelRowDisplayedIndex = function(topLevelIndex) {
          return topLevelIndex;
        };
        InfiniteRowModel2.prototype.getRowIndexAtPixel = function(pixel) {
          if (this.rowHeight !== 0) {
            var rowIndexForPixel = Math.floor(pixel / this.rowHeight);
            var lastRowIndex = this.getRowCount() - 1;
            if (rowIndexForPixel > lastRowIndex) {
              return lastRowIndex;
            }
            return rowIndexForPixel;
          }
          return 0;
        };
        InfiniteRowModel2.prototype.getRowCount = function() {
          return this.infiniteCache ? this.infiniteCache.getRowCount() : 0;
        };
        InfiniteRowModel2.prototype.isRowPresent = function(rowNode) {
          var foundRowNode = this.getRowNode(rowNode.id);
          return !!foundRowNode;
        };
        InfiniteRowModel2.prototype.refreshCache = function() {
          if (this.infiniteCache) {
            this.infiniteCache.refreshCache();
          }
        };
        InfiniteRowModel2.prototype.purgeCache = function() {
          if (this.infiniteCache) {
            this.infiniteCache.purgeCache();
          }
        };
        InfiniteRowModel2.prototype.isLastRowIndexKnown = function() {
          if (this.infiniteCache) {
            return this.infiniteCache.isLastRowIndexKnown();
          }
          return false;
        };
        InfiniteRowModel2.prototype.setRowCount = function(rowCount, lastRowIndexKnown) {
          if (this.infiniteCache) {
            this.infiniteCache.setRowCount(rowCount, lastRowIndexKnown);
          }
        };
        __decorate$2t([
          Autowired("filterManager")
        ], InfiniteRowModel2.prototype, "filterManager", void 0);
        __decorate$2t([
          Autowired("sortController")
        ], InfiniteRowModel2.prototype, "sortController", void 0);
        __decorate$2t([
          Autowired("selectionService")
        ], InfiniteRowModel2.prototype, "selectionService", void 0);
        __decorate$2t([
          Autowired("gridApi")
        ], InfiniteRowModel2.prototype, "gridApi", void 0);
        __decorate$2t([
          Autowired("columnApi")
        ], InfiniteRowModel2.prototype, "columnApi", void 0);
        __decorate$2t([
          Autowired("rowRenderer")
        ], InfiniteRowModel2.prototype, "rowRenderer", void 0);
        __decorate$2t([
          Autowired("rowNodeBlockLoader")
        ], InfiniteRowModel2.prototype, "rowNodeBlockLoader", void 0);
        __decorate$2t([
          PostConstruct
        ], InfiniteRowModel2.prototype, "init", null);
        __decorate$2t([
          PreDestroy
        ], InfiniteRowModel2.prototype, "destroyDatasource", null);
        InfiniteRowModel2 = __decorate$2t([
          Bean3("rowModel")
        ], InfiniteRowModel2);
        return InfiniteRowModel2;
      }(BeanStub)
    );
    var InfiniteRowModelModule = {
      moduleName: exports.ModuleNames.InfiniteRowModelModule,
      rowModels: { infinite: InfiniteRowModel }
    };
    var BaseCreator = (
      /** @class */
      function() {
        function BaseCreator2() {
        }
        BaseCreator2.prototype.setBeans = function(beans) {
          this.beans = beans;
        };
        BaseCreator2.prototype.getFileName = function(fileName) {
          var extension = this.getDefaultFileExtension();
          if (fileName == null || !fileName.length) {
            fileName = this.getDefaultFileName();
          }
          return fileName.indexOf(".") === -1 ? fileName + "." + extension : fileName;
        };
        BaseCreator2.prototype.getMergedParamsAndData = function(userParams) {
          var mergedParams = this.mergeDefaultParams(userParams);
          var data = this.beans.gridSerializer.serialize(this.createSerializingSession(mergedParams), mergedParams);
          return { mergedParams, data };
        };
        BaseCreator2.prototype.mergeDefaultParams = function(userParams) {
          var baseParams = this.getDefaultExportParams();
          var params = {};
          _.assign(params, baseParams);
          _.assign(params, userParams);
          return params;
        };
        return BaseCreator2;
      }()
    );
    var BaseGridSerializingSession = (
      /** @class */
      function() {
        function BaseGridSerializingSession2(config) {
          this.groupColumns = [];
          var columnModel = config.columnModel, valueService = config.valueService, gridOptionsWrapper = config.gridOptionsWrapper, processCellCallback = config.processCellCallback, processHeaderCallback = config.processHeaderCallback, processGroupHeaderCallback = config.processGroupHeaderCallback, processRowGroupCallback = config.processRowGroupCallback;
          this.columnModel = columnModel;
          this.valueService = valueService;
          this.gridOptionsWrapper = gridOptionsWrapper;
          this.processCellCallback = processCellCallback;
          this.processHeaderCallback = processHeaderCallback;
          this.processGroupHeaderCallback = processGroupHeaderCallback;
          this.processRowGroupCallback = processRowGroupCallback;
        }
        BaseGridSerializingSession2.prototype.prepare = function(columnsToExport) {
          this.groupColumns = _.filter(columnsToExport, function(col) {
            return !!col.getColDef().showRowGroup;
          });
        };
        BaseGridSerializingSession2.prototype.extractHeaderValue = function(column) {
          var value = this.getHeaderName(this.processHeaderCallback, column);
          return value != null ? value : "";
        };
        BaseGridSerializingSession2.prototype.extractRowCellValue = function(column, index, accumulatedRowIndex, type, node) {
          var groupIndex = this.gridOptionsWrapper.isGroupMultiAutoColumn() ? node.rowGroupIndex : 0;
          var renderGroupSummaryCell = (
            // on group rows
            node && node.group && // in the group column if groups appear in regular grid cells
            (index === groupIndex && this.groupColumns.indexOf(column) !== -1 || index === 0 && this.gridOptionsWrapper.isGroupUseEntireRow(this.columnModel.isPivotMode()))
          );
          var valueForCell;
          if (renderGroupSummaryCell) {
            valueForCell = this.createValueForGroupNode(node);
          } else {
            valueForCell = this.valueService.getValue(column, node);
          }
          var value = this.processCell(accumulatedRowIndex, node, column, valueForCell, this.processCellCallback, type);
          return value != null ? value : "";
        };
        BaseGridSerializingSession2.prototype.getHeaderName = function(callback, column) {
          if (callback) {
            return callback({
              column,
              api: this.gridOptionsWrapper.getApi(),
              columnApi: this.gridOptionsWrapper.getColumnApi(),
              context: this.gridOptionsWrapper.getContext()
            });
          }
          return this.columnModel.getDisplayNameForColumn(column, "csv", true);
        };
        BaseGridSerializingSession2.prototype.createValueForGroupNode = function(node) {
          if (this.processRowGroupCallback) {
            return this.processRowGroupCallback({
              node,
              api: this.gridOptionsWrapper.getApi(),
              columnApi: this.gridOptionsWrapper.getColumnApi(),
              context: this.gridOptionsWrapper.getContext()
            });
          }
          var keys2 = [node.key];
          if (!this.gridOptionsWrapper.isGroupMultiAutoColumn()) {
            while (node.parent) {
              node = node.parent;
              keys2.push(node.key);
            }
          }
          return keys2.reverse().join(" -> ");
        };
        BaseGridSerializingSession2.prototype.processCell = function(accumulatedRowIndex, rowNode, column, value, processCellCallback, type) {
          if (processCellCallback) {
            return processCellCallback({
              accumulatedRowIndex,
              column,
              node: rowNode,
              value,
              api: this.gridOptionsWrapper.getApi(),
              columnApi: this.gridOptionsWrapper.getColumnApi(),
              context: this.gridOptionsWrapper.getContext(),
              type
            });
          }
          return value != null ? value : "";
        };
        return BaseGridSerializingSession2;
      }()
    );
    var Downloader = (
      /** @class */
      function() {
        function Downloader2() {
        }
        Downloader2.download = function(fileName, content) {
          var win = document.defaultView || window;
          if (!win) {
            console.warn("AG Grid: There is no `window` associated with the current `document`");
            return;
          }
          if (win.navigator.msSaveOrOpenBlob) {
            win.navigator.msSaveOrOpenBlob(content, fileName);
          } else {
            var element = document.createElement("a");
            var url_1 = win.URL.createObjectURL(content);
            element.setAttribute("href", url_1);
            element.setAttribute("download", fileName);
            element.style.display = "none";
            document.body.appendChild(element);
            element.dispatchEvent(new MouseEvent("click", {
              bubbles: false,
              cancelable: true,
              view: win
            }));
            document.body.removeChild(element);
            win.setTimeout(function() {
              win.URL.revokeObjectURL(url_1);
            }, 0);
          }
        };
        return Downloader2;
      }()
    );
    var __extends$2N = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var LINE_SEPARATOR = "\r\n";
    var CsvSerializingSession = (
      /** @class */
      function(_super) {
        __extends$2N(CsvSerializingSession2, _super);
        function CsvSerializingSession2(config) {
          var _this = _super.call(this, config) || this;
          _this.isFirstLine = true;
          _this.result = "";
          var suppressQuotes = config.suppressQuotes, columnSeparator = config.columnSeparator;
          _this.suppressQuotes = suppressQuotes;
          _this.columnSeparator = columnSeparator;
          return _this;
        }
        CsvSerializingSession2.prototype.addCustomContent = function(content) {
          var _this = this;
          if (!content) {
            return;
          }
          if (typeof content === "string") {
            if (!/^\s*\n/.test(content)) {
              this.beginNewLine();
            }
            content = content.replace(/\r?\n/g, LINE_SEPARATOR);
            this.result += content;
          } else {
            content.forEach(function(row) {
              _this.beginNewLine();
              row.forEach(function(cell, index) {
                if (index !== 0) {
                  _this.result += _this.columnSeparator;
                }
                _this.result += _this.putInQuotes(cell.data.value || "");
                if (cell.mergeAcross) {
                  _this.appendEmptyCells(cell.mergeAcross);
                }
              });
            });
          }
        };
        CsvSerializingSession2.prototype.onNewHeaderGroupingRow = function() {
          this.beginNewLine();
          return {
            onColumn: this.onNewHeaderGroupingRowColumn.bind(this)
          };
        };
        CsvSerializingSession2.prototype.onNewHeaderGroupingRowColumn = function(header, index, span) {
          if (index != 0) {
            this.result += this.columnSeparator;
          }
          this.result += this.putInQuotes(header);
          this.appendEmptyCells(span);
        };
        CsvSerializingSession2.prototype.appendEmptyCells = function(count) {
          for (var i = 1; i <= count; i++) {
            this.result += this.columnSeparator + this.putInQuotes("");
          }
        };
        CsvSerializingSession2.prototype.onNewHeaderRow = function() {
          this.beginNewLine();
          return {
            onColumn: this.onNewHeaderRowColumn.bind(this)
          };
        };
        CsvSerializingSession2.prototype.onNewHeaderRowColumn = function(column, index) {
          if (index != 0) {
            this.result += this.columnSeparator;
          }
          this.result += this.putInQuotes(this.extractHeaderValue(column));
        };
        CsvSerializingSession2.prototype.onNewBodyRow = function() {
          this.beginNewLine();
          return {
            onColumn: this.onNewBodyRowColumn.bind(this)
          };
        };
        CsvSerializingSession2.prototype.onNewBodyRowColumn = function(column, index, node) {
          if (index != 0) {
            this.result += this.columnSeparator;
          }
          this.result += this.putInQuotes(this.extractRowCellValue(column, index, index, Constants.EXPORT_TYPE_CSV, node));
        };
        CsvSerializingSession2.prototype.putInQuotes = function(value) {
          if (this.suppressQuotes) {
            return value;
          }
          if (value === null || value === void 0) {
            return '""';
          }
          var stringValue;
          if (typeof value === "string") {
            stringValue = value;
          } else if (typeof value.toString === "function") {
            stringValue = value.toString();
          } else {
            console.warn("unknown value type during csv conversion");
            stringValue = "";
          }
          var valueEscaped = stringValue.replace(/"/g, '""');
          return '"' + valueEscaped + '"';
        };
        CsvSerializingSession2.prototype.parse = function() {
          return this.result;
        };
        CsvSerializingSession2.prototype.beginNewLine = function() {
          if (!this.isFirstLine) {
            this.result += LINE_SEPARATOR;
          }
          this.isFirstLine = false;
        };
        return CsvSerializingSession2;
      }(BaseGridSerializingSession)
    );
    var __extends$2O = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$2u = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var CsvCreator = (
      /** @class */
      function(_super) {
        __extends$2O(CsvCreator2, _super);
        function CsvCreator2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        CsvCreator2.prototype.postConstruct = function() {
          this.setBeans({
            gridSerializer: this.gridSerializer,
            gridOptionsWrapper: this.gridOptionsWrapper
          });
        };
        CsvCreator2.prototype.getDefaultExportParams = function() {
          return this.gridOptionsWrapper.getDefaultExportParams("csv");
        };
        CsvCreator2.prototype.export = function(userParams) {
          if (this.isExportSuppressed()) {
            console.warn("ag-grid: Export cancelled. Export is not allowed as per your configuration.");
            return "";
          }
          var _a2 = this.getMergedParamsAndData(userParams), mergedParams = _a2.mergedParams, data = _a2.data;
          var packagedFile = new Blob(["\uFEFF", data], {
            // @ts-ignore
            type: window.navigator.msSaveOrOpenBlob ? this.getMimeType() : "octet/stream"
          });
          Downloader.download(this.getFileName(mergedParams.fileName), packagedFile);
          return data;
        };
        CsvCreator2.prototype.exportDataAsCsv = function(params) {
          return this.export(params);
        };
        CsvCreator2.prototype.getDataAsCsv = function(params) {
          return this.getMergedParamsAndData(params).data;
        };
        CsvCreator2.prototype.getMimeType = function() {
          return "text/csv;charset=utf-8;";
        };
        CsvCreator2.prototype.getDefaultFileName = function() {
          return "export.csv";
        };
        CsvCreator2.prototype.getDefaultFileExtension = function() {
          return "csv";
        };
        CsvCreator2.prototype.createSerializingSession = function(params) {
          var _a2 = this, columnModel = _a2.columnModel, valueService = _a2.valueService, gridOptionsWrapper = _a2.gridOptionsWrapper;
          var _b = params, processCellCallback = _b.processCellCallback, processHeaderCallback = _b.processHeaderCallback, processGroupHeaderCallback = _b.processGroupHeaderCallback, processRowGroupCallback = _b.processRowGroupCallback, suppressQuotes = _b.suppressQuotes, columnSeparator = _b.columnSeparator;
          return new CsvSerializingSession({
            columnModel,
            valueService,
            gridOptionsWrapper,
            processCellCallback: processCellCallback || void 0,
            processHeaderCallback: processHeaderCallback || void 0,
            processGroupHeaderCallback: processGroupHeaderCallback || void 0,
            processRowGroupCallback: processRowGroupCallback || void 0,
            suppressQuotes: suppressQuotes || false,
            columnSeparator: columnSeparator || ","
          });
        };
        CsvCreator2.prototype.isExportSuppressed = function() {
          return this.gridOptionsWrapper.isSuppressCsvExport();
        };
        __decorate$2u([
          Autowired("columnModel")
        ], CsvCreator2.prototype, "columnModel", void 0);
        __decorate$2u([
          Autowired("valueService")
        ], CsvCreator2.prototype, "valueService", void 0);
        __decorate$2u([
          Autowired("gridSerializer")
        ], CsvCreator2.prototype, "gridSerializer", void 0);
        __decorate$2u([
          Autowired("gridOptionsWrapper")
        ], CsvCreator2.prototype, "gridOptionsWrapper", void 0);
        __decorate$2u([
          PostConstruct
        ], CsvCreator2.prototype, "postConstruct", null);
        CsvCreator2 = __decorate$2u([
          Bean3("csvCreator")
        ], CsvCreator2);
        return CsvCreator2;
      }(BaseCreator)
    );
    var __extends$2P = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate$2v = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    (function(RowType2) {
      RowType2[RowType2["HEADER_GROUPING"] = 0] = "HEADER_GROUPING";
      RowType2[RowType2["HEADER"] = 1] = "HEADER";
      RowType2[RowType2["BODY"] = 2] = "BODY";
    })(exports.RowType || (exports.RowType = {}));
    var GridSerializer = (
      /** @class */
      function(_super) {
        __extends$2P(GridSerializer2, _super);
        function GridSerializer2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        GridSerializer2.prototype.serialize = function(gridSerializingSession, params) {
          if (params === void 0) {
            params = {};
          }
          var columnsToExport = this.getColumnsToExport(params.allColumns, params.columnKeys);
          var serializeChain = _.compose(
            // first pass, put in the header names of the cols
            this.prepareSession(columnsToExport),
            this.prependContent(params),
            this.exportColumnGroups(params, columnsToExport),
            this.exportHeaders(params, columnsToExport),
            this.processPinnedTopRows(params, columnsToExport),
            this.processRows(params, columnsToExport),
            this.processPinnedBottomRows(params, columnsToExport),
            this.appendContent(params)
          );
          return serializeChain(gridSerializingSession).parse();
        };
        GridSerializer2.prototype.processRow = function(gridSerializingSession, params, columnsToExport, node) {
          var rowSkipper = params.shouldRowBeSkipped || function() {
            return false;
          };
          var gridOptionsWrapper = this.gridOptionsWrapper;
          var context = gridOptionsWrapper.getContext();
          var api = gridOptionsWrapper.getApi();
          var columnApi = gridOptionsWrapper.getColumnApi();
          var skipSingleChildrenGroup = gridOptionsWrapper.isGroupRemoveSingleChildren();
          var hideOpenParents = gridOptionsWrapper.isGroupHideOpenParents();
          var skipLowestSingleChildrenGroup = gridOptionsWrapper.isGroupRemoveLowestSingleChildren();
          var isLeafNode = this.columnModel.isPivotMode() ? node.leafGroup : !node.group;
          var skipRowGroups = params.skipGroups || params.skipRowGroups;
          var shouldSkipLowestGroup = skipLowestSingleChildrenGroup && node.leafGroup;
          var shouldSkipCurrentGroup = node.allChildrenCount === 1 && (skipSingleChildrenGroup || shouldSkipLowestGroup);
          if (skipRowGroups && params.skipGroups) {
            _.doOnce(function() {
              return console.warn("AG Grid: Since v25.2 `skipGroups` has been renamed to `skipRowGroups`.");
            }, "gridSerializer-skipGroups");
          }
          if (!isLeafNode && (params.skipRowGroups || shouldSkipCurrentGroup || hideOpenParents) || params.onlySelected && !node.isSelected() || params.skipPinnedTop && node.rowPinned === "top" || params.skipPinnedBottom && node.rowPinned === "bottom") {
            return;
          }
          var nodeIsRootNode = node.level === -1;
          if (nodeIsRootNode && !node.leafGroup) {
            return;
          }
          var shouldRowBeSkipped = rowSkipper({ node, api, context });
          if (shouldRowBeSkipped) {
            return;
          }
          var rowAccumulator = gridSerializingSession.onNewBodyRow();
          columnsToExport.forEach(function(column, index) {
            rowAccumulator.onColumn(column, index, node);
          });
          if (params.getCustomContentBelowRow) {
            var content = params.getCustomContentBelowRow({ node, api, columnApi, context });
            if (content) {
              gridSerializingSession.addCustomContent(content);
            }
          }
        };
        GridSerializer2.prototype.appendContent = function(params) {
          return function(gridSerializingSession) {
            var appendContent = params.customFooter || params.appendContent;
            if (appendContent) {
              if (params.customFooter) {
                _.doOnce(function() {
                  return console.warn("AG Grid: Since version 25.2.0 the `customFooter` param has been deprecated. Use `appendContent` instead.");
                }, "gridSerializer-customFooter");
              }
              gridSerializingSession.addCustomContent(appendContent);
            }
            return gridSerializingSession;
          };
        };
        GridSerializer2.prototype.prependContent = function(params) {
          return function(gridSerializingSession) {
            var prependContent = params.customHeader || params.prependContent;
            if (prependContent) {
              if (params.customHeader) {
                _.doOnce(function() {
                  return console.warn("AG Grid: Since version 25.2.0 the `customHeader` param has been deprecated. Use `prependContent` instead.");
                }, "gridSerializer-customHeader");
              }
              gridSerializingSession.addCustomContent(prependContent);
            }
            return gridSerializingSession;
          };
        };
        GridSerializer2.prototype.prepareSession = function(columnsToExport) {
          return function(gridSerializingSession) {
            gridSerializingSession.prepare(columnsToExport);
            return gridSerializingSession;
          };
        };
        GridSerializer2.prototype.exportColumnGroups = function(params, columnsToExport) {
          var _this = this;
          return function(gridSerializingSession) {
            if (!params.skipColumnGroupHeaders) {
              var groupInstanceIdCreator = new GroupInstanceIdCreator();
              var displayedGroups = _this.displayedGroupCreator.createDisplayedGroups(columnsToExport, _this.columnModel.getGridBalancedTree(), groupInstanceIdCreator, null);
              _this.recursivelyAddHeaderGroups(displayedGroups, gridSerializingSession, params.processGroupHeaderCallback);
            } else if (params.columnGroups) {
              _.doOnce(function() {
                return console.warn("AG Grid: Since v25.2 the `columnGroups` param has deprecated, and groups are exported by default.");
              }, "gridSerializer-columnGroups");
            }
            return gridSerializingSession;
          };
        };
        GridSerializer2.prototype.exportHeaders = function(params, columnsToExport) {
          return function(gridSerializingSession) {
            if (!params.skipHeader && !params.skipColumnHeaders) {
              var gridRowIterator_1 = gridSerializingSession.onNewHeaderRow();
              columnsToExport.forEach(function(column, index) {
                gridRowIterator_1.onColumn(column, index, void 0);
              });
            } else if (params.skipHeader) {
              _.doOnce(function() {
                return console.warn("AG Grid: Since v25.2 the `skipHeader` param has been renamed to `skipColumnHeaders`.");
              }, "gridSerializer-skipHeader");
            }
            return gridSerializingSession;
          };
        };
        GridSerializer2.prototype.processPinnedTopRows = function(params, columnsToExport) {
          var _this = this;
          return function(gridSerializingSession) {
            var processRow = _this.processRow.bind(_this, gridSerializingSession, params, columnsToExport);
            _this.pinnedRowModel.forEachPinnedTopRow(processRow);
            return gridSerializingSession;
          };
        };
        GridSerializer2.prototype.processRows = function(params, columnsToExport) {
          var _this = this;
          return function(gridSerializingSession) {
            var rowModel = _this.rowModel;
            var rowModelType = rowModel.getType();
            var usingCsrm = rowModelType === Constants.ROW_MODEL_TYPE_CLIENT_SIDE;
            var usingSsrm = rowModelType === Constants.ROW_MODEL_TYPE_SERVER_SIDE;
            var onlySelectedNonStandardModel = !usingCsrm && params.onlySelected;
            var processRow = _this.processRow.bind(_this, gridSerializingSession, params, columnsToExport);
            if (_this.columnModel.isPivotMode()) {
              if (usingCsrm) {
                rowModel.forEachPivotNode(processRow);
              } else {
                rowModel.forEachNode(processRow);
              }
            } else {
              if (params.onlySelectedAllPages || onlySelectedNonStandardModel) {
                var selectedNodes = _this.selectionService.getSelectedNodes();
                selectedNodes.forEach(processRow);
              } else {
                if (usingCsrm) {
                  rowModel.forEachNodeAfterFilterAndSort(processRow);
                } else if (usingSsrm) {
                  rowModel.forEachNodeAfterFilterAndSort(processRow);
                } else {
                  rowModel.forEachNode(processRow);
                }
              }
            }
            return gridSerializingSession;
          };
        };
        GridSerializer2.prototype.processPinnedBottomRows = function(params, columnsToExport) {
          var _this = this;
          return function(gridSerializingSession) {
            var processRow = _this.processRow.bind(_this, gridSerializingSession, params, columnsToExport);
            _this.pinnedRowModel.forEachPinnedBottomRow(processRow);
            return gridSerializingSession;
          };
        };
        GridSerializer2.prototype.getColumnsToExport = function(allColumns, columnKeys) {
          if (allColumns === void 0) {
            allColumns = false;
          }
          var isPivotMode = this.columnModel.isPivotMode();
          if (columnKeys && columnKeys.length) {
            return this.columnModel.getGridColumns(columnKeys);
          }
          if (allColumns && !isPivotMode) {
            var columns = this.gridOptionsWrapper.isTreeData() ? this.columnModel.getGridColumns([Constants.GROUP_AUTO_COLUMN_ID]) : [];
            return columns.concat(this.columnModel.getAllPrimaryColumns() || []);
          }
          return this.columnModel.getAllDisplayedColumns();
        };
        GridSerializer2.prototype.recursivelyAddHeaderGroups = function(displayedGroups, gridSerializingSession, processGroupHeaderCallback) {
          var directChildrenHeaderGroups = [];
          displayedGroups.forEach(function(columnGroupChild) {
            var columnGroup = columnGroupChild;
            if (!columnGroup.getChildren) {
              return;
            }
            columnGroup.getChildren().forEach(function(it) {
              return directChildrenHeaderGroups.push(it);
            });
          });
          if (displayedGroups.length > 0 && displayedGroups[0] instanceof ColumnGroup) {
            this.doAddHeaderHeader(gridSerializingSession, displayedGroups, processGroupHeaderCallback);
          }
          if (directChildrenHeaderGroups && directChildrenHeaderGroups.length > 0) {
            this.recursivelyAddHeaderGroups(directChildrenHeaderGroups, gridSerializingSession, processGroupHeaderCallback);
          }
        };
        GridSerializer2.prototype.doAddHeaderHeader = function(gridSerializingSession, displayedGroups, processGroupHeaderCallback) {
          var _this = this;
          var gridRowIterator = gridSerializingSession.onNewHeaderGroupingRow();
          var columnIndex = 0;
          displayedGroups.forEach(function(columnGroupChild) {
            var columnGroup = columnGroupChild;
            var name;
            if (processGroupHeaderCallback) {
              name = processGroupHeaderCallback({
                columnGroup,
                api: _this.gridOptionsWrapper.getApi(),
                columnApi: _this.gridOptionsWrapper.getColumnApi(),
                context: _this.gridOptionsWrapper.getContext()
              });
            } else {
              name = _this.columnModel.getDisplayNameForColumnGroup(columnGroup, "header");
            }
            gridRowIterator.onColumn(name || "", columnIndex++, columnGroup.getLeafColumns().length - 1);
          });
        };
        __decorate$2v([
          Autowired("displayedGroupCreator")
        ], GridSerializer2.prototype, "displayedGroupCreator", void 0);
        __decorate$2v([
          Autowired("columnModel")
        ], GridSerializer2.prototype, "columnModel", void 0);
        __decorate$2v([
          Autowired("rowModel")
        ], GridSerializer2.prototype, "rowModel", void 0);
        __decorate$2v([
          Autowired("pinnedRowModel")
        ], GridSerializer2.prototype, "pinnedRowModel", void 0);
        __decorate$2v([
          Autowired("selectionService")
        ], GridSerializer2.prototype, "selectionService", void 0);
        GridSerializer2 = __decorate$2v([
          Bean3("gridSerializer")
        ], GridSerializer2);
        return GridSerializer2;
      }(BeanStub)
    );
    var CsvExportModule = {
      moduleName: exports.ModuleNames.CsvExportModule,
      beans: [CsvCreator, GridSerializer]
    };
    var LINE_SEPARATOR$1 = "\r\n";
    var XmlFactory = (
      /** @class */
      function() {
        function XmlFactory2() {
        }
        XmlFactory2.createHeader = function(headerElement) {
          if (headerElement === void 0) {
            headerElement = {};
          }
          var headerStart = "<?";
          var headerEnd = "?>";
          var keys2 = ["version"];
          if (!headerElement.version) {
            headerElement.version = "1.0";
          }
          if (headerElement.encoding) {
            keys2.push("encoding");
          }
          if (headerElement.standalone) {
            keys2.push("standalone");
          }
          var att = keys2.map(function(key) {
            return key + '="' + headerElement[key] + '"';
          }).join(" ");
          return headerStart + "xml " + att + " " + headerEnd;
        };
        XmlFactory2.createXml = function(xmlElement, booleanTransformer) {
          var _this = this;
          var props2 = "";
          if (xmlElement.properties) {
            if (xmlElement.properties.prefixedAttributes) {
              xmlElement.properties.prefixedAttributes.forEach(function(prefixedSet) {
                Object.keys(prefixedSet.map).forEach(function(key) {
                  props2 += _this.returnAttributeIfPopulated(prefixedSet.prefix + key, prefixedSet.map[key], booleanTransformer);
                });
              });
            }
            if (xmlElement.properties.rawMap) {
              Object.keys(xmlElement.properties.rawMap).forEach(function(key) {
                props2 += _this.returnAttributeIfPopulated(key, xmlElement.properties.rawMap[key], booleanTransformer);
              });
            }
          }
          var result = "<" + xmlElement.name + props2;
          if (!xmlElement.children && xmlElement.textNode == null) {
            return result + "/>" + LINE_SEPARATOR$1;
          }
          if (xmlElement.textNode != null) {
            return result + ">" + xmlElement.textNode + "</" + xmlElement.name + ">" + LINE_SEPARATOR$1;
          }
          result += ">" + LINE_SEPARATOR$1;
          if (xmlElement.children) {
            xmlElement.children.forEach(function(it) {
              result += _this.createXml(it, booleanTransformer);
            });
          }
          return result + "</" + xmlElement.name + ">" + LINE_SEPARATOR$1;
        };
        XmlFactory2.returnAttributeIfPopulated = function(key, value, booleanTransformer) {
          if (!value && value !== "" && value !== 0) {
            return "";
          }
          var xmlValue = value;
          if (typeof value === "boolean") {
            if (booleanTransformer) {
              xmlValue = booleanTransformer(value);
            }
          }
          return " " + key + '="' + xmlValue + '"';
        };
        return XmlFactory2;
      }()
    );
    var crcTable = new Uint32Array([
      0,
      1996959894,
      3993919788,
      2567524794,
      124634137,
      1886057615,
      3915621685,
      2657392035,
      249268274,
      2044508324,
      3772115230,
      2547177864,
      162941995,
      2125561021,
      3887607047,
      2428444049,
      498536548,
      1789927666,
      4089016648,
      2227061214,
      450548861,
      1843258603,
      4107580753,
      2211677639,
      325883990,
      1684777152,
      4251122042,
      2321926636,
      335633487,
      1661365465,
      4195302755,
      2366115317,
      997073096,
      1281953886,
      3579855332,
      2724688242,
      1006888145,
      1258607687,
      3524101629,
      2768942443,
      901097722,
      1119000684,
      3686517206,
      2898065728,
      853044451,
      1172266101,
      3705015759,
      2882616665,
      651767980,
      1373503546,
      3369554304,
      3218104598,
      565507253,
      1454621731,
      3485111705,
      3099436303,
      671266974,
      1594198024,
      3322730930,
      2970347812,
      795835527,
      1483230225,
      3244367275,
      3060149565,
      1994146192,
      31158534,
      2563907772,
      4023717930,
      1907459465,
      112637215,
      2680153253,
      3904427059,
      2013776290,
      251722036,
      2517215374,
      3775830040,
      2137656763,
      141376813,
      2439277719,
      3865271297,
      1802195444,
      476864866,
      2238001368,
      4066508878,
      1812370925,
      453092731,
      2181625025,
      4111451223,
      1706088902,
      314042704,
      2344532202,
      4240017532,
      1658658271,
      366619977,
      2362670323,
      4224994405,
      1303535960,
      984961486,
      2747007092,
      3569037538,
      1256170817,
      1037604311,
      2765210733,
      3554079995,
      1131014506,
      879679996,
      2909243462,
      3663771856,
      1141124467,
      855842277,
      2852801631,
      3708648649,
      1342533948,
      654459306,
      3188396048,
      3373015174,
      1466479909,
      544179635,
      3110523913,
      3462522015,
      1591671054,
      702138776,
      2966460450,
      3352799412,
      1504918807,
      783551873,
      3082640443,
      3233442989,
      3988292384,
      2596254646,
      62317068,
      1957810842,
      3939845945,
      2647816111,
      81470997,
      1943803523,
      3814918930,
      2489596804,
      225274430,
      2053790376,
      3826175755,
      2466906013,
      167816743,
      2097651377,
      4027552580,
      2265490386,
      503444072,
      1762050814,
      4150417245,
      2154129355,
      426522225,
      1852507879,
      4275313526,
      2312317920,
      282753626,
      1742555852,
      4189708143,
      2394877945,
      397917763,
      1622183637,
      3604390888,
      2714866558,
      953729732,
      1340076626,
      3518719985,
      2797360999,
      1068828381,
      1219638859,
      3624741850,
      2936675148,
      906185462,
      1090812512,
      3747672003,
      2825379669,
      829329135,
      1181335161,
      3412177804,
      3160834842,
      628085408,
      1382605366,
      3423369109,
      3138078467,
      570562233,
      1426400815,
      3317316542,
      2998733608,
      733239954,
      1555261956,
      3268935591,
      3050360625,
      752459403,
      1541320221,
      2607071920,
      3965973030,
      1969922972,
      40735498,
      2617837225,
      3943577151,
      1913087877,
      83908371,
      2512341634,
      3803740692,
      2075208622,
      213261112,
      2463272603,
      3855990285,
      2094854071,
      198958881,
      2262029012,
      4057260610,
      1759359992,
      534414190,
      2176718541,
      4139329115,
      1873836001,
      414664567,
      2282248934,
      4279200368,
      1711684554,
      285281116,
      2405801727,
      4167216745,
      1634467795,
      376229701,
      2685067896,
      3608007406,
      1308918612,
      956543938,
      2808555105,
      3495958263,
      1231636301,
      1047427035,
      2932959818,
      3654703836,
      1088359270,
      936918e3,
      2847714899,
      3736837829,
      1202900863,
      817233897,
      3183342108,
      3401237130,
      1404277552,
      615818150,
      3134207493,
      3453421203,
      1423857449,
      601450431,
      3009837614,
      3294710456,
      1567103746,
      711928724,
      3020668471,
      3272380065,
      1510334235,
      755167117
    ]);
    var ZipContainer = (
      /** @class */
      function() {
        function ZipContainer2() {
        }
        ZipContainer2.addFolders = function(paths) {
          paths.forEach(this.addFolder.bind(this));
        };
        ZipContainer2.addFolder = function(path) {
          this.folders.push({
            path,
            created: new Date(),
            isBase64: false
          });
        };
        ZipContainer2.addFile = function(path, content, isBase64) {
          if (isBase64 === void 0) {
            isBase64 = false;
          }
          this.files.push({
            path,
            created: new Date(),
            content,
            isBase64
          });
        };
        ZipContainer2.getContent = function(mimeType) {
          if (mimeType === void 0) {
            mimeType = "application/zip";
          }
          var textOutput = this.buildFileStream();
          var uInt8Output = this.buildUint8Array(textOutput);
          this.clearStream();
          return new Blob([uInt8Output], { type: mimeType });
        };
        ZipContainer2.clearStream = function() {
          this.folders = [];
          this.files = [];
        };
        ZipContainer2.buildFileStream = function(fData) {
          if (fData === void 0) {
            fData = "";
          }
          var totalFiles = this.folders.concat(this.files);
          var len = totalFiles.length;
          var foData = "";
          var lL = 0;
          var cL = 0;
          for (var _i = 0, totalFiles_1 = totalFiles; _i < totalFiles_1.length; _i++) {
            var currentFile = totalFiles_1[_i];
            var _a2 = this.getHeader(currentFile, lL), fileHeader = _a2.fileHeader, folderHeader = _a2.folderHeader, content = _a2.content;
            lL += fileHeader.length + content.length;
            cL += folderHeader.length;
            fData += fileHeader + content;
            foData += folderHeader;
          }
          var foEnd = this.buildFolderEnd(len, cL, lL);
          return fData + foData + foEnd;
        };
        ZipContainer2.getHeader = function(currentFile, offset) {
          var content = currentFile.content, path = currentFile.path, created = currentFile.created, isBase64 = currentFile.isBase64;
          var utf8_encode2 = _.utf8_encode, decToHex2 = _.decToHex;
          var utfPath = utf8_encode2(path);
          var isUTF8 = utfPath !== path;
          var time = this.convertTime(created);
          var dt = this.convertDate(created);
          var extraFields = "";
          if (isUTF8) {
            var uExtraFieldPath = decToHex2(1, 1) + decToHex2(this.getFromCrc32Table(utfPath), 4) + utfPath;
            extraFields = "up" + decToHex2(uExtraFieldPath.length, 2) + uExtraFieldPath;
          }
          var _a2 = !content ? { size: 0, content: "" } : this.getConvertedContent(content, isBase64), size = _a2.size, convertedContent = _a2.content;
          var header = "\n\0" + (isUTF8 ? "\0\b" : "\0\0") + "\0\0" + decToHex2(time, 2) + // last modified time
          decToHex2(dt, 2) + // last modified date
          decToHex2(size ? this.getFromCrc32Table(convertedContent) : 0, 4) + decToHex2(size, 4) + // compressed size
          decToHex2(size, 4) + // uncompressed size
          decToHex2(utfPath.length, 2) + // file name length
          decToHex2(extraFields.length, 2);
          var fileHeader = "PK" + header + utfPath + extraFields;
          var folderHeader = "PK\0" + header + // file header
          "\0\0\0\0\0\0" + (content ? "\0\0\0\0" : "\0\0\0") + // external file attributes
          decToHex2(offset, 4) + // relative offset of local header
          utfPath + // file name
          extraFields;
          return { fileHeader, folderHeader, content: convertedContent || "" };
        };
        ZipContainer2.getConvertedContent = function(content, isBase64) {
          if (isBase64 === void 0) {
            isBase64 = false;
          }
          if (isBase64) {
            content = content.split(";base64,")[1];
          }
          content = isBase64 ? atob(content) : content;
          return {
            size: content.length,
            content
          };
        };
        ZipContainer2.buildFolderEnd = function(tLen, cLen, lLen) {
          var decToHex2 = _.decToHex;
          return "PK\0\0\0\0" + decToHex2(tLen, 2) + // total number of entries in the central folder
          decToHex2(tLen, 2) + // total number of entries in the central folder
          decToHex2(cLen, 4) + // size of the central folder
          decToHex2(lLen, 4) + // central folder start offset
          "\0\0";
        };
        ZipContainer2.buildUint8Array = function(content) {
          var uint8 = new Uint8Array(content.length);
          for (var i = 0; i < uint8.length; i++) {
            uint8[i] = content.charCodeAt(i);
          }
          return uint8;
        };
        ZipContainer2.getFromCrc32Table = function(content) {
          if (!content.length) {
            return 0;
          }
          var size = content.length;
          var iterable = new Uint8Array(size);
          for (var i = 0; i < size; i++) {
            iterable[i] = content.charCodeAt(i);
          }
          var crc = 0 ^ -1;
          var j = 0;
          var k = 0;
          var l = 0;
          for (var i = 0; i < size; i++) {
            j = iterable[i];
            k = (crc ^ j) & 255;
            l = crcTable[k];
            crc = crc >>> 8 ^ l;
          }
          return crc ^ -1;
        };
        ZipContainer2.convertTime = function(date) {
          var time = date.getHours();
          time <<= 6;
          time = time | date.getMinutes();
          time <<= 5;
          time = time | date.getSeconds() / 2;
          return time;
        };
        ZipContainer2.convertDate = function(date) {
          var dt = date.getFullYear() - 1980;
          dt <<= 4;
          dt = dt | date.getMonth() + 1;
          dt <<= 5;
          dt = dt | date.getDate();
          return dt;
        };
        ZipContainer2.folders = [];
        ZipContainer2.files = [];
        return ZipContainer2;
      }()
    );
    ModuleRegistry.register(ClientSideRowModelModule, false);
    ModuleRegistry.register(InfiniteRowModelModule, false);
    ModuleRegistry.register(CsvExportModule, false);
    exports.AbstractHeaderCellCtrl = AbstractHeaderCellCtrl;
    exports.AgAbstractField = AgAbstractField;
    exports.AgAngleSelect = AgAngleSelect;
    exports.AgCheckbox = AgCheckbox;
    exports.AgColorPicker = AgColorPicker;
    exports.AgDialog = AgDialog;
    exports.AgGroupComponent = AgGroupComponent;
    exports.AgInputNumberField = AgInputNumberField;
    exports.AgInputRange = AgInputRange;
    exports.AgInputTextArea = AgInputTextArea;
    exports.AgInputTextField = AgInputTextField;
    exports.AgPanel = AgPanel;
    exports.AgPromise = AgPromise;
    exports.AgRadioButton = AgRadioButton;
    exports.AgSelect = AgSelect;
    exports.AgSlider = AgSlider;
    exports.AgStackComponentsRegistry = AgStackComponentsRegistry;
    exports.AgToggleButton = AgToggleButton;
    exports.AlignedGridsService = AlignedGridsService;
    exports.AnimateShowChangeCellRenderer = AnimateShowChangeCellRenderer;
    exports.AnimateSlideCellRenderer = AnimateSlideCellRenderer;
    exports.AnimationFrameService = AnimationFrameService;
    exports.AutoScrollService = AutoScrollService;
    exports.AutoWidthCalculator = AutoWidthCalculator;
    exports.Autowired = Autowired;
    exports.BaseComponentWrapper = BaseComponentWrapper2;
    exports.BaseCreator = BaseCreator;
    exports.BaseGridSerializingSession = BaseGridSerializingSession;
    exports.Bean = Bean3;
    exports.BeanStub = BeanStub;
    exports.Beans = Beans;
    exports.BodyDropPivotTarget = BodyDropPivotTarget;
    exports.BodyDropTarget = BodyDropTarget;
    exports.CellComp = CellComp;
    exports.CellCtrl = CellCtrl;
    exports.CellNavigationService = CellNavigationService;
    exports.CellPositionUtils = CellPositionUtils;
    exports.ChangedPath = ChangedPath;
    exports.CheckboxSelectionComponent = CheckboxSelectionComponent;
    exports.ColDefUtil = ColDefUtil2;
    exports.Color = Color;
    exports.Column = Column;
    exports.ColumnApi = ColumnApi;
    exports.ColumnFactory = ColumnFactory;
    exports.ColumnGroup = ColumnGroup;
    exports.ColumnKeyCreator = ColumnKeyCreator;
    exports.ColumnModel = ColumnModel;
    exports.ColumnUtils = ColumnUtils;
    exports.Component = Component;
    exports.ComponentUtil = ComponentUtil3;
    exports.Constants = Constants;
    exports.Context = Context;
    exports.CssClassApplier = CssClassApplier;
    exports.CsvCreator = CsvCreator;
    exports.CsvExportModule = CsvExportModule;
    exports.CtrlsService = CtrlsService;
    exports.CustomTooltipFeature = CustomTooltipFeature;
    exports.DateFilter = DateFilter;
    exports.DisplayedGroupCreator = DisplayedGroupCreator;
    exports.Downloader = Downloader;
    exports.DragAndDropService = DragAndDropService;
    exports.DragService = DragService;
    exports.Environment = Environment;
    exports.EventService = EventService;
    exports.Events = Events;
    exports.ExpressionService = ExpressionService;
    exports.FilterManager = FilterManager;
    exports.FloatingFilterMapper = FloatingFilterMapper;
    exports.FocusService = FocusService;
    exports.Grid = Grid2;
    exports.GridApi = GridApi;
    exports.GridBodyComp = GridBodyComp;
    exports.GridBodyCtrl = GridBodyCtrl;
    exports.GridComp = GridComp;
    exports.GridCoreCreator = GridCoreCreator;
    exports.GridCtrl = GridCtrl;
    exports.GridHeaderComp = GridHeaderComp;
    exports.GridHeaderCtrl = GridHeaderCtrl;
    exports.GridOptionsWrapper = GridOptionsWrapper;
    exports.GridSerializer = GridSerializer;
    exports.GroupCellRenderer = GroupCellRenderer;
    exports.GroupCellRendererCtrl = GroupCellRendererCtrl;
    exports.GroupInstanceIdCreator = GroupInstanceIdCreator;
    exports.HeaderCellCtrl = HeaderCellCtrl;
    exports.HeaderFilterCellComp = HeaderFilterCellComp;
    exports.HeaderFilterCellCtrl = HeaderFilterCellCtrl;
    exports.HeaderGroupCellCtrl = HeaderGroupCellCtrl;
    exports.HeaderNavigationService = HeaderNavigationService;
    exports.HeaderPositionUtils = HeaderPositionUtils;
    exports.HeaderRowComp = HeaderRowComp;
    exports.HeaderRowContainerComp = HeaderRowContainerComp;
    exports.HeaderRowContainerCtrl = HeaderRowContainerCtrl;
    exports.HeaderRowCtrl = HeaderRowCtrl;
    exports.HorizontalResizeService = HorizontalResizeService;
    exports.KeyCode = KeyCode;
    exports.LargeTextCellEditor = LargeTextCellEditor;
    exports.Logger = Logger;
    exports.LoggerFactory = LoggerFactory;
    exports.ManagedFocusFeature = ManagedFocusFeature;
    exports.ModuleRegistry = ModuleRegistry;
    exports.MouseEventService = MouseEventService;
    exports.MoveColumnFeature = MoveColumnFeature;
    exports.NavigationService = NavigationService;
    exports.NumberFilter = NumberFilter;
    exports.NumberSequence = NumberSequence;
    exports.Optional = Optional;
    exports.PaginationProxy = PaginationProxy;
    exports.PinnedRowModel = PinnedRowModel;
    exports.PopupComponent = PopupComponent;
    exports.PopupEditorWrapper = PopupEditorWrapper;
    exports.PopupSelectCellEditor = PopupSelectCellEditor;
    exports.PopupService = PopupService;
    exports.PopupTextCellEditor = PopupTextCellEditor;
    exports.PositionableFeature = PositionableFeature;
    exports.PostConstruct = PostConstruct;
    exports.PreConstruct = PreConstruct;
    exports.PreDestroy = PreDestroy;
    exports.PropertyKeys = PropertyKeys;
    exports.ProvidedColumnGroup = ProvidedColumnGroup;
    exports.ProvidedFilter = ProvidedFilter;
    exports.Qualifier = Qualifier;
    exports.QuerySelector = QuerySelector;
    exports.RefSelector = RefSelector;
    exports.ResizeObserverService = ResizeObserverService;
    exports.RowContainerComp = RowContainerComp;
    exports.RowContainerCtrl = RowContainerCtrl;
    exports.RowCtrl = RowCtrl;
    exports.RowNode = RowNode;
    exports.RowNodeBlock = RowNodeBlock;
    exports.RowNodeBlockLoader = RowNodeBlockLoader;
    exports.RowNodeSorter = RowNodeSorter;
    exports.RowPositionUtils = RowPositionUtils;
    exports.RowRenderer = RowRenderer;
    exports.ScalarFilter = ScalarFilter;
    exports.ScrollVisibleService = ScrollVisibleService;
    exports.SelectCellEditor = SelectCellEditor;
    exports.SelectableService = SelectableService;
    exports.SelectionService = SelectionService;
    exports.SetLeftFeature = SetLeftFeature;
    exports.SimpleFilter = SimpleFilter;
    exports.SortController = SortController;
    exports.StandardMenuFactory = StandardMenuFactory;
    exports.StylingService = StylingService;
    exports.TabGuardComp = TabGuardComp;
    exports.TabGuardCtrl = TabGuardCtrl;
    exports.TabbedLayout = TabbedLayout;
    exports.TemplateService = TemplateService;
    exports.TextCellEditor = TextCellEditor;
    exports.TextFilter = TextFilter;
    exports.TextFloatingFilter = TextFloatingFilter;
    exports.Timer = Timer;
    exports.TouchListener = TouchListener;
    exports.UserComponentFactory = UserComponentFactory;
    exports.UserComponentRegistry = UserComponentRegistry;
    exports.ValueCache = ValueCache;
    exports.ValueFormatterService = ValueFormatterService;
    exports.ValueService = ValueService;
    exports.VanillaFrameworkOverrides = VanillaFrameworkOverrides;
    exports.VirtualList = VirtualList;
    exports.XmlFactory = XmlFactory;
    exports.ZipContainer = ZipContainer;
    exports._ = _;
    exports.defaultGroupComparator = defaultGroupComparator;
    exports.initialiseAgGridWithAngular1 = initialiseAgGridWithAngular1;
    exports.initialiseAgGridWithWebComponents = initialiseAgGridWithWebComponents;
    exports.simpleHttpRequest = simpleHttpRequest;
    exports.stringToArray = stringToArray;
  }
});

// node_modules/ag-grid-vue3/lib/VueComponentFactory.js
var __assign, VueComponentFactory;
var init_VueComponentFactory = __esm({
  "node_modules/ag-grid-vue3/lib/VueComponentFactory.js"() {
    init_vue_runtime_esm_bundler();
    __assign = function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    VueComponentFactory = /** @class */
    function() {
      function VueComponentFactory2() {
      }
      VueComponentFactory2.getComponentDefinition = function(component, parent) {
        var componentDefinition;
        if (typeof component === "string") {
          componentDefinition = this.searchForComponentInstance(parent, component);
          if (componentDefinition.template) {
            componentDefinition = __assign({}, defineComponent(componentDefinition));
          } else {
            componentDefinition = { extends: defineComponent(componentDefinition) };
          }
        } else {
          componentDefinition = { extends: defineComponent(__assign({}, component)) };
        }
        if (!componentDefinition) {
          console.error("Could not find component with name of " + component + ". Is it in Vue.components?");
        }
        if (componentDefinition.extends && componentDefinition.extends.setup) {
          componentDefinition.setup = componentDefinition.extends.setup;
        }
        return componentDefinition;
      };
      VueComponentFactory2.createComponentParams = function(params, parent) {
        var extendedParams = {
          params: Object.freeze(params),
          parent
        };
        if (parent.componentDependencies) {
          parent.componentDependencies.forEach(function(dependency) {
            return extendedParams[dependency] = parent[dependency];
          });
        }
        return extendedParams;
      };
      VueComponentFactory2.createAndMountComponent = function(component, params, parent) {
        var componentDefinition = VueComponentFactory2.getComponentDefinition(component, parent);
        if (!componentDefinition) {
          return;
        }
        var componentParams = VueComponentFactory2.createComponentParams(params, parent);
        var componentInstance = null;
        var extendedComponentDefinition = defineComponent(__assign(__assign({}, componentDefinition), { data: function() {
          return __assign(__assign({}, componentParams), componentDefinition.data ? componentDefinition.data() : {});
        }, created: function() {
          componentInstance = this.$root;
          if (componentDefinition.created) {
            componentDefinition.created.bind(this)();
          }
        } }));
        var container = document.createElement("div");
        var mountedComponent = createApp(extendedComponentDefinition);
        mountedComponent.mount(container);
        return { mountedComponent, componentInstance };
      };
      VueComponentFactory2.searchForComponentInstance = function(parent, component, maxDepth) {
        if (maxDepth === void 0) {
          maxDepth = 10;
        }
        var componentInstance = null;
        var currentParent = parent.$parent;
        var depth = 0;
        while (!componentInstance && currentParent && currentParent.$options && ++depth < maxDepth) {
          componentInstance = currentParent.$options.components[component];
          currentParent = currentParent.$parent;
        }
        if (!componentInstance) {
          console.error("Could not find component with name of " + component + ". Is it in Vue.components?");
          return null;
        }
        return componentInstance;
      };
      return VueComponentFactory2;
    }();
  }
});

// node_modules/ag-grid-vue3/lib/VueFrameworkComponentWrapper.js
var import_ag_grid_community, __extends, __decorate, VueFrameworkComponentWrapper, VueComponent;
var init_VueFrameworkComponentWrapper = __esm({
  "node_modules/ag-grid-vue3/lib/VueFrameworkComponentWrapper.js"() {
    import_ag_grid_community = __toESM(require_ag_grid_community_cjs());
    init_VueComponentFactory();
    __extends = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    VueFrameworkComponentWrapper = /** @class */
    function(_super) {
      __extends(VueFrameworkComponentWrapper2, _super);
      function VueFrameworkComponentWrapper2(parent) {
        var _this = _super.call(this) || this;
        _this.parent = parent;
        return _this;
      }
      VueFrameworkComponentWrapper2.prototype.createWrapper = function(component) {
        var that = this;
        var DynamicComponent = (
          /** @class */
          function(_super2) {
            __extends(DynamicComponent2, _super2);
            function DynamicComponent2() {
              return _super2 !== null && _super2.apply(this, arguments) || this;
            }
            DynamicComponent2.prototype.init = function(params) {
              _super2.prototype.init.call(this, params);
            };
            DynamicComponent2.prototype.hasMethod = function(name) {
              return wrapper.getFrameworkComponentInstance()[name] != null;
            };
            DynamicComponent2.prototype.callMethod = function(name, args) {
              var componentInstance = this.getFrameworkComponentInstance();
              var frameworkComponentInstance = wrapper.getFrameworkComponentInstance();
              return frameworkComponentInstance[name].apply(componentInstance, args);
            };
            DynamicComponent2.prototype.addMethod = function(name, callback) {
              wrapper[name] = callback;
            };
            DynamicComponent2.prototype.overrideProcessing = function(methodName) {
              return that.parent.autoParamsRefresh && methodName === "refresh";
            };
            DynamicComponent2.prototype.processMethod = function(methodName, args) {
              if (methodName === "refresh") {
                this.getFrameworkComponentInstance().params = args[0];
              }
              if (this.hasMethod(methodName)) {
                return this.callMethod(methodName, args);
              }
              return methodName === "refresh";
            };
            DynamicComponent2.prototype.createComponent = function(params) {
              return that.createComponent(component, params);
            };
            return DynamicComponent2;
          }(VueComponent)
        );
        var wrapper = new DynamicComponent();
        return wrapper;
      };
      VueFrameworkComponentWrapper2.prototype.createComponent = function(component, params) {
        return VueComponentFactory.createAndMountComponent(component, params, this.parent);
      };
      VueFrameworkComponentWrapper2.prototype.createMethodProxy = function(wrapper, methodName, mandatory) {
        return function() {
          if (wrapper.overrideProcessing(methodName)) {
            return wrapper.processMethod(methodName, arguments);
          }
          if (wrapper.hasMethod(methodName)) {
            return wrapper.callMethod(methodName, arguments);
          }
          if (mandatory) {
            console.warn("AG Grid: Framework component is missing the method " + methodName + "()");
          }
          return null;
        };
      };
      VueFrameworkComponentWrapper2.prototype.destroy = function() {
        this.parent = null;
      };
      VueFrameworkComponentWrapper2 = __decorate([
        (0, import_ag_grid_community.Bean)("frameworkComponentWrapper")
      ], VueFrameworkComponentWrapper2);
      return VueFrameworkComponentWrapper2;
    }(import_ag_grid_community.BaseComponentWrapper);
    VueComponent = /** @class */
    function() {
      function VueComponent2() {
      }
      VueComponent2.prototype.getGui = function() {
        return this.componentInstance.$el;
      };
      VueComponent2.prototype.destroy = function() {
        this.mountedComponent.unmount();
      };
      VueComponent2.prototype.getFrameworkComponentInstance = function() {
        return this.componentInstance;
      };
      VueComponent2.prototype.init = function(params) {
        var _a2 = this.createComponent(params), mountedComponent = _a2.mountedComponent, componentInstance = _a2.componentInstance;
        this.mountedComponent = mountedComponent;
        this.componentInstance = componentInstance;
      };
      return VueComponent2;
    }();
  }
});

// node_modules/ag-grid-vue3/lib/Utils.js
var import_ag_grid_community2, kebabProperty, kebabNameToAttrEventName, getAgGridProperties;
var init_Utils = __esm({
  "node_modules/ag-grid-vue3/lib/Utils.js"() {
    import_ag_grid_community2 = __toESM(require_ag_grid_community_cjs());
    kebabProperty = function(property) {
      return property.replace(/([a-z])([A-Z])/g, "$1-$2").toLowerCase();
    };
    kebabNameToAttrEventName = function(kebabName) {
      return "on" + kebabName.charAt(0).toUpperCase() + kebabName.substring(1, kebabName.length);
    };
    getAgGridProperties = function() {
      var props2 = {
        gridOptions: {
          default: function() {
            return {};
          }
        },
        autoParamsRefresh: false,
        componentDependencies: {
          default: function() {
            return [];
          }
        },
        modules: {
          default: function() {
            return [];
          }
        },
        rowDataModel: void 0
      };
      var eventNameAsProps = import_ag_grid_community2.ComponentUtil.EVENTS.map(function(eventName) {
        return kebabNameToAttrEventName(kebabProperty(eventName));
      });
      eventNameAsProps.reduce(function(accumulator, eventName) {
        accumulator[eventName] = void 0;
        return accumulator;
      }, props2);
      var watch2 = {
        rowDataModel: function(currentValue, previousValue) {
          this.processChanges("rowData", currentValue, previousValue);
        }
      };
      import_ag_grid_community2.ComponentUtil.ALL_PROPERTIES.forEach(function(propertyName) {
        props2[propertyName] = {};
        watch2[propertyName] = function(currentValue, previousValue) {
          this.processChanges(propertyName, currentValue, previousValue);
        };
      });
      var model2 = {
        prop: "rowDataModel",
        event: "data-model-changed"
      };
      return [props2, watch2, model2];
    };
  }
});

// node_modules/ag-grid-vue3/lib/AgGridColumn.js
var import_ag_grid_community3, AgGridColumn;
var init_AgGridColumn = __esm({
  "node_modules/ag-grid-vue3/lib/AgGridColumn.js"() {
    import_ag_grid_community3 = __toESM(require_ag_grid_community_cjs());
    AgGridColumn = /** @class */
    function() {
      function AgGridColumn2() {
      }
      AgGridColumn2.hasChildColumns = function(slots) {
        return slots && slots.default && slots.default.length > 0;
      };
      AgGridColumn2.mapChildColumnDefs = function(slots) {
        return slots.default.map(function(column) {
          return AgGridColumn2.toColDef(column);
        });
      };
      AgGridColumn2.toColDef = function(column) {
        var colDef = AgGridColumn2.createColDefFromGridColumn(column);
        if (column.children && column.children.length > 0) {
          colDef.children = AgGridColumn2.getChildColDefs(column.children);
        }
        return colDef;
      };
      AgGridColumn2.getChildColDefs = function(columnChildren) {
        return columnChildren.map(function(column) {
          return AgGridColumn2.createColDefFromGridColumn(column);
        });
      };
      AgGridColumn2.createColDefFromGridColumn = function(column) {
        var colDef = {};
        AgGridColumn2.assign(colDef, column.data.attrs);
        delete colDef.children;
        import_ag_grid_community3.ColDefUtil.BOOLEAN_PROPERTIES.forEach(function(property) {
          var colDefAsAny = colDef;
          if (colDefAsAny[property] === "") {
            colDefAsAny[property] = true;
          }
        });
        return colDef;
      };
      AgGridColumn2.assign = function(colDef, from) {
        return [from].reduce(function(r, o) {
          Object.keys(o).forEach(function(k) {
            r[k] = o[k];
          });
          return r;
        }, colDef);
      };
      return AgGridColumn2;
    }();
  }
});

// node_modules/ag-grid-vue3/lib/AgGridVue.js
var AgGridVue_exports = {};
__export(AgGridVue_exports, {
  AgGridVue: () => AgGridVue
});
var import_ag_grid_community4, __extends2, __decorate2, _a, props, watch, model, AgGridVue;
var init_AgGridVue = __esm({
  "node_modules/ag-grid-vue3/lib/AgGridVue.js"() {
    init_vue_runtime_esm_bundler();
    init_vue_class_component_esm_bundler();
    import_ag_grid_community4 = __toESM(require_ag_grid_community_cjs());
    init_VueFrameworkComponentWrapper();
    init_Utils();
    init_AgGridColumn();
    init_reactivity_esm_bundler();
    __extends2 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (b2.hasOwnProperty(p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate2 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    _a = getAgGridProperties();
    props = _a[0];
    watch = _a[1];
    model = _a[2];
    AgGridVue = /** @class */
    function(_super) {
      __extends2(AgGridVue2, _super);
      function AgGridVue2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.gridCreated = false;
        _this.isDestroyed = false;
        _this.gridReadyFired = false;
        _this.emitRowModel = null;
        return _this;
      }
      AgGridVue_1 = AgGridVue2;
      AgGridVue2.prototype.render = function() {
        return h("div");
      };
      AgGridVue2.prototype.globalEventListener = function(eventType, event) {
        if (this.isDestroyed) {
          return;
        }
        if (eventType === "gridReady") {
          this.gridReadyFired = true;
        }
        this.updateModelIfUsed(eventType);
      };
      AgGridVue2.prototype.processChanges = function(propertyName, currentValue, previousValue) {
        if (this.gridCreated) {
          if (this.skipChange(propertyName, currentValue, previousValue)) {
            return;
          }
          var changes = {};
          changes[propertyName] = {
            currentValue,
            previousValue
          };
          import_ag_grid_community4.ComponentUtil.processOnChange(changes, this.gridOptions, this.gridOptions.api, this.gridOptions.columnApi);
        }
      };
      AgGridVue2.prototype.mounted = function() {
        var _this = this;
        this.emitRowModel = this.debounce(function() {
          _this.$emit(AgGridVue_1.DATA_MODEL_ATTR_NAME, Object.freeze(_this.getRowData()));
        }, 20);
        var frameworkComponentWrapper = new VueFrameworkComponentWrapper(this);
        var gridOptions = markRaw(import_ag_grid_community4.ComponentUtil.copyAttributesToGridOptions(toRaw(this.gridOptions), this));
        this.checkForBindingConflicts();
        gridOptions.rowData = this.getRowDataBasedOnBindings();
        if (AgGridColumn.hasChildColumns(this.$slots)) {
          gridOptions.columnDefs = AgGridColumn.mapChildColumnDefs(this.$slots);
        }
        var gridParams = {
          globalEventListener: this.globalEventListener.bind(this),
          providedBeanInstances: {
            frameworkComponentWrapper
          },
          modules: this.modules
        };
        new import_ag_grid_community4.Grid(this.$el, gridOptions, gridParams);
        this.gridCreated = true;
      };
      AgGridVue2.prototype.destroyed = function() {
        if (this.gridCreated) {
          if (this.gridOptions.api) {
            this.gridOptions.api.destroy();
          }
          this.isDestroyed = true;
        }
      };
      AgGridVue2.prototype.checkForBindingConflicts = function() {
        var thisAsAny = this;
        if ((thisAsAny.rowData || this.gridOptions.rowData) && thisAsAny.rowDataModel) {
          console.warn("ag-grid: Using both rowData and rowDataModel. rowData will be ignored.");
        }
      };
      AgGridVue2.prototype.getRowData = function() {
        var rowData = [];
        this.gridOptions.api.forEachNode(function(rowNode) {
          rowData.push(rowNode.data);
        });
        return rowData;
      };
      AgGridVue2.prototype.updateModelIfUsed = function(eventType) {
        if (this.gridReadyFired && this.$attrs[AgGridVue_1.DATA_MODEL_ATTR_NAME] && AgGridVue_1.ROW_DATA_EVENTS.indexOf(eventType) !== -1) {
          if (this.emitRowModel) {
            this.emitRowModel();
          }
        }
      };
      AgGridVue2.prototype.getRowDataBasedOnBindings = function() {
        var thisAsAny = this;
        var rowDataModel = thisAsAny.rowDataModel;
        return rowDataModel ? rowDataModel : thisAsAny.rowData ? thisAsAny.rowData : thisAsAny.gridOptions.rowData;
      };
      AgGridVue2.prototype.skipChange = function(propertyName, currentValue, previousValue) {
        if (this.gridReadyFired && propertyName === "rowData" && this.$attrs[AgGridVue_1.DATA_MODEL_ATTR_NAME]) {
          if (currentValue === previousValue) {
            return true;
          }
          if (currentValue && previousValue) {
            var currentRowData = currentValue;
            var previousRowData = previousValue;
            if (currentRowData.length === previousRowData.length) {
              for (var i = 0; i < currentRowData.length; i++) {
                if (currentRowData[i] !== previousRowData[i]) {
                  return false;
                }
              }
              return true;
            }
          }
        }
        return false;
      };
      AgGridVue2.prototype.debounce = function(func, delay) {
        var timeout;
        return function() {
          var later = function() {
            func();
          };
          window.clearTimeout(timeout);
          timeout = window.setTimeout(later, delay);
        };
      };
      var AgGridVue_1;
      AgGridVue2.VERSION = "Vue 3+";
      AgGridVue2.ROW_DATA_EVENTS = ["rowDataChanged", "rowDataUpdated", "cellValueChanged", "rowValueChanged"];
      AgGridVue2.DATA_MODEL_ATTR_NAME = kebabNameToAttrEventName(kebabProperty("data-model-changed"));
      AgGridVue2 = AgGridVue_1 = __decorate2([
        (0, import_ag_grid_community4.Bean)("agGridVue"),
        Options({
          props,
          watch,
          model
        })
      ], AgGridVue2);
      return AgGridVue2;
    }(Vue);
  }
});

// node_modules/ag-grid-vue3/main.js
var require_main = __commonJS({
  "node_modules/ag-grid-vue3/main.js"(exports) {
    function __export2(m) {
      for (var p in m)
        if (!exports.hasOwnProperty(p))
          exports[p] = m[p];
    }
    __export2((init_AgGridVue(), __toCommonJS(AgGridVue_exports)));
  }
});
export default require_main();
/*! Bundled license information:

vue-class-component/dist/vue-class-component.esm-bundler.js:
  (**
    * vue-class-component v8.0.0-rc.1
    * (c) 2015-present Evan You
    * @license MIT
    *)

ag-grid-community/dist/ag-grid-community.cjs.js:
  (**
   * ag-grid-community - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components * @version v26.2.1
   * @link http://www.ag-grid.com/
  ' * @license MIT
   *)
  (**
   * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
   * @version v26.2.1
   * @link http://www.ag-grid.com/
   * @license MIT
   *)
*/
//# sourceMappingURL=ag-grid-vue3.js.map
